id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/master/classTGWin32.html:95601,Availability,mask,mask,95601,"If winding is true use WindingRule else EvenOddRule as fill rule. ; Reimplemented from TVirtualX.; Definition at line 7149 of file TGWin32.cxx. ◆ PutImage() [1/2]. void TGWin32::PutImage ; (; Drawable_t ; id, . GContext_t ; gc, . Drawable_t ; img, . Int_t ; dx, . Int_t ; dy, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Combines an image with a rectangle of the specified drawable. ; The section of the image defined by the x, y, width, and height arguments is drawn on the specified part of the drawable.; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]imgthe image you want combined with the rectangle ; [in]dxthe offset in X from the left edge of the image ; [in]dythe offset in Y from the top edge of the image ; [in]x,ycoordinates, which are relative to the origin of the drawable and are the coordinates of the subimage ; [in]w,hthe width and height of the subimage, which define the rectangle dimensions. GC components in use: function, plane-mask, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground and background. (see also the GCValues_t structure) ; Reimplemented from TVirtualX.; Definition at line 7311 of file TGWin32.cxx. ◆ PutImage() [2/2]. void TGWin32::PutImage ; (; Int_t ; offset, . Int_t ; itran, . Int_t ; x0, . Int_t ; y0, . Int_t ; nx, . Int_t ; ny, . Int_t ; xmin, . Int_t ; ymin, . Int_t ; xmax, . Int_t ; ymax, . UChar_t * ; image, . Drawable_t ; id . ). private . Draw image. ; Definition at line 4451 of file TGWin32.cxx. ◆ PutPixel(). void TGWin32::PutPixel ; (; Drawable_t ; id, . Int_t ; x, . Int_t ; y, . ULong_t ; pixel . ). overridevirtual . Overwrites the pixel in the image with the specified pixel value. ; The image must contain the x and y coordinates.; Parameters. [in]idspecifies the image ; [in]x,ycoordinates ; [in]pixelthe new pixel value . Reimplemented from TVirtualX.; Definition at line 7281 of file TGWin32.cxx. ◆ QueryColor(). void TGWin32::QueryColor ; (; Color",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:95662,Availability,mask,mask,95662,"If winding is true use WindingRule else EvenOddRule as fill rule. ; Reimplemented from TVirtualX.; Definition at line 7149 of file TGWin32.cxx. ◆ PutImage() [1/2]. void TGWin32::PutImage ; (; Drawable_t ; id, . GContext_t ; gc, . Drawable_t ; img, . Int_t ; dx, . Int_t ; dy, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Combines an image with a rectangle of the specified drawable. ; The section of the image defined by the x, y, width, and height arguments is drawn on the specified part of the drawable.; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]imgthe image you want combined with the rectangle ; [in]dxthe offset in X from the left edge of the image ; [in]dythe offset in Y from the top edge of the image ; [in]x,ycoordinates, which are relative to the origin of the drawable and are the coordinates of the subimage ; [in]w,hthe width and height of the subimage, which define the rectangle dimensions. GC components in use: function, plane-mask, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground and background. (see also the GCValues_t structure) ; Reimplemented from TVirtualX.; Definition at line 7311 of file TGWin32.cxx. ◆ PutImage() [2/2]. void TGWin32::PutImage ; (; Int_t ; offset, . Int_t ; itran, . Int_t ; x0, . Int_t ; y0, . Int_t ; nx, . Int_t ; ny, . Int_t ; xmin, . Int_t ; ymin, . Int_t ; xmax, . Int_t ; ymax, . UChar_t * ; image, . Drawable_t ; id . ). private . Draw image. ; Definition at line 4451 of file TGWin32.cxx. ◆ PutPixel(). void TGWin32::PutPixel ; (; Drawable_t ; id, . Int_t ; x, . Int_t ; y, . ULong_t ; pixel . ). overridevirtual . Overwrites the pixel in the image with the specified pixel value. ; The image must contain the x and y coordinates.; Parameters. [in]idspecifies the image ; [in]x,ycoordinates ; [in]pixelthe new pixel value . Reimplemented from TVirtualX.; Definition at line 7281 of file TGWin32.cxx. ◆ QueryColor(). void TGWin32::QueryColor ; (; Color",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:97700,Availability,mask,mask,97700," color components for a specific pixel value. ; On input fPixel should be set on return the fRed, fGreen and fBlue components will be set. ; Reimplemented from TVirtualX.; Definition at line 5776 of file TGWin32.cxx. ◆ QueryColors(). void TGWin32::QueryColors ; (; GdkColormap * ; cmap, . GdkColor * ; colors, . Int_t ; ncolors . ). protected . Returns the current RGB value for the pixel in the XColor structure. ; Definition at line 1176 of file TGWin32.cxx. ◆ QueryPointer() [1/2]. void TGWin32::QueryPointer ; (; Int_t & ; ix, . Int_t & ; iy . ). overridevirtual . Query pointer position. ; ix : X coordinate of pointer iy : Y coordinate of pointer (both coordinates are relative to the origin of the root window) ; Reimplemented from TVirtualX.; Definition at line 2262 of file TGWin32.cxx. ◆ QueryPointer() [2/2]. void TGWin32::QueryPointer ; (; Window_t ; id, . Window_t & ; rootw, . Window_t & ; childw, . Int_t & ; root_x, . Int_t & ; root_y, . Int_t & ; win_x, . Int_t & ; win_y, . UInt_t & ; mask . ). overridevirtual . Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ; The pointer coordinates returned to win_x and win_y are relative to the origin of the specified window. In this case, QueryPointer returns the child that contains the pointer, if any, or else kNone to childw. QueryPointer returns the current logical state of the keyboard buttons and the modifier keys in mask. ; Reimplemented from TVirtualX.; Definition at line 7017 of file TGWin32.cxx. ◆ RaiseWindow(). void TGWin32::RaiseWindow ; (; Window_t ; id). overridevirtual . Put window on top of window stack. ; Reimplemented from TVirtualX.; Definition at line 4695 of file TGWin32.cxx. ◆ ReadGIF(). Pixmap_t TGWin32::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file, . Window_t ; id = 0 . ). overridevirtual . If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ; Otherwise creates pixmap from gif file ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:98153,Availability,mask,mask,98153,"re. ; Definition at line 1176 of file TGWin32.cxx. ◆ QueryPointer() [1/2]. void TGWin32::QueryPointer ; (; Int_t & ; ix, . Int_t & ; iy . ). overridevirtual . Query pointer position. ; ix : X coordinate of pointer iy : Y coordinate of pointer (both coordinates are relative to the origin of the root window) ; Reimplemented from TVirtualX.; Definition at line 2262 of file TGWin32.cxx. ◆ QueryPointer() [2/2]. void TGWin32::QueryPointer ; (; Window_t ; id, . Window_t & ; rootw, . Window_t & ; childw, . Int_t & ; root_x, . Int_t & ; root_y, . Int_t & ; win_x, . Int_t & ; win_y, . UInt_t & ; mask . ). overridevirtual . Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ; The pointer coordinates returned to win_x and win_y are relative to the origin of the specified window. In this case, QueryPointer returns the child that contains the pointer, if any, or else kNone to childw. QueryPointer returns the current logical state of the keyboard buttons and the modifier keys in mask. ; Reimplemented from TVirtualX.; Definition at line 7017 of file TGWin32.cxx. ◆ RaiseWindow(). void TGWin32::RaiseWindow ; (; Window_t ; id). overridevirtual . Put window on top of window stack. ; Reimplemented from TVirtualX.; Definition at line 4695 of file TGWin32.cxx. ◆ ReadGIF(). Pixmap_t TGWin32::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file, . Window_t ; id = 0 . ). overridevirtual . If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ; Otherwise creates pixmap from gif file ; Reimplemented from TVirtualX.; Definition at line 4526 of file TGWin32.cxx. ◆ ReadPictureDataFromFile(). Bool_t TGWin32::ReadPictureDataFromFile ; (; const char * ; filename, . char *** ; ret_data . ). overridevirtual . Read picture data from file and store in ret_data. ; Returns kTRUE in case of success, kFALSE otherwise. ; Reimplemented from TVirtualX.; Definition at line 5673 of file TGWin32.cxx. ◆ Rem",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:102616,Availability,mask,mask,102616,"nd height of the pixmap ; Reimplemented from TVirtualX.; Definition at line 2739 of file TGWin32.cxx. ◆ ResizeWindow() [1/2]. void TGWin32::ResizeWindow ; (; Int_t ; wid). overridevirtual . Resize the current window if necessary. ; Reimplemented from TVirtualX.; Definition at line 2787 of file TGWin32.cxx. ◆ ResizeWindow() [2/2]. void TGWin32::ResizeWindow ; (; Window_t ; id, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Resize the window. ; Reimplemented from TVirtualX.; Definition at line 4747 of file TGWin32.cxx. ◆ ScreenWidthMM(). UInt_t TGWin32::ScreenWidthMM ; (; ); const. overridevirtual . Returns the width of the screen in millimeters. ; Reimplemented from TVirtualX.; Definition at line 7572 of file TGWin32.cxx. ◆ SelectInput(). void TGWin32::SelectInput ; (; Window_t ; id, . UInt_t ; evmask . ). overridevirtual . Defines which input events the window is interested in. ; By default events are propageted up the window stack. This mask can also be set at window creation time via the SetWindowAttributes_t::fEventMask attribute. ; Reimplemented from TVirtualX.; Definition at line 6786 of file TGWin32.cxx. ◆ SelectWindow(). void TGWin32::SelectWindow ; (; Int_t ; wid). overridevirtual . Select window to which subsequent output is directed. ; Reimplemented from TVirtualX.; Definition at line 2836 of file TGWin32.cxx. ◆ SendEvent(). void TGWin32::SendEvent ; (; Window_t ; id, . Event_t * ; ev . ). overridevirtual . Send event ev to window id. ; Reimplemented from TVirtualX.; Definition at line 5838 of file TGWin32.cxx. ◆ SetCharacterUp(). void TGWin32::SetCharacterUp ; (; Float_t ; chupx, . Float_t ; chupy . ). overridevirtual . Set character up vector. ; Reimplemented from TVirtualX.; Definition at line 2866 of file TGWin32.cxx. ◆ SetClassHints(). void TGWin32::SetClassHints ; (; Window_t ; id, . char * ; className, . char * ; resourceName . ). overridevirtual . Set the windows class and resource name. ; Reimplemented from TVirtualX.; Definition at line 6534 of",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:104194,Availability,mask,mask,104194,"ine 5838 of file TGWin32.cxx. ◆ SetCharacterUp(). void TGWin32::SetCharacterUp ; (; Float_t ; chupx, . Float_t ; chupy . ). overridevirtual . Set character up vector. ; Reimplemented from TVirtualX.; Definition at line 2866 of file TGWin32.cxx. ◆ SetClassHints(). void TGWin32::SetClassHints ; (; Window_t ; id, . char * ; className, . char * ; resourceName . ). overridevirtual . Set the windows class and resource name. ; Reimplemented from TVirtualX.; Definition at line 6534 of file TGWin32.cxx. ◆ SetClipOFF(). void TGWin32::SetClipOFF ; (; Int_t ; wid). overridevirtual . Turn off the clipping for the window wid. ; Reimplemented from TVirtualX.; Definition at line 2895 of file TGWin32.cxx. ◆ SetClipRectangles(). void TGWin32::SetClipRectangles ; (; GContext_t ; gc, . Int_t ; x, . Int_t ; y, . Rectangle_t * ; recs, . Int_t ; n . ). overridevirtual . Set clipping rectangles in graphics context. ; X, Y specify the origin of the rectangles. Recs specifies an array of rectangles that define the clipping mask and n is the number of rectangles. ; Reimplemented from TVirtualX.; Definition at line 7087 of file TGWin32.cxx. ◆ SetClipRegion(). void TGWin32::SetClipRegion ; (; Int_t ; wid, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Set clipping region for the window wid. ; wid : GdkWindow indentifier x,y : origin of clipping rectangle w,h : size of clipping rectangle; ; Reimplemented from TVirtualX.; Definition at line 2913 of file TGWin32.cxx. ◆ SetColor(). void TGWin32::SetColor ; (; GdkGC * ; gc, . Int_t ; ci . ). private . Set the foreground color in GdkGC. ; Definition at line 2953 of file TGWin32.cxx. ◆ SetCursor() [1/2]. void TGWin32::SetCursor ; (; Int_t ; wid, . ECursor ; cursor . ). overridevirtual . Set the cursor. ; Reimplemented from TVirtualX.; Definition at line 2995 of file TGWin32.cxx. ◆ SetCursor() [2/2]. void TGWin32::SetCursor ; (; Window_t ; id, . Cursor_t ; curid . ). overridevirtual . Set the specified cursor. ; Reimplemente",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:106859,Availability,echo,echo,106859,"e Window win. ; Reimplemented from TVirtualX.; Definition at line 7811 of file TGWin32.cxx. ◆ SetDoubleBuffer(). void TGWin32::SetDoubleBuffer ; (; Int_t ; wid, . Int_t ; mode . ). overridevirtual . Set the double buffer on/off on window wid. ; wid : GdkWindow identifier. 999 means all the opened windows. mode : 1 double buffer is on 0 double buffer is off ; Reimplemented from TVirtualX.; Definition at line 3027 of file TGWin32.cxx. ◆ SetDoubleBufferOFF(). void TGWin32::SetDoubleBufferOFF ; (; ). overridevirtual . Turn double buffer mode off. ; Reimplemented from TVirtualX.; Definition at line 3063 of file TGWin32.cxx. ◆ SetDoubleBufferON(). void TGWin32::SetDoubleBufferON ; (; ). overridevirtual . Turn double buffer mode on. ; Reimplemented from TVirtualX.; Definition at line 3073 of file TGWin32.cxx. ◆ SetDrawMode(). void TGWin32::SetDrawMode ; (; EDrawMode ; mode). overridevirtual . Set the drawing mode. ; mode : drawing mode mode=1 copy mode=2 xor mode=3 invert mode=4 set the suitable mode for cursor echo according to the vendor ; Reimplemented from TVirtualX.; Definition at line 3102 of file TGWin32.cxx. ◆ SetFillColor(). void TGWin32::SetFillColor ; (; Color_t ; cindex). overridevirtual . Set color index for fill areas. ; Reimplemented from TAttFill.; Definition at line 3132 of file TGWin32.cxx. ◆ SetFillStyle(). void TGWin32::SetFillStyle ; (; Style_t ; fstyle). overridevirtual . Set fill area style. ; fstyle : compound fill area interior style fstyle = 1000*interiorstyle + styleindex ; Reimplemented from TAttFill.; Definition at line 3166 of file TGWin32.cxx. ◆ SetForeground(). void TGWin32::SetForeground ; (; GContext_t ; gc, . ULong_t ; foreground . ). overridevirtual . Set foreground color in graphics context (shortcut for ChangeGC with only foreground mask set). ; Reimplemented from TVirtualX.; Definition at line 7072 of file TGWin32.cxx. ◆ SetIconName(). void TGWin32::SetIconName ; (; Window_t ; id, . char * ; name . ). overridevirtual . Set window icon",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:107633,Availability,mask,mask,107633," TVirtualX.; Definition at line 3073 of file TGWin32.cxx. ◆ SetDrawMode(). void TGWin32::SetDrawMode ; (; EDrawMode ; mode). overridevirtual . Set the drawing mode. ; mode : drawing mode mode=1 copy mode=2 xor mode=3 invert mode=4 set the suitable mode for cursor echo according to the vendor ; Reimplemented from TVirtualX.; Definition at line 3102 of file TGWin32.cxx. ◆ SetFillColor(). void TGWin32::SetFillColor ; (; Color_t ; cindex). overridevirtual . Set color index for fill areas. ; Reimplemented from TAttFill.; Definition at line 3132 of file TGWin32.cxx. ◆ SetFillStyle(). void TGWin32::SetFillStyle ; (; Style_t ; fstyle). overridevirtual . Set fill area style. ; fstyle : compound fill area interior style fstyle = 1000*interiorstyle + styleindex ; Reimplemented from TAttFill.; Definition at line 3166 of file TGWin32.cxx. ◆ SetForeground(). void TGWin32::SetForeground ; (; GContext_t ; gc, . ULong_t ; foreground . ). overridevirtual . Set foreground color in graphics context (shortcut for ChangeGC with only foreground mask set). ; Reimplemented from TVirtualX.; Definition at line 7072 of file TGWin32.cxx. ◆ SetIconName(). void TGWin32::SetIconName ; (; Window_t ; id, . char * ; name . ). overridevirtual . Set window icon name. ; Reimplemented from TVirtualX.; Definition at line 6512 of file TGWin32.cxx. ◆ SetIconPixmap(). void TGWin32::SetIconPixmap ; (; Window_t ; id, . Pixmap_t ; pic . ). overridevirtual . Set pixmap the WM can use when the window is iconized. ; Reimplemented from TVirtualX.; Definition at line 6522 of file TGWin32.cxx. ◆ SetInput(). void TGWin32::SetInput ; (; Int_t ; inp). private . Set input on or off. ; Definition at line 3225 of file TGWin32.cxx. ◆ SetInputFocus(). void TGWin32::SetInputFocus ; (; Window_t ; id). overridevirtual . Set keyboard input focus to window id. ; Reimplemented from TVirtualX.; Definition at line 6807 of file TGWin32.cxx. ◆ SetKeyAutoRepeat(). void TGWin32::SetKeyAutoRepeat ; (; Bool_t ; on = kTRUE). overridevirtua",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:116821,Availability,mask,mask,116821,"TGWin32::SetWMSizeHints ; (; Window_t ; id, . UInt_t ; wmin, . UInt_t ; hmin, . UInt_t ; wmax, . UInt_t ; hmax, . UInt_t ; winc, . UInt_t ; hinc . ). overridevirtual . Give the window manager minimum and maximum size hints. ; Also specify via winc and hinc the resize increments. ; Reimplemented from TVirtualX.; Definition at line 6606 of file TGWin32.cxx. ◆ SetWMState(). void TGWin32::SetWMState ; (; Window_t ; id, . EInitialState ; state . ). overridevirtual . Set the initial state of the window. Either kNormalState or kIconicState. ; Reimplemented from TVirtualX.; Definition at line 6631 of file TGWin32.cxx. ◆ SetWMTransientHint(). void TGWin32::SetWMTransientHint ; (; Window_t ; id, . Window_t ; main_id . ). overridevirtual . Tell window manager that window is a transient window of gdk_parent_root. ; Reimplemented from TVirtualX.; Definition at line 6654 of file TGWin32.cxx. ◆ ShapeCombineMask(). void TGWin32::ShapeCombineMask ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . Pixmap_t ; mask . ). overridevirtual . The Nonrectangular Window Shape Extension adds nonrectangular windows to the System. ; This allows for making shaped (partially transparent) windows ; Reimplemented from TVirtualX.; Definition at line 7564 of file TGWin32.cxx. ◆ Streamer(). void TGWin32::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGWin32::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 401 of file TGWin32.h. ◆ SubtractRegion(). void TGWin32::SubtractRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Subtract rega from regb. ; Reimplemented from TVirtualX.; Definition at line 7177 of file TGWin32.cxx. ◆ Sync(). void TGWin32::Sync ; (; Int_t ; mode). overridevirtual . Set synchronisation on or off. ; Parameters. [in]modesynchronisation on/off; mode=1 on; mode<>0 off . Reimplemented from TVirtualX.; Definition ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:27670,Deployability,update,updated,27670," principle what ROOT understands as ascent is text related. ;  ; virtual Int_t GetFontDescent () const;  Returns the descent of the current font (in pixels. ;  ; virtual Int_t GetFontDescent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as descent requires a certain text. ;  ; virtual FontStruct_t GetGCFont (GContext_t gc);  Return the font associated with the graphics context gc. ;  ; virtual Handle_t GetNativeEvent () const;  Returns the current native event handle. ;  ; virtual Double_t GetOpenGLScalingFactor ();  On a HiDPI resolution it can be > 1., this means glViewport should use scaled width and height. ;  ; TClass * IsA () const override;  ; virtual Bool_t MakeOpenGLContextCurrent (Handle_t ctx, Window_t windowID);  Makes context ctx current OpenGL context. ;  ; virtual void MapGCFont (GContext_t, FontStruct_t);  Map the XftFont with the Graphics Context using it. ;  ; virtual Bool_t NeedRedraw (ULongptr_t tgwindow, Bool_t force);  Notify the low level GUI layer ROOT requires ""tgwindow"" to be updated. ;  ; virtual void SelectPixmap (Int_t qpixid);  Selects the pixmap ""qpixid"". ;  ; void SetFillColor (Color_t cindex) override;  Sets color index ""cindex"" for fill areas. ;  ; void SetFillStyle (Style_t style) override;  Sets fill area style. ;  ; void SetLineColor (Color_t cindex) override;  Sets color index ""cindex"" for drawing lines. ;  ; void SetLineStyle (Style_t linestyle) override;  Sets the line style. ;  ; void SetLineWidth (Width_t width) override;  Sets the line width. ;  ; void SetMarkerColor (Color_t cindex) override;  Sets color index ""cindex"" for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Sets marker size index. ;  ; void SetMarkerStyle (Style_t markerstyle) override;  Sets marker style. ;  ; void SetTextAlign (Short_t talign=11) override;  Sets the text alignment. ;  ; void SetTextColor (Color_t cindex) override;  Sets the color index ""cindex"" for text. ;  ; void SetTextFont (Fon",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:100559,Deployability,release,released,100559,"32.cxx. ◆ RenderString(). void TGWin32::RenderString ; (; Int_t ; x, . Int_t ; y, . ETextMode ; mode . ). private . Perform the string rendering in the pad. ; LayoutGlyphs should have been called before. ; Definition at line 1430 of file TGWin32.cxx. ◆ ReparentWindow(). void TGWin32::ReparentWindow ; (; Window_t ; id, . Window_t ; pid, . Int_t ; x, . Int_t ; y . ). overridevirtual . Reparent window, make pid the new parent and position the window at position (x,y) in new parent. ; Reimplemented from TVirtualX.; Definition at line 4772 of file TGWin32.cxx. ◆ RequestLocator(). Int_t TGWin32::RequestLocator ; (; Int_t ; mode, . Int_t ; ctyp, . Int_t & ; x, . Int_t & ; y . ). overridevirtual . Request Locator position. ; x,y : cursor position at moment of button press (output) ctyp : cursor type (input) ctyp=1 tracking cross ctyp=2 cross-hair ctyp=3 rubber circle ctyp=4 rubber band ctyp=5 rubber rectangle; mode : input mode mode=0 request mode=1 sample; Request locator: return button number 1 = left is pressed 2 = middle is pressed 3 = right is pressed in sample mode: 11 = left is released 12 = middle is released 13 = right is released -1 = nothing is pressed or released -2 = leave the window else = keycode (keyboard is pressed) ; Reimplemented from TVirtualX.; Definition at line 2307 of file TGWin32.cxx. ◆ RequestString(). Int_t TGWin32::RequestString ; (; Int_t ; x, . Int_t ; y, . char * ; text . ). overridevirtual . Request a string. ; x,y : position where text is displayed text : text displayed (input), edited text (output); Request string: text is displayed and can be edited with Emacs-like keybinding return termination code (0 for ESC, 1 for RETURN) ; Reimplemented from TVirtualX.; Definition at line 2462 of file TGWin32.cxx. ◆ RescaleWindow(). void TGWin32::RescaleWindow ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Rescale the window wid. ; wid : GdkWindow identifier w : Width h : Heigth ; Reimplemented from TVirtualX.; Definition at line 2",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:100583,Deployability,release,released,100583,"32.cxx. ◆ RenderString(). void TGWin32::RenderString ; (; Int_t ; x, . Int_t ; y, . ETextMode ; mode . ). private . Perform the string rendering in the pad. ; LayoutGlyphs should have been called before. ; Definition at line 1430 of file TGWin32.cxx. ◆ ReparentWindow(). void TGWin32::ReparentWindow ; (; Window_t ; id, . Window_t ; pid, . Int_t ; x, . Int_t ; y . ). overridevirtual . Reparent window, make pid the new parent and position the window at position (x,y) in new parent. ; Reimplemented from TVirtualX.; Definition at line 4772 of file TGWin32.cxx. ◆ RequestLocator(). Int_t TGWin32::RequestLocator ; (; Int_t ; mode, . Int_t ; ctyp, . Int_t & ; x, . Int_t & ; y . ). overridevirtual . Request Locator position. ; x,y : cursor position at moment of button press (output) ctyp : cursor type (input) ctyp=1 tracking cross ctyp=2 cross-hair ctyp=3 rubber circle ctyp=4 rubber band ctyp=5 rubber rectangle; mode : input mode mode=0 request mode=1 sample; Request locator: return button number 1 = left is pressed 2 = middle is pressed 3 = right is pressed in sample mode: 11 = left is released 12 = middle is released 13 = right is released -1 = nothing is pressed or released -2 = leave the window else = keycode (keyboard is pressed) ; Reimplemented from TVirtualX.; Definition at line 2307 of file TGWin32.cxx. ◆ RequestString(). Int_t TGWin32::RequestString ; (; Int_t ; x, . Int_t ; y, . char * ; text . ). overridevirtual . Request a string. ; x,y : position where text is displayed text : text displayed (input), edited text (output); Request string: text is displayed and can be edited with Emacs-like keybinding return termination code (0 for ESC, 1 for RETURN) ; Reimplemented from TVirtualX.; Definition at line 2462 of file TGWin32.cxx. ◆ RescaleWindow(). void TGWin32::RescaleWindow ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Rescale the window wid. ; wid : GdkWindow identifier w : Width h : Heigth ; Reimplemented from TVirtualX.; Definition at line 2",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:100606,Deployability,release,released,100606,"32.cxx. ◆ RenderString(). void TGWin32::RenderString ; (; Int_t ; x, . Int_t ; y, . ETextMode ; mode . ). private . Perform the string rendering in the pad. ; LayoutGlyphs should have been called before. ; Definition at line 1430 of file TGWin32.cxx. ◆ ReparentWindow(). void TGWin32::ReparentWindow ; (; Window_t ; id, . Window_t ; pid, . Int_t ; x, . Int_t ; y . ). overridevirtual . Reparent window, make pid the new parent and position the window at position (x,y) in new parent. ; Reimplemented from TVirtualX.; Definition at line 4772 of file TGWin32.cxx. ◆ RequestLocator(). Int_t TGWin32::RequestLocator ; (; Int_t ; mode, . Int_t ; ctyp, . Int_t & ; x, . Int_t & ; y . ). overridevirtual . Request Locator position. ; x,y : cursor position at moment of button press (output) ctyp : cursor type (input) ctyp=1 tracking cross ctyp=2 cross-hair ctyp=3 rubber circle ctyp=4 rubber band ctyp=5 rubber rectangle; mode : input mode mode=0 request mode=1 sample; Request locator: return button number 1 = left is pressed 2 = middle is pressed 3 = right is pressed in sample mode: 11 = left is released 12 = middle is released 13 = right is released -1 = nothing is pressed or released -2 = leave the window else = keycode (keyboard is pressed) ; Reimplemented from TVirtualX.; Definition at line 2307 of file TGWin32.cxx. ◆ RequestString(). Int_t TGWin32::RequestString ; (; Int_t ; x, . Int_t ; y, . char * ; text . ). overridevirtual . Request a string. ; x,y : position where text is displayed text : text displayed (input), edited text (output); Request string: text is displayed and can be edited with Emacs-like keybinding return termination code (0 for ESC, 1 for RETURN) ; Reimplemented from TVirtualX.; Definition at line 2462 of file TGWin32.cxx. ◆ RescaleWindow(). void TGWin32::RescaleWindow ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Rescale the window wid. ; wid : GdkWindow identifier w : Width h : Heigth ; Reimplemented from TVirtualX.; Definition at line 2",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:100642,Deployability,release,released,100642,"32.cxx. ◆ RenderString(). void TGWin32::RenderString ; (; Int_t ; x, . Int_t ; y, . ETextMode ; mode . ). private . Perform the string rendering in the pad. ; LayoutGlyphs should have been called before. ; Definition at line 1430 of file TGWin32.cxx. ◆ ReparentWindow(). void TGWin32::ReparentWindow ; (; Window_t ; id, . Window_t ; pid, . Int_t ; x, . Int_t ; y . ). overridevirtual . Reparent window, make pid the new parent and position the window at position (x,y) in new parent. ; Reimplemented from TVirtualX.; Definition at line 4772 of file TGWin32.cxx. ◆ RequestLocator(). Int_t TGWin32::RequestLocator ; (; Int_t ; mode, . Int_t ; ctyp, . Int_t & ; x, . Int_t & ; y . ). overridevirtual . Request Locator position. ; x,y : cursor position at moment of button press (output) ctyp : cursor type (input) ctyp=1 tracking cross ctyp=2 cross-hair ctyp=3 rubber circle ctyp=4 rubber band ctyp=5 rubber rectangle; mode : input mode mode=0 request mode=1 sample; Request locator: return button number 1 = left is pressed 2 = middle is pressed 3 = right is pressed in sample mode: 11 = left is released 12 = middle is released 13 = right is released -1 = nothing is pressed or released -2 = leave the window else = keycode (keyboard is pressed) ; Reimplemented from TVirtualX.; Definition at line 2307 of file TGWin32.cxx. ◆ RequestString(). Int_t TGWin32::RequestString ; (; Int_t ; x, . Int_t ; y, . char * ; text . ). overridevirtual . Request a string. ; x,y : position where text is displayed text : text displayed (input), edited text (output); Request string: text is displayed and can be edited with Emacs-like keybinding return termination code (0 for ESC, 1 for RETURN) ; Reimplemented from TVirtualX.; Definition at line 2462 of file TGWin32.cxx. ◆ RescaleWindow(). void TGWin32::RescaleWindow ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Rescale the window wid. ; wid : GdkWindow identifier w : Width h : Heigth ; Reimplemented from TVirtualX.; Definition at line 2",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:120667,Deployability,update,update,120667," been processed by X server. ; Reimplemented from TVirtualX.; Definition at line 7111 of file TGWin32.cxx. ◆ UpdateFillColor(). void TGWin32::UpdateFillColor ; (; ). protected . Definition at line 3147 of file TGWin32.cxx. ◆ UpdateFillStyle(). void TGWin32::UpdateFillStyle ; (; ). protected . Set fill area style index. ; Definition at line 3177 of file TGWin32.cxx. ◆ UpdateLineColor(). void TGWin32::UpdateLineColor ; (; ). protected . Definition at line 3244 of file TGWin32.cxx. ◆ UpdateLineStyle(). void TGWin32::UpdateLineStyle ; (; ). protected . Update line style. ; Definition at line 3302 of file TGWin32.cxx. ◆ UpdateMarkerColor(). void TGWin32::UpdateMarkerColor ; (; ). protected . Definition at line 3362 of file TGWin32.cxx. ◆ UpdateMarkerStyle(). void TGWin32::UpdateMarkerStyle ; (; ). protected . Definition at line 3418 of file TGWin32.cxx. ◆ UpdateWindow(). void TGWin32::UpdateWindow ; (; Int_t ; mode). overridevirtual . Update display. ; mode : (1) update (0) sync; Synchronise client and server once (not permanent). Copy the pixmap gCws->drawing on the window gCws->window if the double buffer is on. ; Reimplemented from TVirtualX.; Definition at line 4225 of file TGWin32.cxx. ◆ Warp(). void TGWin32::Warp ; (; Int_t ; ix, . Int_t ; iy, . Window_t ; id = 0 . ). overridevirtual . Set pointer position. ; ix : New X coordinate of pointer iy : New Y coordinate of pointer Coordinates are relative to the origin of the window id or to the origin of the current window if id == 0. ; Reimplemented from TVirtualX.; Definition at line 4241 of file TGWin32.cxx. ◆ WMDeleteNotify(). void TGWin32::WMDeleteNotify ; (; Window_t ; id). overridevirtual . Tell WM to send message when window is closed via WM. ; Reimplemented from TVirtualX.; Definition at line 6408 of file TGWin32.cxx. ◆ WriteGIF(). Int_t TGWin32::WriteGIF ; (; char * ; name). overridevirtual . Writes the current window into GIF file. ; Reimplemented from TVirtualX.; Definition at line 4388 of file TGWin32.cxx. ◆",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:1189,Energy Efficiency,allocate,allocate,1189,"ctions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGWin32 Class ReferenceGraphics » Graphics' Backends » Win32 backend. ; This class is the basic interface to the Win32 graphics system. ; It is an implementation of the abstract TVirtualX class.; This code was initially developed in the context of HIGZ and PAW by Olivier Couet (package X11INT). ; Definition at line 64 of file TGWin32.h. Public Member Functions;  TGWin32 ();  Default constructor. ;  ;  TGWin32 (const char *name, const char *title);  Normal Constructor. ;  ; virtual ~TGWin32 ();  destructor. ;  ; Int_t AddPixmap (ULongptr_t pix, UInt_t w, UInt_t h) override;  register pixmap created by TGWin32GLManager ;  ; Int_t AddWindow (ULongptr_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sets the sound bell. Percent is loudness from -100% to 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the active cursor of the specified window. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, by values from gval. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  Put data into Clipboard. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr) override;  Change window attributes. ;  ; Bool_t CheckEvent (Window_t id, EGEventType ty",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:15674,Energy Efficiency,green,green,15674," siblings. ;  ; void MapRaised (Window_t id) override;  Map window on screen and put on top of all windows. ;  ; void MapSubwindows (Window_t id) override;  Maps all subwindows for the specified window ""id"" in top-to-bottom stacking order. ;  ; void MapWindow (Window_t id) override;  Map window on screen. ;  ; void MoveResizeWindow (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Move and resize a window. ;  ; void MoveWindow (Int_t wid, Int_t x, Int_t y) override;  Move the window wid. ;  ; void MoveWindow (Window_t id, Int_t x, Int_t y) override;  Move a window. ;  ; void NextEvent (Event_t &event) override;  Copies first pending event from event queue to Event_t structure and removes event from queue. ;  ; Int_t OpenDisplay (const char *dpyName=0) override;  Open the display. Return -1 if the opening fails, 0 when ok. ;  ; Int_t OpenPixmap (UInt_t w, UInt_t h) override;  Open a new pixmap. ;  ; Bool_t ParseColor (Colormap_t cmap, const char *cname, ColorStruct_t &color) override;  Parse string cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Overwrites the pixel in the image with the specified pixel value. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Fill in the primary color components for a specific pixel value. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Query pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:46562,Energy Efficiency,green,green,46562," GdkColor *colors, Int_t ncolors);  Returns the current RGB value for the pixel in the XColor structure. ;  ; void UpdateFillColor ();  ; void UpdateFillStyle ();  Set fill area style index. ;  ; void UpdateLineColor ();  ; void UpdateLineStyle ();  Update line style. ;  ; void UpdateMarkerColor ();  ; void UpdateMarkerStyle ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fBlueDiv;  Blue value divider. ;  ; Int_t fBlueShift;  Bits to left shift blue. ;  ; Float_t fCharacterUpX;  Character Up vector along X. ;  ; Float_t fCharacterUpY;  Character Up vector along Y. ;  ; GdkColormap * fColormap;  Default colormap, 0 if b/w. ;  ; Int_t fDepth;  Number of color planes. ;  ; Bool_t fFillColorModified;  ; Bool_t fFillStyleModified;  ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fLineColorModified;  ; Bool_t fMarkerColorModified;  ; Bool_t fMarkerStyleModified;  ; Bool_t fPenModified;  line syle || width modified ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; TObject * fRefreshTimer;  TGWin32RefreshTimer for GUI thread message handler. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Bool_t fUseSysPointers;  True when using system mouse pointers. ;  ; GdkVisual * fVisual;  ; Handle_t fXEvent;  Current native (GDK) event. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TStr",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:49398,Energy Efficiency,allocate,allocate,49398," ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void CloseWindow1 ();  Delete current window. ;  ; void DrawImage (FT_Bitmap *source, ULong_t fore, ULong_t back, GdkImage *xim, Int_t bx, Int_t by);  Draw FT_Bitmap bitmap to xim image at position bx,by using specified foreground color. ;  ; Int_t FindColor (ULong_t pixel, ULong_t *orgcolors, Int_t ncolors);  Returns index in orgcolors (and new_colors) for pixel. ;  ; GdkImage * GetBackground (Int_t x, Int_t y, UInt_t w, UInt_t h);  Get the background of the current window in an XImage. ;  ; void ImgPickPalette (GdkImage *image, Int_t &ncol, Int_t *&R, Int_t *&G, Int_t *&B);  Returns in R G B the ncol colors of the palette used by the image. ;  ; Bool_t IsVisible (Int_t x, Int_t y, UInt_t w, UInt_t h);  Test if there is really something to render. ;  ; void MakeOpaqueColors (Int_t percent, ULong_t *orgcolors, Int_t ncolors);  Get RGB values for orgcolors, add percent neutral to the RGB and allocate new_colors. ;  ; void MapColorStruct (ColorStruct_t *color, GdkColor &xcolor);  Map a ColorStruct_t to a XColor structure. ;  ; void MapCursor (ECursor cursor, Int_t &xcursor);  ; void MapEvent (Event_t &ev, GdkEvent &xev, Bool_t tox=kTRUE);  Map Event_t structure to gdk_event structure. ;  ; void MapEventMask (UInt_t &emask, UInt_t &xemask, Bool_t tox=kTRUE);  Map event mask to or from gdk. ;  ; void MapGCValues (GCValues_t &gval, ULong_t &xmask, GdkGCValues &xgval, Bool_t tox=kTRUE);  Map a GCValues_t to a XCGValues structure if tox is true. ;  ; void MapKeySym (UInt_t &keysym, UInt_t &xkeysym, Bool_t tox=kTRUE);  Map to and from X key symbols. ;  ; void MapModifierState (UInt_t &state, UInt_t &xstate, Bool_t tox=kTRUE);  Map modifier key state to or from X. ;  ; void MapSetWindowAttributes (SetWindowAttributes_t *attr, ULong_t &xmask, GdkWindowAttr &xattr);  Map a SetWindowAttributes_t to a GdkWindowAttr structu",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:53903,Energy Efficiency,allocate,allocate,53903,".cxx. Member Function Documentation. ◆ AddPixmap(). Int_t TGWin32::AddPixmap ; (; ULongptr_t ; pix, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . register pixmap created by TGWin32GLManager ; Reimplemented from TVirtualX.; Definition at line 7436 of file TGWin32.cxx. ◆ AddWindow(). Int_t TGWin32::AddWindow ; (; ULongptr_t ; qwid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Register a window created by Qt as a ROOT window (like InitWindow()). ; Reimplemented from TVirtualX.; Definition at line 7479 of file TGWin32.cxx. ◆ Align(). void TGWin32::Align ; (; void ; ). private . Compute alignment variables. ; The alignment is done on the horizontal string then the rotation is applied on the alignment variables. SetRotation and LayoutGlyphs should have been called before. ; Definition at line 1203 of file TGWin32.cxx. ◆ AllocColor() [1/2]. Bool_t TGWin32::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Find and allocate a color cell according to the color values specified in the ColorStruct_t. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE. ; Reimplemented from TVirtualX.; Definition at line 5756 of file TGWin32.cxx. ◆ AllocColor() [2/2]. Bool_t TGWin32::AllocColor ; (; GdkColormap * ; cmap, . GdkColor * ; color . ). protected . Allocate color in colormap. ; If we are on an <= 8 plane machine we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane true color machine we will calculate the pixel value using: for 15 and 16 bit true colors have 6 bits precision per color however only the 5 most significant bits are used in the color index. Except for 16 bits where green uses all 6 bits. I.e.: 15 bits = rrrrrgggggbbbbb 16 bits = rrrrrggggggbbbbb for 24 bits each r, g and b are represented by 8 bits.; Since all colors are set with a max of 65535 (16 bits) per r, g, b we just right shift them by 10, 11 and 10 bits for 16 planes, and (10, 10, 10 for 15 planes) and by 8 bits for 24 planes. Returns kFALSE in",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:54009,Energy Efficiency,allocate,allocated,54009," ULongptr_t ; pix, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . register pixmap created by TGWin32GLManager ; Reimplemented from TVirtualX.; Definition at line 7436 of file TGWin32.cxx. ◆ AddWindow(). Int_t TGWin32::AddWindow ; (; ULongptr_t ; qwid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Register a window created by Qt as a ROOT window (like InitWindow()). ; Reimplemented from TVirtualX.; Definition at line 7479 of file TGWin32.cxx. ◆ Align(). void TGWin32::Align ; (; void ; ). private . Compute alignment variables. ; The alignment is done on the horizontal string then the rotation is applied on the alignment variables. SetRotation and LayoutGlyphs should have been called before. ; Definition at line 1203 of file TGWin32.cxx. ◆ AllocColor() [1/2]. Bool_t TGWin32::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Find and allocate a color cell according to the color values specified in the ColorStruct_t. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE. ; Reimplemented from TVirtualX.; Definition at line 5756 of file TGWin32.cxx. ◆ AllocColor() [2/2]. Bool_t TGWin32::AllocColor ; (; GdkColormap * ; cmap, . GdkColor * ; color . ). protected . Allocate color in colormap. ; If we are on an <= 8 plane machine we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane true color machine we will calculate the pixel value using: for 15 and 16 bit true colors have 6 bits precision per color however only the 5 most significant bits are used in the color index. Except for 16 bits where green uses all 6 bits. I.e.: 15 bits = rrrrrgggggbbbbb 16 bits = rrrrrggggggbbbbb for 24 bits each r, g and b are represented by 8 bits.; Since all colors are set with a max of 65535 (16 bits) per r, g, b we just right shift them by 10, 11 and 10 bits for 16 planes, and (10, 10, 10 for 15 planes) and by 8 bits for 24 planes. Returns kFALSE in case color allocation failed. ; Definition at line 1159 of file TGWin32.cxx. ◆ ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:54596,Energy Efficiency,green,green,54596,"ontal string then the rotation is applied on the alignment variables. SetRotation and LayoutGlyphs should have been called before. ; Definition at line 1203 of file TGWin32.cxx. ◆ AllocColor() [1/2]. Bool_t TGWin32::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Find and allocate a color cell according to the color values specified in the ColorStruct_t. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE. ; Reimplemented from TVirtualX.; Definition at line 5756 of file TGWin32.cxx. ◆ AllocColor() [2/2]. Bool_t TGWin32::AllocColor ; (; GdkColormap * ; cmap, . GdkColor * ; color . ). protected . Allocate color in colormap. ; If we are on an <= 8 plane machine we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane true color machine we will calculate the pixel value using: for 15 and 16 bit true colors have 6 bits precision per color however only the 5 most significant bits are used in the color index. Except for 16 bits where green uses all 6 bits. I.e.: 15 bits = rrrrrgggggbbbbb 16 bits = rrrrrggggggbbbbb for 24 bits each r, g and b are represented by 8 bits.; Since all colors are set with a max of 65535 (16 bits) per r, g, b we just right shift them by 10, 11 and 10 bits for 16 planes, and (10, 10, 10 for 15 planes) and by 8 bits for 24 planes. Returns kFALSE in case color allocation failed. ; Definition at line 1159 of file TGWin32.cxx. ◆ Bell(). void TGWin32::Bell ; (; Int_t ; percent). overridevirtual . Sets the sound bell. Percent is loudness from -100% to 100%. ; Reimplemented from TVirtualX.; Definition at line 6307 of file TGWin32.cxx. ◆ ChangeActivePointerGrab(). void TGWin32::ChangeActivePointerGrab ; (; Window_t ; win, . UInt_t ; mask, . Cursor_t ; cur . ). overridevirtual . Changes the active cursor of the specified window. ; Reimplemented from TVirtualX.; Definition at line 7644 of file TGWin32.cxx. ◆ ChangeGC(). void TGWin32::ChangeGC ; (; GContext_t ; gc, . GCValues_t * ; gval . ). overrid",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:85477,Energy Efficiency,reduce,reduce,85477,"ient window. ; Reimplemented from TVirtualX.; Definition at line 6482 of file TGWin32.cxx. ◆ HasTTFonts(). Bool_t TGWin32::HasTTFonts ; (; ); const. inlineoverridevirtual . Returns True when TrueType fonts are used. ; Reimplemented from TVirtualX.; Definition at line 185 of file TGWin32.h. ◆ IconifyWindow(). void TGWin32::IconifyWindow ; (; Window_t ; id). overridevirtual . Iconify the window. ; Reimplemented from TVirtualX.; Definition at line 4760 of file TGWin32.cxx. ◆ ImgPickPalette(). void TGWin32::ImgPickPalette ; (; GdkImage * ; image, . Int_t & ; ncol, . Int_t *& ; R, . Int_t *& ; G, . Int_t *& ; B . ). private . Returns in R G B the ncol colors of the palette used by the image. ; The image pixels are changed to index values in these R G B arrays. This produces a colormap with only the used colors (so even on displays with more than 8 planes we will be able to create GIF's when the image contains no more than 256 different colors). If it does contain more colors we will have to use GIFquantize to reduce the number of colors. The R G B arrays must be deleted by the caller. ; Definition at line 4326 of file TGWin32.cxx. ◆ Init(). Bool_t TGWin32::Init ; (; void * ; display = 0). overridevirtual . Initialize Win32 system. Returns kFALSE in case of failure. ; Reimplemented from TVirtualX.; Definition at line 954 of file TGWin32.cxx. ◆ InitWindow(). Int_t TGWin32::InitWindow ; (; ULongptr_t ; win). overridevirtual . Open window and return window number. ; Return -1 if window initialization fails. ; Reimplemented from TVirtualX.; Definition at line 2158 of file TGWin32.cxx. ◆ InternAtom(). Atom_t TGWin32::InternAtom ; (; const char * ; atom_name, . Bool_t ; only_if_exist . ). overridevirtual . Return atom handle for atom_name. ; If it does not exist create it if only_if_exist is false. Atoms are used to communicate between different programs (i.e. window manager) via the X server. ; Reimplemented from TVirtualX.; Definition at line 5353 of file TGWin32.cxx. ◆ Inters",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:89584,Energy Efficiency,allocate,allocate,89584,"e 5385 of file TGWin32.cxx. ◆ Lock(). void TGWin32::Lock ; (; ). static . Definition at line 938 of file TGWin32.cxx. ◆ LookupString(). void TGWin32::LookupString ; (; Event_t * ; event, . char * ; buf, . Int_t ; buflen, . UInt_t & ; keysym . ). overridevirtual . Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ; In buf a null terminated ASCII string is returned representing the string that is currently mapped to the key code. ; Reimplemented from TVirtualX.; Definition at line 6860 of file TGWin32.cxx. ◆ LowerWindow(). void TGWin32::LowerWindow ; (; Window_t ; id). overridevirtual . Lower window so it lays below all its siblings. ; Reimplemented from TVirtualX.; Definition at line 4714 of file TGWin32.cxx. ◆ MakeOpaqueColors(). void TGWin32::MakeOpaqueColors ; (; Int_t ; percent, . ULong_t * ; orgcolors, . Int_t ; ncolors . ). private . Get RGB values for orgcolors, add percent neutral to the RGB and allocate new_colors. ; Definition at line 4022 of file TGWin32.cxx. ◆ MapColorStruct(). void TGWin32::MapColorStruct ; (; ColorStruct_t * ; color, . GdkColor & ; xcolor . ). private . Map a ColorStruct_t to a XColor structure. ; Definition at line 5721 of file TGWin32.cxx. ◆ MapCursor(). void TGWin32::MapCursor ; (; ECursor ; cursor, . Int_t & ; xcursor . ). private . ◆ MapEvent(). void TGWin32::MapEvent ; (; Event_t & ; ev, . GdkEvent & ; xev, . Bool_t ; tox = kTRUE . ). private . Map Event_t structure to gdk_event structure. ; If tox is false map the other way. ; Definition at line 5945 of file TGWin32.cxx. ◆ MapEventMask(). void TGWin32::MapEventMask ; (; UInt_t & ; emask, . UInt_t & ; xemask, . Bool_t ; tox = kTRUE . ). private . Map event mask to or from gdk. ; Definition at line 4913 of file TGWin32.cxx. ◆ MapGCValues(). void TGWin32::MapGCValues ; (; GCValues_t & ; gval, . ULong_t & ; xmask, . GdkGCValues & ; xgval, . Bool_t ; tox = kTRUE . ). private . Ma",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:93830,Energy Efficiency,green,green,93830," file TGWin32.cxx. ◆ NextEvent(). void TGWin32::NextEvent ; (; Event_t & ; event). overridevirtual . Copies first pending event from event queue to Event_t structure and removes event from queue. ; Not all of the event fields are valid for each event type, except fType and fWindow. ; Reimplemented from TVirtualX.; Definition at line 5870 of file TGWin32.cxx. ◆ OpenDisplay(). Int_t TGWin32::OpenDisplay ; (; const char * ; dpyName = 0). overridevirtual . Open the display. Return -1 if the opening fails, 0 when ok. ; Reimplemented from TVirtualX.; Definition at line 971 of file TGWin32.cxx. ◆ OpenPixmap(). Int_t TGWin32::OpenPixmap ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Open a new pixmap. ; w,h : Width and height of the pixmap. ; Reimplemented from TVirtualX.; Definition at line 2099 of file TGWin32.cxx. ◆ ParseColor(). Bool_t TGWin32::ParseColor ; (; Colormap_t ; cmap, . const char * ; cname, . ColorStruct_t & ; color . ). overridevirtual . Parse string cname containing color name, like ""green"" or ""#00FF00"". ; It returns a filled in ColorStruct_t. Returns kFALSE in case parsing failed, kTRUE in case of success. On success, the ColorStruct_t fRed, fGreen and fBlue fields are all filled in and the mask is set for all three colors, but fPixel is not set. ; Reimplemented from TVirtualX.; Definition at line 5736 of file TGWin32.cxx. ◆ PointInRegion(). Bool_t TGWin32::PointInRegion ; (; Int_t ; x, . Int_t ; y, . Region_t ; reg . ). overridevirtual . Returns true if the point x,y is in the region. ; Reimplemented from TVirtualX.; Definition at line 7202 of file TGWin32.cxx. ◆ PolygonRegion(). Region_t TGWin32::PolygonRegion ; (; Point_t * ; points, . Int_t ; np, . Bool_t ; winding . ). overridevirtual . Create region for the polygon defined by the points array. ; If winding is true use WindingRule else EvenOddRule as fill rule. ; Reimplemented from TVirtualX.; Definition at line 7149 of file TGWin32.cxx. ◆ PutImage() [1/2]. void TGWin32::PutImage ; (; Drawable_t",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:112208,Energy Efficiency,green,green,112208,"om TVirtualX.; Definition at line 6573 of file TGWin32.cxx. ◆ SetOpacity(). void TGWin32::SetOpacity ; (; Int_t ; percent). overridevirtual . Set opacity of a window. ; This image manipulation routine works by adding to a percent amount of neutral to each pixels RGB. Since it requires quite some additional color map entries is it only supported on displays with more than > 8 color planes (> 256 colors) ; Reimplemented from TVirtualX.; Definition at line 3958 of file TGWin32.cxx. ◆ SetPrimarySelectionOwner(). void TGWin32::SetPrimarySelectionOwner ; (; Window_t ; id). overridevirtual . Makes the window id the current owner of the primary selection. ; That is the window in which, for example some text is selected. ; Reimplemented from TVirtualX.; Definition at line 6828 of file TGWin32.cxx. ◆ SetRGB(). void TGWin32::SetRGB ; (; Int_t ; cindex, . Float_t ; r, . Float_t ; g, . Float_t ; b . ). overridevirtual . Set color intensities for given color index. ; cindex : color index r,g,b : red, green, blue intensities between 0.0 and 1.0 ; Reimplemented from TVirtualX.; Definition at line 4097 of file TGWin32.cxx. ◆ SetSelectionOwner(). Bool_t TGWin32::SetSelectionOwner ; (; Window_t ; owner, . Atom_t & ; sel . ). overridevirtual . Assigns owner of Clipboard. ; Reimplemented from TVirtualX.; Definition at line 7681 of file TGWin32.cxx. ◆ SetTextAlign(). void TGWin32::SetTextAlign ; (; Short_t ; talign = 11). overridevirtual . Set text alignment. ; txalh : horizontal text alignment txalv : vertical text alignment ; Reimplemented from TAttText.; Definition at line 4134 of file TGWin32.cxx. ◆ SetTextColor(). void TGWin32::SetTextColor ; (; Color_t ; cindex). overridevirtual . Set color index for text. ; Reimplemented from TAttText.; Definition at line 4194 of file TGWin32.cxx. ◆ SetTextFont() [1/2]. Int_t TGWin32::SetTextFont ; (; char * ; fontname, . ETextSetMode ; mode . ). overridevirtual . Set text font to specified name. ; mode : loading flag mode=0 : search if the font ex",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:123867,Energy Efficiency,green,green,123867,"at_t TGWin32::fCharacterUpY. protected . Character Up vector along Y. ; Definition at line 117 of file TGWin32.h. ◆ fColormap. GdkColormap* TGWin32::fColormap. protected . Default colormap, 0 if b/w. ; Definition at line 109 of file TGWin32.h. ◆ fColors. TExMap* TGWin32::fColors. private . Hash list of colors. ; Definition at line 81 of file TGWin32.h. ◆ fCursors. GdkCursor* TGWin32::fCursors[kNumCursors]. private . List of cursors. ; Definition at line 82 of file TGWin32.h. ◆ fDepth. Int_t TGWin32::fDepth. protected . Number of color planes. ; Definition at line 119 of file TGWin32.h. ◆ fFillColorModified. Bool_t TGWin32::fFillColorModified. protected . Definition at line 129 of file TGWin32.h. ◆ fFillStyleModified. Bool_t TGWin32::fFillStyleModified. protected . Definition at line 130 of file TGWin32.h. ◆ fGreenDiv. Int_t TGWin32::fGreenDiv. protected . Green value divider. ; Definition at line 121 of file TGWin32.h. ◆ fGreenShift. Int_t TGWin32::fGreenShift. protected . Bits to left shift green. ; Definition at line 124 of file TGWin32.h. ◆ fHasTTFonts. Bool_t TGWin32::fHasTTFonts. protected . True when TrueType fonts are used. ; Definition at line 111 of file TGWin32.h. ◆ fLineColorModified. Bool_t TGWin32::fLineColorModified. protected . Definition at line 131 of file TGWin32.h. ◆ fMarkerColorModified. Bool_t TGWin32::fMarkerColorModified. protected . Definition at line 134 of file TGWin32.h. ◆ fMarkerStyleModified. Bool_t TGWin32::fMarkerStyleModified. protected . Definition at line 133 of file TGWin32.h. ◆ fMaxNumberOfWindows. Int_t TGWin32::fMaxNumberOfWindows. private . Maximum number of windows. ; Definition at line 79 of file TGWin32.h. ◆ fPenModified. Bool_t TGWin32::fPenModified. protected . line syle || width modified ; Definition at line 132 of file TGWin32.h. ◆ fRedDiv. Int_t TGWin32::fRedDiv. protected . Red value divider, -1 if no TrueColor visual. ; Definition at line 120 of file TGWin32.h. ◆ fRedShift. Int_t TGWin32::fRedShift. protected . Bits t",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:437,Integrability,interface,interface,437,". ROOT: TGWin32 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGWin32 Class ReferenceGraphics » Graphics' Backends » Win32 backend. ; This class is the basic interface to the Win32 graphics system. ; It is an implementation of the abstract TVirtualX class.; This code was initially developed in the context of HIGZ and PAW by Olivier Couet (package X11INT). ; Definition at line 64 of file TGWin32.h. Public Member Functions;  TGWin32 ();  Default constructor. ;  ;  TGWin32 (const char *name, const char *title);  Normal Constructor. ;  ; virtual ~TGWin32 ();  destructor. ;  ; Int_t AddPixmap (ULongptr_t pix, UInt_t w, UInt_t h) override;  register pixmap created by TGWin32GLManager ;  ; Int_t AddWindow (ULongptr_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sets the sound bell. Percent is loudness from -100% to 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the active cursor of the specified window. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, by values from gval. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  Put data into Clipboard. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotif",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:23833,Integrability,depend,depends,23833,"hmax, UInt_t winc, UInt_t hinc) override;  Give the window manager minimum and maximum size hints. ;  ; void SetWMState (Window_t id, EInitialState state) override;  Set the initial state of the window. Either kNormalState or kIconicState. ;  ; void SetWMTransientHint (Window_t id, Window_t main_id) override;  Tell window manager that window is a transient window of gdk_parent_root. ;  ; void ShapeCombineMask (Window_t id, Int_t x, Int_t y, Pixmap_t mask) override;  The Nonrectangular Window Shape Extension adds nonrectangular windows to the System. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtract rega from regb. ;  ; void Sync (Int_t mode) override;  Set synchronisation on or off. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of reference of one window to another. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Union of rectangle with a region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override; ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:24504,Integrability,synchroniz,synchronize,24504,"erNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtract rega from regb. ;  ; void Sync (Int_t mode) override;  Set synchronisation on or off. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of reference of one window to another. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Union of rectangle with a region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Write the pixmap wid in the bitmap file pxname. ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculate the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creat",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:24757,Integrability,message,message,24757,"truct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of reference of one window to another. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Union of rectangle with a region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Write the pixmap wid in the bitmap file pxname. ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculate the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext);  Creates OpenGL context for window ""windowID"". ;  ; virtual Window_t CreateOpenGLWindow (Window_t parentID, UInt_t width, UInt_t hei",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:26020,Integrability,message,messageID,26020,"Region_t rega, Region_t regb, Region_t result) override;  Calculate the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext);  Creates OpenGL context for window ""windowID"". ;  ; virtual Window_t CreateOpenGLWindow (Window_t parentID, UInt_t width, UInt_t height, const std::vector< std::pair< UInt_t, Int_t > > &format);  Create window with special pixel format. Noop everywhere except Cocoa. ;  ; virtual void DeleteOpenGLContext (Int_t wid=0);  Deletes OpenGL context for window ""wid"". ;  ; virtual void DispatchClientMessage (UInt_t messageID);  Force processing of event, sent by SendEvent before. ;  ; virtual UInt_t ExecCommand (TGWin32Command *code);  Executes the command ""code"" coming from the other threads (Win32) ;  ; virtual void FlushOpenGLBuffer (Handle_t ctx);  Flushes OpenGL buffer. ;  ; virtual Handle_t GetCurrentOpenGLContext ();  Asks OpenGL subsystem about the current OpenGL context. ;  ; EDrawMode GetDrawMode ();  ; virtual Int_t GetFontAscent () const;  Returns the ascent of the current font (in pixels). ;  ; virtual Int_t GetFontAscent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as ascent is text related. ;  ; virtual Int_t GetFontDescent () const;  Returns the descent of the current font (in pixels. ;  ; virtual Int_t GetFontDescent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as descent requires a certain text. ;  ; virtual FontStruct_t GetGCFont (GContext_t gc);  Return the font associated with the graphics con",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:32274,Integrability,message,message,32274,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:32815,Integrability,message,message,32815,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:33805,Integrability,message,message,33805,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:36899,Integrability,message,message,36899,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:37272,Integrability,message,message,37272," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:46986,Integrability,message,message,46986," const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fBlueDiv;  Blue value divider. ;  ; Int_t fBlueShift;  Bits to left shift blue. ;  ; Float_t fCharacterUpX;  Character Up vector along X. ;  ; Float_t fCharacterUpY;  Character Up vector along Y. ;  ; GdkColormap * fColormap;  Default colormap, 0 if b/w. ;  ; Int_t fDepth;  Number of color planes. ;  ; Bool_t fFillColorModified;  ; Bool_t fFillStyleModified;  ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fLineColorModified;  ; Bool_t fMarkerColorModified;  ; Bool_t fMarkerStyleModified;  ; Bool_t fPenModified;  line syle || width modified ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; TObject * fRefreshTimer;  TGWin32RefreshTimer for GUI thread message handler. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Bool_t fUseSysPointers;  True when using system mouse pointers. ;  ; GdkVisual * fVisual;  ; Handle_t fXEvent;  Current native (GDK) event. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle; ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:75112,Integrability,interface,interface,75112,"m TVirtualX.; Definition at line 1928 of file TGWin32.cxx. ◆ GetColor(). XColor_t & TGWin32::GetColor ; (; Int_t ; cid). protected . Return reference to internal color structure associated to color index cid. ; Definition at line 1938 of file TGWin32.cxx. ◆ GetColorBits(). unsigned char * TGWin32::GetColorBits ; (; Drawable_t ; wid, . Int_t ; x, . Int_t ; y, . UInt_t ; width, . UInt_t ; height . ). overridevirtual . Gets DIB bits x, y, width, height - position of bitmap returns a pointer on bitmap bits array in format: b1, g1, r1, 0, b2, g2, r2, 0 ... bn, gn, rn, 0 ... ; Pixels are numbered from left to right and from top to bottom. By default all pixels from the whole drawable are returned. ; Reimplemented from TVirtualX.; Definition at line 7339 of file TGWin32.cxx. ◆ GetColormap(). Colormap_t TGWin32::GetColormap ; (; ); const. inlineoverridevirtual . Returns handle to colormap. ; Might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. GL interface. ; Reimplemented from TVirtualX.; Definition at line 255 of file TGWin32.h. ◆ GetCurrentWindow(). Window_t TGWin32::GetCurrentWindow ; (; ); const. overridevirtual . Return current window pointer. Protected method used by TGWin32TTF. ; Reimplemented from TVirtualX.; Definition at line 1951 of file TGWin32.cxx. ◆ GetDefaultRootWindow(). Window_t TGWin32::GetDefaultRootWindow ; (; ); const. overridevirtual . Return handle to the default root window created when calling XOpenDisplay(). ; Reimplemented from TVirtualX.; Definition at line 5365 of file TGWin32.cxx. ◆ GetDepth(). Int_t TGWin32::GetDepth ; (; ); const. overridevirtual . Get maximum number of planes. ; Reimplemented from TVirtualX.; Definition at line 5343 of file TGWin32.cxx. ◆ GetDisplay(). Display_t TGWin32::GetDisplay ; (; ); const. overridevirtual . Returns handle to display (might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. ; GL interface). ; Reimplemented from TVirtua",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:76075,Integrability,interface,interface,76075,"de of TVirtualX is needed, e.g. GL interface. ; Reimplemented from TVirtualX.; Definition at line 255 of file TGWin32.h. ◆ GetCurrentWindow(). Window_t TGWin32::GetCurrentWindow ; (; ); const. overridevirtual . Return current window pointer. Protected method used by TGWin32TTF. ; Reimplemented from TVirtualX.; Definition at line 1951 of file TGWin32.cxx. ◆ GetDefaultRootWindow(). Window_t TGWin32::GetDefaultRootWindow ; (; ); const. overridevirtual . Return handle to the default root window created when calling XOpenDisplay(). ; Reimplemented from TVirtualX.; Definition at line 5365 of file TGWin32.cxx. ◆ GetDepth(). Int_t TGWin32::GetDepth ; (; ); const. overridevirtual . Get maximum number of planes. ; Reimplemented from TVirtualX.; Definition at line 5343 of file TGWin32.cxx. ◆ GetDisplay(). Display_t TGWin32::GetDisplay ; (; ); const. overridevirtual . Returns handle to display (might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. ; GL interface). ; Reimplemented from TVirtualX.; Definition at line 5335 of file TGWin32.cxx. ◆ GetDoubleBuffer(). Int_t TGWin32::GetDoubleBuffer ; (; Int_t ; wid). overridevirtual . Query the double buffer value for the window wid. ; Reimplemented from TVirtualX.; Definition at line 1973 of file TGWin32.cxx. ◆ GetFontHandle(). FontH_t TGWin32::GetFontHandle ; (; FontStruct_t ; fs). overridevirtual . Return handle to font described by font structure. ; Reimplemented from TVirtualX.; Definition at line 5409 of file TGWin32.cxx. ◆ GetFontProperties(). void TGWin32::GetFontProperties ; (; FontStruct_t ; font, . Int_t & ; max_ascent, . Int_t & ; max_descent . ). overridevirtual . Return some font properties. ; Reimplemented from TVirtualX.; Definition at line 6686 of file TGWin32.cxx. ◆ GetFontStruct(). FontStruct_t TGWin32::GetFontStruct ; (; FontH_t ; fh). overridevirtual . Retrieve associated font structure once we have the font handle. ; Free returned FontStruct_t using FreeFontStruct(). ; Re",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:80988,Integrability,interface,interface,80988,"t_type, . Int_t * ; act_format, . ULong_t * ; nitems, . ULong_t * ; bytes, . unsigned char ** ; prop_list . ). overridevirtual . Returns the actual type of the property, the actual format of the property, and a pointer to the data actually returned. ; Reimplemented from TVirtualX.; Definition at line 7596 of file TGWin32.cxx. ◆ GetRegionBox(). void TGWin32::GetRegionBox ; (; Region_t ; reg, . Rectangle_t * ; rect . ). overridevirtual . Return smallest enclosing rectangle. ; Reimplemented from TVirtualX.; Definition at line 7218 of file TGWin32.cxx. ◆ GetRGB(). void TGWin32::GetRGB ; (; Int_t ; index, . Float_t & ; r, . Float_t & ; g, . Float_t & ; b . ). overridevirtual . Get rgb values for color ""index"". ; Reimplemented from TVirtualX.; Definition at line 2042 of file TGWin32.cxx. ◆ GetScreen(). Int_t TGWin32::GetScreen ; (; ); const. inlineoverridevirtual . Returns screen number. ; Might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. GL interface. ; Reimplemented from TVirtualX.; Definition at line 253 of file TGWin32.h. ◆ GetTextExtent() [1/2]. virtual void TGWin32::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . wchar_t * ; mess . ). inlineoverridevirtual . Returns the size of the specified character string ""mess"". ; Parameters. [in]wthe text width ; [in]hthe text height ; [in]messthe string . Reimplemented from TVirtualX.; Definition at line 182 of file TGWin32.h. ◆ GetTextExtent() [2/2]. void TGWin32::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . char * ; mess . ). overridevirtual . Return the size of a character string. ; iw : text width ih : text height mess : message ; Reimplemented from TVirtualX.; Definition at line 2062 of file TGWin32.cxx. ◆ GetTextMagnitude(). Float_t TGWin32::GetTextMagnitude ; (; ). inlineoverridevirtual . Returns the current font magnification factor. ; Reimplemented from TVirtualX.; Definition at line 183 of file TGWin32.h. ◆ GetVisual(). Visual_t TGWin32::GetVisual ; (; ); const.",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:81638,Integrability,message,message,81638,"loat_t & ; b . ). overridevirtual . Get rgb values for color ""index"". ; Reimplemented from TVirtualX.; Definition at line 2042 of file TGWin32.cxx. ◆ GetScreen(). Int_t TGWin32::GetScreen ; (; ); const. inlineoverridevirtual . Returns screen number. ; Might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. GL interface. ; Reimplemented from TVirtualX.; Definition at line 253 of file TGWin32.h. ◆ GetTextExtent() [1/2]. virtual void TGWin32::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . wchar_t * ; mess . ). inlineoverridevirtual . Returns the size of the specified character string ""mess"". ; Parameters. [in]wthe text width ; [in]hthe text height ; [in]messthe string . Reimplemented from TVirtualX.; Definition at line 182 of file TGWin32.h. ◆ GetTextExtent() [2/2]. void TGWin32::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . char * ; mess . ). overridevirtual . Return the size of a character string. ; iw : text width ih : text height mess : message ; Reimplemented from TVirtualX.; Definition at line 2062 of file TGWin32.cxx. ◆ GetTextMagnitude(). Float_t TGWin32::GetTextMagnitude ; (; ). inlineoverridevirtual . Returns the current font magnification factor. ; Reimplemented from TVirtualX.; Definition at line 183 of file TGWin32.h. ◆ GetVisual(). Visual_t TGWin32::GetVisual ; (; ); const. inlineoverridevirtual . Returns handle to visual. ; Might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. GL interface. ; Reimplemented from TVirtualX.; Definition at line 252 of file TGWin32.h. ◆ GetWindowAttributes(). void TGWin32::GetWindowAttributes ; (; Window_t ; id, . WindowAttributes_t & ; attr . ). overridevirtual . Get window attributes and return filled in attributes structure. ; Reimplemented from TVirtualX.; Definition at line 5294 of file TGWin32.cxx. ◆ GetWindowID(). Window_t TGWin32::GetWindowID ; (; Int_t ; wid). overridevirtual . Return the X11 window identifier. ; wid : Works",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:82144,Integrability,interface,interface,82144,"& ; w, . UInt_t & ; h, . wchar_t * ; mess . ). inlineoverridevirtual . Returns the size of the specified character string ""mess"". ; Parameters. [in]wthe text width ; [in]hthe text height ; [in]messthe string . Reimplemented from TVirtualX.; Definition at line 182 of file TGWin32.h. ◆ GetTextExtent() [2/2]. void TGWin32::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . char * ; mess . ). overridevirtual . Return the size of a character string. ; iw : text width ih : text height mess : message ; Reimplemented from TVirtualX.; Definition at line 2062 of file TGWin32.cxx. ◆ GetTextMagnitude(). Float_t TGWin32::GetTextMagnitude ; (; ). inlineoverridevirtual . Returns the current font magnification factor. ; Reimplemented from TVirtualX.; Definition at line 183 of file TGWin32.h. ◆ GetVisual(). Visual_t TGWin32::GetVisual ; (; ); const. inlineoverridevirtual . Returns handle to visual. ; Might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. GL interface. ; Reimplemented from TVirtualX.; Definition at line 252 of file TGWin32.h. ◆ GetWindowAttributes(). void TGWin32::GetWindowAttributes ; (; Window_t ; id, . WindowAttributes_t & ; attr . ). overridevirtual . Get window attributes and return filled in attributes structure. ; Reimplemented from TVirtualX.; Definition at line 5294 of file TGWin32.cxx. ◆ GetWindowID(). Window_t TGWin32::GetWindowID ; (; Int_t ; wid). overridevirtual . Return the X11 window identifier. ; wid : Workstation identifier (input) ; Reimplemented from TVirtualX.; Definition at line 2073 of file TGWin32.cxx. ◆ GetWindowSize(). void TGWin32::GetWindowSize ; (; Drawable_t ; id, . Int_t & ; x, . Int_t & ; y, . UInt_t & ; w, . UInt_t & ; h . ). overridevirtual . Return geometry of window (should be called GetGeometry but signature already used). ; Reimplemented from TVirtualX.; Definition at line 6976 of file TGWin32.cxx. ◆ GrabButton(). void TGWin32::GrabButton ; (; Window_t ; id, . EMouseButton ; button, . UIn",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:87877,Integrability,depend,dependend,87877," . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 401 of file TGWin32.h. ◆ IsCmdThread(). Bool_t TGWin32::IsCmdThread ; (; ); const. overridevirtual . returns kTRUE if we are inside cmd/server thread ; Reimplemented from TVirtualX.; Definition at line 886 of file TGWin32.cxx. ◆ IsDNDAware(). Bool_t TGWin32::IsDNDAware ; (; Window_t ; win, . Atom_t * ; typelist . ). overridevirtual . Checks if Window win is DND aware, and knows any of the DND formats passed in argument. ; Reimplemented from TVirtualX.; Definition at line 7792 of file TGWin32.cxx. ◆ IsVisible(). Bool_t TGWin32::IsVisible ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). private . Test if there is really something to render. ; Definition at line 1408 of file TGWin32.cxx. ◆ KeysymToKeycode(). Int_t TGWin32::KeysymToKeycode ; (; UInt_t ; keysym). overridevirtual . Convert a keysym to the appropriate keycode. ; For example keysym is a letter and keycode is the matching keyboard key (which is dependend on the current keyboard mapping). ; Reimplemented from TVirtualX.; Definition at line 6740 of file TGWin32.cxx. ◆ ListFonts(). char ** TGWin32::ListFonts ; (; const char * ; fontname, . Int_t ; max, . Int_t & ; count . ). overridevirtual . Return list of font names matching ""fontname"". ; Reimplemented from TVirtualX.; Definition at line 7231 of file TGWin32.cxx. ◆ LoadQueryFont(). FontStruct_t TGWin32::LoadQueryFont ; (; const char * ; font_name). overridevirtual . Load font and query font. ; If font is not found 0 is returned, otherwise an opaque pointer to the FontStruct_t. Free the loaded font using DeleteFont(). ; Reimplemented from TVirtualX.; Definition at line 5385 of file TGWin32.cxx. ◆ Lock(). void TGWin32::Lock ; (; ). static . Definition at line 938 of file TGWin32.cxx. ◆ LookupString(). void TGWin32::LookupString ; (; Event_t * ; event, . char * ; buf, . Int_t ; buflen, . UInt_t & ; keysym . ). overridevirtual . Convert the keycode from the ev",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:95676,Integrability,depend,dependent,95676," from TVirtualX.; Definition at line 7149 of file TGWin32.cxx. ◆ PutImage() [1/2]. void TGWin32::PutImage ; (; Drawable_t ; id, . GContext_t ; gc, . Drawable_t ; img, . Int_t ; dx, . Int_t ; dy, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Combines an image with a rectangle of the specified drawable. ; The section of the image defined by the x, y, width, and height arguments is drawn on the specified part of the drawable.; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]imgthe image you want combined with the rectangle ; [in]dxthe offset in X from the left edge of the image ; [in]dythe offset in Y from the top edge of the image ; [in]x,ycoordinates, which are relative to the origin of the drawable and are the coordinates of the subimage ; [in]w,hthe width and height of the subimage, which define the rectangle dimensions. GC components in use: function, plane-mask, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground and background. (see also the GCValues_t structure) ; Reimplemented from TVirtualX.; Definition at line 7311 of file TGWin32.cxx. ◆ PutImage() [2/2]. void TGWin32::PutImage ; (; Int_t ; offset, . Int_t ; itran, . Int_t ; x0, . Int_t ; y0, . Int_t ; nx, . Int_t ; ny, . Int_t ; xmin, . Int_t ; ymin, . Int_t ; xmax, . Int_t ; ymax, . UChar_t * ; image, . Drawable_t ; id . ). private . Draw image. ; Definition at line 4451 of file TGWin32.cxx. ◆ PutPixel(). void TGWin32::PutPixel ; (; Drawable_t ; id, . Int_t ; x, . Int_t ; y, . ULong_t ; pixel . ). overridevirtual . Overwrites the pixel in the image with the specified pixel value. ; The image must contain the x and y coordinates.; Parameters. [in]idspecifies the image ; [in]x,ycoordinates ; [in]pixelthe new pixel value . Reimplemented from TVirtualX.; Definition at line 7281 of file TGWin32.cxx. ◆ QueryColor(). void TGWin32::QueryColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Fill in the primar",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:111399,Integrability,rout,routine,111399,"xy . ). private . Set marker type. ; type : marker type n : length of marker description xy : list of points describing marker shape; if n == 0 marker is a single point if TYPE == 0 marker is hollow circle of diameter N if TYPE == 1 marker is filled circle of diameter N if TYPE == 2 marker is a hollow polygon describe by line XY if TYPE == 3 marker is a filled polygon describe by line XY if TYPE == 4 marker is described by segmented line XY e.g. TYPE=4,N=4,XY=(-3,0,3,0,0,-3,0,3) sets a plus shape of 7x7 pixels ; Definition at line 3394 of file TGWin32.cxx. ◆ SetMWMHints(). void TGWin32::SetMWMHints ; (; Window_t ; id, . UInt_t ; value, . UInt_t ; funcs, . UInt_t ; input . ). overridevirtual . Set decoration style for MWM-compatible wm (mwm, ncdwm, fvwm?). ; Reimplemented from TVirtualX.; Definition at line 6573 of file TGWin32.cxx. ◆ SetOpacity(). void TGWin32::SetOpacity ; (; Int_t ; percent). overridevirtual . Set opacity of a window. ; This image manipulation routine works by adding to a percent amount of neutral to each pixels RGB. Since it requires quite some additional color map entries is it only supported on displays with more than > 8 color planes (> 256 colors) ; Reimplemented from TVirtualX.; Definition at line 3958 of file TGWin32.cxx. ◆ SetPrimarySelectionOwner(). void TGWin32::SetPrimarySelectionOwner ; (; Window_t ; id). overridevirtual . Makes the window id the current owner of the primary selection. ; That is the window in which, for example some text is selected. ; Reimplemented from TVirtualX.; Definition at line 6828 of file TGWin32.cxx. ◆ SetRGB(). void TGWin32::SetRGB ; (; Int_t ; cindex, . Float_t ; r, . Float_t ; g, . Float_t ; b . ). overridevirtual . Set color intensities for given color index. ; cindex : color index r,g,b : red, green, blue intensities between 0.0 and 1.0 ; Reimplemented from TVirtualX.; Definition at line 4097 of file TGWin32.cxx. ◆ SetSelectionOwner(). Bool_t TGWin32::SetSelectionOwner ; (; Window_t ; owner, . Atom_t & ; ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:118015,Integrability,depend,depends,118015,"VirtualX.; Definition at line 7564 of file TGWin32.cxx. ◆ Streamer(). void TGWin32::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGWin32::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 401 of file TGWin32.h. ◆ SubtractRegion(). void TGWin32::SubtractRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Subtract rega from regb. ; Reimplemented from TVirtualX.; Definition at line 7177 of file TGWin32.cxx. ◆ Sync(). void TGWin32::Sync ; (; Int_t ; mode). overridevirtual . Set synchronisation on or off. ; Parameters. [in]modesynchronisation on/off; mode=1 on; mode<>0 off . Reimplemented from TVirtualX.; Definition at line 4212 of file TGWin32.cxx. ◆ TextWidth(). Int_t TGWin32::TextWidth ; (; FontStruct_t ; font, . const char * ; s, . Int_t ; len . ). overridevirtual . Return length of string in pixels. Size depends on font. ; Reimplemented from TVirtualX.; Definition at line 6678 of file TGWin32.cxx. ◆ TranslateCoordinates(). void TGWin32::TranslateCoordinates ; (; Window_t ; src, . Window_t ; dest, . Int_t ; src_x, . Int_t ; src_y, . Int_t & ; dest_x, . Int_t & ; dest_y, . Window_t & ; child . ). overridevirtual . TranslateCoordinates translates coordinates from the frame of reference of one window to another. ; If the point is contained in a mapped child of the destination, the id of that child is returned as well. ; Reimplemented from TVirtualX.; Definition at line 6945 of file TGWin32.cxx. ◆ UnionRectWithRegion(). void TGWin32::UnionRectWithRegion ; (; Rectangle_t * ; rect, . Region_t ; src, . Region_t ; dest . ). overridevirtual . Union of rectangle with a region. ; Reimplemented from TVirtualX.; Definition at line 7135 of file TGWin32.cxx. ◆ UnionRegion(). void TGWin32::UnionRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Compute the union of re",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:119571,Integrability,synchroniz,synchronize,119571,"ion at line 6945 of file TGWin32.cxx. ◆ UnionRectWithRegion(). void TGWin32::UnionRectWithRegion ; (; Rectangle_t * ; rect, . Region_t ; src, . Region_t ; dest . ). overridevirtual . Union of rectangle with a region. ; Reimplemented from TVirtualX.; Definition at line 7135 of file TGWin32.cxx. ◆ UnionRegion(). void TGWin32::UnionRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Compute the union of rega and regb and return result region. ; The output region may be the same result region. ; Reimplemented from TVirtualX.; Definition at line 7159 of file TGWin32.cxx. ◆ Unlock(). void TGWin32::Unlock ; (; ). static . Definition at line 946 of file TGWin32.cxx. ◆ UnmapWindow(). void TGWin32::UnmapWindow ; (; Window_t ; id). overridevirtual . Unmap window from screen. ; Reimplemented from TVirtualX.; Definition at line 4662 of file TGWin32.cxx. ◆ Update(). void TGWin32::Update ; (; Int_t ; mode = 0). overridevirtual . Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ; Flush flushes output buffer. Sync flushes buffer and waits till all requests have been processed by X server. ; Reimplemented from TVirtualX.; Definition at line 7111 of file TGWin32.cxx. ◆ UpdateFillColor(). void TGWin32::UpdateFillColor ; (; ). protected . Definition at line 3147 of file TGWin32.cxx. ◆ UpdateFillStyle(). void TGWin32::UpdateFillStyle ; (; ). protected . Set fill area style index. ; Definition at line 3177 of file TGWin32.cxx. ◆ UpdateLineColor(). void TGWin32::UpdateLineColor ; (; ). protected . Definition at line 3244 of file TGWin32.cxx. ◆ UpdateLineStyle(). void TGWin32::UpdateLineStyle ; (; ). protected . Update line style. ; Definition at line 3302 of file TGWin32.cxx. ◆ UpdateMarkerColor(). void TGWin32::UpdateMarkerColor ; (; ). protected . Definition at line 3362 of file TGWin32.cxx. ◆ UpdateMarkerStyle(). void TGWin32::UpdateMarkerStyle ; (; ). protected . Definition at line 3418 of file TGWin32.cxx. ◆ UpdateWindow(). voi",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:121381,Integrability,message,message,121381,"efinition at line 3362 of file TGWin32.cxx. ◆ UpdateMarkerStyle(). void TGWin32::UpdateMarkerStyle ; (; ). protected . Definition at line 3418 of file TGWin32.cxx. ◆ UpdateWindow(). void TGWin32::UpdateWindow ; (; Int_t ; mode). overridevirtual . Update display. ; mode : (1) update (0) sync; Synchronise client and server once (not permanent). Copy the pixmap gCws->drawing on the window gCws->window if the double buffer is on. ; Reimplemented from TVirtualX.; Definition at line 4225 of file TGWin32.cxx. ◆ Warp(). void TGWin32::Warp ; (; Int_t ; ix, . Int_t ; iy, . Window_t ; id = 0 . ). overridevirtual . Set pointer position. ; ix : New X coordinate of pointer iy : New Y coordinate of pointer Coordinates are relative to the origin of the window id or to the origin of the current window if id == 0. ; Reimplemented from TVirtualX.; Definition at line 4241 of file TGWin32.cxx. ◆ WMDeleteNotify(). void TGWin32::WMDeleteNotify ; (; Window_t ; id). overridevirtual . Tell WM to send message when window is closed via WM. ; Reimplemented from TVirtualX.; Definition at line 6408 of file TGWin32.cxx. ◆ WriteGIF(). Int_t TGWin32::WriteGIF ; (; char * ; name). overridevirtual . Writes the current window into GIF file. ; Reimplemented from TVirtualX.; Definition at line 4388 of file TGWin32.cxx. ◆ WritePixmap(). void TGWin32::WritePixmap ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h, . char * ; pxname . ). overridevirtual . Write the pixmap wid in the bitmap file pxname. ; wid : Pixmap address w,h : Width and height of the pixmap. lenname : pixmap name length pxname : pixmap name ; Reimplemented from TVirtualX.; Definition at line 4265 of file TGWin32.cxx. ◆ XorRegion(). void TGWin32::XorRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Calculate the difference between the union and intersection of two regions. ; Reimplemented from TVirtualX.; Definition at line 7186 of file TGWin32.cxx. Member Data Documentation. ◆ fAlign. FT_Vector TGWin32",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:125046,Integrability,message,message,125046," file TGWin32.h. ◆ fLineColorModified. Bool_t TGWin32::fLineColorModified. protected . Definition at line 131 of file TGWin32.h. ◆ fMarkerColorModified. Bool_t TGWin32::fMarkerColorModified. protected . Definition at line 134 of file TGWin32.h. ◆ fMarkerStyleModified. Bool_t TGWin32::fMarkerStyleModified. protected . Definition at line 133 of file TGWin32.h. ◆ fMaxNumberOfWindows. Int_t TGWin32::fMaxNumberOfWindows. private . Maximum number of windows. ; Definition at line 79 of file TGWin32.h. ◆ fPenModified. Bool_t TGWin32::fPenModified. protected . line syle || width modified ; Definition at line 132 of file TGWin32.h. ◆ fRedDiv. Int_t TGWin32::fRedDiv. protected . Red value divider, -1 if no TrueColor visual. ; Definition at line 120 of file TGWin32.h. ◆ fRedShift. Int_t TGWin32::fRedShift. protected . Bits to left shift red, -1 if no TrueColor visual. ; Definition at line 123 of file TGWin32.h. ◆ fRefreshTimer. TObject* TGWin32::fRefreshTimer. protected . TGWin32RefreshTimer for GUI thread message handler. ; Definition at line 127 of file TGWin32.h. ◆ fScreenNumber. Int_t TGWin32::fScreenNumber. protected . Screen number. ; Definition at line 110 of file TGWin32.h. ◆ fTextAlign. Int_t TGWin32::fTextAlign. protected . Text alignment (set in SetTextAlign) ; Definition at line 115 of file TGWin32.h. ◆ fTextAlignH. Int_t TGWin32::fTextAlignH. protected . Text Alignment Horizontal. ; Definition at line 113 of file TGWin32.h. ◆ fTextAlignV. Int_t TGWin32::fTextAlignV. protected . Text Alignment Vertical. ; Definition at line 114 of file TGWin32.h. ◆ fTextMagnitude. Float_t TGWin32::fTextMagnitude. protected . Text Magnitude. ; Definition at line 118 of file TGWin32.h. ◆ fUseSysPointers. Bool_t TGWin32::fUseSysPointers. protected . True when using system mouse pointers. ; Definition at line 112 of file TGWin32.h. ◆ fVisual. GdkVisual* TGWin32::fVisual. protected . Definition at line 108 of file TGWin32.h. ◆ fWindows. XWindow_t* TGWin32::fWindows. private . List of win",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:25192,Modifiability,inherit,inherited,25192,"onRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Write the pixmap wid in the bitmap file pxname. ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculate the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext);  Creates OpenGL context for window ""windowID"". ;  ; virtual Window_t CreateOpenGLWindow (Window_t parentID, UInt_t width, UInt_t height, const std::vector< std::pair< UInt_t, Int_t > > &format);  Create window with special pixel format. Noop everywhere except Cocoa. ;  ; virtual void DeleteOpenGLContext (Int_t wid=0);  Deletes OpenGL context for window ""wid"". ;  ; virtual void DispatchClientMessage (UInt_t messageID);  Force processing of event, sent by SendEvent before. ;  ; virtual UInt_t ExecCommand (TGWin32Command *code);  Executes the command ""code"" coming from the other threads (Win32) ;  ; virtual void Flu",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:29183,Modifiability,inherit,inherited,29183,"ndex"" for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Sets marker size index. ;  ; void SetMarkerStyle (Style_t markerstyle) override;  Sets marker style. ;  ; void SetTextAlign (Short_t talign=11) override;  Sets the text alignment. ;  ; void SetTextColor (Color_t cindex) override;  Sets the color index ""cindex"" for text. ;  ; void SetTextFont (Font_t fontnumber) override;  Sets the current text font number. ;  ; void SetTextSize (Float_t textsize) override;  Sets the current text size to ""textsize"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t SupportsExtension (const char *ext) const;  Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:30811,Modifiability,inherit,inherited,30811,"ual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:31904,Modifiability,inherit,inheritance,31904,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:33903,Modifiability,inherit,inherits,33903,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:34020,Modifiability,inherit,inherits,34020,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:37579,Modifiability,inherit,inherited,37579,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:38874,Modifiability,inherit,inherited,38874,"o a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:39979,Modifiability,inherit,inherited,39979,"t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a new TAttText. ;  ; virtual Short_t GetTextAlign () const;  Return the text alignment. ;  ; virtual Float_t GetTextAngle () const;  Return the text angle. ;  ; virtual Color_t GetTextColor () const;  Return the text color. ;  ; virtual Font_t GetTextFont () const;  Return the text font. ;  ; virtual Float_t GetTextSize () const;  Return the text size. ;  ; virtual Float_t GetTextSizePercent (Float_t size);  Return the text in percent of the pad size. ;  ; virtual void Modify ();  Change current text attributes if necessary. ;  ; virtual void ResetAttText (Option_t *toption="""");  Reset this text attributes to default values. ;  ; virtual void SaveTextAttributes (std::ost",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:41577,Modifiability,inherit,inherited,41577,"xt font. ;  ; virtual Float_t GetTextSize () const;  Return the text size. ;  ; virtual Float_t GetTextSizePercent (Float_t size);  Return the text in percent of the pad size. ;  ; virtual void Modify ();  Change current text attributes if necessary. ;  ; virtual void ResetAttText (Option_t *toption="""");  Reset this text attributes to default values. ;  ; virtual void SaveTextAttributes (std::ostream &out, const char *name, Int_t alidef=12, Float_t angdef=0, Int_t coldef=1, Int_t fondef=61, Float_t sizdef=1);  Save text attributes as C++ statement(s) on output stream out. ;  ; virtual void SetTextAngle (Float_t tangle=0);  Set the text angle. ;  ; virtual void SetTextAttributes ();  Invoke the DialogCanvas Text attributes. ;  ; virtual void SetTextColorAlpha (Color_t tcolor, Float_t talpha);  Set a transparent text color. ;  ; virtual void SetTextSizePixels (Int_t npixels);  Set the text size in pixel. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:43017,Modifiability,inherit,inherited,43017," () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Lock ();  ; static void Unlock ();  ;  Static Public Member Functions inherited from TVirtualX; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualX *& Instance ();  Returns gVirtualX global. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Pub",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:43295,Modifiability,inherit,inherited,43295,"oid SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Lock ();  ; static void Unlock ();  ;  Static Public Member Functions inherited from TVirtualX; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualX *& Instance ();  Returns gVirtualX global. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; s",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:43505,Modifiability,inherit,inherited,43505,"oid SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Lock ();  ; static void Unlock ();  ;  Static Public Member Functions inherited from TVirtualX; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualX *& Instance ();  Returns gVirtualX global. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; s",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:44023,Modifiability,inherit,inherited,44023," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Bool_t AllocColor (GdkColormap *cmap, GdkColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index cid. ;  ; GdkGC * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (GdkColormap *cmap, GdkColor *colors, Int_t ncol",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:44235,Modifiability,inherit,inherited,44235," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Bool_t AllocColor (GdkColormap *cmap, GdkColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index cid. ;  ; GdkGC * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (GdkColormap *cmap, GdkColor *colors, Int_t ncol",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:44447,Modifiability,inherit,inherited,44447," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Bool_t AllocColor (GdkColormap *cmap, GdkColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index cid. ;  ; GdkGC * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (GdkColormap *cmap, GdkColor *colors, Int_t ncol",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:44659,Modifiability,inherit,inherited,44659," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Bool_t AllocColor (GdkColormap *cmap, GdkColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index cid. ;  ; GdkGC * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (GdkColormap *cmap, GdkColor *colors, Int_t ncol",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:45904,Modifiability,inherit,inherited,45904," line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Bool_t AllocColor (GdkColormap *cmap, GdkColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index cid. ;  ; GdkGC * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (GdkColormap *cmap, GdkColor *colors, Int_t ncolors);  Returns the current RGB value for the pixel in the XColor structure. ;  ; void UpdateFillColor ();  ; void UpdateFillStyle ();  Set fill area style index. ;  ; void UpdateLineColor ();  ; void UpdateLineStyle ();  Update line style. ;  ; void UpdateMarkerColor ();  ; void UpdateMarkerStyle ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fBlueDiv;  Blue value divider. ;  ; Int_t fBlueShift;  Bits to left shift blue. ;  ; Float_t fCharacterUpX;  Character Up vector along X. ;  ; Float_t fCharacterUpY;  Character Up vector along Y. ;  ; GdkColormap * fColormap;  Default colormap, 0 if b/w. ;  ; Int_t fDepth;  Number of color planes. ;  ; Bool_t fFillColorModified;  ; Bool_t fFillStyleModified;  ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fLineColorModified;  ; Bool_t fMarkerColorModified;  ; Bool_t fMarkerStyleModified;  ; Bool_t fPenModified;  line syle || width modified ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; TObject *",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:47426,Modifiability,inherit,inherited,47426," ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fLineColorModified;  ; Bool_t fMarkerColorModified;  ; Bool_t fMarkerStyleModified;  ; Bool_t fPenModified;  line syle || width modified ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; TObject * fRefreshTimer;  TGWin32RefreshTimer for GUI thread message handler. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Bool_t fUseSysPointers;  True when using system mouse pointers. ;  ; GdkVisual * fVisual;  ; Handle_t fXEvent;  Current native (GDK) event. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Types; enum  EAlign { ;   kNone; , kTLeft; , kTCenter; , kTRight; , ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void CloseWindow1 ();  D",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:47498,Modifiability,inherit,inherited,47498," ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fLineColorModified;  ; Bool_t fMarkerColorModified;  ; Bool_t fMarkerStyleModified;  ; Bool_t fPenModified;  line syle || width modified ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; TObject * fRefreshTimer;  TGWin32RefreshTimer for GUI thread message handler. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Bool_t fUseSysPointers;  True when using system mouse pointers. ;  ; GdkVisual * fVisual;  ; Handle_t fXEvent;  Current native (GDK) event. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Types; enum  EAlign { ;   kNone; , kTLeft; , kTCenter; , kTRight; , ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void CloseWindow1 ();  D",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:47580,Modifiability,inherit,inherited,47580," ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fLineColorModified;  ; Bool_t fMarkerColorModified;  ; Bool_t fMarkerStyleModified;  ; Bool_t fPenModified;  line syle || width modified ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; TObject * fRefreshTimer;  TGWin32RefreshTimer for GUI thread message handler. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Bool_t fUseSysPointers;  True when using system mouse pointers. ;  ; GdkVisual * fVisual;  ; Handle_t fXEvent;  Current native (GDK) event. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Types; enum  EAlign { ;   kNone; , kTLeft; , kTCenter; , kTRight; , ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void CloseWindow1 ();  D",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:47741,Modifiability,inherit,inherited,47741,"le || width modified ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; TObject * fRefreshTimer;  TGWin32RefreshTimer for GUI thread message handler. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Bool_t fUseSysPointers;  True when using system mouse pointers. ;  ; GdkVisual * fVisual;  ; Handle_t fXEvent;  Current native (GDK) event. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Types; enum  EAlign { ;   kNone; , kTLeft; , kTCenter; , kTRight; , ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void CloseWindow1 ();  Delete current window. ;  ; void DrawImage (FT_Bitmap *source, ULong_t fore, ULong_t back, GdkImage *xim, Int_t bx, Int_t by);  Draw FT_Bitmap bitmap to xim image at position bx,by using specified foreground color. ;  ; Int_t FindColor (ULon",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:47874,Modifiability,inherit,inherited,47874,"d, -1 if no TrueColor visual. ;  ; TObject * fRefreshTimer;  TGWin32RefreshTimer for GUI thread message handler. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Bool_t fUseSysPointers;  True when using system mouse pointers. ;  ; GdkVisual * fVisual;  ; Handle_t fXEvent;  Current native (GDK) event. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Types; enum  EAlign { ;   kNone; , kTLeft; , kTCenter; , kTRight; , ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void CloseWindow1 ();  Delete current window. ;  ; void DrawImage (FT_Bitmap *source, ULong_t fore, ULong_t back, GdkImage *xim, Int_t bx, Int_t by);  Draw FT_Bitmap bitmap to xim image at position bx,by using specified foreground color. ;  ; Int_t FindColor (ULong_t pixel, ULong_t *orgcolors, Int_t ncolors);  Returns index in orgcolors (and new_colors) for pixel. ;  ; GdkImage * GetBackground ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:48110,Modifiability,inherit,inherited,48110,"H;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Bool_t fUseSysPointers;  True when using system mouse pointers. ;  ; GdkVisual * fVisual;  ; Handle_t fXEvent;  Current native (GDK) event. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Types; enum  EAlign { ;   kNone; , kTLeft; , kTCenter; , kTRight; , ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void CloseWindow1 ();  Delete current window. ;  ; void DrawImage (FT_Bitmap *source, ULong_t fore, ULong_t back, GdkImage *xim, Int_t bx, Int_t by);  Draw FT_Bitmap bitmap to xim image at position bx,by using specified foreground color. ;  ; Int_t FindColor (ULong_t pixel, ULong_t *orgcolors, Int_t ncolors);  Returns index in orgcolors (and new_colors) for pixel. ;  ; GdkImage * GetBackground (Int_t x, Int_t y, UInt_t w, UInt_t h);  Get the background of the current window in an XImage. ;  ; void ImgPickPalette (GdkImage *image, Int_t &ncol, Int_t *&R, Int_t *&G, Int_t *&B);  Returns in R G B the ncol colors of the palette us",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:48478,Modifiability,variab,variables,48478,"; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Types; enum  EAlign { ;   kNone; , kTLeft; , kTCenter; , kTRight; , ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void CloseWindow1 ();  Delete current window. ;  ; void DrawImage (FT_Bitmap *source, ULong_t fore, ULong_t back, GdkImage *xim, Int_t bx, Int_t by);  Draw FT_Bitmap bitmap to xim image at position bx,by using specified foreground color. ;  ; Int_t FindColor (ULong_t pixel, ULong_t *orgcolors, Int_t ncolors);  Returns index in orgcolors (and new_colors) for pixel. ;  ; GdkImage * GetBackground (Int_t x, Int_t y, UInt_t w, UInt_t h);  Get the background of the current window in an XImage. ;  ; void ImgPickPalette (GdkImage *image, Int_t &ncol, Int_t *&R, Int_t *&G, Int_t *&B);  Returns in R G B the ncol colors of the palette used by the image. ;  ; Bool_t IsVisible (Int_t x, Int_t y, UInt_t w, UInt_t h);  Test if there is really something to render. ;  ; void MakeOpaqueColors (Int_t percent, ULong_t *orgcolors, Int_t ncolors);  Get RGB values for orgcolors, add percent neutral to the RGB and allocate new_colors. ;  ; void MapColorStruct (ColorS",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:51217,Modifiability,inherit,inherited,51217," x0, Int_t y0, Int_t nx, Int_t ny, Int_t xmin, Int_t ymin, Int_t xmax, Int_t ymax, UChar_t *image, Drawable_t id);  Draw image. ;  ; void RemovePixmap (GdkDrawable *pix);  Remove the pixmap pix. ;  ; void RenderString (Int_t x, Int_t y, ETextMode mode);  Perform the string rendering in the pad. ;  ; void SetColor (GdkGC *gc, Int_t ci);  Set the foreground color in GdkGC. ;  ; void SetInput (Int_t inp);  Set input on or off. ;  ; void SetMarkerType (Int_t type, Int_t n, GdkPoint *xy);  Set marker type. ;  . Private Attributes; FT_Vector fAlign;  alignment vector ;  ; TExMap * fColors;  Hash list of colors. ;  ; GdkCursor * fCursors [kNumCursors];  List of cursors. ;  ; Int_t fMaxNumberOfWindows;  Maximum number of windows. ;  ; XWindow_t * fWindows;  List of windows. ;  . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGWin32.h>. Inheritance diagram for TGWin32:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAlign. enum TGWin32::EAlign. private . Enumeratork",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:51441,Modifiability,inherit,inherited,51441," x0, Int_t y0, Int_t nx, Int_t ny, Int_t xmin, Int_t ymin, Int_t xmax, Int_t ymax, UChar_t *image, Drawable_t id);  Draw image. ;  ; void RemovePixmap (GdkDrawable *pix);  Remove the pixmap pix. ;  ; void RenderString (Int_t x, Int_t y, ETextMode mode);  Perform the string rendering in the pad. ;  ; void SetColor (GdkGC *gc, Int_t ci);  Set the foreground color in GdkGC. ;  ; void SetInput (Int_t inp);  Set input on or off. ;  ; void SetMarkerType (Int_t type, Int_t n, GdkPoint *xy);  Set marker type. ;  . Private Attributes; FT_Vector fAlign;  alignment vector ;  ; TExMap * fColors;  Hash list of colors. ;  ; GdkCursor * fCursors [kNumCursors];  List of cursors. ;  ; Int_t fMaxNumberOfWindows;  Maximum number of windows. ;  ; XWindow_t * fWindows;  List of windows. ;  . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGWin32.h>. Inheritance diagram for TGWin32:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAlign. enum TGWin32::EAlign. private . Enumeratork",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:52082,Modifiability,inherit,inherited,52082,"umber of windows. ;  ; XWindow_t * fWindows;  List of windows. ;  . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGWin32.h>. Inheritance diagram for TGWin32:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAlign. enum TGWin32::EAlign. private . EnumeratorkNone ; kTLeft ; kTCenter ; kTRight ; kMLeft ; kMCenter ; kMRight ; kBLeft ; kBCenter ; kBRight . Definition at line 67 of file TGWin32.h. Constructor & Destructor Documentation. ◆ TGWin32() [1/2]. TGWin32::TGWin32 ; (; ). Default constructor. ; Definition at line 811 of file TGWin32.cxx. ◆ TGWin32() [2/2]. TGWin32::TGWin32 ; (; const char * ; name, . const char * ; title . ). Normal Constructor. ; Definition at line 821 of file TGWin32.cxx. ◆ ~TGWin32(). TGWin32::~TGWin32 ; (; ). virtual . destructor. ; Definition at line 868 of file TGWin32.cxx. Member Function Documentation. ◆ AddPixmap(). Int_t TGWin32::AddPixmap ; (; ULongptr_t ; pix, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . register pixmap ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:53547,Modifiability,variab,variables,53547,"& Destructor Documentation. ◆ TGWin32() [1/2]. TGWin32::TGWin32 ; (; ). Default constructor. ; Definition at line 811 of file TGWin32.cxx. ◆ TGWin32() [2/2]. TGWin32::TGWin32 ; (; const char * ; name, . const char * ; title . ). Normal Constructor. ; Definition at line 821 of file TGWin32.cxx. ◆ ~TGWin32(). TGWin32::~TGWin32 ; (; ). virtual . destructor. ; Definition at line 868 of file TGWin32.cxx. Member Function Documentation. ◆ AddPixmap(). Int_t TGWin32::AddPixmap ; (; ULongptr_t ; pix, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . register pixmap created by TGWin32GLManager ; Reimplemented from TVirtualX.; Definition at line 7436 of file TGWin32.cxx. ◆ AddWindow(). Int_t TGWin32::AddWindow ; (; ULongptr_t ; qwid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Register a window created by Qt as a ROOT window (like InitWindow()). ; Reimplemented from TVirtualX.; Definition at line 7479 of file TGWin32.cxx. ◆ Align(). void TGWin32::Align ; (; void ; ). private . Compute alignment variables. ; The alignment is done on the horizontal string then the rotation is applied on the alignment variables. SetRotation and LayoutGlyphs should have been called before. ; Definition at line 1203 of file TGWin32.cxx. ◆ AllocColor() [1/2]. Bool_t TGWin32::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Find and allocate a color cell according to the color values specified in the ColorStruct_t. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE. ; Reimplemented from TVirtualX.; Definition at line 5756 of file TGWin32.cxx. ◆ AllocColor() [2/2]. Bool_t TGWin32::AllocColor ; (; GdkColormap * ; cmap, . GdkColor * ; color . ). protected . Allocate color in colormap. ; If we are on an <= 8 plane machine we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane true color machine we will calculate the pixel value using: for 15 and 16 bit true colors have 6 bits precision per color however only the 5 most significant bits a",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:53653,Modifiability,variab,variables,53653," ). Default constructor. ; Definition at line 811 of file TGWin32.cxx. ◆ TGWin32() [2/2]. TGWin32::TGWin32 ; (; const char * ; name, . const char * ; title . ). Normal Constructor. ; Definition at line 821 of file TGWin32.cxx. ◆ ~TGWin32(). TGWin32::~TGWin32 ; (; ). virtual . destructor. ; Definition at line 868 of file TGWin32.cxx. Member Function Documentation. ◆ AddPixmap(). Int_t TGWin32::AddPixmap ; (; ULongptr_t ; pix, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . register pixmap created by TGWin32GLManager ; Reimplemented from TVirtualX.; Definition at line 7436 of file TGWin32.cxx. ◆ AddWindow(). Int_t TGWin32::AddWindow ; (; ULongptr_t ; qwid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Register a window created by Qt as a ROOT window (like InitWindow()). ; Reimplemented from TVirtualX.; Definition at line 7479 of file TGWin32.cxx. ◆ Align(). void TGWin32::Align ; (; void ; ). private . Compute alignment variables. ; The alignment is done on the horizontal string then the rotation is applied on the alignment variables. SetRotation and LayoutGlyphs should have been called before. ; Definition at line 1203 of file TGWin32.cxx. ◆ AllocColor() [1/2]. Bool_t TGWin32::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Find and allocate a color cell according to the color values specified in the ColorStruct_t. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE. ; Reimplemented from TVirtualX.; Definition at line 5756 of file TGWin32.cxx. ◆ AllocColor() [2/2]. Bool_t TGWin32::AllocColor ; (; GdkColormap * ; cmap, . GdkColor * ; color . ). protected . Allocate color in colormap. ; If we are on an <= 8 plane machine we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane true color machine we will calculate the pixel value using: for 15 and 16 bit true colors have 6 bits precision per color however only the 5 most significant bits are used in the color index. Except for 16 bits where green uses all",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:15284,Performance,queue,queue,15284,"query font. ;  ; void LookupString (Event_t *event, char *buf, Int_t buflen, UInt_t &keysym) override;  Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ;  ; void LowerWindow (Window_t id) override;  Lower window so it lays below all its siblings. ;  ; void MapRaised (Window_t id) override;  Map window on screen and put on top of all windows. ;  ; void MapSubwindows (Window_t id) override;  Maps all subwindows for the specified window ""id"" in top-to-bottom stacking order. ;  ; void MapWindow (Window_t id) override;  Map window on screen. ;  ; void MoveResizeWindow (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Move and resize a window. ;  ; void MoveWindow (Int_t wid, Int_t x, Int_t y) override;  Move the window wid. ;  ; void MoveWindow (Window_t id, Int_t x, Int_t y) override;  Move a window. ;  ; void NextEvent (Event_t &event) override;  Copies first pending event from event queue to Event_t structure and removes event from queue. ;  ; Int_t OpenDisplay (const char *dpyName=0) override;  Open the display. Return -1 if the opening fails, 0 when ok. ;  ; Int_t OpenPixmap (UInt_t w, UInt_t h) override;  Open a new pixmap. ;  ; Bool_t ParseColor (Colormap_t cmap, const char *cname, ColorStruct_t &color) override;  Parse string cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Overwrites the pixel in the image with",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:15334,Performance,queue,queue,15334,"query font. ;  ; void LookupString (Event_t *event, char *buf, Int_t buflen, UInt_t &keysym) override;  Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ;  ; void LowerWindow (Window_t id) override;  Lower window so it lays below all its siblings. ;  ; void MapRaised (Window_t id) override;  Map window on screen and put on top of all windows. ;  ; void MapSubwindows (Window_t id) override;  Maps all subwindows for the specified window ""id"" in top-to-bottom stacking order. ;  ; void MapWindow (Window_t id) override;  Map window on screen. ;  ; void MoveResizeWindow (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Move and resize a window. ;  ; void MoveWindow (Int_t wid, Int_t x, Int_t y) override;  Move the window wid. ;  ; void MoveWindow (Window_t id, Int_t x, Int_t y) override;  Move a window. ;  ; void NextEvent (Event_t &event) override;  Copies first pending event from event queue to Event_t structure and removes event from queue. ;  ; Int_t OpenDisplay (const char *dpyName=0) override;  Open the display. Return -1 if the opening fails, 0 when ok. ;  ; Int_t OpenPixmap (UInt_t w, UInt_t h) override;  Open a new pixmap. ;  ; Bool_t ParseColor (Colormap_t cmap, const char *cname, ColorStruct_t &color) override;  Parse string cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Overwrites the pixel in the image with",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:16973,Performance,load,loads,16973,"  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Overwrites the pixel in the image with the specified pixel value. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Fill in the primary color components for a specific pixel value. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Query pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Put window on top of window stack. ;  ; Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0) override;  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Read picture data from file and store in ret_data. ;  ; void RemoveWindow (ULongptr_t qwid) override;  Remove a window created by Qt (like CloseWindow1()). ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  Reparent window, make pid the new parent and position the window at position (x,y) in new parent. ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Request Locator position. ;  ; Int_t RequestString (Int_t x, Int_t y, char *text) override;  Request a string. ;  ; void RescaleWindow (Int_t wid, UInt_t w, UInt_t h) override;  Rescale the window wid. ;  ; Int_t ResizePixmap (Int_t wid, UInt_t w, UInt_t h) override;  Resize a pixmap. ;  ; void ResizeWindow (Int_t wid) override;  Resize the current window if necessary. ;  ; void ResizeWindow (Window_t i",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:88479,Performance,load,loaded,88479,"le ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). private . Test if there is really something to render. ; Definition at line 1408 of file TGWin32.cxx. ◆ KeysymToKeycode(). Int_t TGWin32::KeysymToKeycode ; (; UInt_t ; keysym). overridevirtual . Convert a keysym to the appropriate keycode. ; For example keysym is a letter and keycode is the matching keyboard key (which is dependend on the current keyboard mapping). ; Reimplemented from TVirtualX.; Definition at line 6740 of file TGWin32.cxx. ◆ ListFonts(). char ** TGWin32::ListFonts ; (; const char * ; fontname, . Int_t ; max, . Int_t & ; count . ). overridevirtual . Return list of font names matching ""fontname"". ; Reimplemented from TVirtualX.; Definition at line 7231 of file TGWin32.cxx. ◆ LoadQueryFont(). FontStruct_t TGWin32::LoadQueryFont ; (; const char * ; font_name). overridevirtual . Load font and query font. ; If font is not found 0 is returned, otherwise an opaque pointer to the FontStruct_t. Free the loaded font using DeleteFont(). ; Reimplemented from TVirtualX.; Definition at line 5385 of file TGWin32.cxx. ◆ Lock(). void TGWin32::Lock ; (; ). static . Definition at line 938 of file TGWin32.cxx. ◆ LookupString(). void TGWin32::LookupString ; (; Event_t * ; event, . char * ; buf, . Int_t ; buflen, . UInt_t & ; keysym . ). overridevirtual . Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ; In buf a null terminated ASCII string is returned representing the string that is currently mapped to the key code. ; Reimplemented from TVirtualX.; Definition at line 6860 of file TGWin32.cxx. ◆ LowerWindow(). void TGWin32::LowerWindow ; (; Window_t ; id). overridevirtual . Lower window so it lays below all its siblings. ; Reimplemented from TVirtualX.; Definition at line 4714 of file TGWin32.cxx. ◆ MakeOpaqueColors(). void TGWin32::MakeOpaqueColors ; (; Int_t ; percent, . ULong_t * ; orgcolors, . In",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:92954,Performance,queue,queue,92954,"verridevirtual . Map window on screen. ; Reimplemented from TVirtualX.; Definition at line 4609 of file TGWin32.cxx. ◆ MoveResizeWindow(). void TGWin32::MoveResizeWindow ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Move and resize a window. ; Reimplemented from TVirtualX.; Definition at line 4736 of file TGWin32.cxx. ◆ MoveWindow() [1/2]. void TGWin32::MoveWindow ; (; Int_t ; wid, . Int_t ; x, . Int_t ; y . ). overridevirtual . Move the window wid. ; wid : GdkWindow identifier. x : x new window position y : y new window position ; Reimplemented from TVirtualX.; Definition at line 2085 of file TGWin32.cxx. ◆ MoveWindow() [2/2]. void TGWin32::MoveWindow ; (; Window_t ; id, . Int_t ; x, . Int_t ; y . ). overridevirtual . Move a window. ; Reimplemented from TVirtualX.; Definition at line 4726 of file TGWin32.cxx. ◆ NextEvent(). void TGWin32::NextEvent ; (; Event_t & ; event). overridevirtual . Copies first pending event from event queue to Event_t structure and removes event from queue. ; Not all of the event fields are valid for each event type, except fType and fWindow. ; Reimplemented from TVirtualX.; Definition at line 5870 of file TGWin32.cxx. ◆ OpenDisplay(). Int_t TGWin32::OpenDisplay ; (; const char * ; dpyName = 0). overridevirtual . Open the display. Return -1 if the opening fails, 0 when ok. ; Reimplemented from TVirtualX.; Definition at line 971 of file TGWin32.cxx. ◆ OpenPixmap(). Int_t TGWin32::OpenPixmap ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Open a new pixmap. ; w,h : Width and height of the pixmap. ; Reimplemented from TVirtualX.; Definition at line 2099 of file TGWin32.cxx. ◆ ParseColor(). Bool_t TGWin32::ParseColor ; (; Colormap_t ; cmap, . const char * ; cname, . ColorStruct_t & ; color . ). overridevirtual . Parse string cname containing color name, like ""green"" or ""#00FF00"". ; It returns a filled in ColorStruct_t. Returns kFALSE in case parsing failed, kTRUE in case of success. On succ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:93004,Performance,queue,queue,93004,"verridevirtual . Map window on screen. ; Reimplemented from TVirtualX.; Definition at line 4609 of file TGWin32.cxx. ◆ MoveResizeWindow(). void TGWin32::MoveResizeWindow ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Move and resize a window. ; Reimplemented from TVirtualX.; Definition at line 4736 of file TGWin32.cxx. ◆ MoveWindow() [1/2]. void TGWin32::MoveWindow ; (; Int_t ; wid, . Int_t ; x, . Int_t ; y . ). overridevirtual . Move the window wid. ; wid : GdkWindow identifier. x : x new window position y : y new window position ; Reimplemented from TVirtualX.; Definition at line 2085 of file TGWin32.cxx. ◆ MoveWindow() [2/2]. void TGWin32::MoveWindow ; (; Window_t ; id, . Int_t ; x, . Int_t ; y . ). overridevirtual . Move a window. ; Reimplemented from TVirtualX.; Definition at line 4726 of file TGWin32.cxx. ◆ NextEvent(). void TGWin32::NextEvent ; (; Event_t & ; event). overridevirtual . Copies first pending event from event queue to Event_t structure and removes event from queue. ; Not all of the event fields are valid for each event type, except fType and fWindow. ; Reimplemented from TVirtualX.; Definition at line 5870 of file TGWin32.cxx. ◆ OpenDisplay(). Int_t TGWin32::OpenDisplay ; (; const char * ; dpyName = 0). overridevirtual . Open the display. Return -1 if the opening fails, 0 when ok. ; Reimplemented from TVirtualX.; Definition at line 971 of file TGWin32.cxx. ◆ OpenPixmap(). Int_t TGWin32::OpenPixmap ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Open a new pixmap. ; w,h : Width and height of the pixmap. ; Reimplemented from TVirtualX.; Definition at line 2099 of file TGWin32.cxx. ◆ ParseColor(). Bool_t TGWin32::ParseColor ; (; Colormap_t ; cmap, . const char * ; cname, . ColorStruct_t & ; color . ). overridevirtual . Parse string cname containing color name, like ""green"" or ""#00FF00"". ; It returns a filled in ColorStruct_t. Returns kFALSE in case parsing failed, kTRUE in case of success. On succ",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:98584,Performance,load,loads,98584,"Int_t & ; root_x, . Int_t & ; root_y, . Int_t & ; win_x, . Int_t & ; win_y, . UInt_t & ; mask . ). overridevirtual . Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ; The pointer coordinates returned to win_x and win_y are relative to the origin of the specified window. In this case, QueryPointer returns the child that contains the pointer, if any, or else kNone to childw. QueryPointer returns the current logical state of the keyboard buttons and the modifier keys in mask. ; Reimplemented from TVirtualX.; Definition at line 7017 of file TGWin32.cxx. ◆ RaiseWindow(). void TGWin32::RaiseWindow ; (; Window_t ; id). overridevirtual . Put window on top of window stack. ; Reimplemented from TVirtualX.; Definition at line 4695 of file TGWin32.cxx. ◆ ReadGIF(). Pixmap_t TGWin32::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file, . Window_t ; id = 0 . ). overridevirtual . If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ; Otherwise creates pixmap from gif file ; Reimplemented from TVirtualX.; Definition at line 4526 of file TGWin32.cxx. ◆ ReadPictureDataFromFile(). Bool_t TGWin32::ReadPictureDataFromFile ; (; const char * ; filename, . char *** ; ret_data . ). overridevirtual . Read picture data from file and store in ret_data. ; Returns kTRUE in case of success, kFALSE otherwise. ; Reimplemented from TVirtualX.; Definition at line 5673 of file TGWin32.cxx. ◆ RemovePixmap(). void TGWin32::RemovePixmap ; (; GdkDrawable * ; pix). private . Remove the pixmap pix. ; Definition at line 2276 of file TGWin32.cxx. ◆ RemoveWindow(). void TGWin32::RemoveWindow ; (; ULongptr_t ; qwid). overridevirtual . Remove a window created by Qt (like CloseWindow1()). ; Reimplemented from TVirtualX.; Definition at line 7527 of file TGWin32.cxx. ◆ RenderString(). void TGWin32::RenderString ; (; Int_t ; x, . Int_t ; y, . ETextMode ; mode . ). private . Perform the string rendering i",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:113164,Performance,load,loading,113164,".0 and 1.0 ; Reimplemented from TVirtualX.; Definition at line 4097 of file TGWin32.cxx. ◆ SetSelectionOwner(). Bool_t TGWin32::SetSelectionOwner ; (; Window_t ; owner, . Atom_t & ; sel . ). overridevirtual . Assigns owner of Clipboard. ; Reimplemented from TVirtualX.; Definition at line 7681 of file TGWin32.cxx. ◆ SetTextAlign(). void TGWin32::SetTextAlign ; (; Short_t ; talign = 11). overridevirtual . Set text alignment. ; txalh : horizontal text alignment txalv : vertical text alignment ; Reimplemented from TAttText.; Definition at line 4134 of file TGWin32.cxx. ◆ SetTextColor(). void TGWin32::SetTextColor ; (; Color_t ; cindex). overridevirtual . Set color index for text. ; Reimplemented from TAttText.; Definition at line 4194 of file TGWin32.cxx. ◆ SetTextFont() [1/2]. Int_t TGWin32::SetTextFont ; (; char * ; fontname, . ETextSetMode ; mode . ). overridevirtual . Set text font to specified name. ; mode : loading flag mode=0 : search if the font exist (kCheck) mode=1 : search the font and load it if it exists (kLoad) font : font name; Set text font to specified name. This function returns 0 if the specified font is found, 1 if not. ; Reimplemented from TVirtualX.; Definition at line 1552 of file TGWin32.cxx. ◆ SetTextFont() [2/2]. void TGWin32::SetTextFont ; (; Font_t ; fontnumber). overridevirtual . Set specified font. ; Reimplemented from TAttText.; Definition at line 1536 of file TGWin32.cxx. ◆ SetTextMagnitude(). void TGWin32::SetTextMagnitude ; (; Float_t ; mgn = 1). inlineoverridevirtual . Sets the current text magnification factor to ""mgn"". ; Reimplemented from TVirtualX.; Definition at line 219 of file TGWin32.h. ◆ SetTextSize(). void TGWin32::SetTextSize ; (; Float_t ; textsize). overridevirtual . Set current text size. ; Reimplemented from TAttText.; Definition at line 1560 of file TGWin32.cxx. ◆ SetTypeList(). void TGWin32::SetTypeList ; (; Window_t ; win, . Atom_t ; prop, . Atom_t * ; typelist . ). overridevirtual . Add the list of drag and drop type",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:113249,Performance,load,load,113249,".0 and 1.0 ; Reimplemented from TVirtualX.; Definition at line 4097 of file TGWin32.cxx. ◆ SetSelectionOwner(). Bool_t TGWin32::SetSelectionOwner ; (; Window_t ; owner, . Atom_t & ; sel . ). overridevirtual . Assigns owner of Clipboard. ; Reimplemented from TVirtualX.; Definition at line 7681 of file TGWin32.cxx. ◆ SetTextAlign(). void TGWin32::SetTextAlign ; (; Short_t ; talign = 11). overridevirtual . Set text alignment. ; txalh : horizontal text alignment txalv : vertical text alignment ; Reimplemented from TAttText.; Definition at line 4134 of file TGWin32.cxx. ◆ SetTextColor(). void TGWin32::SetTextColor ; (; Color_t ; cindex). overridevirtual . Set color index for text. ; Reimplemented from TAttText.; Definition at line 4194 of file TGWin32.cxx. ◆ SetTextFont() [1/2]. Int_t TGWin32::SetTextFont ; (; char * ; fontname, . ETextSetMode ; mode . ). overridevirtual . Set text font to specified name. ; mode : loading flag mode=0 : search if the font exist (kCheck) mode=1 : search the font and load it if it exists (kLoad) font : font name; Set text font to specified name. This function returns 0 if the specified font is found, 1 if not. ; Reimplemented from TVirtualX.; Definition at line 1552 of file TGWin32.cxx. ◆ SetTextFont() [2/2]. void TGWin32::SetTextFont ; (; Font_t ; fontnumber). overridevirtual . Set specified font. ; Reimplemented from TAttText.; Definition at line 1536 of file TGWin32.cxx. ◆ SetTextMagnitude(). void TGWin32::SetTextMagnitude ; (; Float_t ; mgn = 1). inlineoverridevirtual . Sets the current text magnification factor to ""mgn"". ; Reimplemented from TVirtualX.; Definition at line 219 of file TGWin32.h. ◆ SetTextSize(). void TGWin32::SetTextSize ; (; Float_t ; textsize). overridevirtual . Set current text size. ; Reimplemented from TAttText.; Definition at line 1560 of file TGWin32.cxx. ◆ SetTypeList(). void TGWin32::SetTypeList ; (; Window_t ; win, . Atom_t ; prop, . Atom_t * ; typelist . ). overridevirtual . Add the list of drag and drop type",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:30051,Security,hash,hash,30051,"nt, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:16709,Testability,log,logically,16709,"ining color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Overwrites the pixel in the image with the specified pixel value. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Fill in the primary color components for a specific pixel value. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Query pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Put window on top of window stack. ;  ; Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0) override;  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Read picture data from file and store in ret_data. ;  ; void RemoveWindow (ULongptr_t qwid) override;  Remove a window created by Qt (like CloseWindow1()). ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  Reparent window, make pid the new parent and position the window at position (x,y) in new parent. ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Request Locator position. ;  ; Int_t RequestString (Int_t x, Int_t y, char *text) override;  Request",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:97767,Testability,log,logically,97767,"he fRed, fGreen and fBlue components will be set. ; Reimplemented from TVirtualX.; Definition at line 5776 of file TGWin32.cxx. ◆ QueryColors(). void TGWin32::QueryColors ; (; GdkColormap * ; cmap, . GdkColor * ; colors, . Int_t ; ncolors . ). protected . Returns the current RGB value for the pixel in the XColor structure. ; Definition at line 1176 of file TGWin32.cxx. ◆ QueryPointer() [1/2]. void TGWin32::QueryPointer ; (; Int_t & ; ix, . Int_t & ; iy . ). overridevirtual . Query pointer position. ; ix : X coordinate of pointer iy : Y coordinate of pointer (both coordinates are relative to the origin of the root window) ; Reimplemented from TVirtualX.; Definition at line 2262 of file TGWin32.cxx. ◆ QueryPointer() [2/2]. void TGWin32::QueryPointer ; (; Window_t ; id, . Window_t & ; rootw, . Window_t & ; childw, . Int_t & ; root_x, . Int_t & ; root_y, . Int_t & ; win_x, . Int_t & ; win_y, . UInt_t & ; mask . ). overridevirtual . Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ; The pointer coordinates returned to win_x and win_y are relative to the origin of the specified window. In this case, QueryPointer returns the child that contains the pointer, if any, or else kNone to childw. QueryPointer returns the current logical state of the keyboard buttons and the modifier keys in mask. ; Reimplemented from TVirtualX.; Definition at line 7017 of file TGWin32.cxx. ◆ RaiseWindow(). void TGWin32::RaiseWindow ; (; Window_t ; id). overridevirtual . Put window on top of window stack. ; Reimplemented from TVirtualX.; Definition at line 4695 of file TGWin32.cxx. ◆ ReadGIF(). Pixmap_t TGWin32::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file, . Window_t ; id = 0 . ). overridevirtual . If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ; Otherwise creates pixmap from gif file ; Reimplemented from TVirtualX.; Definition at line 4526 of file TGWin32.cxx. ◆ ReadPictu",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32.html:98090,Testability,log,logical,98090,"re. ; Definition at line 1176 of file TGWin32.cxx. ◆ QueryPointer() [1/2]. void TGWin32::QueryPointer ; (; Int_t & ; ix, . Int_t & ; iy . ). overridevirtual . Query pointer position. ; ix : X coordinate of pointer iy : Y coordinate of pointer (both coordinates are relative to the origin of the root window) ; Reimplemented from TVirtualX.; Definition at line 2262 of file TGWin32.cxx. ◆ QueryPointer() [2/2]. void TGWin32::QueryPointer ; (; Window_t ; id, . Window_t & ; rootw, . Window_t & ; childw, . Int_t & ; root_x, . Int_t & ; root_y, . Int_t & ; win_x, . Int_t & ; win_y, . UInt_t & ; mask . ). overridevirtual . Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ; The pointer coordinates returned to win_x and win_y are relative to the origin of the specified window. In this case, QueryPointer returns the child that contains the pointer, if any, or else kNone to childw. QueryPointer returns the current logical state of the keyboard buttons and the modifier keys in mask. ; Reimplemented from TVirtualX.; Definition at line 7017 of file TGWin32.cxx. ◆ RaiseWindow(). void TGWin32::RaiseWindow ; (; Window_t ; id). overridevirtual . Put window on top of window stack. ; Reimplemented from TVirtualX.; Definition at line 4695 of file TGWin32.cxx. ◆ ReadGIF(). Pixmap_t TGWin32::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file, . Window_t ; id = 0 . ). overridevirtual . If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ; Otherwise creates pixmap from gif file ; Reimplemented from TVirtualX.; Definition at line 4526 of file TGWin32.cxx. ◆ ReadPictureDataFromFile(). Bool_t TGWin32::ReadPictureDataFromFile ; (; const char * ; filename, . char *** ; ret_data . ). overridevirtual . Read picture data from file and store in ret_data. ; Returns kTRUE in case of success, kFALSE otherwise. ; Reimplemented from TVirtualX.; Definition at line 5673 of file TGWin32.cxx. ◆ Rem",MatchSource.WIKI,doc/master/classTGWin32.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:2213,Availability,error,error,2213,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:2302,Availability,error,error,2302,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:2457,Availability,error,error,2457,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:2754,Availability,error,error,2754,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:7428,Availability,error,error,7428,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGWin32CallBack fCallBack;  ; void * fParam;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwr",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:2219,Integrability,message,message,2219,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:2760,Integrability,message,message,2760,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:3962,Integrability,message,message,3962,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const ch",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:7434,Integrability,message,message,7434,"ead (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGWin32CallBack fCallBack;  ; void * fParam;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwr",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:7807,Integrability,message,message,7807,"rimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGWin32CallBack fCallBack;  ; void * fParam;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject =",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:452,Modifiability,inherit,inherited,452,". ROOT: TGWin32CallBackObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TGWin32CallBackObject Class Reference. . Definition at line 90 of file TGWin32ProxyBase.cxx. Public Member Functions;  TGWin32CallBackObject (TGWin32CallBack cb, void *p);  ;  ~TGWin32CallBackObject ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object i",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:1849,Modifiability,inherit,inheritance,1849,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:4060,Modifiability,inherit,inherits,4060,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a b",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:4177,Modifiability,inherit,inherits,4177,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not pro",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:8200,Modifiability,inherit,inherited,8200,"Object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGWin32CallBack fCallBack;  ; void * fParam;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObject",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:8856,Modifiability,inherit,inherited,8856,"al Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Public Attributes; TGWin32CallBack fCallBack;  ; void * fParam;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for TGWin32CallBackObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGWin32CallBackObject(). TGWin32CallBackObject::TGWin32CallBackObject ; (; TGWin32CallBack ; cb, . void * ; p . ). inline . Defini",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:9359,Modifiability,inherit,inherited,9359," 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for TGWin32CallBackObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGWin32CallBackObject(). TGWin32CallBackObject::TGWin32CallBackObject ; (; TGWin32CallBack ; cb, . void * ; p . ). inline . Definition at line 95 of file TGWin32ProxyBase.cxx. ◆ ~TGWin32CallBackObject(). TGWin32CallBackObject::~TGWin32CallBackObject ; (; ). inline . Definition at line 96 of file TGWin32ProxyBase.cxx. Member Data Documentation. ◆ fCallBack. TGWin32CallBack TGWin32CallBackObject::fCallBack. Definition at line 92 of file TGWin32ProxyBase.cxx. ◆ fParam. void* TGWin32CallBackObject::fParam. Definition at line 93 of file TGWin32ProxyBase.cxx. graf2d/win32gdk/src/TGWin32ProxyBase.cxx. TGWin32CallBackObject. ROOT master - Referenc",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:9458,Modifiability,inherit,inherited,9458," 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for TGWin32CallBackObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGWin32CallBackObject(). TGWin32CallBackObject::TGWin32CallBackObject ; (; TGWin32CallBack ; cb, . void * ; p . ). inline . Definition at line 95 of file TGWin32ProxyBase.cxx. ◆ ~TGWin32CallBackObject(). TGWin32CallBackObject::~TGWin32CallBackObject ; (; ). inline . Definition at line 96 of file TGWin32ProxyBase.cxx. Member Data Documentation. ◆ fCallBack. TGWin32CallBack TGWin32CallBackObject::fCallBack. Definition at line 92 of file TGWin32ProxyBase.cxx. ◆ fParam. void* TGWin32CallBackObject::fParam. Definition at line 93 of file TGWin32ProxyBase.cxx. graf2d/win32gdk/src/TGWin32ProxyBase.cxx. TGWin32CallBackObject. ROOT master - Referenc",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32CallBackObject.html:3691,Security,hash,hash,3691," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; virtual TClass * IsA () const;  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other obje",MatchSource.WIKI,doc/master/classTGWin32CallBackObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32CallBackObject.html
https://root.cern/doc/master/classTGWin32GLManager.html:5522,Availability,error,error,5522,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:5611,Availability,error,error,5611,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:5766,Availability,error,error,5766,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:6063,Availability,error,error,6063,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:10147,Availability,error,error,10147,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLManager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Versi",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:5528,Integrability,message,message,5528,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:6069,Integrability,message,message,6069,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:7059,Integrability,message,message,7059,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:10153,Integrability,message,message,10153,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLManager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Versi",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:10526,Integrability,message,message,10526," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLManager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TGLManager *& Instance ();  Return the global GL Manager. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functio",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:2090,Modifiability,inherit,inherited,2090,"nd) override;  ; void MarkForDirectCopy (Int_t devInd, Bool_t) override;  ; void PaintSingleObject (TVirtualGLPainter *) override;  ; void PanObject (TVirtualGLPainter *o, Int_t x, Int_t y) override;  ; Bool_t PlotSelected (TVirtualGLPainter *plot, Int_t px, Int_t py) override;  ; void PrintViewer (TVirtualViewer3D *vv) override;  ; void ReadGLBuffer (Int_t devInd) override;  ; Bool_t ResizeOffScreenDevice (Int_t devInd, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Create new DIB if needed. ;  ; Bool_t SelectManip (TVirtualGLManip *manip, const TGLCamera *camera, const TGLRect *rect, const TGLBoundingBox *sceneBox) override;  ; void SelectOffScreenDevice (Int_t devInd) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLManager;  TGLManager ();  ;  TGLManager (const TGLManager &)=delete;  ; TGLManager & operator= (const TGLManager &)=delete;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TC",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:2325,Modifiability,inherit,inherited,2325,"nd) override;  ; void MarkForDirectCopy (Int_t devInd, Bool_t) override;  ; void PaintSingleObject (TVirtualGLPainter *) override;  ; void PanObject (TVirtualGLPainter *o, Int_t x, Int_t y) override;  ; Bool_t PlotSelected (TVirtualGLPainter *plot, Int_t px, Int_t py) override;  ; void PrintViewer (TVirtualViewer3D *vv) override;  ; void ReadGLBuffer (Int_t devInd) override;  ; Bool_t ResizeOffScreenDevice (Int_t devInd, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Create new DIB if needed. ;  ; Bool_t SelectManip (TVirtualGLManip *manip, const TGLCamera *camera, const TGLRect *rect, const TGLBoundingBox *sceneBox) override;  ; void SelectOffScreenDevice (Int_t devInd) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLManager;  TGLManager ();  ;  TGLManager (const TGLManager &)=delete;  ; TGLManager & operator= (const TGLManager &)=delete;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TC",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:4065,Modifiability,inherit,inherited,4065,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:5158,Modifiability,inherit,inheritance,5158,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:7157,Modifiability,inherit,inherits,7157,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:7274,Modifiability,inherit,inherits,7274,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:11027,Modifiability,inherit,inherited,11027,"merNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLManager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TGLManager *& Instance ();  Return the global GL Manager. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TGWin3",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:11311,Modifiability,inherit,inherited,11311," warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLManager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TGLManager *& Instance ();  Return the global GL Manager. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TGWin32GLManager (const TGWin32GLManager &);  ; Bool_t CreateDIB (TGLContext &ctx) const;  Create DIB section to read GL buffer into. ;  ; TGWin32GLManager & operator= (const TGWin32GLManager &);  . Private Attributes; TGWin32GLImpl * fPimpl;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKe",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:11521,Modifiability,inherit,inherited,11521," warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLManager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TGLManager *& Instance ();  Return the global GL Manager. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TGWin32GLManager (const TGWin32GLManager &);  ; Bool_t CreateDIB (TGLContext &ctx) const;  Create DIB section to read GL buffer into. ;  ; TGWin32GLManager & operator= (const TGWin32GLManager &);  . Private Attributes; TGWin32GLImpl * fPimpl;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKe",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:12324,Modifiability,inherit,inherited,12324,"ss_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TGWin32GLManager (const TGWin32GLManager &);  ; Bool_t CreateDIB (TGLContext &ctx) const;  Create DIB section to read GL buffer into. ;  ; TGWin32GLManager & operator= (const TGWin32GLManager &);  . Private Attributes; TGWin32GLImpl * fPimpl;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TGWin32GL.h>. Inheritance diagram for TGWin32GLM",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:12965,Modifiability,inherit,inherited,12965," ; Bool_t CreateDIB (TGLContext &ctx) const;  Create DIB section to read GL buffer into. ;  ; TGWin32GLManager & operator= (const TGWin32GLManager &);  . Private Attributes; TGWin32GLImpl * fPimpl;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TGWin32GL.h>. Inheritance diagram for TGWin32GLManager:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGWin32GLManager() [1/2]. TGWin32GLManager::TGWin32GLManager ; (; ). Definition at line 229 of file TGWin32GL.cxx. ◆ ~TGWin32GLManager(). TGWin32GLManager::~TGWin32GLManager ; (; ). override . Definition at line 238 of file TGWin32GL.cxx. ◆ TGWin32GLManager() [2/2]. TGWin32GLManager::TGWin32GLManager ; (; const TGWin32GLManager & ; ). private . Member Function Documentation. ◆ AttachOffScreenDevice(). Bool_t TGWin32GLManager::AttachOffScreenDevice ; (; Int_t ; ctxInd, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:13064,Modifiability,inherit,inherited,13064," ; Bool_t CreateDIB (TGLContext &ctx) const;  Create DIB section to read GL buffer into. ;  ; TGWin32GLManager & operator= (const TGWin32GLManager &);  . Private Attributes; TGWin32GLImpl * fPimpl;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TGWin32GL.h>. Inheritance diagram for TGWin32GLManager:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGWin32GLManager() [1/2]. TGWin32GLManager::TGWin32GLManager ; (; ). Definition at line 229 of file TGWin32GL.cxx. ◆ ~TGWin32GLManager(). TGWin32GLManager::~TGWin32GLManager ; (; ). override . Definition at line 238 of file TGWin32GL.cxx. ◆ TGWin32GLManager() [2/2]. TGWin32GLManager::TGWin32GLManager ; (; const TGWin32GLManager & ; ). private . Member Function Documentation. ◆ AttachOffScreenDevice(). Bool_t TGWin32GLManager::AttachOffScreenDevice ; (; Int_t ; ctxInd, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:13269,Modifiability,inherit,inherited,13269,"pl;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TGWin32GL.h>. Inheritance diagram for TGWin32GLManager:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGWin32GLManager() [1/2]. TGWin32GLManager::TGWin32GLManager ; (; ). Definition at line 229 of file TGWin32GL.cxx. ◆ ~TGWin32GLManager(). TGWin32GLManager::~TGWin32GLManager ; (; ). override . Definition at line 238 of file TGWin32GL.cxx. ◆ TGWin32GLManager() [2/2]. TGWin32GLManager::TGWin32GLManager ; (; const TGWin32GLManager & ; ). private . Member Function Documentation. ◆ AttachOffScreenDevice(). Bool_t TGWin32GLManager::AttachOffScreenDevice ; (; Int_t ; ctxInd, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Implements TGLManager.; Definition at line 337 of file TGWin32GL.cxx. ◆ Class(). static TClass * TGWin32GLManager::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name()",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32GLManager.html:3193,Security,hash,hash,3193,"Manager & operator= (const TGLManager &)=delete;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTGWin32GLManager.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32GLManager.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:1307,Availability,mask,mask,1307,"s ; TGWin32VirtualXProxy Class Reference. . Definition at line 30 of file TGWin32VirtualXProxy.h. Public Member Functions;  TGWin32VirtualXProxy ();  ;  TGWin32VirtualXProxy (const char *name, const char *title);  ;  ~TGWin32VirtualXProxy () override;  ; Int_t AddWindow (ULongptr_t qwid, UInt_t w, UInt_t h) override;  Registers a window created by Qt as a ROOT window. ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Allocates a read-only colormap entry corresponding to the closest RGB value supported by the hardware. ;  ; void Bell (Int_t percent) override;  Sets the sound bell. Percent is loudness from -100% to 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Changes the components specified by the mask in gval for the specified GC. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr) override;  Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ;  ; Bool_t CheckEvent (Window_t id, EGEventType type, Event_t &ev) override;  Check if there is for window ""id"" an event of type ""type"". ;  ; void ClearArea (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Paints a rectangular area in the specified window ""id"" accord",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:3462,Availability,mask,mask,3462,"s the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ;  ; void CloseDisplay () override;  Closes connection to display server and destroys all windows. ;  ; void ClosePixmap () override;  Deletes current pixmap. ;  ; void CloseWindow () override;  Deletes current window. ;  ; void ConvertPrimarySelection (Window_t id, Atom_t clipboard, Time_t when) override;  Causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Requests that the specified selection be converted to the specified target type. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y) override;  Combines the specified rectangle of ""src"" with the specified rectangle of ""dest"" according to the ""gc"". ;  ; void CopyGC (GContext_t org, GContext_t dest, Mask_t mask) override;  Copies the specified components from the source GC ""org"" to the destination GC ""dest"". ;  ; void CopyPixmap (Int_t wid, Int_t xpos, Int_t ypos) override;  Copies the pixmap ""wid"" at the position [xpos,ypos] in the current window. ;  ; Pixmap_t CreateBitmap (Drawable_t id, const char *bitmap, UInt_t width, UInt_t height) override;  Creates a bitmap (i.e. ;  ; Cursor_t CreateCursor (ECursor cursor) override;  Creates the specified cursor. ;  ; GContext_t CreateGC (Drawable_t id, GCValues_t *gval) override;  Creates a graphics context using the provided GCValues_t *gval structure. ;  ; Drawable_t CreateImage (UInt_t width, UInt_t height) override;  Allocates the memory needed for an drawable. ;  ; Bool_t CreatePictureFromData (Drawable_t id, char **data, Pixmap_t &pict, Pixmap_t &pict_mask, PictureAttributes_t &attr) override;  Creates a picture pict from data in bitmap format. ;  ; Bool_t CreatePictureFromFile (Drawable_t id, const char *filename, Pixmap_t &pict, Pixmap_t &pict_mask, PictureA",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:8109,Availability,mask,mask,8109,"a (Int_t n, TPoint *xy) override;  Fills area described by the polygon. ;  ; void DrawLine (Drawable_t id, GContext_t gc, Int_t x1, Int_t y1, Int_t x2, Int_t y2) override;  Uses the components of the specified GC to draw a line between the specified set of points (x1, y1) and (x2, y2). ;  ; void DrawLine (Int_t x1, Int_t y1, Int_t x2, Int_t y2) override;  Draws a line. ;  ; void DrawPolyLine (Int_t n, TPoint *xy) override;  Draws a line through all points in the list. ;  ; void DrawPolyMarker (Int_t n, TPoint *xy) override;  Draws ""n"" markers with the current attributes at position [x,y]. ;  ; void DrawRectangle (Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ;  ; void DrawSegments (Drawable_t id, GContext_t gc, Segment_t *seg, Int_t nseg) override;  Draws multiple line segments. ;  ; void DrawString (Drawable_t id, GContext_t gc, Int_t x, Int_t y, const char *s, Int_t len) override;  Each character image, as defined by the font in the GC, is treated as an additional mask for a fill operation on the drawable. ;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const char *text, ETextMode mode) override;  Draws a text string using current font. ;  ; void DrawText (Int_t, Int_t, Float_t, Float_t, const wchar_t *, ETextMode) override;  Draws a text string using current font. ;  ; Bool_t EmptyRegion (Region_t reg) override;  Returns kTRUE if the region reg is empty. ;  ; Bool_t EqualRegion (Region_t rega, Region_t regb) override;  Returns kTRUE if the two regions have the same offset, size, and shape. ;  ; Int_t EventsPending () override;  Return number of pending events. ;  ; void FillPolygon (Window_t id, GContext_t gc, Point_t *points, Int_t npnt) override;  Fills the region closed by the specified path. ;  ; void FillRectangle (Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Fills the specified rectangle defined by [x,y] [x+w,y] [",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:11223,Availability,mask,mask,11223,"it planes). ;  ; Display_t GetDisplay () const override;  Returns handle to display (might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. ;  ; Int_t GetDoubleBuffer (Int_t wid) override;  Queries the double buffer value for the window ""wid"". ;  ; EDrawMode GetDrawMode ();  ; Color_t GetFillColor () const override;  Return the fill area color. ;  ; Style_t GetFillStyle () const override;  Return the fill area style. ;  ; FontH_t GetFontHandle (FontStruct_t fs) override;  Returns the font handle of the specified font structure ""fs"". ;  ; void GetFontProperties (FontStruct_t font, Int_t &max_ascent, Int_t &max_descent) override;  Returns the font properties. ;  ; FontStruct_t GetFontStruct (FontH_t fh) override;  Retrieves the associated font structure of the font specified font handle ""fh"". ;  ; void GetGCValues (GContext_t gc, GCValues_t &gval) override;  Returns the components specified by the mask in ""gval"" for the specified GC ""gc"" (see also the GCValues_t structure) ;  ; void GetGeometry (Int_t wid, Int_t &x, Int_t &y, UInt_t &w, UInt_t &h) override;  Returns position and size of window ""wid"". ;  ; void GetImageSize (Drawable_t id, UInt_t &width, UInt_t &height) override;  Returns the width and height of the image id. ;  ; Window_t GetInputFocus () override;  Returns the window id of the window having the input focus. ;  ; Color_t GetLineColor () const override;  Return the line color. ;  ; Style_t GetLineStyle () const override;  Return the line style. ;  ; Width_t GetLineWidth () const override;  Return the line width. ;  ; Color_t GetMarkerColor () const override;  Return the marker color. ;  ; Size_t GetMarkerSize () const override;  Return the marker size. ;  ; Style_t GetMarkerStyle () const override;  Return the marker style. ;  ; Handle_t GetNativeEvent () const override;  Returns the current native event handle. ;  ; Window_t GetParent (Window_t id) const override;  might be thread unsafe (?) ;  ; void GetPaste",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:19278,Availability,mask,mask,19278,"ed colormap. ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns kTRUE if the point [x, y] is contained in the region reg. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Returns a region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Overwrites the pixel in the image with the specified pixel value. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Returns the current RGB value for the pixel in the ""color"" structure. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Returns the pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Raises the specified window to the top of the stack so that no sibling window obscures it. ;  ; void ReadGIF (Int_t x0, Int_t y0, const char *file);  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Reads picture data from file ""filename"" and store it in ""ret_data"". ;  ; void RemoveWindow (ULongptr_t qwid) override;  Removes the created by Qt window ""qwid"". ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  If the specified window is mapped, ReparentWindow automatically performs an UnmapWindow request on it, removes it from its current position in the hierarchy, and inserts it as the child of the specified parent. ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Requests Locator position. ;  ; Int_t Request",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:23481,Availability,mask,mask,23481,"r is in the window ""id"". ;  ; void SetDashes (GContext_t gc, Int_t offset, const char *dash_list, Int_t n) override;  Sets the dash-offset and dash-list attributes for dashed line styles in the specified GC. ;  ; void SetDNDAware (Window_t win, Atom_t *typelist) override;  Add XdndAware property and the list of drag and drop types to the Window win. ;  ; void SetDoubleBuffer (Int_t wid, Int_t mode) override;  Sets the double buffer on/off on the window ""wid"". ;  ; void SetDoubleBufferOFF () override;  Turns double buffer mode off. ;  ; void SetDoubleBufferON () override;  Turns double buffer mode on. ;  ; void SetDrawMode (EDrawMode mode) override;  Sets the drawing mode. ;  ; void SetFillAttributes () override;  Invoke the DialogCanvas Fill attributes. ;  ; void SetFillColor (Color_t cindex) override;  Set the fill area color. ;  ; void SetFillStyle (Style_t style) override;  Set the fill area style. ;  ; void SetForeground (GContext_t gc, ULong_t foreground) override;  Sets the foreground color for the specified GC (shortcut for ChangeGC with only foreground mask set). ;  ; void SetIconName (Window_t id, char *name) override;  Sets the window icon name. ;  ; void SetIconPixmap (Window_t id, Pixmap_t pix) override;  Sets the icon name pixmap. ;  ; void SetInputFocus (Window_t id) override;  Changes the input focus to specified window ""id"". ;  ; void SetKeyAutoRepeat (Bool_t on=kTRUE) override;  Turns key auto repeat on (kTRUE) or off (kFALSE). ;  ; void SetLineAttributes () override;  Invoke the DialogCanvas Line attributes. ;  ; void SetLineColor (Color_t cindex) override;  Set the line color. ;  ; void SetLineStyle (Style_t linestyle) override;  Set the line style. ;  ; void SetLineType (Int_t n, Int_t *dash) override;  Sets the line type. ;  ; void SetLineWidth (Width_t width) override;  Set the line width. ;  ; void SetMarkerAttributes () override;  Invoke the DialogCanvas Marker attributes. ;  ; void SetMarkerColor (Color_t cindex) override;  Set the marker col",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:27332,Availability,mask,mask,27332,"ckground pixmap of the window ""id"" to the specified pixmap ""pxm"". ;  ; void SetWindowName (Window_t id, char *name) override;  Sets the window name. ;  ; void SetWMPosition (Window_t id, Int_t x, Int_t y) override;  Tells the window manager the desired position [x,y] of window ""id"". ;  ; void SetWMSize (Window_t id, UInt_t w, UInt_t h) override;  Tells window manager the desired size of window ""id"". ;  ; void SetWMSizeHints (Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc) override;  Gives the window manager minimum and maximum size hints of the window ""id"". ;  ; void SetWMState (Window_t id, EInitialState state) override;  Sets the initial state of the window ""id"": either kNormalState or kIconicState. ;  ; void SetWMTransientHint (Window_t id, Window_t main_id) override;  Tells window manager that the window ""id"" is a transient window of the window ""main_id"". ;  ; void ShapeCombineMask (Window_t id, Int_t x, Int_t y, Pixmap_t mask) override;  The Non-rectangular Window Shape Extension adds non-rectangular windows to the System. ;  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtracts regb from rega and stores the results in result. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of the string ""s"" in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  Translates coordinates in one window to the coordinate space of another window. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Updates the destination region from a union of the specified rectangle and the specified source region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Computes the union of two regions. ;  ; void UnmapWindow (Window_t id) override;  Unmaps the specified window ""id"". ;  ; void U",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:33392,Availability,error,error,33392,""" for drawing lines. ;  ; void SetLineStyle (Style_t linestyle) override;  Sets the line style. ;  ; void SetLineWidth (Width_t width) override;  Sets the line width. ;  ; void SetMarkerColor (Color_t cindex) override;  Sets color index ""cindex"" for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Sets marker size index. ;  ; void SetMarkerStyle (Style_t markerstyle) override;  Sets marker style. ;  ; void SetTextAlign (Short_t talign=11) override;  Sets the text alignment. ;  ; void SetTextColor (Color_t cindex) override;  Sets the color index ""cindex"" for text. ;  ; void SetTextFont (Font_t fontnumber) override;  Sets the current text font number. ;  ; void SetTextSize (Float_t textsize) override;  Sets the current text size to ""textsize"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t SupportsExtension (const char *ext) const;  Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ; virtual void Sync (Int_t mode);  Set synchronisation on or off. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of o",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:36613,Availability,error,error,36613,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:36702,Availability,error,error,36702,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:36857,Availability,error,error,36857,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:37154,Availability,error,error,37154,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:41238,Availability,error,error,41238,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:48294,Availability,ping,ping,48294,"nst char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TGWin32ProxyBase; static void GlobalLock ();  lock any proxy (client thread) ;  ; static void GlobalUnlock ();  unlock any proxy (client thread) ;  ; static Bool_t IsGloballyLocked ();  Check the status of the lock. ;  ; static void Lock ();  enter critical section ;  ; static Bool_t Ping ();  send ping messsage to server thread ;  ; static void Unlock ();  leave critical section ;  . Static Protected Attributes; static TVirtualX * fgRealObject = 0;  ;  Static Protected Attributes inherited from TGWin32ProxyBase; static Long_t fgLock = 0;  fgLock=1 - all client threads locked ;  ; static UInt_t fMaxResponseTime = 0;  max period for waiting response from server thread ;  . Friends; class TGWin32;  . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCa",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:49746,Availability,ping,ping,49746,"rs;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Attributes inherited from TGWin32ProxyBase; static ULong_t fgMainThreadId = 0;  main thread ID ;  ; static ULong_t fgPingMessageId = 0;  ping message ID ;  ; static ULong_t fgPostMessageId = 0;  post message ID ;  ; static ULong_t fgUserThreadId = 0;  user (e.g. python) thread ID ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGWin32ProxyBase; virtual Bool_t ForwardCallBack (Bool_t sync);  if sync is kTRUE: ;  ; virtual void SendExitMessage ();  send exit message to server thread ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Att",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:54040,Availability,mask,mask,54040,". ; If no cell could be allocated it returns kFALSE, otherwise kTRUE.; The pixel value is set to default. Let system think we could allocate color.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the values actually used in the cmap . Reimplemented from TVirtualX. ◆ Bell(). void TGWin32VirtualXProxy::Bell ; (; Int_t ; percent). overridevirtual . Sets the sound bell. Percent is loudness from -100% to 100%. ; Reimplemented from TVirtualX. ◆ ChangeActivePointerGrab(). void TGWin32VirtualXProxy::ChangeActivePointerGrab ; (; Window_t ; , . UInt_t ; , . Cursor_t ;  . ). overridevirtual . Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ; Reimplemented from TVirtualX. ◆ ChangeGC(). void TGWin32VirtualXProxy::ChangeGC ; (; GContext_t ; gc, . GCValues_t * ; gval . ). overridevirtual . Changes the components specified by the mask in gval for the specified GC. ; Parameters. [in]gcspecifies the GC to be changed ; [in]gvalspecifies the mask and the values to be set. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ ChangeProperties(). void TGWin32VirtualXProxy::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Reimplemented from TVirtualX. ◆ ChangeProperty(). void TGWin32VirtualXProxy::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the propert",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:54150,Availability,mask,mask,54150,"efault. Let system think we could allocate color.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the values actually used in the cmap . Reimplemented from TVirtualX. ◆ Bell(). void TGWin32VirtualXProxy::Bell ; (; Int_t ; percent). overridevirtual . Sets the sound bell. Percent is loudness from -100% to 100%. ; Reimplemented from TVirtualX. ◆ ChangeActivePointerGrab(). void TGWin32VirtualXProxy::ChangeActivePointerGrab ; (; Window_t ; , . UInt_t ; , . Cursor_t ;  . ). overridevirtual . Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ; Reimplemented from TVirtualX. ◆ ChangeGC(). void TGWin32VirtualXProxy::ChangeGC ; (; GContext_t ; gc, . GCValues_t * ; gval . ). overridevirtual . Changes the components specified by the mask in gval for the specified GC. ; Parameters. [in]gcspecifies the GC to be changed ; [in]gvalspecifies the mask and the values to be set. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ ChangeProperties(). void TGWin32VirtualXProxy::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Reimplemented from TVirtualX. ◆ ChangeProperty(). void TGWin32VirtualXProxy::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpret the type but simply passes it back to an application that migh",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:55530,Availability,mask,mask,55530,"emented from TVirtualX. ◆ ChangeProperty(). void TGWin32VirtualXProxy::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpret the type but simply passes it back to an application that might ask about the window properties ; [in]datathe property data ; [in]lenthe length of the specified data format . Reimplemented from TVirtualX. ◆ ChangeWindowAttributes(). void TGWin32VirtualXProxy::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). overridevirtual . Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ; The mask data member of ""attr"" specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits; if it is zero, the attributes are ignored. ; Reimplemented from TVirtualX. ◆ CheckEvent(). Bool_t TGWin32VirtualXProxy::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; Reimplemented from TVirtualX.; Definition at line 312 of file TGWin32VirtualXProxy.cxx. ◆ ClearArea(). void TGWin32VirtualXProxy::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented from TVirtualX. ◆ ClearWindow() [1/2]. void T",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:55636,Availability,mask,mask,55636,"m_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpret the type but simply passes it back to an application that might ask about the window properties ; [in]datathe property data ; [in]lenthe length of the specified data format . Reimplemented from TVirtualX. ◆ ChangeWindowAttributes(). void TGWin32VirtualXProxy::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). overridevirtual . Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ; The mask data member of ""attr"" specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits; if it is zero, the attributes are ignored. ; Reimplemented from TVirtualX. ◆ CheckEvent(). Bool_t TGWin32VirtualXProxy::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; Reimplemented from TVirtualX.; Definition at line 312 of file TGWin32VirtualXProxy.cxx. ◆ ClearArea(). void TGWin32VirtualXProxy::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented from TVirtualX. ◆ ClearWindow() [1/2]. void TGWin32VirtualXProxy::ClearWindow ; (; ). overridevirtual . Clears the entire area of the current window. ; Reim",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:55692,Availability,mask,mask,55692,"m_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpret the type but simply passes it back to an application that might ask about the window properties ; [in]datathe property data ; [in]lenthe length of the specified data format . Reimplemented from TVirtualX. ◆ ChangeWindowAttributes(). void TGWin32VirtualXProxy::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). overridevirtual . Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ; The mask data member of ""attr"" specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits; if it is zero, the attributes are ignored. ; Reimplemented from TVirtualX. ◆ CheckEvent(). Bool_t TGWin32VirtualXProxy::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; Reimplemented from TVirtualX.; Definition at line 312 of file TGWin32VirtualXProxy.cxx. ◆ ClearArea(). void TGWin32VirtualXProxy::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ; Parameters. [in]idspecifies the window ; [in]x,ycoordinates, which are relative to the origin ; [in]w,hthe width and height which define the rectangle dimensions . Reimplemented from TVirtualX. ◆ ClearWindow() [1/2]. void TGWin32VirtualXProxy::ClearWindow ; (; ). overridevirtual . Clears the entire area of the current window. ; Reim",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:59242,Availability,mask,mask,59242," ; , . Atom_t & ; , . Time_t & ;  . ). overridevirtual . Requests that the specified selection be converted to the specified target type. ; Reimplemented from TVirtualX. ◆ CopyArea(). void TGWin32VirtualXProxy::CopyArea ; (; Drawable_t ; src, . Drawable_t ; dest, . GContext_t ; gc, . Int_t ; src_x, . Int_t ; src_y, . UInt_t ; width, . UInt_t ; height, . Int_t ; dest_x, . Int_t ; dest_y . ). overridevirtual . Combines the specified rectangle of ""src"" with the specified rectangle of ""dest"" according to the ""gc"". ; Parameters. [in]srcsource rectangle ; [in]destdestination rectangle ; [in]gcgraphics context ; [in]src_x,src_yspecify the x and y coordinates, which are relative to the origin of the source rectangle and specify upper-left corner. ; [in]width,heightthe width and height, which are the dimensions of both the source and destination rectangles ; [in]dest_x,dest_yspecify the upper-left corner of the destination rectangle. GC components in use: function, plane-mask, subwindow-mode, graphics-exposure, clip-x-origin, clip-y-origin, and clip-mask. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ CopyGC(). void TGWin32VirtualXProxy::CopyGC ; (; GContext_t ; org, . GContext_t ; dest, . Mask_t ; mask . ). overridevirtual . Copies the specified components from the source GC ""org"" to the destination GC ""dest"". ; The ""mask"" defines which component to copy and it is a data member of GCValues_t. ; Reimplemented from TVirtualX. ◆ CopyPixmap(). void TGWin32VirtualXProxy::CopyPixmap ; (; Int_t ; wid, . Int_t ; xpos, . Int_t ; ypos . ). overridevirtual . Copies the pixmap ""wid"" at the position [xpos,ypos] in the current window. ; Reimplemented from TVirtualX. ◆ CreateBitmap(). Pixmap_t TGWin32VirtualXProxy::CreateBitmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height . ). overridevirtual . Creates a bitmap (i.e. ; pixmap with depth 1) from the bitmap data.; Parameters. [in]idspecifies which screen the pixmap is created on ;",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:59322,Availability,mask,mask,59322," ; , . Atom_t & ; , . Time_t & ;  . ). overridevirtual . Requests that the specified selection be converted to the specified target type. ; Reimplemented from TVirtualX. ◆ CopyArea(). void TGWin32VirtualXProxy::CopyArea ; (; Drawable_t ; src, . Drawable_t ; dest, . GContext_t ; gc, . Int_t ; src_x, . Int_t ; src_y, . UInt_t ; width, . UInt_t ; height, . Int_t ; dest_x, . Int_t ; dest_y . ). overridevirtual . Combines the specified rectangle of ""src"" with the specified rectangle of ""dest"" according to the ""gc"". ; Parameters. [in]srcsource rectangle ; [in]destdestination rectangle ; [in]gcgraphics context ; [in]src_x,src_yspecify the x and y coordinates, which are relative to the origin of the source rectangle and specify upper-left corner. ; [in]width,heightthe width and height, which are the dimensions of both the source and destination rectangles ; [in]dest_x,dest_yspecify the upper-left corner of the destination rectangle. GC components in use: function, plane-mask, subwindow-mode, graphics-exposure, clip-x-origin, clip-y-origin, and clip-mask. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ CopyGC(). void TGWin32VirtualXProxy::CopyGC ; (; GContext_t ; org, . GContext_t ; dest, . Mask_t ; mask . ). overridevirtual . Copies the specified components from the source GC ""org"" to the destination GC ""dest"". ; The ""mask"" defines which component to copy and it is a data member of GCValues_t. ; Reimplemented from TVirtualX. ◆ CopyPixmap(). void TGWin32VirtualXProxy::CopyPixmap ; (; Int_t ; wid, . Int_t ; xpos, . Int_t ; ypos . ). overridevirtual . Copies the pixmap ""wid"" at the position [xpos,ypos] in the current window. ; Reimplemented from TVirtualX. ◆ CreateBitmap(). Pixmap_t TGWin32VirtualXProxy::CreateBitmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height . ). overridevirtual . Creates a bitmap (i.e. ; pixmap with depth 1) from the bitmap data.; Parameters. [in]idspecifies which screen the pixmap is created on ;",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:59497,Availability,mask,mask,59497,"ble_t ; src, . Drawable_t ; dest, . GContext_t ; gc, . Int_t ; src_x, . Int_t ; src_y, . UInt_t ; width, . UInt_t ; height, . Int_t ; dest_x, . Int_t ; dest_y . ). overridevirtual . Combines the specified rectangle of ""src"" with the specified rectangle of ""dest"" according to the ""gc"". ; Parameters. [in]srcsource rectangle ; [in]destdestination rectangle ; [in]gcgraphics context ; [in]src_x,src_yspecify the x and y coordinates, which are relative to the origin of the source rectangle and specify upper-left corner. ; [in]width,heightthe width and height, which are the dimensions of both the source and destination rectangles ; [in]dest_x,dest_yspecify the upper-left corner of the destination rectangle. GC components in use: function, plane-mask, subwindow-mode, graphics-exposure, clip-x-origin, clip-y-origin, and clip-mask. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ CopyGC(). void TGWin32VirtualXProxy::CopyGC ; (; GContext_t ; org, . GContext_t ; dest, . Mask_t ; mask . ). overridevirtual . Copies the specified components from the source GC ""org"" to the destination GC ""dest"". ; The ""mask"" defines which component to copy and it is a data member of GCValues_t. ; Reimplemented from TVirtualX. ◆ CopyPixmap(). void TGWin32VirtualXProxy::CopyPixmap ; (; Int_t ; wid, . Int_t ; xpos, . Int_t ; ypos . ). overridevirtual . Copies the pixmap ""wid"" at the position [xpos,ypos] in the current window. ; Reimplemented from TVirtualX. ◆ CreateBitmap(). Pixmap_t TGWin32VirtualXProxy::CreateBitmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height . ). overridevirtual . Creates a bitmap (i.e. ; pixmap with depth 1) from the bitmap data.; Parameters. [in]idspecifies which screen the pixmap is created on ; [in]bitmapthe data in bitmap format ; [in]width,heightdefine the dimensions of the pixmap . Reimplemented from TVirtualX. ◆ CreateCursor(). Cursor_t TGWin32VirtualXProxy::CreateCursor ; (; ECursor ; cursor). overridevirtual . Cre",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:59619,Availability,mask,mask,59619," . ). overridevirtual . Combines the specified rectangle of ""src"" with the specified rectangle of ""dest"" according to the ""gc"". ; Parameters. [in]srcsource rectangle ; [in]destdestination rectangle ; [in]gcgraphics context ; [in]src_x,src_yspecify the x and y coordinates, which are relative to the origin of the source rectangle and specify upper-left corner. ; [in]width,heightthe width and height, which are the dimensions of both the source and destination rectangles ; [in]dest_x,dest_yspecify the upper-left corner of the destination rectangle. GC components in use: function, plane-mask, subwindow-mode, graphics-exposure, clip-x-origin, clip-y-origin, and clip-mask. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ CopyGC(). void TGWin32VirtualXProxy::CopyGC ; (; GContext_t ; org, . GContext_t ; dest, . Mask_t ; mask . ). overridevirtual . Copies the specified components from the source GC ""org"" to the destination GC ""dest"". ; The ""mask"" defines which component to copy and it is a data member of GCValues_t. ; Reimplemented from TVirtualX. ◆ CopyPixmap(). void TGWin32VirtualXProxy::CopyPixmap ; (; Int_t ; wid, . Int_t ; xpos, . Int_t ; ypos . ). overridevirtual . Copies the pixmap ""wid"" at the position [xpos,ypos] in the current window. ; Reimplemented from TVirtualX. ◆ CreateBitmap(). Pixmap_t TGWin32VirtualXProxy::CreateBitmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height . ). overridevirtual . Creates a bitmap (i.e. ; pixmap with depth 1) from the bitmap data.; Parameters. [in]idspecifies which screen the pixmap is created on ; [in]bitmapthe data in bitmap format ; [in]width,heightdefine the dimensions of the pixmap . Reimplemented from TVirtualX. ◆ CreateCursor(). Cursor_t TGWin32VirtualXProxy::CreateCursor ; (; ECursor ; cursor). overridevirtual . Creates the specified cursor. ; (just return cursor from cursor pool). The cursor can be: kBottomLeft, kBottomRight, kTopLeft, kTopRight,; kBottomSide, kLeftSide",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:61827,Availability,mask,mask,61827,"owRightDefinition GuiTypes.h:375; kTopLeft@ kTopLeftDefinition GuiTypes.h:372; kBottomRight@ kBottomRightDefinition GuiTypes.h:372; kArrowVer@ kArrowVerDefinition GuiTypes.h:374; kCaret@ kCaretDefinition GuiTypes.h:375; kTopSide@ kTopSideDefinition GuiTypes.h:373; kLeftSide@ kLeftSideDefinition GuiTypes.h:373; kWatch@ kWatchDefinition GuiTypes.h:375; kMove@ kMoveDefinition GuiTypes.h:374; kTopRight@ kTopRightDefinition GuiTypes.h:372; kBottomLeft@ kBottomLeftDefinition GuiTypes.h:372; kHand@ kHandDefinition GuiTypes.h:374; kCross@ kCrossDefinition GuiTypes.h:374; kRotate@ kRotateDefinition GuiTypes.h:374; kArrowHor@ kArrowHorDefinition GuiTypes.h:374; kPointer@ kPointerDefinition GuiTypes.h:375. Reimplemented from TVirtualX. ◆ CreateGC(). GContext_t TGWin32VirtualXProxy::CreateGC ; (; Drawable_t ; id, . GCValues_t * ; gval . ). overridevirtual . Creates a graphics context using the provided GCValues_t *gval structure. ; The mask data member of gval specifies which components in the GC are to be set using the information in the specified values structure. It returns a graphics context handle GContext_t that can be used with any destination drawable or O if the creation falls. ; Reimplemented from TVirtualX. ◆ CreateImage(). Drawable_t TGWin32VirtualXProxy::CreateImage ; (; UInt_t ; width, . UInt_t ; height . ). overridevirtual . Allocates the memory needed for an drawable. ; Parameters. [in]widththe width of the image, in pixels ; [in]heightthe height of the image, in pixels . Reimplemented from TVirtualX. ◆ CreatePictureFromData(). Bool_t TGWin32VirtualXProxy::CreatePictureFromData ; (; Drawable_t ; id, . char ** ; data, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). overridevirtual . Creates a picture pict from data in bitmap format. ; The picture attributes ""attr"" are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If the mask ""pict_mask"" does not exist it is set to kNone. ; Reimplemented from TVirt",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:62812,Availability,mask,mask,62812,"ata member of gval specifies which components in the GC are to be set using the information in the specified values structure. It returns a graphics context handle GContext_t that can be used with any destination drawable or O if the creation falls. ; Reimplemented from TVirtualX. ◆ CreateImage(). Drawable_t TGWin32VirtualXProxy::CreateImage ; (; UInt_t ; width, . UInt_t ; height . ). overridevirtual . Allocates the memory needed for an drawable. ; Parameters. [in]widththe width of the image, in pixels ; [in]heightthe height of the image, in pixels . Reimplemented from TVirtualX. ◆ CreatePictureFromData(). Bool_t TGWin32VirtualXProxy::CreatePictureFromData ; (; Drawable_t ; id, . char ** ; data, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). overridevirtual . Creates a picture pict from data in bitmap format. ; The picture attributes ""attr"" are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If the mask ""pict_mask"" does not exist it is set to kNone. ; Reimplemented from TVirtualX. ◆ CreatePictureFromFile(). Bool_t TGWin32VirtualXProxy::CreatePictureFromFile ; (; Drawable_t ; id, . const char * ; filename, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). overridevirtual . Creates a picture pict from data in file ""filename"". ; The picture attributes ""attr"" are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If the mask ""pict_mask"" does not exist it is set to kNone. ; Reimplemented from TVirtualX. ◆ CreatePixmap() [1/2]. Pixmap_t TGWin32VirtualXProxy::CreatePixmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height, . ULong_t ; forecolor, . ULong_t ; backcolor, . Int_t ; depth . ). overridevirtual . Creates a pixmap from bitmap data of the width, height, and depth you specified and returns a pixmap that identifies it. ; The width and height arguments must be nonzero. The depth argument must be one of the depth",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:63299,Availability,mask,mask,63299,"the image, in pixels ; [in]heightthe height of the image, in pixels . Reimplemented from TVirtualX. ◆ CreatePictureFromData(). Bool_t TGWin32VirtualXProxy::CreatePictureFromData ; (; Drawable_t ; id, . char ** ; data, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). overridevirtual . Creates a picture pict from data in bitmap format. ; The picture attributes ""attr"" are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If the mask ""pict_mask"" does not exist it is set to kNone. ; Reimplemented from TVirtualX. ◆ CreatePictureFromFile(). Bool_t TGWin32VirtualXProxy::CreatePictureFromFile ; (; Drawable_t ; id, . const char * ; filename, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). overridevirtual . Creates a picture pict from data in file ""filename"". ; The picture attributes ""attr"" are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If the mask ""pict_mask"" does not exist it is set to kNone. ; Reimplemented from TVirtualX. ◆ CreatePixmap() [1/2]. Pixmap_t TGWin32VirtualXProxy::CreatePixmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height, . ULong_t ; forecolor, . ULong_t ; backcolor, . Int_t ; depth . ). overridevirtual . Creates a pixmap from bitmap data of the width, height, and depth you specified and returns a pixmap that identifies it. ; The width and height arguments must be nonzero. The depth argument must be one of the depths supported by the screen of the specified drawable.; Parameters. [in]idspecifies which screen the pixmap is created on ; [in]bitmapthe data in bitmap format ; [in]width,heightdefine the dimensions of the pixmap ; [in]forecolorthe foreground pixel values to use ; [in]backcolorthe background pixel values to use ; [in]depththe depth of the pixmap . Reimplemented from TVirtualX. ◆ CreatePixmap() [2/2]. Pixmap_t TGWin32VirtualXProxy::CreatePixmap ; (; Drawable_t ; id, . UInt_t ; w, . UI",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:68698,Availability,down,down,68698," ; (; Window_t ; id). overridevirtual . The DestroySubwindows function destroys all inferior windows of the specified window, in bottom-to-top stacking order. ; Reimplemented from TVirtualX. ◆ DestroyWindow(). void TGWin32VirtualXProxy::DestroyWindow ; (; Window_t ; id). overridevirtual . Destroys the window ""id"" as well as all of its subwindows. ; The window should never be referenced again. If the window specified by the ""id"" argument is mapped, it is unmapped automatically. ; Reimplemented from TVirtualX. ◆ DisplayName(). const char * TGWin32VirtualXProxy::DisplayName ; (; const char * ; = nullptr). overridevirtual . Returns hostname on which the display is opened. ; Reimplemented from TVirtualX. ◆ DrawBox(). void TGWin32VirtualXProxy::DrawBox ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2, . EBoxMode ; mode . ). overridevirtual . Draws a box between [x1,y1] and [x2,y2] according to the ""mode"". ; Parameters. [in]x1,y1left down corner ; [in]x2,y2right up corner ; [in]modedrawing mode:; mode = 0 hollow (kHollow); mode = 1 solid (kSolid) . Reimplemented from TVirtualX. ◆ DrawCellArray(). void TGWin32VirtualXProxy::DrawCellArray ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2, . Int_t ; nx, . Int_t ; ny, . Int_t * ; ic . ). overridevirtual . Draws a cell array. ; The drawing is done with the pixel precision if (x2-x1)/nx (or y) is not a exact pixel number the position of the top right corner may be wrong.; Parameters. [in]x1,y1left down corner ; [in]x2,y2right up corner ; [in]nx,nyarray size ; [in]icarray . Reimplemented from TVirtualX. ◆ DrawFillArea(). void TGWin32VirtualXProxy::DrawFillArea ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Fills area described by the polygon. ; Parameters. [in]nnumber of points ; [in]xylist of points. xy(2,n) . Reimplemented from TVirtualX. ◆ DrawLine() [1/2]. void TGWin32VirtualXProxy::DrawLine ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). overridevir",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:69224,Availability,down,down,69224,"rtualX. ◆ DisplayName(). const char * TGWin32VirtualXProxy::DisplayName ; (; const char * ; = nullptr). overridevirtual . Returns hostname on which the display is opened. ; Reimplemented from TVirtualX. ◆ DrawBox(). void TGWin32VirtualXProxy::DrawBox ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2, . EBoxMode ; mode . ). overridevirtual . Draws a box between [x1,y1] and [x2,y2] according to the ""mode"". ; Parameters. [in]x1,y1left down corner ; [in]x2,y2right up corner ; [in]modedrawing mode:; mode = 0 hollow (kHollow); mode = 1 solid (kSolid) . Reimplemented from TVirtualX. ◆ DrawCellArray(). void TGWin32VirtualXProxy::DrawCellArray ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2, . Int_t ; nx, . Int_t ; ny, . Int_t * ; ic . ). overridevirtual . Draws a cell array. ; The drawing is done with the pixel precision if (x2-x1)/nx (or y) is not a exact pixel number the position of the top right corner may be wrong.; Parameters. [in]x1,y1left down corner ; [in]x2,y2right up corner ; [in]nx,nyarray size ; [in]icarray . Reimplemented from TVirtualX. ◆ DrawFillArea(). void TGWin32VirtualXProxy::DrawFillArea ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Fills area described by the polygon. ; Parameters. [in]nnumber of points ; [in]xylist of points. xy(2,n) . Reimplemented from TVirtualX. ◆ DrawLine() [1/2]. void TGWin32VirtualXProxy::DrawLine ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). overridevirtual . Uses the components of the specified GC to draw a line between the specified set of points (x1, y1) and (x2, y2). ; GC components in use: function, plane-mask, line-width, line-style, cap-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawLine() [2/2]. voi",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:69910,Availability,mask,mask,69910,"x2, . Int_t ; y2, . Int_t ; nx, . Int_t ; ny, . Int_t * ; ic . ). overridevirtual . Draws a cell array. ; The drawing is done with the pixel precision if (x2-x1)/nx (or y) is not a exact pixel number the position of the top right corner may be wrong.; Parameters. [in]x1,y1left down corner ; [in]x2,y2right up corner ; [in]nx,nyarray size ; [in]icarray . Reimplemented from TVirtualX. ◆ DrawFillArea(). void TGWin32VirtualXProxy::DrawFillArea ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Fills area described by the polygon. ; Parameters. [in]nnumber of points ; [in]xylist of points. xy(2,n) . Reimplemented from TVirtualX. ◆ DrawLine() [1/2]. void TGWin32VirtualXProxy::DrawLine ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). overridevirtual . Uses the components of the specified GC to draw a line between the specified set of points (x1, y1) and (x2, y2). ; GC components in use: function, plane-mask, line-width, line-style, cap-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawLine() [2/2]. void TGWin32VirtualXProxy::DrawLine ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). overridevirtual . Draws a line. ; Parameters. [in]x1,y1begin of line ; [in]x2,y2end of line . Reimplemented from TVirtualX. ◆ DrawPolyLine(). void TGWin32VirtualXProxy::DrawPolyLine ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Draws a line through all points in the list. ; Parameters. [in]nnumber of points ; [in]xylist of points . Reimplemented from TVirtualX. ◆ DrawPolyMarker(). void TGWin32VirtualXProxy::DrawPolyMarker ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Draws ""n"" markers with the current attributes at position [x,y]. ; Parameters. [in]nnumber of markers to ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:70018,Availability,mask,mask,70018,"x2, . Int_t ; y2, . Int_t ; nx, . Int_t ; ny, . Int_t * ; ic . ). overridevirtual . Draws a cell array. ; The drawing is done with the pixel precision if (x2-x1)/nx (or y) is not a exact pixel number the position of the top right corner may be wrong.; Parameters. [in]x1,y1left down corner ; [in]x2,y2right up corner ; [in]nx,nyarray size ; [in]icarray . Reimplemented from TVirtualX. ◆ DrawFillArea(). void TGWin32VirtualXProxy::DrawFillArea ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Fills area described by the polygon. ; Parameters. [in]nnumber of points ; [in]xylist of points. xy(2,n) . Reimplemented from TVirtualX. ◆ DrawLine() [1/2]. void TGWin32VirtualXProxy::DrawLine ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). overridevirtual . Uses the components of the specified GC to draw a line between the specified set of points (x1, y1) and (x2, y2). ; GC components in use: function, plane-mask, line-width, line-style, cap-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawLine() [2/2]. void TGWin32VirtualXProxy::DrawLine ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). overridevirtual . Draws a line. ; Parameters. [in]x1,y1begin of line ; [in]x2,y2end of line . Reimplemented from TVirtualX. ◆ DrawPolyLine(). void TGWin32VirtualXProxy::DrawPolyLine ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Draws a line through all points in the list. ; Parameters. [in]nnumber of points ; [in]xylist of points . Reimplemented from TVirtualX. ◆ DrawPolyMarker(). void TGWin32VirtualXProxy::DrawPolyMarker ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Draws ""n"" markers with the current attributes at position [x,y]. ; Parameters. [in]nnumber of markers to ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:71304,Availability,mask,mask,71304,"2 . ). overridevirtual . Draws a line. ; Parameters. [in]x1,y1begin of line ; [in]x2,y2end of line . Reimplemented from TVirtualX. ◆ DrawPolyLine(). void TGWin32VirtualXProxy::DrawPolyLine ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Draws a line through all points in the list. ; Parameters. [in]nnumber of points ; [in]xylist of points . Reimplemented from TVirtualX. ◆ DrawPolyMarker(). void TGWin32VirtualXProxy::DrawPolyMarker ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Draws ""n"" markers with the current attributes at position [x,y]. ; Parameters. [in]nnumber of markers to draw ; [in]xyan array of x,y marker coordinates . Reimplemented from TVirtualX. ◆ DrawRectangle(). void TGWin32VirtualXProxy::DrawRectangle ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawSegments(). void TGWin32VirtualXProxy::DrawSegments ; (; Drawable_t ; id, . GContext_t ; gc, . Segment_t * ; seg, . Int_t ; nseg . ). overridevirtual . Draws multiple line segments. ; Each line is specified by a pair of points.; Parameters. [in]idDrawable identifier ; [in]gcgraphics context ; [in]*segspecifies an array of segments ; [in]nsegspecifies the number of segments in the array. GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. (see also t",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:71420,Availability,mask,mask,71420,"2 . ). overridevirtual . Draws a line. ; Parameters. [in]x1,y1begin of line ; [in]x2,y2end of line . Reimplemented from TVirtualX. ◆ DrawPolyLine(). void TGWin32VirtualXProxy::DrawPolyLine ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Draws a line through all points in the list. ; Parameters. [in]nnumber of points ; [in]xylist of points . Reimplemented from TVirtualX. ◆ DrawPolyMarker(). void TGWin32VirtualXProxy::DrawPolyMarker ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Draws ""n"" markers with the current attributes at position [x,y]. ; Parameters. [in]nnumber of markers to draw ; [in]xyan array of x,y marker coordinates . Reimplemented from TVirtualX. ◆ DrawRectangle(). void TGWin32VirtualXProxy::DrawRectangle ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawSegments(). void TGWin32VirtualXProxy::DrawSegments ; (; Drawable_t ; id, . GContext_t ; gc, . Segment_t * ; seg, . Int_t ; nseg . ). overridevirtual . Draws multiple line segments. ; Each line is specified by a pair of points.; Parameters. [in]idDrawable identifier ; [in]gcgraphics context ; [in]*segspecifies an array of segments ; [in]nsegspecifies the number of segments in the array. GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. (see also t",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:72067,Availability,mask,mask,72067,". GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawSegments(). void TGWin32VirtualXProxy::DrawSegments ; (; Drawable_t ; id, . GContext_t ; gc, . Segment_t * ; seg, . Int_t ; nseg . ). overridevirtual . Draws multiple line segments. ; Each line is specified by a pair of points.; Parameters. [in]idDrawable identifier ; [in]gcgraphics context ; [in]*segspecifies an array of segments ; [in]nsegspecifies the number of segments in the array. GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawString(). void TGWin32VirtualXProxy::DrawString ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . const char * ; s, . Int_t ; len . ). overridevirtual . Each character image, as defined by the font in the GC, is treated as an additional mask for a fill operation on the drawable. ; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]x,ycoordinates, which are relative to the origin of the specified drawable and define the origin of the first character ; [in]sthe character string ; [in]lenthe number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent c",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:72183,Availability,mask,mask,72183,". GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawSegments(). void TGWin32VirtualXProxy::DrawSegments ; (; Drawable_t ; id, . GContext_t ; gc, . Segment_t * ; seg, . Int_t ; nseg . ). overridevirtual . Draws multiple line segments. ; Each line is specified by a pair of points.; Parameters. [in]idDrawable identifier ; [in]gcgraphics context ; [in]*segspecifies an array of segments ; [in]nsegspecifies the number of segments in the array. GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawString(). void TGWin32VirtualXProxy::DrawString ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . const char * ; s, . Int_t ; len . ). overridevirtual . Each character image, as defined by the font in the GC, is treated as an additional mask for a fill operation on the drawable. ; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]x,ycoordinates, which are relative to the origin of the specified drawable and define the origin of the first character ; [in]sthe character string ; [in]lenthe number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent c",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:72663,Availability,mask,mask,72663,"gments(). void TGWin32VirtualXProxy::DrawSegments ; (; Drawable_t ; id, . GContext_t ; gc, . Segment_t * ; seg, . Int_t ; nseg . ). overridevirtual . Draws multiple line segments. ; Each line is specified by a pair of points.; Parameters. [in]idDrawable identifier ; [in]gcgraphics context ; [in]*segspecifies an array of segments ; [in]nsegspecifies the number of segments in the array. GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawString(). void TGWin32VirtualXProxy::DrawString ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . const char * ; s, . Int_t ; len . ). overridevirtual . Each character image, as defined by the font in the GC, is treated as an additional mask for a fill operation on the drawable. ; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]x,ycoordinates, which are relative to the origin of the specified drawable and define the origin of the first character ; [in]sthe character string ; [in]lenthe number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawText() [1/2]. void TGWin32VirtualXProxy::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const char * ; text, . ETextMode ; mode . ). overridevirtual . Draws a text string using current font. ; Parameters. [in]x,ytext position ; [in]angletext angle ; [in]mgnmagnification factor ; [in]texttext string ; [in]modedrawing mode:; mode =",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:73004,Availability,mask,mask,73004,"y. GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawString(). void TGWin32VirtualXProxy::DrawString ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . const char * ; s, . Int_t ; len . ). overridevirtual . Each character image, as defined by the font in the GC, is treated as an additional mask for a fill operation on the drawable. ; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]x,ycoordinates, which are relative to the origin of the specified drawable and define the origin of the first character ; [in]sthe character string ; [in]lenthe number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawText() [1/2]. void TGWin32VirtualXProxy::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const char * ; text, . ETextMode ; mode . ). overridevirtual . Draws a text string using current font. ; Parameters. [in]x,ytext position ; [in]angletext angle ; [in]mgnmagnification factor ; [in]texttext string ; [in]modedrawing mode:; mode = 0 the background is not drawn (kClear); mode = 1 the background is drawn (kOpaque) . Reimplemented from TVirtualX. ◆ DrawText() [2/2]. void TGWin32VirtualXProxy::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const wchar_t * ; text, . ETextMode ; mode . ). inlineoverridevirtual . Draws a text string using current font. ; Parameters. [in]x,ytext position",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:73083,Availability,mask,mask,73083,"y. GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawString(). void TGWin32VirtualXProxy::DrawString ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . const char * ; s, . Int_t ; len . ). overridevirtual . Each character image, as defined by the font in the GC, is treated as an additional mask for a fill operation on the drawable. ; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]x,ycoordinates, which are relative to the origin of the specified drawable and define the origin of the first character ; [in]sthe character string ; [in]lenthe number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawText() [1/2]. void TGWin32VirtualXProxy::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const char * ; text, . ETextMode ; mode . ). overridevirtual . Draws a text string using current font. ; Parameters. [in]x,ytext position ; [in]angletext angle ; [in]mgnmagnification factor ; [in]texttext string ; [in]modedrawing mode:; mode = 0 the background is not drawn (kClear); mode = 1 the background is drawn (kOpaque) . Reimplemented from TVirtualX. ◆ DrawText() [2/2]. void TGWin32VirtualXProxy::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const wchar_t * ; text, . ETextMode ; mode . ). inlineoverridevirtual . Draws a text string using current font. ; Parameters. [in]x,ytext position",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:75415,Availability,mask,mask,75415,"ty. ; Reimplemented from TVirtualX. ◆ EqualRegion(). Bool_t TGWin32VirtualXProxy::EqualRegion ; (; Region_t ; rega, . Region_t ; regb . ). overridevirtual . Returns kTRUE if the two regions have the same offset, size, and shape. ; Reimplemented from TVirtualX. ◆ EventsPending(). Int_t TGWin32VirtualXProxy::EventsPending ; (; ). overridevirtual . Return number of pending events. ; Reimplemented from TVirtualX.; Definition at line 296 of file TGWin32VirtualXProxy.cxx. ◆ FillPolygon(). void TGWin32VirtualXProxy::FillPolygon ; (; Window_t ; id, . GContext_t ; gc, . Point_t * ; points, . Int_t ; npnt . ). overridevirtual . Fills the region closed by the specified path. ; The path is closed automatically if the last point in the list does not coincide with the first point.; Parameters. [in]idwindow identifier ; [in]gcgraphics context ; [in]*pointsspecifies an array of points ; [in]npntspecifies the number of points in the array. GC components in use: function, plane-mask, fill-style, fill-rule, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ FillRectangle(). void TGWin32VirtualXProxy::FillRectangle ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; using the GC you specify.; GC components in use are: function, plane-mask, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ FindRWindow(). Window_t TGWin32VirtualXProxy::FindRWindow ; (; Window_t ; win, . Window_t ; dragwin, . Window_t ; input, . int ; x, . int ; y, . int ; maxd . ). o",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:75499,Availability,mask,mask,75499,"ty. ; Reimplemented from TVirtualX. ◆ EqualRegion(). Bool_t TGWin32VirtualXProxy::EqualRegion ; (; Region_t ; rega, . Region_t ; regb . ). overridevirtual . Returns kTRUE if the two regions have the same offset, size, and shape. ; Reimplemented from TVirtualX. ◆ EventsPending(). Int_t TGWin32VirtualXProxy::EventsPending ; (; ). overridevirtual . Return number of pending events. ; Reimplemented from TVirtualX.; Definition at line 296 of file TGWin32VirtualXProxy.cxx. ◆ FillPolygon(). void TGWin32VirtualXProxy::FillPolygon ; (; Window_t ; id, . GContext_t ; gc, . Point_t * ; points, . Int_t ; npnt . ). overridevirtual . Fills the region closed by the specified path. ; The path is closed automatically if the last point in the list does not coincide with the first point.; Parameters. [in]idwindow identifier ; [in]gcgraphics context ; [in]*pointsspecifies an array of points ; [in]npntspecifies the number of points in the array. GC components in use: function, plane-mask, fill-style, fill-rule, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ FillRectangle(). void TGWin32VirtualXProxy::FillRectangle ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; using the GC you specify.; GC components in use are: function, plane-mask, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ FindRWindow(). Window_t TGWin32VirtualXProxy::FindRWindow ; (; Window_t ; win, . Window_t ; dragwin, . Window_t ; input, . int ; x, . int ; y, . int ; maxd . ). o",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:76014,Availability,mask,mask,76014," Int_t ; npnt . ). overridevirtual . Fills the region closed by the specified path. ; The path is closed automatically if the last point in the list does not coincide with the first point.; Parameters. [in]idwindow identifier ; [in]gcgraphics context ; [in]*pointsspecifies an array of points ; [in]npntspecifies the number of points in the array. GC components in use: function, plane-mask, fill-style, fill-rule, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ FillRectangle(). void TGWin32VirtualXProxy::FillRectangle ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; using the GC you specify.; GC components in use are: function, plane-mask, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ FindRWindow(). Window_t TGWin32VirtualXProxy::FindRWindow ; (; Window_t ; win, . Window_t ; dragwin, . Window_t ; input, . int ; x, . int ; y, . int ; maxd . ). overridevirtual . Recursively search in the children of Window for a Window which is at location x, y and is DND aware, with a maximum depth of maxd. ; Reimplemented from TVirtualX. ◆ FreeColor(). void TGWin32VirtualXProxy::FreeColor ; (; Colormap_t ; cmap, . ULong_t ; pixel . ). overridevirtual . Frees color cell with specified pixel value. ; Reimplemented from TVirtualX. ◆ FreeFontNames(). void TGWin32VirtualXProxy::FreeFontNames ; (; char ** ; fontlist). overridevirtual . Frees the specified the array of strings ""fontlist"". ; Reimplemented from TVirtualX. ◆ FreeFontStruct(). void ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:76083,Availability,mask,mask,76083," Int_t ; npnt . ). overridevirtual . Fills the region closed by the specified path. ; The path is closed automatically if the last point in the list does not coincide with the first point.; Parameters. [in]idwindow identifier ; [in]gcgraphics context ; [in]*pointsspecifies an array of points ; [in]npntspecifies the number of points in the array. GC components in use: function, plane-mask, fill-style, fill-rule, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ FillRectangle(). void TGWin32VirtualXProxy::FillRectangle ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; using the GC you specify.; GC components in use are: function, plane-mask, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ FindRWindow(). Window_t TGWin32VirtualXProxy::FindRWindow ; (; Window_t ; win, . Window_t ; dragwin, . Window_t ; input, . int ; x, . int ; y, . int ; maxd . ). overridevirtual . Recursively search in the children of Window for a Window which is at location x, y and is DND aware, with a maximum depth of maxd. ; Reimplemented from TVirtualX. ◆ FreeColor(). void TGWin32VirtualXProxy::FreeColor ; (; Colormap_t ; cmap, . ULong_t ; pixel . ). overridevirtual . Frees color cell with specified pixel value. ; Reimplemented from TVirtualX. ◆ FreeFontNames(). void TGWin32VirtualXProxy::FreeFontNames ; (; char ** ; fontlist). overridevirtual . Frees the specified the array of strings ""fontlist"". ; Reimplemented from TVirtualX. ◆ FreeFontStruct(). void ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:80548,Availability,mask,mask,80548,"::GetFillStyle ; (; ); const. overridevirtual . Return the fill area style. ; Reimplemented from TAttFill. ◆ GetFontHandle(). FontH_t TGWin32VirtualXProxy::GetFontHandle ; (; FontStruct_t ; fs). overridevirtual . Returns the font handle of the specified font structure ""fs"". ; Reimplemented from TVirtualX. ◆ GetFontProperties(). void TGWin32VirtualXProxy::GetFontProperties ; (; FontStruct_t ; font, . Int_t & ; max_ascent, . Int_t & ; max_descent . ). overridevirtual . Returns the font properties. ; Reimplemented from TVirtualX. ◆ GetFontStruct(). FontStruct_t TGWin32VirtualXProxy::GetFontStruct ; (; FontH_t ; fh). overridevirtual . Retrieves the associated font structure of the font specified font handle ""fh"". ; Free returned FontStruct_t using FreeFontStruct(). ; Reimplemented from TVirtualX. ◆ GetGCValues(). void TGWin32VirtualXProxy::GetGCValues ; (; GContext_t ; gc, . GCValues_t & ; gval . ). overridevirtual . Returns the components specified by the mask in ""gval"" for the specified GC ""gc"" (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ GetGeometry(). void TGWin32VirtualXProxy::GetGeometry ; (; Int_t ; wid, . Int_t & ; x, . Int_t & ; y, . UInt_t & ; w, . UInt_t & ; h . ). overridevirtual . Returns position and size of window ""wid"". ; Parameters. [in]widwindow identifier if wid < 0 the size of the display is returned ; [in]x,yreturned window position ; [in]w,hreturned window size . Reimplemented from TVirtualX. ◆ GetImageSize(). void TGWin32VirtualXProxy::GetImageSize ; (; Drawable_t ; id, . UInt_t & ; width, . UInt_t & ; height . ). overridevirtual . Returns the width and height of the image id. ; Reimplemented from TVirtualX. ◆ GetInputFocus(). Window_t TGWin32VirtualXProxy::GetInputFocus ; (; ). overridevirtual . Returns the window id of the window having the input focus. ; Reimplemented from TVirtualX. ◆ GetLineColor(). Color_t TGWin32VirtualXProxy::GetLineColor ; (; ); const. overridevirtual . Return the line color. ; Reimplemented from T",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:88807,Availability,down,down,88807,"verridevirtual . Establishes a passive grab on a certain mouse button. ; That is, when a certain mouse button is hit while certain modifier's (Shift, Control, Meta, Alt) are active then the mouse will be grabbed for window id. When grab is false, ungrab the mouse button for this button and modifier. ; Reimplemented from TVirtualX. ◆ GrabKey(). void TGWin32VirtualXProxy::GrabKey ; (; Window_t ; id, . Int_t ; keycode, . UInt_t ; modifier, . Bool_t ; grab = kTRUE . ). overridevirtual . Establishes a passive grab on the keyboard. ; In the future, the keyboard is actively grabbed, the last-keyboard-grab time is set to the time at which the key was pressed (as transmitted in the KeyPress event), and the KeyPress event is reported if all of the following conditions are true:. the keyboard is not grabbed and the specified key (which can itself be a modifier key) is logically pressed when the specified modifier keys are logically down, and no other modifier keys are logically down;; either the grab window ""id"" is an ancestor of (or is) the focus window, or ""id"" is a descendant of the focus window and contains the pointer;; a passive grab on the same key combination does not exist on any ancestor of grab_window. Parameters. [in]idwindow id ; [in]keycodespecifies the KeyCode or AnyKey ; [in]modifierspecifies the set of keymasks or AnyModifier; the mask is the bitwise inclusive OR of the valid keymask bits ; [in]graba switch between grab/ungrab key grab = kTRUE grab the key and modifier grab = kFALSE ungrab the key and modifier . Reimplemented from TVirtualX. ◆ GrabPointer(). void TGWin32VirtualXProxy::GrabPointer ; (; Window_t ; id, . UInt_t ; evmask, . Window_t ; confine, . Cursor_t ; cursor, . Bool_t ; grab = kTRUE, . Bool_t ; owner_events = kTRUE . ). overridevirtual . Establishes an active pointer grab. ; While an active pointer grab is in effect, further pointer events are only reported to the grabbing client window. ; Reimplemented from TVirtualX. ◆ HasTTFonts(). Bool_t ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:88854,Availability,down,down,88854,"verridevirtual . Establishes a passive grab on a certain mouse button. ; That is, when a certain mouse button is hit while certain modifier's (Shift, Control, Meta, Alt) are active then the mouse will be grabbed for window id. When grab is false, ungrab the mouse button for this button and modifier. ; Reimplemented from TVirtualX. ◆ GrabKey(). void TGWin32VirtualXProxy::GrabKey ; (; Window_t ; id, . Int_t ; keycode, . UInt_t ; modifier, . Bool_t ; grab = kTRUE . ). overridevirtual . Establishes a passive grab on the keyboard. ; In the future, the keyboard is actively grabbed, the last-keyboard-grab time is set to the time at which the key was pressed (as transmitted in the KeyPress event), and the KeyPress event is reported if all of the following conditions are true:. the keyboard is not grabbed and the specified key (which can itself be a modifier key) is logically pressed when the specified modifier keys are logically down, and no other modifier keys are logically down;; either the grab window ""id"" is an ancestor of (or is) the focus window, or ""id"" is a descendant of the focus window and contains the pointer;; a passive grab on the same key combination does not exist on any ancestor of grab_window. Parameters. [in]idwindow id ; [in]keycodespecifies the KeyCode or AnyKey ; [in]modifierspecifies the set of keymasks or AnyModifier; the mask is the bitwise inclusive OR of the valid keymask bits ; [in]graba switch between grab/ungrab key grab = kTRUE grab the key and modifier grab = kFALSE ungrab the key and modifier . Reimplemented from TVirtualX. ◆ GrabPointer(). void TGWin32VirtualXProxy::GrabPointer ; (; Window_t ; id, . UInt_t ; evmask, . Window_t ; confine, . Cursor_t ; cursor, . Bool_t ; grab = kTRUE, . Bool_t ; owner_events = kTRUE . ). overridevirtual . Establishes an active pointer grab. ; While an active pointer grab is in effect, further pointer events are only reported to the grabbing client window. ; Reimplemented from TVirtualX. ◆ HasTTFonts(). Bool_t ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:89231,Availability,mask,mask,89231,"ndow_t ; id, . Int_t ; keycode, . UInt_t ; modifier, . Bool_t ; grab = kTRUE . ). overridevirtual . Establishes a passive grab on the keyboard. ; In the future, the keyboard is actively grabbed, the last-keyboard-grab time is set to the time at which the key was pressed (as transmitted in the KeyPress event), and the KeyPress event is reported if all of the following conditions are true:. the keyboard is not grabbed and the specified key (which can itself be a modifier key) is logically pressed when the specified modifier keys are logically down, and no other modifier keys are logically down;; either the grab window ""id"" is an ancestor of (or is) the focus window, or ""id"" is a descendant of the focus window and contains the pointer;; a passive grab on the same key combination does not exist on any ancestor of grab_window. Parameters. [in]idwindow id ; [in]keycodespecifies the KeyCode or AnyKey ; [in]modifierspecifies the set of keymasks or AnyModifier; the mask is the bitwise inclusive OR of the valid keymask bits ; [in]graba switch between grab/ungrab key grab = kTRUE grab the key and modifier grab = kFALSE ungrab the key and modifier . Reimplemented from TVirtualX. ◆ GrabPointer(). void TGWin32VirtualXProxy::GrabPointer ; (; Window_t ; id, . UInt_t ; evmask, . Window_t ; confine, . Cursor_t ; cursor, . Bool_t ; grab = kTRUE, . Bool_t ; owner_events = kTRUE . ). overridevirtual . Establishes an active pointer grab. ; While an active pointer grab is in effect, further pointer events are only reported to the grabbing client window. ; Reimplemented from TVirtualX. ◆ HasTTFonts(). Bool_t TGWin32VirtualXProxy::HasTTFonts ; (; ); const. overridevirtual . Returns True when TrueType fonts are used. ; Reimplemented from TVirtualX. ◆ IconifyWindow(). void TGWin32VirtualXProxy::IconifyWindow ; (; Window_t ; id). overridevirtual . Iconifies the window ""id"". ; Reimplemented from TVirtualX. ◆ Init(). Bool_t TGWin32VirtualXProxy::Init ; (; void * ; display = nullptr). overridevir",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:90321,Availability,failure,failure,90321,"etween grab/ungrab key grab = kTRUE grab the key and modifier grab = kFALSE ungrab the key and modifier . Reimplemented from TVirtualX. ◆ GrabPointer(). void TGWin32VirtualXProxy::GrabPointer ; (; Window_t ; id, . UInt_t ; evmask, . Window_t ; confine, . Cursor_t ; cursor, . Bool_t ; grab = kTRUE, . Bool_t ; owner_events = kTRUE . ). overridevirtual . Establishes an active pointer grab. ; While an active pointer grab is in effect, further pointer events are only reported to the grabbing client window. ; Reimplemented from TVirtualX. ◆ HasTTFonts(). Bool_t TGWin32VirtualXProxy::HasTTFonts ; (; ); const. overridevirtual . Returns True when TrueType fonts are used. ; Reimplemented from TVirtualX. ◆ IconifyWindow(). void TGWin32VirtualXProxy::IconifyWindow ; (; Window_t ; id). overridevirtual . Iconifies the window ""id"". ; Reimplemented from TVirtualX. ◆ Init(). Bool_t TGWin32VirtualXProxy::Init ; (; void * ; display = nullptr). overridevirtual . Initializes the X system. ; Returns kFALSE in case of failure. It is implementation dependent. ; Reimplemented from TVirtualX. ◆ InitWindow(). Int_t TGWin32VirtualXProxy::InitWindow ; (; ULongptr_t ; window). overridevirtual . Creates a new window and return window number. ; Returns -1 if window initialization fails. ; Reimplemented from TVirtualX. ◆ InternAtom(). Atom_t TGWin32VirtualXProxy::InternAtom ; (; const char * ; atom_name, . Bool_t ; only_if_exist . ). overridevirtual . Returns the atom identifier associated with the specified ""atom_name"" string. ; If ""only_if_exists"" is False, the atom is created if it does not exist. If the atom name is not in the Host Portable Character Encoding, the result is implementation dependent. Uppercase and lowercase matter; the strings ""thing"", ""Thing"", and ""thinG"" all designate different atoms. ; Reimplemented from TVirtualX. ◆ IntersectRegion(). void TGWin32VirtualXProxy::IntersectRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Computes the int",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:97177,Availability,failure,failure,97177," [2/2]. void TGWin32VirtualXProxy::MoveWindow ; (; Window_t ; id, . Int_t ; x, . Int_t ; y . ). overridevirtual . Moves the specified window to the specified x and y coordinates. ; It does not change the window's size, raise the window, or change the mapping state of the window.; Parameters. [in]idwindow identifier ; [in]x,ycoordinates, which define the new position of the window relative to its parent. . Reimplemented from TVirtualX. ◆ NextEvent(). void TGWin32VirtualXProxy::NextEvent ; (; Event_t & ; event). overridevirtual . Process next event in the queue - if any. ; Reimplemented from TVirtualX.; Definition at line 304 of file TGWin32VirtualXProxy.cxx. ◆ OpenDisplay(). Int_t TGWin32VirtualXProxy::OpenDisplay ; (; const char * ; dpyName = nullptr). overridevirtual . Opens connection to display server (if such a thing exist on the current platform). ; The encoding and interpretation of the display name.; On X11 this method returns on success the X display socket descriptor >0, 0 in case of batch mode, and <0 in case of failure (cannot connect to display dpyName). ; Reimplemented from TVirtualX. ◆ OpenPixmap(). Int_t TGWin32VirtualXProxy::OpenPixmap ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Creates a pixmap of the width ""w"" and height ""h"" you specified. ; Reimplemented from TVirtualX. ◆ ParseColor(). Bool_t TGWin32VirtualXProxy::ParseColor ; (; Colormap_t ; cmap, . const char * ; cname, . ColorStruct_t & ; color . ). overridevirtual . Looks up the string name of a color ""cname"" with respect to the screen associated with the specified colormap. ; It returns the exact color value. If the color name is not in the Host Portable Character Encoding, the result is implementation dependent.; Parameters. [in]cmapthe colormap ; [in]cnamethe color name string; use of uppercase or lowercase does not matter ; [in]colorreturns the exact color value for later use. The ColorStruct_t structure is set to default. Let system think we could parse color. ; Reimplemented from",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:99734,Availability,mask,mask,99734,"E) or not(kFALSE) . Reimplemented from TVirtualX. ◆ ProxyObject(). static TVirtualX * TGWin32VirtualXProxy::ProxyObject ; (; ). static . ◆ PutImage(). void TGWin32VirtualXProxy::PutImage ; (; Drawable_t ; id, . GContext_t ; gc, . Drawable_t ; img, . Int_t ; dx, . Int_t ; dy, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Combines an image with a rectangle of the specified drawable. ; The section of the image defined by the x, y, width, and height arguments is drawn on the specified part of the drawable.; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]imgthe image you want combined with the rectangle ; [in]dxthe offset in X from the left edge of the image ; [in]dythe offset in Y from the top edge of the image ; [in]x,ycoordinates, which are relative to the origin of the drawable and are the coordinates of the subimage ; [in]w,hthe width and height of the subimage, which define the rectangle dimensions. GC components in use: function, plane-mask, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground and background. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ PutPixel(). void TGWin32VirtualXProxy::PutPixel ; (; Drawable_t ; id, . Int_t ; x, . Int_t ; y, . ULong_t ; pixel . ). overridevirtual . Overwrites the pixel in the image with the specified pixel value. ; The image must contain the x and y coordinates.; Parameters. [in]idspecifies the image ; [in]x,ycoordinates ; [in]pixelthe new pixel value . Reimplemented from TVirtualX. ◆ QueryColor(). void TGWin32VirtualXProxy::QueryColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Returns the current RGB value for the pixel in the ""color"" structure. ; The color components are set to default.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the RGB values for the pixel specified in the structure . Reimplemented from TVirtualX. ◆ QueryPointer() [1/2]. void TGWin32VirtualXProxy",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:99795,Availability,mask,mask,99795,"E) or not(kFALSE) . Reimplemented from TVirtualX. ◆ ProxyObject(). static TVirtualX * TGWin32VirtualXProxy::ProxyObject ; (; ). static . ◆ PutImage(). void TGWin32VirtualXProxy::PutImage ; (; Drawable_t ; id, . GContext_t ; gc, . Drawable_t ; img, . Int_t ; dx, . Int_t ; dy, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Combines an image with a rectangle of the specified drawable. ; The section of the image defined by the x, y, width, and height arguments is drawn on the specified part of the drawable.; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]imgthe image you want combined with the rectangle ; [in]dxthe offset in X from the left edge of the image ; [in]dythe offset in Y from the top edge of the image ; [in]x,ycoordinates, which are relative to the origin of the drawable and are the coordinates of the subimage ; [in]w,hthe width and height of the subimage, which define the rectangle dimensions. GC components in use: function, plane-mask, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground and background. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ PutPixel(). void TGWin32VirtualXProxy::PutPixel ; (; Drawable_t ; id, . Int_t ; x, . Int_t ; y, . ULong_t ; pixel . ). overridevirtual . Overwrites the pixel in the image with the specified pixel value. ; The image must contain the x and y coordinates.; Parameters. [in]idspecifies the image ; [in]x,ycoordinates ; [in]pixelthe new pixel value . Reimplemented from TVirtualX. ◆ QueryColor(). void TGWin32VirtualXProxy::QueryColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Returns the current RGB value for the pixel in the ""color"" structure. ; The color components are set to default.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the RGB values for the pixel specified in the structure . Reimplemented from TVirtualX. ◆ QueryPointer() [1/2]. void TGWin32VirtualXProxy",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:101102,Availability,mask,mask,101102,"with the specified pixel value. ; The image must contain the x and y coordinates.; Parameters. [in]idspecifies the image ; [in]x,ycoordinates ; [in]pixelthe new pixel value . Reimplemented from TVirtualX. ◆ QueryColor(). void TGWin32VirtualXProxy::QueryColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Returns the current RGB value for the pixel in the ""color"" structure. ; The color components are set to default.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the RGB values for the pixel specified in the structure . Reimplemented from TVirtualX. ◆ QueryPointer() [1/2]. void TGWin32VirtualXProxy::QueryPointer ; (; Int_t & ; ix, . Int_t & ; iy . ). overridevirtual . Returns the pointer position. ; Reimplemented from TVirtualX. ◆ QueryPointer() [2/2]. void TGWin32VirtualXProxy::QueryPointer ; (; Window_t ; id, . Window_t & ; rootw, . Window_t & ; childw, . Int_t & ; root_x, . Int_t & ; root_y, . Int_t & ; win_x, . Int_t & ; win_y, . UInt_t & ; mask . ). overridevirtual . Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ; Parameters. [in]idspecifies the window ; [in]rootwthe root window that the pointer is in ; [in]childwthe child window that the pointer is located in, if any ; [in]root_x,root_ythe pointer coordinates relative to the root window's origin ; [in]win_x,win_ythe pointer coordinates relative to the specified window ""id"" ; [in]maskthe current state of the modifier keys and pointer buttons . Reimplemented from TVirtualX. ◆ RaiseWindow(). void TGWin32VirtualXProxy::RaiseWindow ; (; Window_t ; id). overridevirtual . Raises the specified window to the top of the stack so that no sibling window obscures it. ; Reimplemented from TVirtualX. ◆ ReadGIF(). void TGWin32VirtualXProxy::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file . ). ◆ ReadPictureDataFromFile(). Bool_t TGWin32VirtualXProxy::ReadPictureDataFromFile ; (; const char * ; filena",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:101572,Availability,mask,maskthe,101572,"nt RGB value for the pixel in the ""color"" structure. ; The color components are set to default.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the RGB values for the pixel specified in the structure . Reimplemented from TVirtualX. ◆ QueryPointer() [1/2]. void TGWin32VirtualXProxy::QueryPointer ; (; Int_t & ; ix, . Int_t & ; iy . ). overridevirtual . Returns the pointer position. ; Reimplemented from TVirtualX. ◆ QueryPointer() [2/2]. void TGWin32VirtualXProxy::QueryPointer ; (; Window_t ; id, . Window_t & ; rootw, . Window_t & ; childw, . Int_t & ; root_x, . Int_t & ; root_y, . Int_t & ; win_x, . Int_t & ; win_y, . UInt_t & ; mask . ). overridevirtual . Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ; Parameters. [in]idspecifies the window ; [in]rootwthe root window that the pointer is in ; [in]childwthe child window that the pointer is located in, if any ; [in]root_x,root_ythe pointer coordinates relative to the root window's origin ; [in]win_x,win_ythe pointer coordinates relative to the specified window ""id"" ; [in]maskthe current state of the modifier keys and pointer buttons . Reimplemented from TVirtualX. ◆ RaiseWindow(). void TGWin32VirtualXProxy::RaiseWindow ; (; Window_t ; id). overridevirtual . Raises the specified window to the top of the stack so that no sibling window obscures it. ; Reimplemented from TVirtualX. ◆ ReadGIF(). void TGWin32VirtualXProxy::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file . ). ◆ ReadPictureDataFromFile(). Bool_t TGWin32VirtualXProxy::ReadPictureDataFromFile ; (; const char * ; filename, . char *** ; ret_data . ). overridevirtual . Reads picture data from file ""filename"" and store it in ""ret_data"". ; Returns kTRUE in case of success, kFALSE otherwise. ; Reimplemented from TVirtualX. ◆ RealObject(). TVirtualX * TGWin32VirtualXProxy::RealObject ; (; ). static . Definition at line 32 of file TGWin32VirtualXProxy.cxx. ◆ RemoveWindo",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:106442,Availability,mask,mask,106442,"he width and height which define the pixmap dimensions . Reimplemented from TVirtualX. ◆ ResizeWindow() [1/2]. void TGWin32VirtualXProxy::ResizeWindow ; (; Int_t ; wid). overridevirtual . Resizes the window ""wid"" if necessary. ; Reimplemented from TVirtualX. ◆ ResizeWindow() [2/2]. void TGWin32VirtualXProxy::ResizeWindow ; (; Window_t ; id, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Changes the width and height of the specified window ""id"", not including its borders. ; This function does not change the window's upper-left coordinate.; Parameters. [in]idwindow identifier ; [in]w,hthe width and height, which are the interior dimensions of the window after the call completes. . Reimplemented from TVirtualX. ◆ SelectInput(). void TGWin32VirtualXProxy::SelectInput ; (; Window_t ; id, . UInt_t ; evmask . ). overridevirtual . Defines which input events the window is interested in. ; By default events are propagated up the window stack. This mask can also be set at window creation time via the SetWindowAttributes_t::fEventMask attribute. ; Reimplemented from TVirtualX. ◆ SelectWindow(). void TGWin32VirtualXProxy::SelectWindow ; (; Int_t ; wid). overridevirtual . Selects the window ""wid"" to which subsequent output is directed. ; Reimplemented from TVirtualX. ◆ SendEvent(). void TGWin32VirtualXProxy::SendEvent ; (; Window_t ; id, . Event_t * ; ev . ). overridevirtual . Send event ev to window id. ; Reimplemented from TVirtualX.; Definition at line 320 of file TGWin32VirtualXProxy.cxx. ◆ SetCharacterUp(). void TGWin32VirtualXProxy::SetCharacterUp ; (; Float_t ; chupx, . Float_t ; chupy . ). overridevirtual . Sets character up vector. ; Reimplemented from TVirtualX. ◆ SetClassHints(). void TGWin32VirtualXProxy::SetClassHints ; (; Window_t ; id, . char * ; className, . char * ; resourceName . ). overridevirtual . Sets the windows class and resource name. ; Reimplemented from TVirtualX. ◆ SetClipOFF(). void TGWin32VirtualXProxy::SetClipOFF ; (; Int_t ; wid). overridevirtual",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:107900,Availability,mask,mask,107900,"ev to window id. ; Reimplemented from TVirtualX.; Definition at line 320 of file TGWin32VirtualXProxy.cxx. ◆ SetCharacterUp(). void TGWin32VirtualXProxy::SetCharacterUp ; (; Float_t ; chupx, . Float_t ; chupy . ). overridevirtual . Sets character up vector. ; Reimplemented from TVirtualX. ◆ SetClassHints(). void TGWin32VirtualXProxy::SetClassHints ; (; Window_t ; id, . char * ; className, . char * ; resourceName . ). overridevirtual . Sets the windows class and resource name. ; Reimplemented from TVirtualX. ◆ SetClipOFF(). void TGWin32VirtualXProxy::SetClipOFF ; (; Int_t ; wid). overridevirtual . Turns off the clipping for the window ""wid"". ; Reimplemented from TVirtualX. ◆ SetClipRectangles(). void TGWin32VirtualXProxy::SetClipRectangles ; (; GContext_t ; gc, . Int_t ; x, . Int_t ; y, . Rectangle_t * ; recs, . Int_t ; n . ). overridevirtual . Sets clipping rectangles in graphics context. ; [x,y] specify the origin of the rectangles. ""recs"" specifies an array of rectangles that define the clipping mask and ""n"" is the number of rectangles. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ SetClipRegion(). void TGWin32VirtualXProxy::SetClipRegion ; (; Int_t ; wid, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Sets clipping region for the window ""wid"". ; Parameters. [in]widwindow identifier ; [in]x,yorigin of clipping rectangle ; [in]w,hthe clipping rectangle dimensions . Reimplemented from TVirtualX. ◆ SetCursor() [1/2]. void TGWin32VirtualXProxy::SetCursor ; (; Int_t ; win, . ECursor ; cursor . ). overridevirtual . The cursor ""cursor"" will be used when the pointer is in the window ""wid"". ; Reimplemented from TVirtualX. ◆ SetCursor() [2/2]. void TGWin32VirtualXProxy::SetCursor ; (; Window_t ; id, . Cursor_t ; curid . ). overridevirtual . Sets the cursor ""curid"" to be used when the pointer is in the window ""id"". ; Reimplemented from TVirtualX. ◆ SetDashes(). void TGWin32VirtualXProxy::SetDashes ; (; GContext_t ; gc, . In",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:110868,Availability,echo,echo,110868,"d XdndAware property and the list of drag and drop types to the Window win. ; Reimplemented from TVirtualX. ◆ SetDoubleBuffer(). void TGWin32VirtualXProxy::SetDoubleBuffer ; (; Int_t ; wid, . Int_t ; mode . ). overridevirtual . Sets the double buffer on/off on the window ""wid"". ; Parameters. [in]widwindow identifier.; 999 means all opened windows. . [in]modethe on/off switch; mode = 1 double buffer is on; mode = 0 double buffer is off . Reimplemented from TVirtualX. ◆ SetDoubleBufferOFF(). void TGWin32VirtualXProxy::SetDoubleBufferOFF ; (; ). overridevirtual . Turns double buffer mode off. ; Reimplemented from TVirtualX. ◆ SetDoubleBufferON(). void TGWin32VirtualXProxy::SetDoubleBufferON ; (; ). overridevirtual . Turns double buffer mode on. ; Reimplemented from TVirtualX. ◆ SetDrawMode(). void TGWin32VirtualXProxy::SetDrawMode ; (; EDrawMode ; mode). overridevirtual . Sets the drawing mode. ; Parameters. [in]modedrawing mode.; mode = 1 copy; mode = 2 xor; mode = 3 invert; mode = 4 set the suitable mode for cursor echo according to the vendor . Reimplemented from TVirtualX. ◆ SetFillAttributes(). void TGWin32VirtualXProxy::SetFillAttributes ; (; ). overridevirtual . Invoke the DialogCanvas Fill attributes. ; Reimplemented from TAttFill. ◆ SetFillColor(). void TGWin32VirtualXProxy::SetFillColor ; (; Color_t ; fcolor). overridevirtual . Set the fill area color. ; Reimplemented from TAttFill. ◆ SetFillStyle(). void TGWin32VirtualXProxy::SetFillStyle ; (; Style_t ; fstyle). overridevirtual . Set the fill area style. ; Reimplemented from TAttFill. ◆ SetForeground(). void TGWin32VirtualXProxy::SetForeground ; (; GContext_t ; gc, . ULong_t ; foreground . ). overridevirtual . Sets the foreground color for the specified GC (shortcut for ChangeGC with only foreground mask set). ; Parameters. [in]gcspecifies the GC ; [in]foregroundthe foreground you want to set. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ SetIconName(). void TGWin32VirtualXProxy::SetI",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:111626,Availability,mask,mask,111626," on. ; Reimplemented from TVirtualX. ◆ SetDrawMode(). void TGWin32VirtualXProxy::SetDrawMode ; (; EDrawMode ; mode). overridevirtual . Sets the drawing mode. ; Parameters. [in]modedrawing mode.; mode = 1 copy; mode = 2 xor; mode = 3 invert; mode = 4 set the suitable mode for cursor echo according to the vendor . Reimplemented from TVirtualX. ◆ SetFillAttributes(). void TGWin32VirtualXProxy::SetFillAttributes ; (; ). overridevirtual . Invoke the DialogCanvas Fill attributes. ; Reimplemented from TAttFill. ◆ SetFillColor(). void TGWin32VirtualXProxy::SetFillColor ; (; Color_t ; fcolor). overridevirtual . Set the fill area color. ; Reimplemented from TAttFill. ◆ SetFillStyle(). void TGWin32VirtualXProxy::SetFillStyle ; (; Style_t ; fstyle). overridevirtual . Set the fill area style. ; Reimplemented from TAttFill. ◆ SetForeground(). void TGWin32VirtualXProxy::SetForeground ; (; GContext_t ; gc, . ULong_t ; foreground . ). overridevirtual . Sets the foreground color for the specified GC (shortcut for ChangeGC with only foreground mask set). ; Parameters. [in]gcspecifies the GC ; [in]foregroundthe foreground you want to set. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ SetIconName(). void TGWin32VirtualXProxy::SetIconName ; (; Window_t ; id, . char * ; name . ). overridevirtual . Sets the window icon name. ; Reimplemented from TVirtualX. ◆ SetIconPixmap(). void TGWin32VirtualXProxy::SetIconPixmap ; (; Window_t ; id, . Pixmap_t ; pix . ). overridevirtual . Sets the icon name pixmap. ; Reimplemented from TVirtualX. ◆ SetInputFocus(). void TGWin32VirtualXProxy::SetInputFocus ; (; Window_t ; id). overridevirtual . Changes the input focus to specified window ""id"". ; Reimplemented from TVirtualX. ◆ SetKeyAutoRepeat(). void TGWin32VirtualXProxy::SetKeyAutoRepeat ; (; Bool_t ; on = kTRUE). overridevirtual . Turns key auto repeat on (kTRUE) or off (kFALSE). ; Reimplemented from TVirtualX. ◆ SetLineAttributes(). void TGWin32VirtualXProxy::SetLineAttributes ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:120588,Availability,mask,mask,120588,"nts.; Parameters. [in]idwindow identifier ; [in]wmin,hminspecify the minimum window size ; [in]wmax,hmaxspecify the maximum window size ; [in]winc,hincdefine an arithmetic progression of sizes into which the window to be resized (minimum to maximum) . Reimplemented from TVirtualX. ◆ SetWMState(). void TGWin32VirtualXProxy::SetWMState ; (; Window_t ; id, . EInitialState ; state . ). overridevirtual . Sets the initial state of the window ""id"": either kNormalState or kIconicState. ; Reimplemented from TVirtualX. ◆ SetWMTransientHint(). void TGWin32VirtualXProxy::SetWMTransientHint ; (; Window_t ; id, . Window_t ; main_id . ). overridevirtual . Tells window manager that the window ""id"" is a transient window of the window ""main_id"". ; A window manager may decide not to decorate a transient window or may treat it differently in other ways. ; Reimplemented from TVirtualX. ◆ ShapeCombineMask(). void TGWin32VirtualXProxy::ShapeCombineMask ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . Pixmap_t ; mask . ). overridevirtual . The Non-rectangular Window Shape Extension adds non-rectangular windows to the System. ; This allows for making shaped (partially transparent) windows ; Reimplemented from TVirtualX. ◆ SubtractRegion(). void TGWin32VirtualXProxy::SubtractRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Subtracts regb from rega and stores the results in result. ; Reimplemented from TVirtualX. ◆ TextWidth(). Int_t TGWin32VirtualXProxy::TextWidth ; (; FontStruct_t ; font, . const char * ; s, . Int_t ; len . ). overridevirtual . Return length of the string ""s"" in pixels. Size depends on font. ; Reimplemented from TVirtualX. ◆ TranslateCoordinates(). void TGWin32VirtualXProxy::TranslateCoordinates ; (; Window_t ; src, . Window_t ; dest, . Int_t ; src_x, . Int_t ; src_y, . Int_t & ; dest_x, . Int_t & ; dest_y, . Window_t & ; child . ). overridevirtual . Translates coordinates in one window to the coordinate space of another window. ; It",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:31679,Deployability,update,updated,31679," ; virtual Int_t GetFontAscent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as ascent is text related. ;  ; virtual Int_t GetFontDescent () const;  Returns the descent of the current font (in pixels. ;  ; virtual Int_t GetFontDescent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as descent requires a certain text. ;  ; virtual FontStruct_t GetGCFont (GContext_t gc);  Return the font associated with the graphics context gc. ;  ; virtual Double_t GetOpenGLScalingFactor ();  On a HiDPI resolution it can be > 1., this means glViewport should use scaled width and height. ;  ; TClass * IsA () const override;  ; virtual Bool_t MakeOpenGLContextCurrent (Handle_t ctx, Window_t windowID);  Makes context ctx current OpenGL context. ;  ; virtual void MapGCFont (GContext_t, FontStruct_t);  Map the XftFont with the Graphics Context using it. ;  ; virtual Bool_t NeedRedraw (ULongptr_t tgwindow, Bool_t force);  Notify the low level GUI layer ROOT requires ""tgwindow"" to be updated. ;  ; virtual Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0);  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; virtual UInt_t ScreenWidthMM () const;  Returns the width of the screen in millimeters. ;  ; virtual void SelectPixmap (Int_t qpixid);  Selects the pixmap ""qpixid"". ;  ; void SetFillColor (Color_t cindex) override;  Sets color index ""cindex"" for fill areas. ;  ; void SetFillStyle (Style_t style) override;  Sets fill area style. ;  ; void SetLineColor (Color_t cindex) override;  Sets color index ""cindex"" for drawing lines. ;  ; void SetLineStyle (Style_t linestyle) override;  Sets the line style. ;  ; void SetLineWidth (Width_t width) override;  Sets the line width. ;  ; void SetMarkerColor (Color_t cindex) override;  Sets color index ""cindex"" for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Sets marker size index. ;  ; v",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:103663,Deployability,release,released,103663,"nt_t ; y . ). overridevirtual . If the specified window is mapped, ReparentWindow automatically performs an UnmapWindow request on it, removes it from its current position in the hierarchy, and inserts it as the child of the specified parent. ; The window is placed in the stacking order on top with respect to sibling windows. ; Reimplemented from TVirtualX. ◆ RequestLocator(). Int_t TGWin32VirtualXProxy::RequestLocator ; (; Int_t ; mode, . Int_t ; ctyp, . Int_t & ; x, . Int_t & ; y . ). overridevirtual . Requests Locator position. ; Parameters. [in]x,ycursor position at moment of button press (output) ; [in]ctypcursor type (input); ctyp = 1 tracking cross; ctyp = 2 cross-hair; ctyp = 3 rubber circle; ctyp = 4 rubber band; ctyp = 5 rubber rectangle. [in]modeinput mode; mode = 0 request; mode = 1 sample. Returns; in request mode:; 1 = left is pressed; 2 = middle is pressed; 3 = right is pressed. in sample mode:; 11 = left is released; 12 = middle is released; 13 = right is released; -1 = nothing is pressed or released; -2 = leave the window; else = keycode (keyboard is pressed) . Reimplemented from TVirtualX. ◆ RequestString(). Int_t TGWin32VirtualXProxy::RequestString ; (; Int_t ; x, . Int_t ; y, . char * ; text . ). overridevirtual . Requests string: text is displayed and can be edited with Emacs-like keybinding. ; Returns termination code (0 for ESC, 1 for RETURN); Parameters. [in]x,yposition where text is displayed ; [in]textdisplayed text (as input), edited text (as output) . Reimplemented from TVirtualX. ◆ RescaleWindow(). void TGWin32VirtualXProxy::RescaleWindow ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Rescales the window ""wid"". ; Parameters. [in]widwindow identifier ; [in]wthe width ; [in]hthe height . Reimplemented from TVirtualX. ◆ ResetAttFill(). void TGWin32VirtualXProxy::ResetAttFill ; (; Option_t * ; option = """"). overridevirtual . Reset this fill attributes to default values. ; Reimplemented from TAttFill. ◆ ResetAttLine(). vo",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:103688,Deployability,release,released,103688,"nt_t ; y . ). overridevirtual . If the specified window is mapped, ReparentWindow automatically performs an UnmapWindow request on it, removes it from its current position in the hierarchy, and inserts it as the child of the specified parent. ; The window is placed in the stacking order on top with respect to sibling windows. ; Reimplemented from TVirtualX. ◆ RequestLocator(). Int_t TGWin32VirtualXProxy::RequestLocator ; (; Int_t ; mode, . Int_t ; ctyp, . Int_t & ; x, . Int_t & ; y . ). overridevirtual . Requests Locator position. ; Parameters. [in]x,ycursor position at moment of button press (output) ; [in]ctypcursor type (input); ctyp = 1 tracking cross; ctyp = 2 cross-hair; ctyp = 3 rubber circle; ctyp = 4 rubber band; ctyp = 5 rubber rectangle. [in]modeinput mode; mode = 0 request; mode = 1 sample. Returns; in request mode:; 1 = left is pressed; 2 = middle is pressed; 3 = right is pressed. in sample mode:; 11 = left is released; 12 = middle is released; 13 = right is released; -1 = nothing is pressed or released; -2 = leave the window; else = keycode (keyboard is pressed) . Reimplemented from TVirtualX. ◆ RequestString(). Int_t TGWin32VirtualXProxy::RequestString ; (; Int_t ; x, . Int_t ; y, . char * ; text . ). overridevirtual . Requests string: text is displayed and can be edited with Emacs-like keybinding. ; Returns termination code (0 for ESC, 1 for RETURN); Parameters. [in]x,yposition where text is displayed ; [in]textdisplayed text (as input), edited text (as output) . Reimplemented from TVirtualX. ◆ RescaleWindow(). void TGWin32VirtualXProxy::RescaleWindow ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Rescales the window ""wid"". ; Parameters. [in]widwindow identifier ; [in]wthe width ; [in]hthe height . Reimplemented from TVirtualX. ◆ ResetAttFill(). void TGWin32VirtualXProxy::ResetAttFill ; (; Option_t * ; option = """"). overridevirtual . Reset this fill attributes to default values. ; Reimplemented from TAttFill. ◆ ResetAttLine(). vo",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:103712,Deployability,release,released,103712,"nt_t ; y . ). overridevirtual . If the specified window is mapped, ReparentWindow automatically performs an UnmapWindow request on it, removes it from its current position in the hierarchy, and inserts it as the child of the specified parent. ; The window is placed in the stacking order on top with respect to sibling windows. ; Reimplemented from TVirtualX. ◆ RequestLocator(). Int_t TGWin32VirtualXProxy::RequestLocator ; (; Int_t ; mode, . Int_t ; ctyp, . Int_t & ; x, . Int_t & ; y . ). overridevirtual . Requests Locator position. ; Parameters. [in]x,ycursor position at moment of button press (output) ; [in]ctypcursor type (input); ctyp = 1 tracking cross; ctyp = 2 cross-hair; ctyp = 3 rubber circle; ctyp = 4 rubber band; ctyp = 5 rubber rectangle. [in]modeinput mode; mode = 0 request; mode = 1 sample. Returns; in request mode:; 1 = left is pressed; 2 = middle is pressed; 3 = right is pressed. in sample mode:; 11 = left is released; 12 = middle is released; 13 = right is released; -1 = nothing is pressed or released; -2 = leave the window; else = keycode (keyboard is pressed) . Reimplemented from TVirtualX. ◆ RequestString(). Int_t TGWin32VirtualXProxy::RequestString ; (; Int_t ; x, . Int_t ; y, . char * ; text . ). overridevirtual . Requests string: text is displayed and can be edited with Emacs-like keybinding. ; Returns termination code (0 for ESC, 1 for RETURN); Parameters. [in]x,yposition where text is displayed ; [in]textdisplayed text (as input), edited text (as output) . Reimplemented from TVirtualX. ◆ RescaleWindow(). void TGWin32VirtualXProxy::RescaleWindow ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Rescales the window ""wid"". ; Parameters. [in]widwindow identifier ; [in]wthe width ; [in]hthe height . Reimplemented from TVirtualX. ◆ ResetAttFill(). void TGWin32VirtualXProxy::ResetAttFill ; (; Option_t * ; option = """"). overridevirtual . Reset this fill attributes to default values. ; Reimplemented from TAttFill. ◆ ResetAttLine(). vo",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:103749,Deployability,release,released,103749,"nt_t ; y . ). overridevirtual . If the specified window is mapped, ReparentWindow automatically performs an UnmapWindow request on it, removes it from its current position in the hierarchy, and inserts it as the child of the specified parent. ; The window is placed in the stacking order on top with respect to sibling windows. ; Reimplemented from TVirtualX. ◆ RequestLocator(). Int_t TGWin32VirtualXProxy::RequestLocator ; (; Int_t ; mode, . Int_t ; ctyp, . Int_t & ; x, . Int_t & ; y . ). overridevirtual . Requests Locator position. ; Parameters. [in]x,ycursor position at moment of button press (output) ; [in]ctypcursor type (input); ctyp = 1 tracking cross; ctyp = 2 cross-hair; ctyp = 3 rubber circle; ctyp = 4 rubber band; ctyp = 5 rubber rectangle. [in]modeinput mode; mode = 0 request; mode = 1 sample. Returns; in request mode:; 1 = left is pressed; 2 = middle is pressed; 3 = right is pressed. in sample mode:; 11 = left is released; 12 = middle is released; 13 = right is released; -1 = nothing is pressed or released; -2 = leave the window; else = keycode (keyboard is pressed) . Reimplemented from TVirtualX. ◆ RequestString(). Int_t TGWin32VirtualXProxy::RequestString ; (; Int_t ; x, . Int_t ; y, . char * ; text . ). overridevirtual . Requests string: text is displayed and can be edited with Emacs-like keybinding. ; Returns termination code (0 for ESC, 1 for RETURN); Parameters. [in]x,yposition where text is displayed ; [in]textdisplayed text (as input), edited text (as output) . Reimplemented from TVirtualX. ◆ RescaleWindow(). void TGWin32VirtualXProxy::RescaleWindow ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Rescales the window ""wid"". ; Parameters. [in]widwindow identifier ; [in]wthe width ; [in]hthe height . Reimplemented from TVirtualX. ◆ ResetAttFill(). void TGWin32VirtualXProxy::ResetAttFill ; (; Option_t * ; option = """"). overridevirtual . Reset this fill attributes to default values. ; Reimplemented from TAttFill. ◆ ResetAttLine(). vo",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:123800,Deployability,update,update,123800,"to perform the computation ; [in]resultreturns the result of the computation . Reimplemented from TVirtualX. ◆ UnmapWindow(). void TGWin32VirtualXProxy::UnmapWindow ; (; Window_t ; id). overridevirtual . Unmaps the specified window ""id"". ; If the specified window is already unmapped, this function has no effect. Any child window will no longer be visible (but they are still mapped) until another map call is made on the parent. ; Reimplemented from TVirtualX. ◆ Update(). void TGWin32VirtualXProxy::Update ; (; Int_t ; mode = 0). overridevirtual . Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer. ; Flush flushes output buffer. Sync flushes buffer and waits till all requests have been processed by X server. ; Reimplemented from TVirtualX. ◆ UpdateWindow(). void TGWin32VirtualXProxy::UpdateWindow ; (; Int_t ; mode). overridevirtual . Updates or synchronises client and server once (not permanent). ; according to ""mode"".; Parameters. [in]modeupdate mode.; mode = 1 update; mode = 0 sync . Reimplemented from TVirtualX. ◆ Warp(). void TGWin32VirtualXProxy::Warp ; (; Int_t ; ix, . Int_t ; iy, . Window_t ; id = 0 . ). overridevirtual . Sets the pointer position. ; Parameters. [in]ixnew X coordinate of pointer ; [in]iynew Y coordinate of pointer ; [in]idwindow identifier. Coordinates are relative to the origin of the window id or to the origin of the current window if id == 0. ; Reimplemented from TVirtualX. ◆ WMDeleteNotify(). void TGWin32VirtualXProxy::WMDeleteNotify ; (; Window_t ; id). overridevirtual . Tells WM to send message when window is closed via WM. ; Reimplemented from TVirtualX. ◆ WriteGIF(). Int_t TGWin32VirtualXProxy::WriteGIF ; (; char * ; name). overridevirtual . Writes the current window into GIF file. ; Returns 1 in case of success, 0 otherwise. ; Reimplemented from TVirtualX. ◆ WritePixmap(). void TGWin32VirtualXProxy::WritePixmap ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h, . char * ; pxname . ). overridevirtual . Writes the pixmap ""w",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:53060,Energy Efficiency,allocate,allocated,53060,"finition at line 38 of file TGWin32VirtualXProxy.h. ◆ TGWin32VirtualXProxy() [2/2]. TGWin32VirtualXProxy::TGWin32VirtualXProxy ; (; const char * ; name, . const char * ; title . ). inline . Definition at line 39 of file TGWin32VirtualXProxy.h. ◆ ~TGWin32VirtualXProxy(). TGWin32VirtualXProxy::~TGWin32VirtualXProxy ; (; ). inlineoverride . Definition at line 40 of file TGWin32VirtualXProxy.h. Member Function Documentation. ◆ AddWindow(). Int_t TGWin32VirtualXProxy::AddWindow ; (; ULongptr_t ; qwid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Registers a window created by Qt as a ROOT window. ; Parameters. [in]qwidwindow identifier ; [in]w,hthe width and height, which define the window size . Reimplemented from TVirtualX. ◆ AllocColor(). Bool_t TGWin32VirtualXProxy::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Allocates a read-only colormap entry corresponding to the closest RGB value supported by the hardware. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE.; The pixel value is set to default. Let system think we could allocate color.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the values actually used in the cmap . Reimplemented from TVirtualX. ◆ Bell(). void TGWin32VirtualXProxy::Bell ; (; Int_t ; percent). overridevirtual . Sets the sound bell. Percent is loudness from -100% to 100%. ; Reimplemented from TVirtualX. ◆ ChangeActivePointerGrab(). void TGWin32VirtualXProxy::ChangeActivePointerGrab ; (; Window_t ; , . UInt_t ; , . Cursor_t ;  . ). overridevirtual . Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ; Reimplemented from TVirtualX. ◆ ChangeGC(). void TGWin32VirtualXProxy::ChangeGC ; (; GContext_t ; gc, . GCValues_t * ; gval . ). overridevirtual . Changes the components specified by the mask in gval for the specified ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:53168,Energy Efficiency,allocate,allocate,53168,"VirtualXProxy::TGWin32VirtualXProxy ; (; const char * ; name, . const char * ; title . ). inline . Definition at line 39 of file TGWin32VirtualXProxy.h. ◆ ~TGWin32VirtualXProxy(). TGWin32VirtualXProxy::~TGWin32VirtualXProxy ; (; ). inlineoverride . Definition at line 40 of file TGWin32VirtualXProxy.h. Member Function Documentation. ◆ AddWindow(). Int_t TGWin32VirtualXProxy::AddWindow ; (; ULongptr_t ; qwid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Registers a window created by Qt as a ROOT window. ; Parameters. [in]qwidwindow identifier ; [in]w,hthe width and height, which define the window size . Reimplemented from TVirtualX. ◆ AllocColor(). Bool_t TGWin32VirtualXProxy::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Allocates a read-only colormap entry corresponding to the closest RGB value supported by the hardware. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE.; The pixel value is set to default. Let system think we could allocate color.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the values actually used in the cmap . Reimplemented from TVirtualX. ◆ Bell(). void TGWin32VirtualXProxy::Bell ; (; Int_t ; percent). overridevirtual . Sets the sound bell. Percent is loudness from -100% to 100%. ; Reimplemented from TVirtualX. ◆ ChangeActivePointerGrab(). void TGWin32VirtualXProxy::ChangeActivePointerGrab ; (; Window_t ; , . UInt_t ; , . Cursor_t ;  . ). overridevirtual . Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ; Reimplemented from TVirtualX. ◆ ChangeGC(). void TGWin32VirtualXProxy::ChangeGC ; (; GContext_t ; gc, . GCValues_t * ; gval . ). overridevirtual . Changes the components specified by the mask in gval for the specified GC. ; Parameters. [in]gcspecifies the GC to be changed ; [in]gvalspecifies the mask and the",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:115553,Energy Efficiency,green,green,115553,"idevirtual . Sets decoration style. ; Reimplemented from TVirtualX. ◆ SetOpacity(). void TGWin32VirtualXProxy::SetOpacity ; (; Int_t ; percent). overridevirtual . Sets opacity of the current window. ; This image manipulation routine works by adding to a percent amount of neutral to each pixels RGB. Since it requires quite some additional color map entries is it only supported on displays with more than > 8 color planes (> 256 colors). ; Reimplemented from TVirtualX. ◆ SetPrimarySelectionOwner(). void TGWin32VirtualXProxy::SetPrimarySelectionOwner ; (; Window_t ; id). overridevirtual . Makes the window ""id"" the current owner of the primary selection. ; That is the window in which, for example some text is selected. ; Reimplemented from TVirtualX. ◆ SetRGB(). void TGWin32VirtualXProxy::SetRGB ; (; Int_t ; cindex, . Float_t ; r, . Float_t ; g, . Float_t ; b . ). overridevirtual . Sets color intensities the specified color index ""cindex"". ; Parameters. [in]cindexcolor index ; [in]r,g,bthe red, green, blue intensities between 0.0 and 1.0 . Reimplemented from TVirtualX. ◆ SetSelectionOwner(). Bool_t TGWin32VirtualXProxy::SetSelectionOwner ; (; Window_t ; , . Atom_t & ;  . ). overridevirtual . Changes the owner and last-change time for the specified selection. ; Reimplemented from TVirtualX. ◆ SetTextAlign(). void TGWin32VirtualXProxy::SetTextAlign ; (; Short_t ; align = 11). overridevirtual . Set the text alignment. ; Reimplemented from TAttText. ◆ SetTextAngle(). void TGWin32VirtualXProxy::SetTextAngle ; (; Float_t ; tangle = 0). overridevirtual . Set the text angle. ; Reimplemented from TAttText. ◆ SetTextAttributes(). void TGWin32VirtualXProxy::SetTextAttributes ; (; ). overridevirtual . Invoke the DialogCanvas Text attributes. ; Reimplemented from TAttText. ◆ SetTextColor(). void TGWin32VirtualXProxy::SetTextColor ; (; Color_t ; tcolor = 1). overridevirtual . Set the text color. ; Reimplemented from TAttText. ◆ SetTextFont() [1/2]. Int_t TGWin32VirtualXProxy::SetTextFo",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:27705,Integrability,depend,depends,27705," manager the desired size of window ""id"". ;  ; void SetWMSizeHints (Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc) override;  Gives the window manager minimum and maximum size hints of the window ""id"". ;  ; void SetWMState (Window_t id, EInitialState state) override;  Sets the initial state of the window ""id"": either kNormalState or kIconicState. ;  ; void SetWMTransientHint (Window_t id, Window_t main_id) override;  Tells window manager that the window ""id"" is a transient window of the window ""main_id"". ;  ; void ShapeCombineMask (Window_t id, Int_t x, Int_t y, Pixmap_t mask) override;  The Non-rectangular Window Shape Extension adds non-rectangular windows to the System. ;  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtracts regb from rega and stores the results in result. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of the string ""s"" in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  Translates coordinates in one window to the coordinate space of another window. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Updates the destination region from a union of the specified rectangle and the specified source region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Computes the union of two regions. ;  ; void UnmapWindow (Window_t id) override;  Unmaps the specified window ""id"". ;  ; void Update (Int_t mode=0) override;  Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Updates or synchronises client and server once (not permanent). ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Sets the pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tells W",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:28412,Integrability,synchroniz,synchronizes,28412,"ds non-rectangular windows to the System. ;  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtracts regb from rega and stores the results in result. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of the string ""s"" in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  Translates coordinates in one window to the coordinate space of another window. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Updates the destination region from a union of the specified rectangle and the specified source region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Computes the union of two regions. ;  ; void UnmapWindow (Window_t id) override;  Unmaps the specified window ""id"". ;  ; void Update (Int_t mode=0) override;  Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Updates or synchronises client and server once (not permanent). ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Sets the pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tells WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Writes the pixmap ""wid"" in the bitmap file ""pxname"". ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculates the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual Int_t AddPixmap (ULongptr_t pixid, UInt_t w, UInt_t h);  Registers a pixmap created by ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:28720,Integrability,message,message,28720," depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  Translates coordinates in one window to the coordinate space of another window. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Updates the destination region from a union of the specified rectangle and the specified source region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Computes the union of two regions. ;  ; void UnmapWindow (Window_t id) override;  Unmaps the specified window ""id"". ;  ; void Update (Int_t mode=0) override;  Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Updates or synchronises client and server once (not permanent). ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Sets the pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tells WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Writes the pixmap ""wid"" in the bitmap file ""pxname"". ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculates the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual Int_t AddPixmap (ULongptr_t pixid, UInt_t w, UInt_t h);  Registers a pixmap created by TGLManager as a ROOT pixmap. ;  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:30118,Integrability,message,messageID,30118,"ons. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual Int_t AddPixmap (ULongptr_t pixid, UInt_t w, UInt_t h);  Registers a pixmap created by TGLManager as a ROOT pixmap. ;  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext);  Creates OpenGL context for window ""windowID"". ;  ; virtual Window_t CreateOpenGLWindow (Window_t parentID, UInt_t width, UInt_t height, const std::vector< std::pair< UInt_t, Int_t > > &format);  Create window with special pixel format. Noop everywhere except Cocoa. ;  ; virtual void DeleteOpenGLContext (Int_t wid=0);  Deletes OpenGL context for window ""wid"". ;  ; virtual void DispatchClientMessage (UInt_t messageID);  Force processing of event, sent by SendEvent before. ;  ; virtual UInt_t ExecCommand (TGWin32Command *code);  Executes the command ""code"" coming from the other threads (Win32) ;  ; virtual void FlushOpenGLBuffer (Handle_t ctx);  Flushes OpenGL buffer. ;  ; virtual Handle_t GetCurrentOpenGLContext ();  Asks OpenGL subsystem about the current OpenGL context. ;  ; EDrawMode GetDrawMode ();  ; virtual Int_t GetFontAscent () const;  Returns the ascent of the current font (in pixels). ;  ; virtual Int_t GetFontAscent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as ascent is text related. ;  ; virtual Int_t GetFontDescent () const;  Returns the descent of the current font (in pixels. ;  ; virtual Int_t GetFontDescent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as descent requires a certain text. ;  ; virtual FontStruct_t GetGCFont (GContext_t gc);  Return the font associated with the graphics con",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:36619,Integrability,message,message,36619,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:37160,Integrability,message,message,37160,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:38150,Integrability,message,message,38150,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:41244,Integrability,message,message,41244,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:41617,Integrability,message,message,41617," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statemen",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:49751,Integrability,message,message,49751,"rs;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Attributes inherited from TGWin32ProxyBase; static ULong_t fgMainThreadId = 0;  main thread ID ;  ; static ULong_t fgPingMessageId = 0;  ping message ID ;  ; static ULong_t fgPostMessageId = 0;  post message ID ;  ; static ULong_t fgUserThreadId = 0;  user (e.g. python) thread ID ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGWin32ProxyBase; virtual Bool_t ForwardCallBack (Bool_t sync);  if sync is kTRUE: ;  ; virtual void SendExitMessage ();  send exit message to server thread ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Att",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:49809,Integrability,message,message,49809,"rs;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Attributes inherited from TGWin32ProxyBase; static ULong_t fgMainThreadId = 0;  main thread ID ;  ; static ULong_t fgPingMessageId = 0;  ping message ID ;  ; static ULong_t fgPostMessageId = 0;  post message ID ;  ; static ULong_t fgUserThreadId = 0;  user (e.g. python) thread ID ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGWin32ProxyBase; virtual Bool_t ForwardCallBack (Bool_t sync);  if sync is kTRUE: ;  ; virtual void SendExitMessage ();  send exit message to server thread ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Att",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:50369,Integrability,message,message,50369,"ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Attributes inherited from TGWin32ProxyBase; static ULong_t fgMainThreadId = 0;  main thread ID ;  ; static ULong_t fgPingMessageId = 0;  ping message ID ;  ; static ULong_t fgPostMessageId = 0;  post message ID ;  ; static ULong_t fgUserThreadId = 0;  user (e.g. python) thread ID ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGWin32ProxyBase; virtual Bool_t ForwardCallBack (Bool_t sync);  if sync is kTRUE: ;  ; virtual void SendExitMessage ();  send exit message to server thread ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TGWin32ProxyBase; Int_t fBatchLimit;  batch limit ;  ; TGWin32CallBack fCallBack;  callback function (execu",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:70033,Integrability,depend,dependent,70033,"ion if (x2-x1)/nx (or y) is not a exact pixel number the position of the top right corner may be wrong.; Parameters. [in]x1,y1left down corner ; [in]x2,y2right up corner ; [in]nx,nyarray size ; [in]icarray . Reimplemented from TVirtualX. ◆ DrawFillArea(). void TGWin32VirtualXProxy::DrawFillArea ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Fills area described by the polygon. ; Parameters. [in]nnumber of points ; [in]xylist of points. xy(2,n) . Reimplemented from TVirtualX. ◆ DrawLine() [1/2]. void TGWin32VirtualXProxy::DrawLine ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). overridevirtual . Uses the components of the specified GC to draw a line between the specified set of points (x1, y1) and (x2, y2). ; GC components in use: function, plane-mask, line-width, line-style, cap-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawLine() [2/2]. void TGWin32VirtualXProxy::DrawLine ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). overridevirtual . Draws a line. ; Parameters. [in]x1,y1begin of line ; [in]x2,y2end of line . Reimplemented from TVirtualX. ◆ DrawPolyLine(). void TGWin32VirtualXProxy::DrawPolyLine ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Draws a line through all points in the list. ; Parameters. [in]nnumber of points ; [in]xylist of points . Reimplemented from TVirtualX. ◆ DrawPolyMarker(). void TGWin32VirtualXProxy::DrawPolyMarker ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Draws ""n"" markers with the current attributes at position [x,y]. ; Parameters. [in]nnumber of markers to draw ; [in]xyan array of x,y marker coordinates . Reimplemented from TVirtualX. ◆ DrawRectangle(). void TGWin32VirtualXProxy::DrawRectangle ; (; Dr",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:71434,Integrability,depend,dependent,71434,"oid TGWin32VirtualXProxy::DrawPolyLine ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Draws a line through all points in the list. ; Parameters. [in]nnumber of points ; [in]xylist of points . Reimplemented from TVirtualX. ◆ DrawPolyMarker(). void TGWin32VirtualXProxy::DrawPolyMarker ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Draws ""n"" markers with the current attributes at position [x,y]. ; Parameters. [in]nnumber of markers to draw ; [in]xyan array of x,y marker coordinates . Reimplemented from TVirtualX. ◆ DrawRectangle(). void TGWin32VirtualXProxy::DrawRectangle ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawSegments(). void TGWin32VirtualXProxy::DrawSegments ; (; Drawable_t ; id, . GContext_t ; gc, . Segment_t * ; seg, . Int_t ; nseg . ). overridevirtual . Draws multiple line segments. ; Each line is specified by a pair of points.; Parameters. [in]idDrawable identifier ; [in]gcgraphics context ; [in]*segspecifies an array of segments ; [in]nsegspecifies the number of segments in the array. GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawString(). void TGWin32VirtualXProxy::DrawString ; (; Drawable_t ; id, . GContext_t ; gc,",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:72198,Integrability,depend,dependent,72198,"h]. ; GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawSegments(). void TGWin32VirtualXProxy::DrawSegments ; (; Drawable_t ; id, . GContext_t ; gc, . Segment_t * ; seg, . Int_t ; nseg . ). overridevirtual . Draws multiple line segments. ; Each line is specified by a pair of points.; Parameters. [in]idDrawable identifier ; [in]gcgraphics context ; [in]*segspecifies an array of segments ; [in]nsegspecifies the number of segments in the array. GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawString(). void TGWin32VirtualXProxy::DrawString ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . const char * ; s, . Int_t ; len . ). overridevirtual . Each character image, as defined by the font in the GC, is treated as an additional mask for a fill operation on the drawable. ; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]x,ycoordinates, which are relative to the origin of the specified drawable and define the origin of the first character ; [in]sthe character string ; [in]lenthe number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:73097,Integrability,depend,dependent,73097," clip-x-origin, clip-y-origin, clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, and dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawString(). void TGWin32VirtualXProxy::DrawString ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . const char * ; s, . Int_t ; len . ). overridevirtual . Each character image, as defined by the font in the GC, is treated as an additional mask for a fill operation on the drawable. ; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]x,ycoordinates, which are relative to the origin of the specified drawable and define the origin of the first character ; [in]sthe character string ; [in]lenthe number of characters in the string argument. GC components in use: function, plane-mask, fill-style, font, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ DrawText() [1/2]. void TGWin32VirtualXProxy::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const char * ; text, . ETextMode ; mode . ). overridevirtual . Draws a text string using current font. ; Parameters. [in]x,ytext position ; [in]angletext angle ; [in]mgnmagnification factor ; [in]texttext string ; [in]modedrawing mode:; mode = 0 the background is not drawn (kClear); mode = 1 the background is drawn (kOpaque) . Reimplemented from TVirtualX. ◆ DrawText() [2/2]. void TGWin32VirtualXProxy::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const wchar_t * ; text, . ETextMode ; mode . ). inlineoverridevirtual . Draws a text string using current font. ; Parameters. [in]x,ytext position ; [in]angletext angle ; [in]mgnmagnification factor ; [in]texttext string ; [in]modedrawing mode:; mode = 0 the backgrou",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:75513,Integrability,depend,dependent,75513,"n_t ; regb . ). overridevirtual . Returns kTRUE if the two regions have the same offset, size, and shape. ; Reimplemented from TVirtualX. ◆ EventsPending(). Int_t TGWin32VirtualXProxy::EventsPending ; (; ). overridevirtual . Return number of pending events. ; Reimplemented from TVirtualX.; Definition at line 296 of file TGWin32VirtualXProxy.cxx. ◆ FillPolygon(). void TGWin32VirtualXProxy::FillPolygon ; (; Window_t ; id, . GContext_t ; gc, . Point_t * ; points, . Int_t ; npnt . ). overridevirtual . Fills the region closed by the specified path. ; The path is closed automatically if the last point in the list does not coincide with the first point.; Parameters. [in]idwindow identifier ; [in]gcgraphics context ; [in]*pointsspecifies an array of points ; [in]npntspecifies the number of points in the array. GC components in use: function, plane-mask, fill-style, fill-rule, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ FillRectangle(). void TGWin32VirtualXProxy::FillRectangle ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; using the GC you specify.; GC components in use are: function, plane-mask, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ FindRWindow(). Window_t TGWin32VirtualXProxy::FindRWindow ; (; Window_t ; win, . Window_t ; dragwin, . Window_t ; input, . int ; x, . int ; y, . int ; maxd . ). overridevirtual . Recursively search in the children of Window for a Window which is at location x, y and is DND aware, with ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:76097,Integrability,depend,dependent,76097," if the last point in the list does not coincide with the first point.; Parameters. [in]idwindow identifier ; [in]gcgraphics context ; [in]*pointsspecifies an array of points ; [in]npntspecifies the number of points in the array. GC components in use: function, plane-mask, fill-style, fill-rule, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ FillRectangle(). void TGWin32VirtualXProxy::FillRectangle ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Fills the specified rectangle defined by [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; using the GC you specify.; GC components in use are: function, plane-mask, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, and tile-stipple-y-origin. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ FindRWindow(). Window_t TGWin32VirtualXProxy::FindRWindow ; (; Window_t ; win, . Window_t ; dragwin, . Window_t ; input, . int ; x, . int ; y, . int ; maxd . ). overridevirtual . Recursively search in the children of Window for a Window which is at location x, y and is DND aware, with a maximum depth of maxd. ; Reimplemented from TVirtualX. ◆ FreeColor(). void TGWin32VirtualXProxy::FreeColor ; (; Colormap_t ; cmap, . ULong_t ; pixel . ). overridevirtual . Frees color cell with specified pixel value. ; Reimplemented from TVirtualX. ◆ FreeFontNames(). void TGWin32VirtualXProxy::FreeFontNames ; (; char ** ; fontlist). overridevirtual . Frees the specified the array of strings ""fontlist"". ; Reimplemented from TVirtualX. ◆ FreeFontStruct(). void TGWin32VirtualXProxy::FreeFontStruct ; (; FontStruct_t ; fs). overridevirtual . Frees the font structure ""fs"". ; The fo",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:78169,Integrability,interface,interface,78169,"when no other resource references it. ; Reimplemented from TVirtualX. ◆ GetCharacterUp(). void TGWin32VirtualXProxy::GetCharacterUp ; (; Float_t & ; chupx, . Float_t & ; chupy . ). overridevirtual . Returns character up vector. ; Reimplemented from TVirtualX. ◆ GetColorBits(). unsigned char * TGWin32VirtualXProxy::GetColorBits ; (; Drawable_t ; wid, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Returns an array of pixels created from a part of drawable (defined by x, y, w, h) in format: ; b1, g1, r1, 0, b2, g2, r2, 0 ... bn, gn, rn, 0 ..; Pixels are numbered from left to right and from top to bottom. By default all pixels from the whole drawable are returned.; Note that return array is 32-bit aligned ; Reimplemented from TVirtualX. ◆ GetColormap(). Colormap_t TGWin32VirtualXProxy::GetColormap ; (; ); const. overridevirtual . Returns handle to colormap. ; Might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. GL interface. ; Reimplemented from TVirtualX. ◆ GetCurrentWindow(). Window_t TGWin32VirtualXProxy::GetCurrentWindow ; (; ); const. overridevirtual . Return a pointer to the current window. ; Reimplemented from TVirtualX.; Definition at line 336 of file TGWin32VirtualXProxy.cxx. ◆ GetDefaultRootWindow(). Window_t TGWin32VirtualXProxy::GetDefaultRootWindow ; (; ); const. overridevirtual . Returns handle to the default root window created when calling XOpenDisplay(). ; Reimplemented from TVirtualX. ◆ GetDepth(). Int_t TGWin32VirtualXProxy::GetDepth ; (; ); const. overridevirtual . Returns depth of screen (number of bit planes). ; Equivalent to GetPlanes(). ; Reimplemented from TVirtualX. ◆ GetDisplay(). Display_t TGWin32VirtualXProxy::GetDisplay ; (; ); const. overridevirtual . Returns handle to display (might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. ; GL interface). ; Reimplemented from TVirtualX. ◆ GetDoubleBuffer(). Int_t TGWin32VirtualXProxy",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:79081,Integrability,interface,interface,79081,"l in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. GL interface. ; Reimplemented from TVirtualX. ◆ GetCurrentWindow(). Window_t TGWin32VirtualXProxy::GetCurrentWindow ; (; ); const. overridevirtual . Return a pointer to the current window. ; Reimplemented from TVirtualX.; Definition at line 336 of file TGWin32VirtualXProxy.cxx. ◆ GetDefaultRootWindow(). Window_t TGWin32VirtualXProxy::GetDefaultRootWindow ; (; ); const. overridevirtual . Returns handle to the default root window created when calling XOpenDisplay(). ; Reimplemented from TVirtualX. ◆ GetDepth(). Int_t TGWin32VirtualXProxy::GetDepth ; (; ); const. overridevirtual . Returns depth of screen (number of bit planes). ; Equivalent to GetPlanes(). ; Reimplemented from TVirtualX. ◆ GetDisplay(). Display_t TGWin32VirtualXProxy::GetDisplay ; (; ); const. overridevirtual . Returns handle to display (might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. ; GL interface). ; Reimplemented from TVirtualX. ◆ GetDoubleBuffer(). Int_t TGWin32VirtualXProxy::GetDoubleBuffer ; (; Int_t ; wid). overridevirtual . Queries the double buffer value for the window ""wid"". ; Reimplemented from TVirtualX. ◆ GetDrawMode(). EDrawMode TGWin32VirtualXProxy::GetDrawMode ; (; ). ◆ GetFillColor(). Color_t TGWin32VirtualXProxy::GetFillColor ; (; ); const. overridevirtual . Return the fill area color. ; Reimplemented from TAttFill. ◆ GetFillStyle(). Style_t TGWin32VirtualXProxy::GetFillStyle ; (; ); const. overridevirtual . Return the fill area style. ; Reimplemented from TAttFill. ◆ GetFontHandle(). FontH_t TGWin32VirtualXProxy::GetFontHandle ; (; FontStruct_t ; fs). overridevirtual . Returns the font handle of the specified font structure ""fs"". ; Reimplemented from TVirtualX. ◆ GetFontProperties(). void TGWin32VirtualXProxy::GetFontProperties ; (; FontStruct_t ; font, . Int_t & ; max_ascent, . Int_t & ; max_descent . ). overridevirtual . Returns the font properties. ; ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:84875,Integrability,interface,interface,84875,"_t ; , . Atom_t * ; , . Int_t * ; , . ULong_t * ; , . ULong_t * ; , . unsigned char ** ;  . ). overridevirtual . Returns the actual type of the property; the actual format of the property; the number of 8-bit, 16-bit, or 32-bit items transferred; the number of bytes remaining to be read in the property; and a pointer to the data actually returned. ; Reimplemented from TVirtualX. ◆ GetRegionBox(). void TGWin32VirtualXProxy::GetRegionBox ; (; Region_t ; reg, . Rectangle_t * ; rect . ). overridevirtual . Returns smallest enclosing rectangle. ; Reimplemented from TVirtualX. ◆ GetRGB(). void TGWin32VirtualXProxy::GetRGB ; (; Int_t ; index, . Float_t & ; r, . Float_t & ; g, . Float_t & ; b . ). overridevirtual . Returns RGB values for color ""index"". ; Reimplemented from TVirtualX. ◆ GetScreen(). Int_t TGWin32VirtualXProxy::GetScreen ; (; ); const. overridevirtual . Returns screen number. ; Might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. GL interface. ; Reimplemented from TVirtualX. ◆ GetTextAlign(). Short_t TGWin32VirtualXProxy::GetTextAlign ; (; ); const. overridevirtual . Return the text alignment. ; Reimplemented from TAttText. ◆ GetTextAngle(). Float_t TGWin32VirtualXProxy::GetTextAngle ; (; ); const. overridevirtual . Return the text angle. ; Reimplemented from TAttText. ◆ GetTextColor(). Color_t TGWin32VirtualXProxy::GetTextColor ; (; ); const. overridevirtual . Return the text color. ; Reimplemented from TAttText. ◆ GetTextExtent() [1/2]. void TGWin32VirtualXProxy::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . wchar_t * ; mess . ). inlineoverridevirtual . Returns the size of the specified character string ""mess"". ; Parameters. [in]wthe text width ; [in]hthe text height ; [in]messthe string . Reimplemented from TVirtualX.; Definition at line 65 of file TGWin32VirtualXProxy.h. ◆ GetTextExtent() [2/2]. void TGWin32VirtualXProxy::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . char * ; mess . ). overridevirtual .",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:86728,Integrability,interface,interface,86728,"roxy.h. ◆ GetTextExtent() [2/2]. void TGWin32VirtualXProxy::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . char * ; mess . ). overridevirtual . Returns the size of the specified character string ""mess"". ; Parameters. [in]wthe text width ; [in]hthe text height ; [in]messthe string . Reimplemented from TVirtualX. ◆ GetTextFont(). Font_t TGWin32VirtualXProxy::GetTextFont ; (; ); const. overridevirtual . Return the text font. ; Reimplemented from TAttText. ◆ GetTextMagnitude(). Float_t TGWin32VirtualXProxy::GetTextMagnitude ; (; ). overridevirtual . Returns the current font magnification factor. ; Reimplemented from TVirtualX. ◆ GetTextSize(). Float_t TGWin32VirtualXProxy::GetTextSize ; (; ); const. overridevirtual . Return the text size. ; Reimplemented from TAttText. ◆ GetVisual(). Visual_t TGWin32VirtualXProxy::GetVisual ; (; ); const. overridevirtual . Returns handle to visual. ; Might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. GL interface. ; Reimplemented from TVirtualX. ◆ GetWindowAttributes(). void TGWin32VirtualXProxy::GetWindowAttributes ; (; Window_t ; id, . WindowAttributes_t & ; attr . ). overridevirtual . The WindowAttributes_t structure is set to default. ; Reimplemented from TVirtualX. ◆ GetWindowID(). Window_t TGWin32VirtualXProxy::GetWindowID ; (; Int_t ; wid). overridevirtual . Returns the X11 window identifier. ; Parameters. [in]widworkstation identifier (input) . Reimplemented from TVirtualX. ◆ GetWindowSize(). void TGWin32VirtualXProxy::GetWindowSize ; (; Drawable_t ; id, . Int_t & ; x, . Int_t & ; y, . UInt_t & ; w, . UInt_t & ; h . ). overridevirtual . Returns the location and the size of window ""id"". ; Parameters. [in]iddrawable identifier ; [in]x,ycoordinates of the upper-left outer corner relative to the parent window's origin ; [in]w,hthe inside size of the window, not including the border . Reimplemented from TVirtualX. ◆ GrabButton(). void TGWin32VirtualXProxy::GrabButton ; (; Window_t ; i",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:90351,Integrability,depend,dependent,90351," grab the key and modifier grab = kFALSE ungrab the key and modifier . Reimplemented from TVirtualX. ◆ GrabPointer(). void TGWin32VirtualXProxy::GrabPointer ; (; Window_t ; id, . UInt_t ; evmask, . Window_t ; confine, . Cursor_t ; cursor, . Bool_t ; grab = kTRUE, . Bool_t ; owner_events = kTRUE . ). overridevirtual . Establishes an active pointer grab. ; While an active pointer grab is in effect, further pointer events are only reported to the grabbing client window. ; Reimplemented from TVirtualX. ◆ HasTTFonts(). Bool_t TGWin32VirtualXProxy::HasTTFonts ; (; ); const. overridevirtual . Returns True when TrueType fonts are used. ; Reimplemented from TVirtualX. ◆ IconifyWindow(). void TGWin32VirtualXProxy::IconifyWindow ; (; Window_t ; id). overridevirtual . Iconifies the window ""id"". ; Reimplemented from TVirtualX. ◆ Init(). Bool_t TGWin32VirtualXProxy::Init ; (; void * ; display = nullptr). overridevirtual . Initializes the X system. ; Returns kFALSE in case of failure. It is implementation dependent. ; Reimplemented from TVirtualX. ◆ InitWindow(). Int_t TGWin32VirtualXProxy::InitWindow ; (; ULongptr_t ; window). overridevirtual . Creates a new window and return window number. ; Returns -1 if window initialization fails. ; Reimplemented from TVirtualX. ◆ InternAtom(). Atom_t TGWin32VirtualXProxy::InternAtom ; (; const char * ; atom_name, . Bool_t ; only_if_exist . ). overridevirtual . Returns the atom identifier associated with the specified ""atom_name"" string. ; If ""only_if_exists"" is False, the atom is created if it does not exist. If the atom name is not in the Host Portable Character Encoding, the result is implementation dependent. Uppercase and lowercase matter; the strings ""thing"", ""Thing"", and ""thinG"" all designate different atoms. ; Reimplemented from TVirtualX. ◆ IntersectRegion(). void TGWin32VirtualXProxy::IntersectRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Computes the intersection of two regions. ; Parame",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:90999,Integrability,depend,dependent,90999,"TrueType fonts are used. ; Reimplemented from TVirtualX. ◆ IconifyWindow(). void TGWin32VirtualXProxy::IconifyWindow ; (; Window_t ; id). overridevirtual . Iconifies the window ""id"". ; Reimplemented from TVirtualX. ◆ Init(). Bool_t TGWin32VirtualXProxy::Init ; (; void * ; display = nullptr). overridevirtual . Initializes the X system. ; Returns kFALSE in case of failure. It is implementation dependent. ; Reimplemented from TVirtualX. ◆ InitWindow(). Int_t TGWin32VirtualXProxy::InitWindow ; (; ULongptr_t ; window). overridevirtual . Creates a new window and return window number. ; Returns -1 if window initialization fails. ; Reimplemented from TVirtualX. ◆ InternAtom(). Atom_t TGWin32VirtualXProxy::InternAtom ; (; const char * ; atom_name, . Bool_t ; only_if_exist . ). overridevirtual . Returns the atom identifier associated with the specified ""atom_name"" string. ; If ""only_if_exists"" is False, the atom is created if it does not exist. If the atom name is not in the Host Portable Character Encoding, the result is implementation dependent. Uppercase and lowercase matter; the strings ""thing"", ""Thing"", and ""thinG"" all designate different atoms. ; Reimplemented from TVirtualX. ◆ IntersectRegion(). void TGWin32VirtualXProxy::IntersectRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Computes the intersection of two regions. ; Parameters. [in]rega,regbspecify the two regions with which you want to perform the computation ; [in]resultreturns the result of the computation . Reimplemented from TVirtualX. ◆ IsCmdThread(). Bool_t TGWin32VirtualXProxy::IsCmdThread ; (; ); const. overridevirtual . Return kTRUE if we are inside cmd/server thread. ; Reimplemented from TVirtualX.; Definition at line 328 of file TGWin32VirtualXProxy.cxx. ◆ IsDNDAware(). Bool_t TGWin32VirtualXProxy::IsDNDAware ; (; Window_t ; win, . Atom_t * ; typelist . ). overridevirtual . Checks if the Window is DND aware, and knows any of the DND formats passed in argument. ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:92354,Integrability,depend,dependent,92354,"ons. ; Parameters. [in]rega,regbspecify the two regions with which you want to perform the computation ; [in]resultreturns the result of the computation . Reimplemented from TVirtualX. ◆ IsCmdThread(). Bool_t TGWin32VirtualXProxy::IsCmdThread ; (; ); const. overridevirtual . Return kTRUE if we are inside cmd/server thread. ; Reimplemented from TVirtualX.; Definition at line 328 of file TGWin32VirtualXProxy.cxx. ◆ IsDNDAware(). Bool_t TGWin32VirtualXProxy::IsDNDAware ; (; Window_t ; win, . Atom_t * ; typelist . ). overridevirtual . Checks if the Window is DND aware, and knows any of the DND formats passed in argument. ; Reimplemented from TVirtualX. ◆ IsTransparent(). Bool_t TGWin32VirtualXProxy::IsTransparent ; (; ); const. overridevirtual . Reimplemented from TAttFill. ◆ KeysymToKeycode(). Int_t TGWin32VirtualXProxy::KeysymToKeycode ; (; UInt_t ; keysym). overridevirtual . Converts the ""keysym"" to the appropriate keycode. ; For example, keysym is a letter and keycode is the matching keyboard key (which is dependent on the current keyboard mapping). If the specified ""keysym"" is not defined for any keycode, returns zero. ; Reimplemented from TVirtualX. ◆ ListFonts(). char ** TGWin32VirtualXProxy::ListFonts ; (; const char * ; fontname, . Int_t ; max, . Int_t & ; count . ). overridevirtual . Returns list of font names matching fontname regexp, like ""-*-times-*"". ; The pattern string can contain any characters, but each asterisk (*) is a wildcard for any number of characters, and each question mark (?) is a wildcard for a single character. If the pattern string is not in the Host Portable Character Encoding, the result is implementation dependent. Use of uppercase or lowercase does not matter. Each returned string is null-terminated.; Parameters. [in]fontnamespecifies the null-terminated pattern string that can contain wildcard characters ; [in]maxspecifies the maximum number of names to be returned ; [in]countreturns the actual number of font names . Reimplemented from",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:92994,Integrability,depend,dependent,92994,"gument. ; Reimplemented from TVirtualX. ◆ IsTransparent(). Bool_t TGWin32VirtualXProxy::IsTransparent ; (; ); const. overridevirtual . Reimplemented from TAttFill. ◆ KeysymToKeycode(). Int_t TGWin32VirtualXProxy::KeysymToKeycode ; (; UInt_t ; keysym). overridevirtual . Converts the ""keysym"" to the appropriate keycode. ; For example, keysym is a letter and keycode is the matching keyboard key (which is dependent on the current keyboard mapping). If the specified ""keysym"" is not defined for any keycode, returns zero. ; Reimplemented from TVirtualX. ◆ ListFonts(). char ** TGWin32VirtualXProxy::ListFonts ; (; const char * ; fontname, . Int_t ; max, . Int_t & ; count . ). overridevirtual . Returns list of font names matching fontname regexp, like ""-*-times-*"". ; The pattern string can contain any characters, but each asterisk (*) is a wildcard for any number of characters, and each question mark (?) is a wildcard for a single character. If the pattern string is not in the Host Portable Character Encoding, the result is implementation dependent. Use of uppercase or lowercase does not matter. Each returned string is null-terminated.; Parameters. [in]fontnamespecifies the null-terminated pattern string that can contain wildcard characters ; [in]maxspecifies the maximum number of names to be returned ; [in]countreturns the actual number of font names . Reimplemented from TVirtualX. ◆ LoadQueryFont(). FontStruct_t TGWin32VirtualXProxy::LoadQueryFont ; (; const char * ; font_name). overridevirtual . Provides the most common way for accessing a font: opens (loads) the specified font and returns a pointer to the appropriate FontStruct_t structure. ; If the font does not exist, it returns NULL. ; Reimplemented from TVirtualX. ◆ LookupString(). void TGWin32VirtualXProxy::LookupString ; (; Event_t * ; event, . char * ; buf, . Int_t ; buflen, . UInt_t & ; keysym . ). overridevirtual . Convert the keycode from the event structure to a key symbol (according to the modifiers specified ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:97853,Integrability,depend,dependent,97853,"nDisplay(). Int_t TGWin32VirtualXProxy::OpenDisplay ; (; const char * ; dpyName = nullptr). overridevirtual . Opens connection to display server (if such a thing exist on the current platform). ; The encoding and interpretation of the display name.; On X11 this method returns on success the X display socket descriptor >0, 0 in case of batch mode, and <0 in case of failure (cannot connect to display dpyName). ; Reimplemented from TVirtualX. ◆ OpenPixmap(). Int_t TGWin32VirtualXProxy::OpenPixmap ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Creates a pixmap of the width ""w"" and height ""h"" you specified. ; Reimplemented from TVirtualX. ◆ ParseColor(). Bool_t TGWin32VirtualXProxy::ParseColor ; (; Colormap_t ; cmap, . const char * ; cname, . ColorStruct_t & ; color . ). overridevirtual . Looks up the string name of a color ""cname"" with respect to the screen associated with the specified colormap. ; It returns the exact color value. If the color name is not in the Host Portable Character Encoding, the result is implementation dependent.; Parameters. [in]cmapthe colormap ; [in]cnamethe color name string; use of uppercase or lowercase does not matter ; [in]colorreturns the exact color value for later use. The ColorStruct_t structure is set to default. Let system think we could parse color. ; Reimplemented from TVirtualX. ◆ PointInRegion(). Bool_t TGWin32VirtualXProxy::PointInRegion ; (; Int_t ; x, . Int_t ; y, . Region_t ; reg . ). overridevirtual . Returns kTRUE if the point [x, y] is contained in the region reg. ; Reimplemented from TVirtualX. ◆ PolygonRegion(). Region_t TGWin32VirtualXProxy::PolygonRegion ; (; Point_t * ; points, . Int_t ; np, . Bool_t ; winding . ). overridevirtual . Returns a region for the polygon defined by the points array. ; Parameters. [in]pointsspecifies an array of points ; [in]npspecifies the number of points in the polygon ; [in]windingspecifies the winding-rule is set (kTRUE) or not(kFALSE) . Reimplemented from TVirtualX. ◆ ProxyObject",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:99809,Integrability,depend,dependent,99809,"lX * TGWin32VirtualXProxy::ProxyObject ; (; ). static . ◆ PutImage(). void TGWin32VirtualXProxy::PutImage ; (; Drawable_t ; id, . GContext_t ; gc, . Drawable_t ; img, . Int_t ; dx, . Int_t ; dy, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Combines an image with a rectangle of the specified drawable. ; The section of the image defined by the x, y, width, and height arguments is drawn on the specified part of the drawable.; Parameters. [in]idthe drawable ; [in]gcthe GC ; [in]imgthe image you want combined with the rectangle ; [in]dxthe offset in X from the left edge of the image ; [in]dythe offset in Y from the top edge of the image ; [in]x,ycoordinates, which are relative to the origin of the drawable and are the coordinates of the subimage ; [in]w,hthe width and height of the subimage, which define the rectangle dimensions. GC components in use: function, plane-mask, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask. GC mode-dependent components: foreground and background. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ PutPixel(). void TGWin32VirtualXProxy::PutPixel ; (; Drawable_t ; id, . Int_t ; x, . Int_t ; y, . ULong_t ; pixel . ). overridevirtual . Overwrites the pixel in the image with the specified pixel value. ; The image must contain the x and y coordinates.; Parameters. [in]idspecifies the image ; [in]x,ycoordinates ; [in]pixelthe new pixel value . Reimplemented from TVirtualX. ◆ QueryColor(). void TGWin32VirtualXProxy::QueryColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Returns the current RGB value for the pixel in the ""color"" structure. ; The color components are set to default.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the RGB values for the pixel specified in the structure . Reimplemented from TVirtualX. ◆ QueryPointer() [1/2]. void TGWin32VirtualXProxy::QueryPointer ; (; Int_t & ; ix, . Int_t & ; iy . ). overridevirtual . Returns t",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:114773,Integrability,rout,routine,114773,"; mcolor). overridevirtual . Set the marker color. ; Reimplemented from TAttMarker. ◆ SetMarkerSize(). void TGWin32VirtualXProxy::SetMarkerSize ; (; Float_t ; msize). overridevirtual . Set the marker size. ; Note that the marker styles number 1 6 and 7 (the dots), cannot be scaled. They are meant to be very fast to draw and are always drawn with the same number of pixels; therefore this method does not apply on them. ; Reimplemented from TAttMarker. ◆ SetMarkerStyle(). void TGWin32VirtualXProxy::SetMarkerStyle ; (; Style_t ; mstyle). overridevirtual . Set the marker style. ; Reimplemented from TAttMarker. ◆ SetMWMHints(). void TGWin32VirtualXProxy::SetMWMHints ; (; Window_t ; id, . UInt_t ; value, . UInt_t ; funcs, . UInt_t ; input . ). overridevirtual . Sets decoration style. ; Reimplemented from TVirtualX. ◆ SetOpacity(). void TGWin32VirtualXProxy::SetOpacity ; (; Int_t ; percent). overridevirtual . Sets opacity of the current window. ; This image manipulation routine works by adding to a percent amount of neutral to each pixels RGB. Since it requires quite some additional color map entries is it only supported on displays with more than > 8 color planes (> 256 colors). ; Reimplemented from TVirtualX. ◆ SetPrimarySelectionOwner(). void TGWin32VirtualXProxy::SetPrimarySelectionOwner ; (; Window_t ; id). overridevirtual . Makes the window ""id"" the current owner of the primary selection. ; That is the window in which, for example some text is selected. ; Reimplemented from TVirtualX. ◆ SetRGB(). void TGWin32VirtualXProxy::SetRGB ; (; Int_t ; cindex, . Float_t ; r, . Float_t ; g, . Float_t ; b . ). overridevirtual . Sets color intensities the specified color index ""cindex"". ; Parameters. [in]cindexcolor index ; [in]r,g,bthe red, green, blue intensities between 0.0 and 1.0 . Reimplemented from TVirtualX. ◆ SetSelectionOwner(). Bool_t TGWin32VirtualXProxy::SetSelectionOwner ; (; Window_t ; , . Atom_t & ;  . ). overridevirtual . Changes the owner and last-change time for ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:121220,Integrability,depend,depends,121220,"irtual . Tells window manager that the window ""id"" is a transient window of the window ""main_id"". ; A window manager may decide not to decorate a transient window or may treat it differently in other ways. ; Reimplemented from TVirtualX. ◆ ShapeCombineMask(). void TGWin32VirtualXProxy::ShapeCombineMask ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . Pixmap_t ; mask . ). overridevirtual . The Non-rectangular Window Shape Extension adds non-rectangular windows to the System. ; This allows for making shaped (partially transparent) windows ; Reimplemented from TVirtualX. ◆ SubtractRegion(). void TGWin32VirtualXProxy::SubtractRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Subtracts regb from rega and stores the results in result. ; Reimplemented from TVirtualX. ◆ TextWidth(). Int_t TGWin32VirtualXProxy::TextWidth ; (; FontStruct_t ; font, . const char * ; s, . Int_t ; len . ). overridevirtual . Return length of the string ""s"" in pixels. Size depends on font. ; Reimplemented from TVirtualX. ◆ TranslateCoordinates(). void TGWin32VirtualXProxy::TranslateCoordinates ; (; Window_t ; src, . Window_t ; dest, . Int_t ; src_x, . Int_t ; src_y, . Int_t & ; dest_x, . Int_t & ; dest_y, . Window_t & ; child . ). overridevirtual . Translates coordinates in one window to the coordinate space of another window. ; It takes the ""src_x"" and ""src_y"" coordinates relative to the source window's origin and returns these coordinates to ""dest_x"" and ""dest_y"" relative to the destination window's origin.; Parameters. [in]srcthe source window ; [in]destthe destination window ; [in]src_x,src_ycoordinates within the source window ; [in]dest_x,dest_ycoordinates within the destination window ; [in]childreturns the child of ""dest"" if the coordinates are contained in a mapped child of the destination window; otherwise, child is set to 0 . Reimplemented from TVirtualX. ◆ UnionRectWithRegion(). void TGWin32VirtualXProxy::UnionRectWithRegion ; (; Rectangle_t * ; r",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:123388,Integrability,synchroniz,synchronizes,123388," ; Parameters. [in]rectspecifies the rectangle ; [in]srcspecifies the source region to be used ; [in]destreturns the destination region . Reimplemented from TVirtualX. ◆ UnionRegion(). void TGWin32VirtualXProxy::UnionRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Computes the union of two regions. ; Parameters. [in]rega,regbspecify the two regions with which you want to perform the computation ; [in]resultreturns the result of the computation . Reimplemented from TVirtualX. ◆ UnmapWindow(). void TGWin32VirtualXProxy::UnmapWindow ; (; Window_t ; id). overridevirtual . Unmaps the specified window ""id"". ; If the specified window is already unmapped, this function has no effect. Any child window will no longer be visible (but they are still mapped) until another map call is made on the parent. ; Reimplemented from TVirtualX. ◆ Update(). void TGWin32VirtualXProxy::Update ; (; Int_t ; mode = 0). overridevirtual . Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer. ; Flush flushes output buffer. Sync flushes buffer and waits till all requests have been processed by X server. ; Reimplemented from TVirtualX. ◆ UpdateWindow(). void TGWin32VirtualXProxy::UpdateWindow ; (; Int_t ; mode). overridevirtual . Updates or synchronises client and server once (not permanent). ; according to ""mode"".; Parameters. [in]modeupdate mode.; mode = 1 update; mode = 0 sync . Reimplemented from TVirtualX. ◆ Warp(). void TGWin32VirtualXProxy::Warp ; (; Int_t ; ix, . Int_t ; iy, . Window_t ; id = 0 . ). overridevirtual . Sets the pointer position. ; Parameters. [in]ixnew X coordinate of pointer ; [in]iynew Y coordinate of pointer ; [in]idwindow identifier. Coordinates are relative to the origin of the window id or to the origin of the current window if id == 0. ; Reimplemented from TVirtualX. ◆ WMDeleteNotify(). void TGWin32VirtualXProxy::WMDeleteNotify ; (; Window_t ; id). overridevirtual . Tells WM to send message when window is clos",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:124365,Integrability,message,message,124365,", default) or synchronizes (mode = 1) X output buffer. ; Flush flushes output buffer. Sync flushes buffer and waits till all requests have been processed by X server. ; Reimplemented from TVirtualX. ◆ UpdateWindow(). void TGWin32VirtualXProxy::UpdateWindow ; (; Int_t ; mode). overridevirtual . Updates or synchronises client and server once (not permanent). ; according to ""mode"".; Parameters. [in]modeupdate mode.; mode = 1 update; mode = 0 sync . Reimplemented from TVirtualX. ◆ Warp(). void TGWin32VirtualXProxy::Warp ; (; Int_t ; ix, . Int_t ; iy, . Window_t ; id = 0 . ). overridevirtual . Sets the pointer position. ; Parameters. [in]ixnew X coordinate of pointer ; [in]iynew Y coordinate of pointer ; [in]idwindow identifier. Coordinates are relative to the origin of the window id or to the origin of the current window if id == 0. ; Reimplemented from TVirtualX. ◆ WMDeleteNotify(). void TGWin32VirtualXProxy::WMDeleteNotify ; (; Window_t ; id). overridevirtual . Tells WM to send message when window is closed via WM. ; Reimplemented from TVirtualX. ◆ WriteGIF(). Int_t TGWin32VirtualXProxy::WriteGIF ; (; char * ; name). overridevirtual . Writes the current window into GIF file. ; Returns 1 in case of success, 0 otherwise. ; Reimplemented from TVirtualX. ◆ WritePixmap(). void TGWin32VirtualXProxy::WritePixmap ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h, . char * ; pxname . ). overridevirtual . Writes the pixmap ""wid"" in the bitmap file ""pxname"". ; Parameters. [in]widthe pixmap address ; [in]w,hthe width and height of the pixmap. ; [in]pxnamethe file name . Reimplemented from TVirtualX. ◆ XorRegion(). void TGWin32VirtualXProxy::XorRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Calculates the difference between the union and intersection of two regions. ; Parameters. [in]rega,regbspecify the two regions with which you want to perform the computation ; [in]resultreturns the result of the computation . Reimplemented from TVirtualX. ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:29161,Modifiability,inherit,inherited,29161,"n_t result) override;  Computes the union of two regions. ;  ; void UnmapWindow (Window_t id) override;  Unmaps the specified window ""id"". ;  ; void Update (Int_t mode=0) override;  Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Updates or synchronises client and server once (not permanent). ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Sets the pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tells WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Writes the pixmap ""wid"" in the bitmap file ""pxname"". ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculates the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual Int_t AddPixmap (ULongptr_t pixid, UInt_t w, UInt_t h);  Registers a pixmap created by TGLManager as a ROOT pixmap. ;  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext);  Creates OpenGL context for window ""windowID"". ;  ; virtual Window_t CreateOpenGLWindow (Window_t parentID, UInt_t width, UInt_t height, const std::vector< std::pair< UInt_t, Int_t > > &format);  Create window with special pixel format. Noop everywhere except Cocoa. ;  ; virtual void DeleteOpenGLContext (Int_t wid=0);  Deletes OpenGL context for window ""wid"". ;  ; virtual void DispatchClientMessage (UInt_t messageID);  Force processing of event, sent by SendEvent before. ;  ; virtual UI",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:33528,Modifiability,inherit,inherited,33528,"ide;  Sets marker size index. ;  ; void SetMarkerStyle (Style_t markerstyle) override;  Sets marker style. ;  ; void SetTextAlign (Short_t talign=11) override;  Sets the text alignment. ;  ; void SetTextColor (Color_t cindex) override;  Sets the color index ""cindex"" for text. ;  ; void SetTextFont (Font_t fontnumber) override;  Sets the current text font number. ;  ; void SetTextSize (Float_t textsize) override;  Sets the current text size to ""textsize"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t SupportsExtension (const char *ext) const;  Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ; virtual void Sync (Int_t mode);  Set synchronisation on or off. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:35156,Modifiability,inherit,inherited,35156,"ual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:36249,Modifiability,inherit,inheritance,36249,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:38248,Modifiability,inherit,inherits,38248,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:38365,Modifiability,inherit,inherits,38365,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:41924,Modifiability,inherit,inherited,41924,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fs",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:42832,Modifiability,inherit,inherited,42832,"ion=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (T",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:43566,Modifiability,inherit,inherited,43566,"1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a new TAttText. ;  ; virtual Float_t GetTextSizePercent (Float_t size);  Return the text in percent of the pad size. ;  ; virtual void Modify ();  Change current text attributes if necessary. ;  ; virtual void SaveTextAttributes (std::ostream &out, const char *name, Int_t alidef=12, Float_t angdef=0, Int_t coldef=1, Int_t fondef=61, Float_t sizdef=1);  Save text attributes as C++ statement(s) on output stream out. ;  ; virtual void SetTextColorAlpha (Color_t tcolor, Float_t talpha);  Set a transparent text color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default co",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:44487,Modifiability,inherit,inherited,44487,"void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a new TAttText. ;  ; virtual Float_t GetTextSizePercent (Float_t size);  Return the text in percent of the pad size. ;  ; virtual void Modify ();  Change current text attributes if necessary. ;  ; virtual void SaveTextAttributes (std::ostream &out, const char *name, Int_t alidef=12, Float_t angdef=0, Int_t coldef=1, Int_t fondef=61, Float_t sizdef=1);  Save text attributes as C++ statement(s) on output stream out. ;  ; virtual void SetTextColorAlpha (Color_t tcolor, Float_t talpha);  Set a transparent text color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGWin32ProxyBase;  TGWin32ProxyBase ();  ctor ;  ; virtual ~TGWin32ProxyBase ();  dtor ;  ; virtual void ExecuteCallBack (Bool_t sync);  Executes all batched callbacks and the latest callb",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:45274,Modifiability,inherit,inherited,45274,"t talpha);  Set a transparent text color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGWin32ProxyBase;  TGWin32ProxyBase ();  ctor ;  ; virtual ~TGWin32ProxyBase ();  dtor ;  ; virtual void ExecuteCallBack (Bool_t sync);  Executes all batched callbacks and the latest callback This method is executed by server thread. ;  ; ULong_t GetId () const;  ; virtual Double_t GetMilliSeconds ();  returns elapsed time in milliseconds with microseconds precision ;  . Static Public Member Functions; static TVirtualX * ProxyObject ();  ; static TVirtualX * RealObject ();  ;  Static Public Member Functions inherited from TVirtualX; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualX *& Instance ();  Returns gVirtualX global. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:45802,Modifiability,inherit,inherited,45802,"marker attributes if necessary. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGWin32ProxyBase;  TGWin32ProxyBase ();  ctor ;  ; virtual ~TGWin32ProxyBase ();  dtor ;  ; virtual void ExecuteCallBack (Bool_t sync);  Executes all batched callbacks and the latest callback This method is executed by server thread. ;  ; ULong_t GetId () const;  ; virtual Double_t GetMilliSeconds ();  returns elapsed time in milliseconds with microseconds precision ;  . Static Public Member Functions; static TVirtualX * ProxyObject ();  ; static TVirtualX * RealObject ();  ;  Static Public Member Functions inherited from TVirtualX; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualX *& Instance ();  Returns gVirtualX global. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Cla",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:46080,Modifiability,inherit,inherited,46080,om TGWin32ProxyBase;  TGWin32ProxyBase ();  ctor ;  ; virtual ~TGWin32ProxyBase ();  dtor ;  ; virtual void ExecuteCallBack (Bool_t sync);  Executes all batched callbacks and the latest callback This method is executed by server thread. ;  ; ULong_t GetId () const;  ; virtual Double_t GetMilliSeconds ();  returns elapsed time in milliseconds with microseconds precision ;  . Static Public Member Functions; static TVirtualX * ProxyObject ();  ; static TVirtualX * RealObject ();  ;  Static Public Member Functions inherited from TVirtualX; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualX *& Instance ();  Returns gVirtualX global. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; s,MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:46290,Modifiability,inherit,inherited,46290,om TGWin32ProxyBase;  TGWin32ProxyBase ();  ctor ;  ; virtual ~TGWin32ProxyBase ();  dtor ;  ; virtual void ExecuteCallBack (Bool_t sync);  Executes all batched callbacks and the latest callback This method is executed by server thread. ;  ; ULong_t GetId () const;  ; virtual Double_t GetMilliSeconds ();  returns elapsed time in milliseconds with microseconds precision ;  . Static Public Member Functions; static TVirtualX * ProxyObject ();  ; static TVirtualX * RealObject ();  ;  Static Public Member Functions inherited from TVirtualX; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualX *& Instance ();  Returns gVirtualX global. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; s,MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:46808,Modifiability,inherit,inherited,46808, char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TGWin32ProxyBase; static void GlobalLock ();  lock any proxy (client thread) ;  ; static void GlobalUnlock ();  unlock any proxy (client thread) ;  ; static Bool_t IsGloballyLocked ();  Check the status of the lock. ;  ; static void Lock ();  enter critical section ;  ; static Bool_t Ping ();  send ping messsage to server thread ;  ; static void Unlock ();  le,MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:47020,Modifiability,inherit,inherited,47020, char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TGWin32ProxyBase; static void GlobalLock ();  lock any proxy (client thread) ;  ; static void GlobalUnlock ();  unlock any proxy (client thread) ;  ; static Bool_t IsGloballyLocked ();  Check the status of the lock. ;  ; static void Lock ();  enter critical section ;  ; static Bool_t Ping ();  send ping messsage to server thread ;  ; static void Unlock ();  le,MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:47232,Modifiability,inherit,inherited,47232, char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TGWin32ProxyBase; static void GlobalLock ();  lock any proxy (client thread) ;  ; static void GlobalUnlock ();  unlock any proxy (client thread) ;  ; static Bool_t IsGloballyLocked ();  Check the status of the lock. ;  ; static void Lock ();  enter critical section ;  ; static Bool_t Ping ();  send ping messsage to server thread ;  ; static void Unlock ();  le,MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:47444,Modifiability,inherit,inherited,47444, char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TGWin32ProxyBase; static void GlobalLock ();  lock any proxy (client thread) ;  ; static void GlobalUnlock ();  unlock any proxy (client thread) ;  ; static Bool_t IsGloballyLocked ();  Check the status of the lock. ;  ; static void Lock ();  enter critical section ;  ; static Bool_t Ping ();  send ping messsage to server thread ;  ; static void Unlock ();  le,MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:47979,Modifiability,inherit,inherited,47979,"tatic const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TGWin32ProxyBase; static void GlobalLock ();  lock any proxy (client thread) ;  ; static void GlobalUnlock ();  unlock any proxy (client thread) ;  ; static Bool_t IsGloballyLocked ();  Check the status of the lock. ;  ; static void Lock ();  enter critical section ;  ; static Bool_t Ping ();  send ping messsage to server thread ;  ; static void Unlock ();  leave critical section ;  . Static Protected Attributes; static TVirtualX * fgRealObject = 0;  ;  Static Protected Attributes inherited from TGWin32ProxyBase; static Long_t fgLock = 0;  fgLock=1 - all client threads locked ;  ; static UInt_t fMaxResponseTime = 0;  max period for waiting response from server thread ;  . Friends; class TGWin32;  . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x040",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:48480,Modifiability,inherit,inherited,48480,"ame ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TGWin32ProxyBase; static void GlobalLock ();  lock any proxy (client thread) ;  ; static void GlobalUnlock ();  unlock any proxy (client thread) ;  ; static Bool_t IsGloballyLocked ();  Check the status of the lock. ;  ; static void Lock ();  enter critical section ;  ; static Bool_t Ping ();  send ping messsage to server thread ;  ; static void Unlock ();  leave critical section ;  . Static Protected Attributes; static TVirtualX * fgRealObject = 0;  ;  Static Protected Attributes inherited from TGWin32ProxyBase; static Long_t fgLock = 0;  fgLock=1 - all client threads locked ;  ; static UInt_t fMaxResponseTime = 0;  max period for waiting response from server thread ;  . Friends; class TGWin32;  . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextM",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:48746,Modifiability,inherit,inherited,48746," for the given style. ;  ;  Static Public Member Functions inherited from TGWin32ProxyBase; static void GlobalLock ();  lock any proxy (client thread) ;  ; static void GlobalUnlock ();  unlock any proxy (client thread) ;  ; static Bool_t IsGloballyLocked ();  Check the status of the lock. ;  ; static void Lock ();  enter critical section ;  ; static Bool_t Ping ();  send ping messsage to server thread ;  ; static void Unlock ();  leave critical section ;  . Static Protected Attributes; static TVirtualX * fgRealObject = 0;  ;  Static Protected Attributes inherited from TGWin32ProxyBase; static Long_t fgLock = 0;  fgLock=1 - all client threads locked ;  ; static UInt_t fMaxResponseTime = 0;  max period for waiting response from server thread ;  . Friends; class TGWin32;  . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Attributes inherited from TGWin32ProxyBase; static ULong_t fgMainThreadId = 0;  main thread ID ;  ; static ULong_t fgPingMessageId = 0;  ping message ID ;  ; static ULong_t fgPostMessageId = 0;  post message ID ;  ; static ULong_t fgUserThreadId = 0;  user (e.g. python) thread ID ;  ;  Protected Types inherited",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:48970,Modifiability,inherit,inherited,48970," for the given style. ;  ;  Static Public Member Functions inherited from TGWin32ProxyBase; static void GlobalLock ();  lock any proxy (client thread) ;  ; static void GlobalUnlock ();  unlock any proxy (client thread) ;  ; static Bool_t IsGloballyLocked ();  Check the status of the lock. ;  ; static void Lock ();  enter critical section ;  ; static Bool_t Ping ();  send ping messsage to server thread ;  ; static void Unlock ();  leave critical section ;  . Static Protected Attributes; static TVirtualX * fgRealObject = 0;  ;  Static Protected Attributes inherited from TGWin32ProxyBase; static Long_t fgLock = 0;  fgLock=1 - all client threads locked ;  ; static UInt_t fMaxResponseTime = 0;  max period for waiting response from server thread ;  . Friends; class TGWin32;  . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Attributes inherited from TGWin32ProxyBase; static ULong_t fgMainThreadId = 0;  main thread ID ;  ; static ULong_t fgPingMessageId = 0;  ping message ID ;  ; static ULong_t fgPostMessageId = 0;  post message ID ;  ; static ULong_t fgUserThreadId = 0;  user (e.g. python) thread ID ;  ;  Protected Types inherited",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:49620,Modifiability,inherit,inherited,49620,"rs;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Attributes inherited from TGWin32ProxyBase; static ULong_t fgMainThreadId = 0;  main thread ID ;  ; static ULong_t fgPingMessageId = 0;  ping message ID ;  ; static ULong_t fgPostMessageId = 0;  post message ID ;  ; static ULong_t fgUserThreadId = 0;  user (e.g. python) thread ID ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGWin32ProxyBase; virtual Bool_t ForwardCallBack (Bool_t sync);  if sync is kTRUE: ;  ; virtual void SendExitMessage ();  send exit message to server thread ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Att",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:49912,Modifiability,inherit,inherited,49912,"0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Attributes inherited from TGWin32ProxyBase; static ULong_t fgMainThreadId = 0;  main thread ID ;  ; static ULong_t fgPingMessageId = 0;  ping message ID ;  ; static ULong_t fgPostMessageId = 0;  post message ID ;  ; static ULong_t fgUserThreadId = 0;  user (e.g. python) thread ID ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGWin32ProxyBase; virtual Bool_t ForwardCallBack (Bool_t sync);  if sync is kTRUE: ;  ; virtual void SendExitMessage ();  send exit message to server thread ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:50011,Modifiability,inherit,inherited,50011,"0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Attributes inherited from TGWin32ProxyBase; static ULong_t fgMainThreadId = 0;  main thread ID ;  ; static ULong_t fgPingMessageId = 0;  ping message ID ;  ; static ULong_t fgPostMessageId = 0;  post message ID ;  ; static ULong_t fgUserThreadId = 0;  user (e.g. python) thread ID ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGWin32ProxyBase; virtual Bool_t ForwardCallBack (Bool_t sync);  if sync is kTRUE: ;  ; virtual void SendExitMessage ();  send exit message to server thread ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:50222,Modifiability,inherit,inherited,50222,"ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Attributes inherited from TGWin32ProxyBase; static ULong_t fgMainThreadId = 0;  main thread ID ;  ; static ULong_t fgPingMessageId = 0;  ping message ID ;  ; static ULong_t fgPostMessageId = 0;  post message ID ;  ; static ULong_t fgUserThreadId = 0;  user (e.g. python) thread ID ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGWin32ProxyBase; virtual Bool_t ForwardCallBack (Bool_t sync);  if sync is kTRUE: ;  ; virtual void SendExitMessage ();  send exit message to server thread ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TGWin32ProxyBase; Int_t fBatchLimit;  batch limit ;  ; TGWin32CallBack fCallBack;  callback function (execu",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:50421,Modifiability,inherit,inherited,50421,"ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Attributes inherited from TGWin32ProxyBase; static ULong_t fgMainThreadId = 0;  main thread ID ;  ; static ULong_t fgPingMessageId = 0;  ping message ID ;  ; static ULong_t fgPostMessageId = 0;  post message ID ;  ; static ULong_t fgUserThreadId = 0;  user (e.g. python) thread ID ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGWin32ProxyBase; virtual Bool_t ForwardCallBack (Bool_t sync);  if sync is kTRUE: ;  ; virtual void SendExitMessage ();  send exit message to server thread ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TGWin32ProxyBase; Int_t fBatchLimit;  batch limit ;  ; TGWin32CallBack fCallBack;  callback function (execu",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:50493,Modifiability,inherit,inherited,50493,"ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Attributes inherited from TGWin32ProxyBase; static ULong_t fgMainThreadId = 0;  main thread ID ;  ; static ULong_t fgPingMessageId = 0;  ping message ID ;  ; static ULong_t fgPostMessageId = 0;  post message ID ;  ; static ULong_t fgUserThreadId = 0;  user (e.g. python) thread ID ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGWin32ProxyBase; virtual Bool_t ForwardCallBack (Bool_t sync);  if sync is kTRUE: ;  ; virtual void SendExitMessage ();  send exit message to server thread ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TGWin32ProxyBase; Int_t fBatchLimit;  batch limit ;  ; TGWin32CallBack fCallBack;  callback function (execu",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:50575,Modifiability,inherit,inherited,50575,"ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Attributes inherited from TGWin32ProxyBase; static ULong_t fgMainThreadId = 0;  main thread ID ;  ; static ULong_t fgPingMessageId = 0;  ping message ID ;  ; static ULong_t fgPostMessageId = 0;  post message ID ;  ; static ULong_t fgUserThreadId = 0;  user (e.g. python) thread ID ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGWin32ProxyBase; virtual Bool_t ForwardCallBack (Bool_t sync);  if sync is kTRUE: ;  ; virtual void SendExitMessage ();  send exit message to server thread ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TGWin32ProxyBase; Int_t fBatchLimit;  batch limit ;  ; TGWin32CallBack fCallBack;  callback function (execu",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:50736,Modifiability,inherit,inherited,50736,"ssage ID ;  ; static ULong_t fgPostMessageId = 0;  post message ID ;  ; static ULong_t fgUserThreadId = 0;  user (e.g. python) thread ID ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGWin32ProxyBase; virtual Bool_t ForwardCallBack (Bool_t sync);  if sync is kTRUE: ;  ; virtual void SendExitMessage ();  send exit message to server thread ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TGWin32ProxyBase; Int_t fBatchLimit;  batch limit ;  ; TGWin32CallBack fCallBack;  callback function (executed by ""main"" thread) ;  ; ULong_t fId;  thread id. There is one proxy per client thread ;  ; Bool_t fIsVirtualX;  true if actual TVirtualX implementation ;  ; TList * fListOfCallBacks;  list of callbacks (used for batch processing) ;  ; void * fParam;  arguments passed to/from callback function ;  ; TGWin32ProxyBasePrivate * fPimpl;  very private data",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:50869,Modifiability,inherit,inherited,50869,"d ID ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGWin32ProxyBase; virtual Bool_t ForwardCallBack (Bool_t sync);  if sync is kTRUE: ;  ; virtual void SendExitMessage ();  send exit message to server thread ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TGWin32ProxyBase; Int_t fBatchLimit;  batch limit ;  ; TGWin32CallBack fCallBack;  callback function (executed by ""main"" thread) ;  ; ULong_t fId;  thread id. There is one proxy per client thread ;  ; Bool_t fIsVirtualX;  true if actual TVirtualX implementation ;  ; TList * fListOfCallBacks;  list of callbacks (used for batch processing) ;  ; void * fParam;  arguments passed to/from callback function ;  ; TGWin32ProxyBasePrivate * fPimpl;  very private data ;  . #include <TGWin32VirtualXProxy.h>. Inheritance diagram for TGWin32VirtualXProxy:. This browser is not able to show SVG: try Fir",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:51105,Modifiability,inherit,inherited,51105,"st;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGWin32ProxyBase; virtual Bool_t ForwardCallBack (Bool_t sync);  if sync is kTRUE: ;  ; virtual void SendExitMessage ();  send exit message to server thread ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TGWin32ProxyBase; Int_t fBatchLimit;  batch limit ;  ; TGWin32CallBack fCallBack;  callback function (executed by ""main"" thread) ;  ; ULong_t fId;  thread id. There is one proxy per client thread ;  ; Bool_t fIsVirtualX;  true if actual TVirtualX implementation ;  ; TList * fListOfCallBacks;  list of callbacks (used for batch processing) ;  ; void * fParam;  arguments passed to/from callback function ;  ; TGWin32ProxyBasePrivate * fPimpl;  very private data ;  . #include <TGWin32VirtualXProxy.h>. Inheritance diagram for TGWin32VirtualXProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGWin32VirtualXProxy() [1/2]. TGWin32VirtualXProxy::TGWin32VirtualXProxy ; (; ). inline . Definition at line 38 of file TGWin32VirtualXProxy.h. ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:51277,Modifiability,inherit,inherited,51277,"sage ();  send exit message to server thread ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Protected Attributes inherited from TGWin32ProxyBase; Int_t fBatchLimit;  batch limit ;  ; TGWin32CallBack fCallBack;  callback function (executed by ""main"" thread) ;  ; ULong_t fId;  thread id. There is one proxy per client thread ;  ; Bool_t fIsVirtualX;  true if actual TVirtualX implementation ;  ; TList * fListOfCallBacks;  list of callbacks (used for batch processing) ;  ; void * fParam;  arguments passed to/from callback function ;  ; TGWin32ProxyBasePrivate * fPimpl;  very private data ;  . #include <TGWin32VirtualXProxy.h>. Inheritance diagram for TGWin32VirtualXProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGWin32VirtualXProxy() [1/2]. TGWin32VirtualXProxy::TGWin32VirtualXProxy ; (; ). inline . Definition at line 38 of file TGWin32VirtualXProxy.h. ◆ TGWin32VirtualXProxy() [2/2]. TGWin32VirtualXProxy::TGWin32VirtualXProxy ; (; const char * ; name, . const char * ; title . ). inline . Definition at line 39 of file TGWin32VirtualXProxy.h. ◆ ~TGWin32VirtualXProxy(). TGWin32V",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:16363,Performance,load,loads,16363," override;  Creates a new window and return window number. ;  ; Atom_t InternAtom (const char *atom_name, Bool_t only_if_exist) override;  Returns the atom identifier associated with the specified ""atom_name"" string. ;  ; void IntersectRegion (Region_t rega, Region_t regb, Region_t result) override;  Computes the intersection of two regions. ;  ; Bool_t IsCmdThread () const override;  Return kTRUE if we are inside cmd/server thread. ;  ; Bool_t IsDNDAware (Window_t win, Atom_t *typelist) override;  Checks if the Window is DND aware, and knows any of the DND formats passed in argument. ;  ; Bool_t IsTransparent () const override;  ; Int_t KeysymToKeycode (UInt_t keysym) override;  Converts the ""keysym"" to the appropriate keycode. ;  ; char ** ListFonts (const char *fontname, Int_t max, Int_t &count) override;  Returns list of font names matching fontname regexp, like ""-*-times-*"". ;  ; FontStruct_t LoadQueryFont (const char *font_name) override;  Provides the most common way for accessing a font: opens (loads) the specified font and returns a pointer to the appropriate FontStruct_t structure. ;  ; void LookupString (Event_t *event, char *buf, Int_t buflen, UInt_t &keysym) override;  Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ;  ; void LowerWindow (Window_t id) override;  Lowers the specified window ""id"" to the bottom of the stack so that it does not obscure any sibling windows. ;  ; void MapRaised (Window_t id) override;  Maps the window ""id"" and all of its subwindows that have had map requests on the screen and put this window on the top of of the stack of all windows. ;  ; void MapSubwindows (Window_t id) override;  Maps all subwindows for the specified window ""id"" in top-to-bottom stacking order. ;  ; void MapWindow (Window_t id) override;  Maps the window ""id"" and all of its subwindows that have had map requests. ;  ; void MoveResizeWindow (Window_t i",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:17802,Performance,queue,queue,17802,"indow ""id"" to the bottom of the stack so that it does not obscure any sibling windows. ;  ; void MapRaised (Window_t id) override;  Maps the window ""id"" and all of its subwindows that have had map requests on the screen and put this window on the top of of the stack of all windows. ;  ; void MapSubwindows (Window_t id) override;  Maps all subwindows for the specified window ""id"" in top-to-bottom stacking order. ;  ; void MapWindow (Window_t id) override;  Maps the window ""id"" and all of its subwindows that have had map requests. ;  ; void MoveResizeWindow (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Changes the size and location of the specified window ""id"" without raising it. ;  ; void MoveWindow (Int_t wid, Int_t x, Int_t y) override;  Moves the window ""wid"" to the specified x and y coordinates. ;  ; void MoveWindow (Window_t id, Int_t x, Int_t y) override;  Moves the specified window to the specified x and y coordinates. ;  ; void NextEvent (Event_t &event) override;  Process next event in the queue - if any. ;  ; Int_t OpenDisplay (const char *dpyName=nullptr) override;  Opens connection to display server (if such a thing exist on the current platform). ;  ; Int_t OpenPixmap (UInt_t w, UInt_t h) override;  Creates a pixmap of the width ""w"" and height ""h"" you specified. ;  ; Bool_t ParseColor (Colormap_t cmap, const char *cname, ColorStruct_t &color) override;  Looks up the string name of a color ""cname"" with respect to the screen associated with the specified colormap. ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns kTRUE if the point [x, y] is contained in the region reg. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Returns a region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; v",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:20002,Performance,perform,performs,20002,"t RGB value for the pixel in the ""color"" structure. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Returns the pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Raises the specified window to the top of the stack so that no sibling window obscures it. ;  ; void ReadGIF (Int_t x0, Int_t y0, const char *file);  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Reads picture data from file ""filename"" and store it in ""ret_data"". ;  ; void RemoveWindow (ULongptr_t qwid) override;  Removes the created by Qt window ""qwid"". ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  If the specified window is mapped, ReparentWindow automatically performs an UnmapWindow request on it, removes it from its current position in the hierarchy, and inserts it as the child of the specified parent. ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Requests Locator position. ;  ; Int_t RequestString (Int_t x, Int_t y, char *text) override;  Requests string: text is displayed and can be edited with Emacs-like keybinding. ;  ; void RescaleWindow (Int_t wid, UInt_t w, UInt_t h) override;  Rescales the window ""wid"". ;  ; void ResetAttFill (Option_t *option="""") override;  Reset this fill attributes to default values. ;  ; void ResetAttLine (Option_t *option="""") override;  Reset this line attributes to default values. ;  ; void ResetAttMarker (Option_t *toption="""") override;  Reset this marker attributes to the default values. ;  ; void ResetAttText (Option_t *toption="""") override;  Reset this text attributes to default values. ;  ; Int_t ResizePixmap (Int_t wid, UInt_t w, UInt_t h) override;  Resizes the speci",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:31790,Performance,load,loads,31790,"tual Int_t GetFontDescent () const;  Returns the descent of the current font (in pixels. ;  ; virtual Int_t GetFontDescent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as descent requires a certain text. ;  ; virtual FontStruct_t GetGCFont (GContext_t gc);  Return the font associated with the graphics context gc. ;  ; virtual Double_t GetOpenGLScalingFactor ();  On a HiDPI resolution it can be > 1., this means glViewport should use scaled width and height. ;  ; TClass * IsA () const override;  ; virtual Bool_t MakeOpenGLContextCurrent (Handle_t ctx, Window_t windowID);  Makes context ctx current OpenGL context. ;  ; virtual void MapGCFont (GContext_t, FontStruct_t);  Map the XftFont with the Graphics Context using it. ;  ; virtual Bool_t NeedRedraw (ULongptr_t tgwindow, Bool_t force);  Notify the low level GUI layer ROOT requires ""tgwindow"" to be updated. ;  ; virtual Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0);  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; virtual UInt_t ScreenWidthMM () const;  Returns the width of the screen in millimeters. ;  ; virtual void SelectPixmap (Int_t qpixid);  Selects the pixmap ""qpixid"". ;  ; void SetFillColor (Color_t cindex) override;  Sets color index ""cindex"" for fill areas. ;  ; void SetFillStyle (Style_t style) override;  Sets fill area style. ;  ; void SetLineColor (Color_t cindex) override;  Sets color index ""cindex"" for drawing lines. ;  ; void SetLineStyle (Style_t linestyle) override;  Sets the line style. ;  ; void SetLineWidth (Width_t width) override;  Sets the line width. ;  ; void SetMarkerColor (Color_t cindex) override;  Sets color index ""cindex"" for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Sets marker size index. ;  ; void SetMarkerStyle (Style_t markerstyle) override;  Sets marker style. ;  ; void SetTextAlign (Short_t talign=11) override;  Sets the text alignment. ;  ; vo",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:91411,Performance,perform,perform,91411,"Win32VirtualXProxy::InitWindow ; (; ULongptr_t ; window). overridevirtual . Creates a new window and return window number. ; Returns -1 if window initialization fails. ; Reimplemented from TVirtualX. ◆ InternAtom(). Atom_t TGWin32VirtualXProxy::InternAtom ; (; const char * ; atom_name, . Bool_t ; only_if_exist . ). overridevirtual . Returns the atom identifier associated with the specified ""atom_name"" string. ; If ""only_if_exists"" is False, the atom is created if it does not exist. If the atom name is not in the Host Portable Character Encoding, the result is implementation dependent. Uppercase and lowercase matter; the strings ""thing"", ""Thing"", and ""thinG"" all designate different atoms. ; Reimplemented from TVirtualX. ◆ IntersectRegion(). void TGWin32VirtualXProxy::IntersectRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Computes the intersection of two regions. ; Parameters. [in]rega,regbspecify the two regions with which you want to perform the computation ; [in]resultreturns the result of the computation . Reimplemented from TVirtualX. ◆ IsCmdThread(). Bool_t TGWin32VirtualXProxy::IsCmdThread ; (; ); const. overridevirtual . Return kTRUE if we are inside cmd/server thread. ; Reimplemented from TVirtualX.; Definition at line 328 of file TGWin32VirtualXProxy.cxx. ◆ IsDNDAware(). Bool_t TGWin32VirtualXProxy::IsDNDAware ; (; Window_t ; win, . Atom_t * ; typelist . ). overridevirtual . Checks if the Window is DND aware, and knows any of the DND formats passed in argument. ; Reimplemented from TVirtualX. ◆ IsTransparent(). Bool_t TGWin32VirtualXProxy::IsTransparent ; (; ); const. overridevirtual . Reimplemented from TAttFill. ◆ KeysymToKeycode(). Int_t TGWin32VirtualXProxy::KeysymToKeycode ; (; UInt_t ; keysym). overridevirtual . Converts the ""keysym"" to the appropriate keycode. ; For example, keysym is a letter and keycode is the matching keyboard key (which is dependent on the current keyboard mapping). If the specified ""ke",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:93521,Performance,load,loads,93521,"ualXProxy::ListFonts ; (; const char * ; fontname, . Int_t ; max, . Int_t & ; count . ). overridevirtual . Returns list of font names matching fontname regexp, like ""-*-times-*"". ; The pattern string can contain any characters, but each asterisk (*) is a wildcard for any number of characters, and each question mark (?) is a wildcard for a single character. If the pattern string is not in the Host Portable Character Encoding, the result is implementation dependent. Use of uppercase or lowercase does not matter. Each returned string is null-terminated.; Parameters. [in]fontnamespecifies the null-terminated pattern string that can contain wildcard characters ; [in]maxspecifies the maximum number of names to be returned ; [in]countreturns the actual number of font names . Reimplemented from TVirtualX. ◆ LoadQueryFont(). FontStruct_t TGWin32VirtualXProxy::LoadQueryFont ; (; const char * ; font_name). overridevirtual . Provides the most common way for accessing a font: opens (loads) the specified font and returns a pointer to the appropriate FontStruct_t structure. ; If the font does not exist, it returns NULL. ; Reimplemented from TVirtualX. ◆ LookupString(). void TGWin32VirtualXProxy::LookupString ; (; Event_t * ; event, . char * ; buf, . Int_t ; buflen, . UInt_t & ; keysym . ). overridevirtual . Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ; In buf a null terminated ASCII string is returned representing the string that is currently mapped to the key code. ; Reimplemented from TVirtualX.; Definition at line 285 of file TGWin32VirtualXProxy.cxx. ◆ LowerWindow(). void TGWin32VirtualXProxy::LowerWindow ; (; Window_t ; id). overridevirtual . Lowers the specified window ""id"" to the bottom of the stack so that it does not obscure any sibling windows. ; Reimplemented from TVirtualX. ◆ MapRaised(). void TGWin32VirtualXProxy::MapRaised ; (; Window_t ; id). overridevirtu",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:96699,Performance,queue,queue,96699,"1/2]. void TGWin32VirtualXProxy::MoveWindow ; (; Int_t ; wid, . Int_t ; x, . Int_t ; y . ). overridevirtual . Moves the window ""wid"" to the specified x and y coordinates. ; It does not change the window's size, raise the window, or change the mapping state of the window.; Parameters. [in]widwindow identifier ; [in]x,ycoordinates, which define the new position of the window relative to its parent. . Reimplemented from TVirtualX. ◆ MoveWindow() [2/2]. void TGWin32VirtualXProxy::MoveWindow ; (; Window_t ; id, . Int_t ; x, . Int_t ; y . ). overridevirtual . Moves the specified window to the specified x and y coordinates. ; It does not change the window's size, raise the window, or change the mapping state of the window.; Parameters. [in]idwindow identifier ; [in]x,ycoordinates, which define the new position of the window relative to its parent. . Reimplemented from TVirtualX. ◆ NextEvent(). void TGWin32VirtualXProxy::NextEvent ; (; Event_t & ; event). overridevirtual . Process next event in the queue - if any. ; Reimplemented from TVirtualX.; Definition at line 304 of file TGWin32VirtualXProxy.cxx. ◆ OpenDisplay(). Int_t TGWin32VirtualXProxy::OpenDisplay ; (; const char * ; dpyName = nullptr). overridevirtual . Opens connection to display server (if such a thing exist on the current platform). ; The encoding and interpretation of the display name.; On X11 this method returns on success the X display socket descriptor >0, 0 in case of batch mode, and <0 in case of failure (cannot connect to display dpyName). ; Reimplemented from TVirtualX. ◆ OpenPixmap(). Int_t TGWin32VirtualXProxy::OpenPixmap ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Creates a pixmap of the width ""w"" and height ""h"" you specified. ; Reimplemented from TVirtualX. ◆ ParseColor(). Bool_t TGWin32VirtualXProxy::ParseColor ; (; Colormap_t ; cmap, . const char * ; cname, . ColorStruct_t & ; color . ). overridevirtual . Looks up the string name of a color ""cname"" with respect to the screen associated ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:102822,Performance,perform,performs,102822,"mented from TVirtualX. ◆ ReadGIF(). void TGWin32VirtualXProxy::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file . ). ◆ ReadPictureDataFromFile(). Bool_t TGWin32VirtualXProxy::ReadPictureDataFromFile ; (; const char * ; filename, . char *** ; ret_data . ). overridevirtual . Reads picture data from file ""filename"" and store it in ""ret_data"". ; Returns kTRUE in case of success, kFALSE otherwise. ; Reimplemented from TVirtualX. ◆ RealObject(). TVirtualX * TGWin32VirtualXProxy::RealObject ; (; ). static . Definition at line 32 of file TGWin32VirtualXProxy.cxx. ◆ RemoveWindow(). void TGWin32VirtualXProxy::RemoveWindow ; (; ULongptr_t ; qwid). overridevirtual . Removes the created by Qt window ""qwid"". ; Reimplemented from TVirtualX. ◆ ReparentWindow(). void TGWin32VirtualXProxy::ReparentWindow ; (; Window_t ; id, . Window_t ; pid, . Int_t ; x, . Int_t ; y . ). overridevirtual . If the specified window is mapped, ReparentWindow automatically performs an UnmapWindow request on it, removes it from its current position in the hierarchy, and inserts it as the child of the specified parent. ; The window is placed in the stacking order on top with respect to sibling windows. ; Reimplemented from TVirtualX. ◆ RequestLocator(). Int_t TGWin32VirtualXProxy::RequestLocator ; (; Int_t ; mode, . Int_t ; ctyp, . Int_t & ; x, . Int_t & ; y . ). overridevirtual . Requests Locator position. ; Parameters. [in]x,ycursor position at moment of button press (output) ; [in]ctypcursor type (input); ctyp = 1 tracking cross; ctyp = 2 cross-hair; ctyp = 3 rubber circle; ctyp = 4 rubber band; ctyp = 5 rubber rectangle. [in]modeinput mode; mode = 0 request; mode = 1 sample. Returns; in request mode:; 1 = left is pressed; 2 = middle is pressed; 3 = right is pressed. in sample mode:; 11 = left is released; 12 = middle is released; 13 = right is released; -1 = nothing is pressed or released; -2 = leave the window; else = keycode (keyboard is pressed) . Reimplemented from TVirtualX. ◆ RequestStr",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:116870,Performance,load,load,116870,"eimplemented from TVirtualX. ◆ SetTextAlign(). void TGWin32VirtualXProxy::SetTextAlign ; (; Short_t ; align = 11). overridevirtual . Set the text alignment. ; Reimplemented from TAttText. ◆ SetTextAngle(). void TGWin32VirtualXProxy::SetTextAngle ; (; Float_t ; tangle = 0). overridevirtual . Set the text angle. ; Reimplemented from TAttText. ◆ SetTextAttributes(). void TGWin32VirtualXProxy::SetTextAttributes ; (; ). overridevirtual . Invoke the DialogCanvas Text attributes. ; Reimplemented from TAttText. ◆ SetTextColor(). void TGWin32VirtualXProxy::SetTextColor ; (; Color_t ; tcolor = 1). overridevirtual . Set the text color. ; Reimplemented from TAttText. ◆ SetTextFont() [1/2]. Int_t TGWin32VirtualXProxy::SetTextFont ; (; char * ; fontname, . ETextSetMode ; mode . ). overridevirtual . Sets text font to specified name ""fontname"".This function returns 0 if the specified font is found, 1 if it is not. ; Parameters. [in]fontnamefont name ; [in]modeloading flag; mode = 0 search if the font exist (kCheck); mode = 1 search the font and load it if it exists (kLoad) . Reimplemented from TVirtualX. ◆ SetTextFont() [2/2]. void TGWin32VirtualXProxy::SetTextFont ; (; Font_t ; tfont = 62). overridevirtual . Set the text font. ; Reimplemented from TAttText. ◆ SetTextMagnitude(). void TGWin32VirtualXProxy::SetTextMagnitude ; (; Float_t ; mgn). overridevirtual . Sets the current text magnification factor to ""mgn"". ; Reimplemented from TVirtualX. ◆ SetTextSize(). void TGWin32VirtualXProxy::SetTextSize ; (; Float_t ; tsize = 1). overridevirtual . Set the text size. ; Reimplemented from TAttText. ◆ SetTextSizePixels(). void TGWin32VirtualXProxy::SetTextSizePixels ; (; Int_t ; npixels). overridevirtual . Set the text size in pixel. ; Set the text size in pixels.; If the font precision is greater than 2, the text size is set to npixels, otherwise the text size is computed as a percent of the pad size. ; Reimplemented from TAttText. ◆ SetTypeList(). void TGWin32VirtualXProxy::SetTypeList ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:122809,Performance,perform,perform,122809,"he destination window ; [in]src_x,src_ycoordinates within the source window ; [in]dest_x,dest_ycoordinates within the destination window ; [in]childreturns the child of ""dest"" if the coordinates are contained in a mapped child of the destination window; otherwise, child is set to 0 . Reimplemented from TVirtualX. ◆ UnionRectWithRegion(). void TGWin32VirtualXProxy::UnionRectWithRegion ; (; Rectangle_t * ; rect, . Region_t ; src, . Region_t ; dest . ). overridevirtual . Updates the destination region from a union of the specified rectangle and the specified source region. ; Parameters. [in]rectspecifies the rectangle ; [in]srcspecifies the source region to be used ; [in]destreturns the destination region . Reimplemented from TVirtualX. ◆ UnionRegion(). void TGWin32VirtualXProxy::UnionRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Computes the union of two regions. ; Parameters. [in]rega,regbspecify the two regions with which you want to perform the computation ; [in]resultreturns the result of the computation . Reimplemented from TVirtualX. ◆ UnmapWindow(). void TGWin32VirtualXProxy::UnmapWindow ; (; Window_t ; id). overridevirtual . Unmaps the specified window ""id"". ; If the specified window is already unmapped, this function has no effect. Any child window will no longer be visible (but they are still mapped) until another map call is made on the parent. ; Reimplemented from TVirtualX. ◆ Update(). void TGWin32VirtualXProxy::Update ; (; Int_t ; mode = 0). overridevirtual . Flushes (mode = 0, default) or synchronizes (mode = 1) X output buffer. ; Flush flushes output buffer. Sync flushes buffer and waits till all requests have been processed by X server. ; Reimplemented from TVirtualX. ◆ UpdateWindow(). void TGWin32VirtualXProxy::UpdateWindow ; (; Int_t ; mode). overridevirtual . Updates or synchronises client and server once (not permanent). ; according to ""mode"".; Parameters. [in]modeupdate mode.; mode = 1 update; mode = 0",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:125269,Performance,perform,perform,125269,"; (; Int_t ; ix, . Int_t ; iy, . Window_t ; id = 0 . ). overridevirtual . Sets the pointer position. ; Parameters. [in]ixnew X coordinate of pointer ; [in]iynew Y coordinate of pointer ; [in]idwindow identifier. Coordinates are relative to the origin of the window id or to the origin of the current window if id == 0. ; Reimplemented from TVirtualX. ◆ WMDeleteNotify(). void TGWin32VirtualXProxy::WMDeleteNotify ; (; Window_t ; id). overridevirtual . Tells WM to send message when window is closed via WM. ; Reimplemented from TVirtualX. ◆ WriteGIF(). Int_t TGWin32VirtualXProxy::WriteGIF ; (; char * ; name). overridevirtual . Writes the current window into GIF file. ; Returns 1 in case of success, 0 otherwise. ; Reimplemented from TVirtualX. ◆ WritePixmap(). void TGWin32VirtualXProxy::WritePixmap ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h, . char * ; pxname . ). overridevirtual . Writes the pixmap ""wid"" in the bitmap file ""pxname"". ; Parameters. [in]widthe pixmap address ; [in]w,hthe width and height of the pixmap. ; [in]pxnamethe file name . Reimplemented from TVirtualX. ◆ XorRegion(). void TGWin32VirtualXProxy::XorRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Calculates the difference between the union and intersection of two regions. ; Parameters. [in]rega,regbspecify the two regions with which you want to perform the computation ; [in]resultreturns the result of the computation . Reimplemented from TVirtualX. Friends And Related Symbol Documentation. ◆ TGWin32. friend class TGWin32. friend . Definition at line 32 of file TGWin32VirtualXProxy.h. Member Data Documentation. ◆ fgRealObject. TVirtualX * TGWin32VirtualXProxy::fgRealObject = 0. staticprotected . Definition at line 35 of file TGWin32VirtualXProxy.h. graf2d/win32gdk/inc/TGWin32VirtualXProxy.h; graf2d/win32gdk/src/TGWin32VirtualXProxy.cxx. TGWin32VirtualXProxy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:12243,Safety,unsafe,unsafe,12243,"re) ;  ; void GetGeometry (Int_t wid, Int_t &x, Int_t &y, UInt_t &w, UInt_t &h) override;  Returns position and size of window ""wid"". ;  ; void GetImageSize (Drawable_t id, UInt_t &width, UInt_t &height) override;  Returns the width and height of the image id. ;  ; Window_t GetInputFocus () override;  Returns the window id of the window having the input focus. ;  ; Color_t GetLineColor () const override;  Return the line color. ;  ; Style_t GetLineStyle () const override;  Return the line style. ;  ; Width_t GetLineWidth () const override;  Return the line width. ;  ; Color_t GetMarkerColor () const override;  Return the marker color. ;  ; Size_t GetMarkerSize () const override;  Return the marker size. ;  ; Style_t GetMarkerStyle () const override;  Return the marker style. ;  ; Handle_t GetNativeEvent () const override;  Returns the current native event handle. ;  ; Window_t GetParent (Window_t id) const override;  might be thread unsafe (?) ;  ; void GetPasteBuffer (Window_t id, Atom_t atom, TString &text, Int_t &nchar, Bool_t del) override;  Gets contents of the paste buffer ""atom"" into the string ""text"". ;  ; ULong_t GetPixel (Color_t cindex) override;  Returns pixel value associated to specified ROOT color number ""cindex"". ;  ; void GetPlanes (Int_t &nplanes) override;  Returns the maximum number of planes. ;  ; Window_t GetPrimarySelectionOwner () override;  Returns the window id of the current owner of the primary selection. ;  ; Int_t GetProperty (Window_t, Atom_t, Long_t, Long_t, Bool_t, Atom_t, Atom_t *, Int_t *, ULong_t *, ULong_t *, unsigned char **) override;  Returns the actual type of the property; the actual format of the property; the number of 8-bit, 16-bit, or 32-bit items transferred; the number of bytes remaining to be read in the property; and a pointer to the data actually returned. ;  ; void GetRegionBox (Region_t reg, Rectangle_t *rect) override;  Returns smallest enclosing rectangle. ;  ; void GetRGB (Int_t index, Float_t &r, Float_t &g, Fl",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:82641,Safety,unsafe,unsafe,82641," (; ); const. overridevirtual . Return the line style. ; Reimplemented from TAttLine. ◆ GetLineWidth(). Width_t TGWin32VirtualXProxy::GetLineWidth ; (; ); const. overridevirtual . Return the line width. ; Reimplemented from TAttLine. ◆ GetMarkerColor(). Color_t TGWin32VirtualXProxy::GetMarkerColor ; (; ); const. overridevirtual . Return the marker color. ; Reimplemented from TAttMarker. ◆ GetMarkerSize(). Size_t TGWin32VirtualXProxy::GetMarkerSize ; (; ); const. overridevirtual . Return the marker size. ; Reimplemented from TAttMarker. ◆ GetMarkerStyle(). Style_t TGWin32VirtualXProxy::GetMarkerStyle ; (; ); const. overridevirtual . Return the marker style. ; Reimplemented from TAttMarker. ◆ GetNativeEvent(). Handle_t TGWin32VirtualXProxy::GetNativeEvent ; (; ); const. overridevirtual . Returns the current native event handle. ; Reimplemented from TVirtualX. ◆ GetParent(). Window_t TGWin32VirtualXProxy::GetParent ; (; Window_t ; id); const. overridevirtual . might be thread unsafe (?) ; Reimplemented from TVirtualX.; Definition at line 274 of file TGWin32VirtualXProxy.cxx. ◆ GetPasteBuffer(). void TGWin32VirtualXProxy::GetPasteBuffer ; (; Window_t ; id, . Atom_t ; atom, . TString & ; text, . Int_t & ; nchar, . Bool_t ; del . ). overridevirtual . Gets contents of the paste buffer ""atom"" into the string ""text"". ; (nchar = number of characters) If ""del"" is true deletes the paste buffer afterwards. ; Reimplemented from TVirtualX. ◆ GetPixel(). ULong_t TGWin32VirtualXProxy::GetPixel ; (; Color_t ; cindex). overridevirtual . Returns pixel value associated to specified ROOT color number ""cindex"". ; Reimplemented from TVirtualX. ◆ GetPlanes(). void TGWin32VirtualXProxy::GetPlanes ; (; Int_t & ; nplanes). overridevirtual . Returns the maximum number of planes. ; Reimplemented from TVirtualX. ◆ GetPrimarySelectionOwner(). Window_t TGWin32VirtualXProxy::GetPrimarySelectionOwner ; (; ). overridevirtual . Returns the window id of the current owner of the primary selection. ; That ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:16338,Security,access,accessing,16338," override;  Creates a new window and return window number. ;  ; Atom_t InternAtom (const char *atom_name, Bool_t only_if_exist) override;  Returns the atom identifier associated with the specified ""atom_name"" string. ;  ; void IntersectRegion (Region_t rega, Region_t regb, Region_t result) override;  Computes the intersection of two regions. ;  ; Bool_t IsCmdThread () const override;  Return kTRUE if we are inside cmd/server thread. ;  ; Bool_t IsDNDAware (Window_t win, Atom_t *typelist) override;  Checks if the Window is DND aware, and knows any of the DND formats passed in argument. ;  ; Bool_t IsTransparent () const override;  ; Int_t KeysymToKeycode (UInt_t keysym) override;  Converts the ""keysym"" to the appropriate keycode. ;  ; char ** ListFonts (const char *fontname, Int_t max, Int_t &count) override;  Returns list of font names matching fontname regexp, like ""-*-times-*"". ;  ; FontStruct_t LoadQueryFont (const char *font_name) override;  Provides the most common way for accessing a font: opens (loads) the specified font and returns a pointer to the appropriate FontStruct_t structure. ;  ; void LookupString (Event_t *event, char *buf, Int_t buflen, UInt_t &keysym) override;  Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ;  ; void LowerWindow (Window_t id) override;  Lowers the specified window ""id"" to the bottom of the stack so that it does not obscure any sibling windows. ;  ; void MapRaised (Window_t id) override;  Maps the window ""id"" and all of its subwindows that have had map requests on the screen and put this window on the top of of the stack of all windows. ;  ; void MapSubwindows (Window_t id) override;  Maps all subwindows for the specified window ""id"" in top-to-bottom stacking order. ;  ; void MapWindow (Window_t id) override;  Maps the window ""id"" and all of its subwindows that have had map requests. ;  ; void MoveResizeWindow (Window_t i",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:34396,Security,hash,hash,34396,"se of error (like server not initialized). ;  ; virtual void Sync (Int_t mode);  Set synchronisation on or off. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:93496,Security,access,accessing,93496,"ualXProxy::ListFonts ; (; const char * ; fontname, . Int_t ; max, . Int_t & ; count . ). overridevirtual . Returns list of font names matching fontname regexp, like ""-*-times-*"". ; The pattern string can contain any characters, but each asterisk (*) is a wildcard for any number of characters, and each question mark (?) is a wildcard for a single character. If the pattern string is not in the Host Portable Character Encoding, the result is implementation dependent. Use of uppercase or lowercase does not matter. Each returned string is null-terminated.; Parameters. [in]fontnamespecifies the null-terminated pattern string that can contain wildcard characters ; [in]maxspecifies the maximum number of names to be returned ; [in]countreturns the actual number of font names . Reimplemented from TVirtualX. ◆ LoadQueryFont(). FontStruct_t TGWin32VirtualXProxy::LoadQueryFont ; (; const char * ; font_name). overridevirtual . Provides the most common way for accessing a font: opens (loads) the specified font and returns a pointer to the appropriate FontStruct_t structure. ; If the font does not exist, it returns NULL. ; Reimplemented from TVirtualX. ◆ LookupString(). void TGWin32VirtualXProxy::LookupString ; (; Event_t * ; event, . char * ; buf, . Int_t ; buflen, . UInt_t & ; keysym . ). overridevirtual . Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ; In buf a null terminated ASCII string is returned representing the string that is currently mapped to the key code. ; Reimplemented from TVirtualX.; Definition at line 285 of file TGWin32VirtualXProxy.cxx. ◆ LowerWindow(). void TGWin32VirtualXProxy::LowerWindow ; (; Window_t ; id). overridevirtual . Lowers the specified window ""id"" to the bottom of the stack so that it does not obscure any sibling windows. ; Reimplemented from TVirtualX. ◆ MapRaised(). void TGWin32VirtualXProxy::MapRaised ; (; Window_t ; id). overridevirtu",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:19334,Testability,log,logically,19334,"ed colormap. ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns kTRUE if the point [x, y] is contained in the region reg. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Returns a region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Combines an image with a rectangle of the specified drawable. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Overwrites the pixel in the image with the specified pixel value. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Returns the current RGB value for the pixel in the ""color"" structure. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Returns the pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Raises the specified window to the top of the stack so that no sibling window obscures it. ;  ; void ReadGIF (Int_t x0, Int_t y0, const char *file);  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Reads picture data from file ""filename"" and store it in ""ret_data"". ;  ; void RemoveWindow (ULongptr_t qwid) override;  Removes the created by Qt window ""qwid"". ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  If the specified window is mapped, ReparentWindow automatically performs an UnmapWindow request on it, removes it from its current position in the hierarchy, and inserts it as the child of the specified parent. ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Requests Locator position. ;  ; Int_t Request",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:88742,Testability,log,logically,88742,"verridevirtual . Establishes a passive grab on a certain mouse button. ; That is, when a certain mouse button is hit while certain modifier's (Shift, Control, Meta, Alt) are active then the mouse will be grabbed for window id. When grab is false, ungrab the mouse button for this button and modifier. ; Reimplemented from TVirtualX. ◆ GrabKey(). void TGWin32VirtualXProxy::GrabKey ; (; Window_t ; id, . Int_t ; keycode, . UInt_t ; modifier, . Bool_t ; grab = kTRUE . ). overridevirtual . Establishes a passive grab on the keyboard. ; In the future, the keyboard is actively grabbed, the last-keyboard-grab time is set to the time at which the key was pressed (as transmitted in the KeyPress event), and the KeyPress event is reported if all of the following conditions are true:. the keyboard is not grabbed and the specified key (which can itself be a modifier key) is logically pressed when the specified modifier keys are logically down, and no other modifier keys are logically down;; either the grab window ""id"" is an ancestor of (or is) the focus window, or ""id"" is a descendant of the focus window and contains the pointer;; a passive grab on the same key combination does not exist on any ancestor of grab_window. Parameters. [in]idwindow id ; [in]keycodespecifies the KeyCode or AnyKey ; [in]modifierspecifies the set of keymasks or AnyModifier; the mask is the bitwise inclusive OR of the valid keymask bits ; [in]graba switch between grab/ungrab key grab = kTRUE grab the key and modifier grab = kFALSE ungrab the key and modifier . Reimplemented from TVirtualX. ◆ GrabPointer(). void TGWin32VirtualXProxy::GrabPointer ; (; Window_t ; id, . UInt_t ; evmask, . Window_t ; confine, . Cursor_t ; cursor, . Bool_t ; grab = kTRUE, . Bool_t ; owner_events = kTRUE . ). overridevirtual . Establishes an active pointer grab. ; While an active pointer grab is in effect, further pointer events are only reported to the grabbing client window. ; Reimplemented from TVirtualX. ◆ HasTTFonts(). Bool_t ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:88797,Testability,log,logically,88797,"verridevirtual . Establishes a passive grab on a certain mouse button. ; That is, when a certain mouse button is hit while certain modifier's (Shift, Control, Meta, Alt) are active then the mouse will be grabbed for window id. When grab is false, ungrab the mouse button for this button and modifier. ; Reimplemented from TVirtualX. ◆ GrabKey(). void TGWin32VirtualXProxy::GrabKey ; (; Window_t ; id, . Int_t ; keycode, . UInt_t ; modifier, . Bool_t ; grab = kTRUE . ). overridevirtual . Establishes a passive grab on the keyboard. ; In the future, the keyboard is actively grabbed, the last-keyboard-grab time is set to the time at which the key was pressed (as transmitted in the KeyPress event), and the KeyPress event is reported if all of the following conditions are true:. the keyboard is not grabbed and the specified key (which can itself be a modifier key) is logically pressed when the specified modifier keys are logically down, and no other modifier keys are logically down;; either the grab window ""id"" is an ancestor of (or is) the focus window, or ""id"" is a descendant of the focus window and contains the pointer;; a passive grab on the same key combination does not exist on any ancestor of grab_window. Parameters. [in]idwindow id ; [in]keycodespecifies the KeyCode or AnyKey ; [in]modifierspecifies the set of keymasks or AnyModifier; the mask is the bitwise inclusive OR of the valid keymask bits ; [in]graba switch between grab/ungrab key grab = kTRUE grab the key and modifier grab = kFALSE ungrab the key and modifier . Reimplemented from TVirtualX. ◆ GrabPointer(). void TGWin32VirtualXProxy::GrabPointer ; (; Window_t ; id, . UInt_t ; evmask, . Window_t ; confine, . Cursor_t ; cursor, . Bool_t ; grab = kTRUE, . Bool_t ; owner_events = kTRUE . ). overridevirtual . Establishes an active pointer grab. ; While an active pointer grab is in effect, further pointer events are only reported to the grabbing client window. ; Reimplemented from TVirtualX. ◆ HasTTFonts(). Bool_t ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:88844,Testability,log,logically,88844,"verridevirtual . Establishes a passive grab on a certain mouse button. ; That is, when a certain mouse button is hit while certain modifier's (Shift, Control, Meta, Alt) are active then the mouse will be grabbed for window id. When grab is false, ungrab the mouse button for this button and modifier. ; Reimplemented from TVirtualX. ◆ GrabKey(). void TGWin32VirtualXProxy::GrabKey ; (; Window_t ; id, . Int_t ; keycode, . UInt_t ; modifier, . Bool_t ; grab = kTRUE . ). overridevirtual . Establishes a passive grab on the keyboard. ; In the future, the keyboard is actively grabbed, the last-keyboard-grab time is set to the time at which the key was pressed (as transmitted in the KeyPress event), and the KeyPress event is reported if all of the following conditions are true:. the keyboard is not grabbed and the specified key (which can itself be a modifier key) is logically pressed when the specified modifier keys are logically down, and no other modifier keys are logically down;; either the grab window ""id"" is an ancestor of (or is) the focus window, or ""id"" is a descendant of the focus window and contains the pointer;; a passive grab on the same key combination does not exist on any ancestor of grab_window. Parameters. [in]idwindow id ; [in]keycodespecifies the KeyCode or AnyKey ; [in]modifierspecifies the set of keymasks or AnyModifier; the mask is the bitwise inclusive OR of the valid keymask bits ; [in]graba switch between grab/ungrab key grab = kTRUE grab the key and modifier grab = kFALSE ungrab the key and modifier . Reimplemented from TVirtualX. ◆ GrabPointer(). void TGWin32VirtualXProxy::GrabPointer ; (; Window_t ; id, . UInt_t ; evmask, . Window_t ; confine, . Cursor_t ; cursor, . Bool_t ; grab = kTRUE, . Bool_t ; owner_events = kTRUE . ). overridevirtual . Establishes an active pointer grab. ; While an active pointer grab is in effect, further pointer events are only reported to the grabbing client window. ; Reimplemented from TVirtualX. ◆ HasTTFonts(). Bool_t ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:101169,Testability,log,logically,101169,"ters. [in]idspecifies the image ; [in]x,ycoordinates ; [in]pixelthe new pixel value . Reimplemented from TVirtualX. ◆ QueryColor(). void TGWin32VirtualXProxy::QueryColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Returns the current RGB value for the pixel in the ""color"" structure. ; The color components are set to default.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the RGB values for the pixel specified in the structure . Reimplemented from TVirtualX. ◆ QueryPointer() [1/2]. void TGWin32VirtualXProxy::QueryPointer ; (; Int_t & ; ix, . Int_t & ; iy . ). overridevirtual . Returns the pointer position. ; Reimplemented from TVirtualX. ◆ QueryPointer() [2/2]. void TGWin32VirtualXProxy::QueryPointer ; (; Window_t ; id, . Window_t & ; rootw, . Window_t & ; childw, . Int_t & ; root_x, . Int_t & ; root_y, . Int_t & ; win_x, . Int_t & ; win_y, . UInt_t & ; mask . ). overridevirtual . Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ; Parameters. [in]idspecifies the window ; [in]rootwthe root window that the pointer is in ; [in]childwthe child window that the pointer is located in, if any ; [in]root_x,root_ythe pointer coordinates relative to the root window's origin ; [in]win_x,win_ythe pointer coordinates relative to the specified window ""id"" ; [in]maskthe current state of the modifier keys and pointer buttons . Reimplemented from TVirtualX. ◆ RaiseWindow(). void TGWin32VirtualXProxy::RaiseWindow ; (; Window_t ; id). overridevirtual . Raises the specified window to the top of the stack so that no sibling window obscures it. ; Reimplemented from TVirtualX. ◆ ReadGIF(). void TGWin32VirtualXProxy::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file . ). ◆ ReadPictureDataFromFile(). Bool_t TGWin32VirtualXProxy::ReadPictureDataFromFile ; (; const char * ; filename, . char *** ; ret_data . ). overridevirtual . Reads picture data from file ""filename"" ",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWin32VirtualXProxy.html:55085,Usability,simpl,simply,55085,"arameters. [in]gcspecifies the GC to be changed ; [in]gvalspecifies the mask and the values to be set. (see also the GCValues_t structure) ; Reimplemented from TVirtualX. ◆ ChangeProperties(). void TGWin32VirtualXProxy::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Reimplemented from TVirtualX. ◆ ChangeProperty(). void TGWin32VirtualXProxy::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpret the type but simply passes it back to an application that might ask about the window properties ; [in]datathe property data ; [in]lenthe length of the specified data format . Reimplemented from TVirtualX. ◆ ChangeWindowAttributes(). void TGWin32VirtualXProxy::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). overridevirtual . Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ; The mask data member of ""attr"" specifies which window attributes are defined in the attributes argument. This mask is the bitwise inclusive OR of the valid attribute mask bits; if it is zero, the attributes are ignored. ; Reimplemented from TVirtualX. ◆ CheckEvent(). Bool_t TGWin32VirtualXProxy::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; Reimplemented from TVirtualX.; Definition at line 312 of file TGWin32VirtualXProxy.cxx. ◆ ClearArea()",MatchSource.WIKI,doc/master/classTGWin32VirtualXProxy.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html
https://root.cern/doc/master/classTGWindow.html:6835,Availability,error,error,6835,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:6924,Availability,error,error,6924,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:7079,Availability,error,error,7079,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the uniqu",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:7376,Availability,error,error,7376,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t ",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:11303,Availability,error,error,11303,"void Paint (Option_t *option="""");  This method must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetCounter ();  Return global window counter (total number of created windows). ;  ;  Static Public Member Functions inherited from TGO",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:6841,Integrability,message,message,6841,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:7382,Integrability,message,message,7382,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t ",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:8343,Integrability,message,message,8343,"t char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class ",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:11309,Integrability,message,message,11309,"void Paint (Option_t *option="""");  This method must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetCounter ();  Return global window counter (total number of created windows). ;  ;  Static Public Member Functions inherited from TGO",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:11682,Integrability,message,message,11682,"his object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetCounter ();  Return global window counter (total number of created windows). ;  ;  Static Public Member Functions inherited from TGObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; st",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:956,Modifiability,inherit,inherited,956," ROOT: TGWindow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Friends |; List of all members ; TGWindow Class ReferenceGUI » Low level GUI widgets. ; ROOT GUI Window base class. ; Definition at line 23 of file TGWindow.h. Public Types; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };  ; enum  EStatusBits { kIsHtmlView = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGWindow (const TGWindow *p=nullptr, Int_t x=0, Int_t y=0, UInt_t w=0, UInt_t h=0, UInt_t border=0, Int_t depth=0, UInt_t clss=0, void *visual=nullptr, SetWindowAttributes_t *attr=nullptr, UInt_t wtype=0);  Create a new window. ;  ;  TGWindow (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a copy of a window. ;  ;  ~TGWindow () override;  Window destructor. Unregisters the ",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:4339,Modifiability,inherit,inherited,4339,"verride;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void ReparentWindow (const TGWindow *p, Int_t x=0, Int_t y=0);  Reparent window, make p the new parent and position the window at position (x,y) in new parent. ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void Resize (UInt_t w, UInt_t h);  Resize the window. ;  ; virtual void SetBackgroundColor (Pixel_t color);  set background color ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditable (Bool_t on=kTRUE);  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UnmapWindow ();  unmap window ;  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abs",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:5074,Modifiability,inherit,inherited,5074,"oid SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UnmapWindow ();  unmap window ;  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:6471,Modifiability,inherit,inheritance,6471,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:8441,Modifiability,inherit,inherits,8441,"* FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes i",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:8558,Modifiability,inherit,inherits,8558,"nst TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the b",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:12281,Modifiability,inherit,inherited,12281,"This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetCounter ();  Return global window counter (total number of created windows). ;  ;  Static Public Member Functions inherited from TGObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; virtual void DoRedraw ();  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; UInt_t fE",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:12493,Modifiability,inherit,inherited,12493,"This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetCounter ();  Return global window counter (total number of created windows). ;  ;  Static Public Member Functions inherited from TGObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; virtual void DoRedraw ();  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; UInt_t fE",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:13175,Modifiability,inherit,inherited,13175,"unter (total number of created windows). ;  ;  Static Public Member Functions inherited from TGObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; virtual void DoRedraw ();  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  . Static Protected Attributes; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  . Friends; class TGClient;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGWindow.h>. Inheritance diagram for TGWindow:. This browser is not able to sho",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:13275,Modifiability,inherit,inherited,13275,"unter (total number of created windows). ;  ;  Static Public Member Functions inherited from TGObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; virtual void DoRedraw ();  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  . Static Protected Attributes; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  . Friends; class TGClient;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGWindow.h>. Inheritance diagram for TGWindow:. This browser is not able to sho",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:13732,Modifiability,inherit,inherited,13732,"etObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; virtual void DoRedraw ();  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  . Static Protected Attributes; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  . Friends; class TGClient;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGWindow.h>. Inheritance diagram for TGWindow:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EEditMode. enum TGWindow::EEditMode. EnumeratorkEditEnable allow edit of this window . kEditDisable disable edit of this window . kEditDisableEvents window events cannot be edited . kEditDisableGrab window grab cannot be edited . kEditDisableLayout window layout cannot be edited . kEditDisableResize window size cannot be edited . kEditDisableHeight window height cannot be edited . kEditDisableWidth window width cannot be edited . kEditDisableBtnEn",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:14044,Modifiability,inherit,inherited,14044,"indow_t id);  ; virtual void DoRedraw ();  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  . Static Protected Attributes; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  . Friends; class TGClient;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGWindow.h>. Inheritance diagram for TGWindow:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EEditMode. enum TGWindow::EEditMode. EnumeratorkEditEnable allow edit of this window . kEditDisable disable edit of this window . kEditDisableEvents window events cannot be edited . kEditDisableGrab window grab cannot be edited . kEditDisableLayout window layout cannot be edited . kEditDisableResize window size cannot be edited . kEditDisableHeight window height cannot be edited . kEditDisableWidth window width cannot be edited . kEditDisableBtnEnable window can handle mouse button events . kEditDisableKeyEnable window can handle keyboard events . Definition at line 55 of file TGWindow.h. ◆ EStatusBits. enum TGWindow::EStatusBits. EnumeratorkIsHtmlView . Definition at line 68 of file TGWindow.h. Constructor & Destructor Documentation. ◆ TGW",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGWindow.html:4570,Security,hash,hash,4570,"on the window at position (x,y) in new parent. ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void Resize (UInt_t w, UInt_t h);  Resize the window. ;  ; virtual void SetBackgroundColor (Pixel_t color);  set background color ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetEditable (Bool_t on=kTRUE);  ; virtual void SetEditDisabled (UInt_t on=kEditDisable);  ; virtual void SetMapSubwindows (Bool_t);  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UnmapWindow ();  unmap window ;  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,doc/master/classTGWindow.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGWindow.html
https://root.cern/doc/master/classTGX11.html:3811,Availability,mask,mask,3811," Int_t y, UInt_t w, UInt_t h) override;  Clear a window area to the background color. ;  ; void ClearWindow () override;  Clear current window. ;  ; void ClearWindow (Window_t id) override;  Clear window. ;  ; void CloseDisplay () override;  Close connection to display server. ;  ; void ClosePixmap () override;  Delete current pixmap. ;  ; void CloseWindow () override;  Delete current window. ;  ; void ConvertPrimarySelection (Window_t id, Atom_t clipboard, Time_t when) override;  XConvertSelection() causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Requests that the specified selection be converted to the specified target type. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y) override;  Copy a drawable (i.e. ;  ; void CopyGC (GContext_t org, GContext_t dest, Mask_t mask) override;  Copies graphics context from org to dest. ;  ; void CopyPixmap (Int_t wid, Int_t xpos, Int_t ypos) override;  Copy the pixmap wid at the position xpos, ypos in the current window. ;  ; Pixmap_t CreateBitmap (Drawable_t id, const char *bitmap, UInt_t width, UInt_t height) override;  Create a bitmap (i.e. pixmap with depth 1) from the bitmap data. ;  ; Cursor_t CreateCursor (ECursor cursor) override;  Create cursor handle (just return cursor from cursor pool fCursors). ;  ; GContext_t CreateGC (Drawable_t id, GCValues_t *gval) override;  Create a graphics context using the values set in gval (but only for those entries that are in the mask). ;  ; Drawable_t CreateImage (UInt_t width, UInt_t height) override;  Create a client-side XImage. Returns handle to XImage. ;  ; Bool_t CreatePictureFromData (Drawable_t id, char **data, Pixmap_t &pict, Pixmap_t &pict_mask, PictureAttributes_t &attr) override;  Create a picture pixmap from data. ;  ; Bool_t CreatePictureFromFile (Dra",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:4469,Availability,mask,mask,4469,"tion owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Requests that the specified selection be converted to the specified target type. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y) override;  Copy a drawable (i.e. ;  ; void CopyGC (GContext_t org, GContext_t dest, Mask_t mask) override;  Copies graphics context from org to dest. ;  ; void CopyPixmap (Int_t wid, Int_t xpos, Int_t ypos) override;  Copy the pixmap wid at the position xpos, ypos in the current window. ;  ; Pixmap_t CreateBitmap (Drawable_t id, const char *bitmap, UInt_t width, UInt_t height) override;  Create a bitmap (i.e. pixmap with depth 1) from the bitmap data. ;  ; Cursor_t CreateCursor (ECursor cursor) override;  Create cursor handle (just return cursor from cursor pool fCursors). ;  ; GContext_t CreateGC (Drawable_t id, GCValues_t *gval) override;  Create a graphics context using the values set in gval (but only for those entries that are in the mask). ;  ; Drawable_t CreateImage (UInt_t width, UInt_t height) override;  Create a client-side XImage. Returns handle to XImage. ;  ; Bool_t CreatePictureFromData (Drawable_t id, char **data, Pixmap_t &pict, Pixmap_t &pict_mask, PictureAttributes_t &attr) override;  Create a picture pixmap from data. ;  ; Bool_t CreatePictureFromFile (Drawable_t id, const char *filename, Pixmap_t &pict, Pixmap_t &pict_mask, PictureAttributes_t &attr) override;  Create a picture pixmap from data on file. ;  ; Pixmap_t CreatePixmap (Drawable_t id, const char *bitmap, UInt_t width, UInt_t height, ULong_t forecolor, ULong_t backcolor, Int_t depth) override;  Create a pixmap from bitmap data. ;  ; Pixmap_t CreatePixmap (Drawable_t id, UInt_t w, UInt_t h) override;  Creates a pixmap of the width and height you specified and returns a pixmap ID that identifies it. ;  ; Pixmap_t CreatePixmapFromData (unsigned char *bits, UInt_t",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:14386,Availability,failure,failure,14386,"GetWindowID (Int_t wid) override;  Return the X11 window identifier. ;  ; void GetWindowSize (Drawable_t id, Int_t &x, Int_t &y, UInt_t &w, UInt_t &h) override;  Return geometry of window (should be called GetGeometry but signature already used). ;  ; void GrabButton (Window_t id, EMouseButton button, UInt_t modifier, UInt_t evmask, Window_t confine, Cursor_t cursor, Bool_t grab=kTRUE) override;  Establish passive grab on a certain mouse button. ;  ; void GrabKey (Window_t id, Int_t keycode, UInt_t modifier, Bool_t grab=kTRUE) override;  Establish passive grab on a certain key. ;  ; void GrabPointer (Window_t id, UInt_t evmask, Window_t confine, Cursor_t cursor, Bool_t grab=kTRUE, Bool_t owner_events=kTRUE) override;  Establish an active pointer grab. ;  ; Bool_t HasTTFonts () const override;  Returns True when TrueType fonts are used. ;  ; void IconifyWindow (Window_t id) override;  Iconify the window. ;  ; Bool_t Init (void *display) override;  Initialize X11 system. Returns kFALSE in case of failure. ;  ; Int_t InitWindow (ULong_t window) override;  Open window and return window number. ;  ; Atom_t InternAtom (const char *atom_name, Bool_t only_if_exist) override;  Return atom handle for atom_name. ;  ; void IntersectRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the intersection of rega and regb and return result region. ;  ; TClass * IsA () const override;  ; Bool_t IsDNDAware (Window_t win, Atom_t *typelist) override;  Checks if Window win is DND aware, and knows any of the DND formats passed in argument. ;  ; Int_t KeysymToKeycode (UInt_t keysym) override;  Convert a keysym to the appropriate keycode. ;  ; char ** ListFonts (const char *fontname, Int_t max, Int_t &count) override;  Return list of font names matching fontname regexp, like ""-*-times-*"". ;  ; FontStruct_t LoadQueryFont (const char *font_name) override;  Load font and query font. ;  ; void LookupString (Event_t *event, char *buf, Int_t buflen, UInt_t &keysym) override;  ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:17698,Availability,mask,mask,17698,"ring cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Put (x,y,w,h) part of image img in window win at position dx,dy. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Set pixel at specified location in XImage img. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Fill in the primary color components for a specific pixel value. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Query pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Put window on top of window stack. ;  ; Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0) override;  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Read picture data from file and store in ret_data. ;  ; void RemoveWindow (ULong_t qwid) override;  Remove a window created by Qt (like CloseWindow1()). ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  Reparent window to new parent window at position (x,y). ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Request Locator position. ;  ; Int_t RequestString (Int_t x, Int_t y, char *text) override;  Request a string. ;  ; void RescaleWindow (Int_t wid",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:21024,Availability,mask,mask,21024,"ipping region for the window wid. ;  ; void SetCursor (Int_t win, ECursor cursor) override;  Set the cursor. ;  ; void SetCursor (Window_t id, Cursor_t curid) override;  Set the specified cursor. ;  ; void SetDashes (GContext_t gc, Int_t offset, const char *dash_list, Int_t n) override;  Specify a dash pattern. ;  ; void SetDNDAware (Window_t, Atom_t *) override;  Add XdndAware property and the list of drag and drop types to the Window win. ;  ; void SetDoubleBuffer (Int_t wid, Int_t mode) override;  Set the double buffer on/off on window wid. ;  ; void SetDoubleBufferOFF () override;  Turn double buffer mode off. ;  ; void SetDoubleBufferON () override;  Turn double buffer mode on. ;  ; void SetDrawMode (EDrawMode mode) override;  Set the drawing mode. ;  ; void SetFillColor (Color_t cindex) override;  Set color index for fill areas. ;  ; void SetFillStyle (Style_t style) override;  Set fill area style. ;  ; void SetForeground (GContext_t gc, ULong_t foreground) override;  Set foreground color in graphics context (shortcut for ChangeGC with only foreground mask set). ;  ; void SetIconName (Window_t id, char *name) override;  Set window icon name. ;  ; void SetIconPixmap (Window_t id, Pixmap_t pic) override;  Set pixmap the WM can use when the window is iconized. ;  ; void SetInputFocus (Window_t id) override;  Set keyboard input focus to window id. ;  ; void SetKeyAutoRepeat (Bool_t on=kTRUE) override;  Turn key auto repeat on or off. ;  ; void SetLineColor (Color_t cindex) override;  Set color index for lines. ;  ; void SetLineStyle (Style_t linestyle) override;  Set line style. ;  ; void SetLineType (Int_t n, Int_t *dash) override;  Set line type. ;  ; void SetLineWidth (Width_t width) override;  Set line width. ;  ; void SetMarkerColor (Color_t cindex) override;  Set color index for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Set marker size index. ;  ; void SetMarkerStyle (Style_t markerstyle) override;  Set marker style. ;  ; void SetMWMHin",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:24237,Availability,mask,mask,24237,";  Set the window background color. ;  ; void SetWindowBackgroundPixmap (Window_t id, Pixmap_t pxm) override;  Set pixmap as window background. ;  ; void SetWindowName (Window_t id, char *name) override;  Set window name. ;  ; void SetWMPosition (Window_t id, Int_t x, Int_t y) override;  Tell the window manager the desired window position. ;  ; void SetWMSize (Window_t id, UInt_t w, UInt_t h) override;  Tell the window manager the desired window size. ;  ; void SetWMSizeHints (Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc) override;  Give the window manager minimum and maximum size hints. ;  ; void SetWMState (Window_t id, EInitialState state) override;  Set the initial state of the window. Either kNormalState or kIconicState. ;  ; void SetWMTransientHint (Window_t id, Window_t main_id) override;  Tell window manager that window is a transient window of main. ;  ; void ShapeCombineMask (Window_t id, Int_t x, Int_t y, Pixmap_t mask) override;  The Nonrectangular Window Shape Extension adds nonrectangular windows to the System. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtract rega from regb. ;  ; Int_t SupportsExtension (const char *ext) const override;  Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ; void Sync (Int_t mode) override;  Set synchronisation on or off. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of ref",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:24801,Availability,error,error,24801," void SetWMSizeHints (Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc) override;  Give the window manager minimum and maximum size hints. ;  ; void SetWMState (Window_t id, EInitialState state) override;  Set the initial state of the window. Either kNormalState or kIconicState. ;  ; void SetWMTransientHint (Window_t id, Window_t main_id) override;  Tell window manager that window is a transient window of main. ;  ; void ShapeCombineMask (Window_t id, Int_t x, Int_t y, Pixmap_t mask) override;  The Nonrectangular Window Shape Extension adds nonrectangular windows to the System. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtract rega from regb. ;  ; Int_t SupportsExtension (const char *ext) const override;  Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ; void Sync (Int_t mode) override;  Set synchronisation on or off. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of reference of one window to another. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Union of rectangle with a region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mod",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:33165,Availability,error,error,33165,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:33254,Availability,error,error,33254,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:33409,Availability,error,error,33409,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:33706,Availability,error,error,33706,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:37790,Availability,error,error,37790,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:50300,Availability,mask,mask,50300,"the pixmap pix. ;  ; void FindBestVisual ();  Find best visual, i.e. ;  ; Int_t FindColor (ULong_t pixel, ULong_t *orgcolors, Int_t ncolors);  Returns index in orgcolors (and fNewColors) for pixel. ;  ; void FindUsableVisual (RXVisualInfo *vlist, Int_t nitems);  Check if visual is usable, if so set fVisual, fDepth, fColormap, fBlackPixel and fWhitePixel. ;  ; void ImgPickPalette (RXImage *image, Int_t &ncol, Int_t *&R, Int_t *&G, Int_t *&B);  Returns in R G B the ncol colors of the palette used by the image. ;  ; void MakeOpaqueColors (Int_t percent, ULong_t *orgcolors, Int_t ncolors);  Get RGB values for orgcolors, add percent neutral to the RGB and allocate fNewColors. ;  ; void MapColorStruct (ColorStruct_t *color, RXColor &xcolor);  Map a ColorStruct_t to a XColor structure. ;  ; void MapCursor (ECursor cursor, Int_t &xcursor);  ; void MapEvent (Event_t &ev, void *xev, Bool_t tox=kTRUE);  Map Event_t structure to XEvent structure. ;  ; void MapEventMask (UInt_t &emask, UInt_t &xemask, Bool_t tox=kTRUE);  Map event mask to or from X. ;  ; void MapGCValues (GCValues_t &gval, ULong_t &xmask, RXGCValues &xgval, Bool_t tox=kTRUE);  Map a GCValues_t to a XCGValues structure if tox is true. ;  ; void MapKeySym (UInt_t &keysym, UInt_t &xkeysym, Bool_t tox=kTRUE);  Map to and from X key symbols. ;  ; void MapModifierState (UInt_t &state, UInt_t &xstate, Bool_t tox=kTRUE);  Map modifier key state to or from X. ;  ; void MapPictureAttributes (PictureAttributes_t &attr, RXpmAttributes &xpmattr, Bool_t toxpm=kTRUE);  Map a PictureAttributes_t to a XpmAttributes structure. ;  ; void MapSetWindowAttributes (SetWindowAttributes_t *attr, ULong_t &xmask, RXSetWindowAttributes &xattr);  Map a SetWindowAttributes_t to a XSetWindowAttributes structure. ;  ; void PutImage (Int_t offset, Int_t itran, Int_t x0, Int_t y0, Int_t nx, Int_t ny, Int_t xmin, Int_t ymin, Int_t xmax, Int_t ymax, UChar_t *image, Drawable_t id);  Draw image. ;  ; void RemovePixmap (Drawable *pix);  Remove the pi",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:55656,Availability,mask,mask,55656,"rggggggbbbbb; for 24 bits each r, g and b are represented by 8 bits.; Since all colors are set with a max of 65535 (16 bits) per r, g, b we just right shift them by 10, 11 and 10 bits for 16 planes, and (10, 10, 10 for 15 planes) and by 8 bits for 24 planes. Returns kFALSE in case color allocation failed. ; Definition at line 366 of file TGX11.cxx. ◆ AllocColor() [2/2]. Bool_t TGX11::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Find and allocate a color cell according to the color values specified in the ColorStruct_t. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE. ; Reimplemented from TVirtualX.; Definition at line 1351 of file GX11Gui.cxx. ◆ Bell(). void TGX11::Bell ; (; Int_t ; percent). overridevirtual . Sound bell. Percent is loudness from -100% .. 100%. ; Reimplemented from TVirtualX.; Definition at line 1675 of file GX11Gui.cxx. ◆ ChangeActivePointerGrab(). void TGX11::ChangeActivePointerGrab ; (; Window_t ; , . UInt_t ; mask, . Cursor_t ; cur . ). overridevirtual . Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ; Reimplemented from TVirtualX.; Definition at line 2718 of file GX11Gui.cxx. ◆ ChangeGC(). void TGX11::ChangeGC ; (; GContext_t ; gc, . GCValues_t * ; gval . ). overridevirtual . Change entries in an existing graphics context, gc, by values from gval. ; Reimplemented from TVirtualX.; Definition at line 993 of file GX11Gui.cxx. ◆ ChangeProperties(). void TGX11::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Reimplemented from TVirtualX.; Definition at line 2751 of file GX11Gui.cxx. ◆ ChangeProperty(). void TGX11::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; l",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:61169,Availability,mask,mask,61169,"ype. ; Reimplemented from TVirtualX.; Definition at line 2267 of file GX11Gui.cxx. ◆ ConvertSelection(). void TGX11::ConvertSelection ; (; Window_t ; win, . Atom_t & ; sel, . Atom_t & ; target, . Atom_t & ; prop, . Time_t & ; stamp . ). overridevirtual . Requests that the specified selection be converted to the specified target type. ; Reimplemented from TVirtualX.; Definition at line 2732 of file GX11Gui.cxx. ◆ CopyArea(). void TGX11::CopyArea ; (; Drawable_t ; src, . Drawable_t ; dest, . GContext_t ; gc, . Int_t ; src_x, . Int_t ; src_y, . UInt_t ; width, . UInt_t ; height, . Int_t ; dest_x, . Int_t ; dest_y . ). overridevirtual . Copy a drawable (i.e. ; pixmap) to another drawable (pixmap, window). The graphics context gc will be used and the source will be copied from src_x,src_y,src_x+width,src_y+height to dest_x,dest_y. ; Reimplemented from TVirtualX.; Definition at line 1685 of file GX11Gui.cxx. ◆ CopyGC(). void TGX11::CopyGC ; (; GContext_t ; org, . GContext_t ; dest, . Mask_t ; mask . ). overridevirtual . Copies graphics context from org to dest. ; Only the values specified in mask are copied. If mask = 0 then copy all fields. Both org and dest must exist. ; Reimplemented from TVirtualX.; Definition at line 1012 of file GX11Gui.cxx. ◆ CopyPixmap(). void TGX11::CopyPixmap ; (; Int_t ; wid, . Int_t ; xpos, . Int_t ; ypos . ). overridevirtual . Copy the pixmap wid at the position xpos, ypos in the current window. ; Reimplemented from TVirtualX.; Definition at line 496 of file TGX11.cxx. ◆ CopyWindowtoPixmap(). void TGX11::CopyWindowtoPixmap ; (; Drawable * ; pix, . Int_t ; xpos, . Int_t ; ypos . ). private . Copy area of current window in the pixmap pix. ; Definition at line 508 of file TGX11.cxx. ◆ CreateBitmap(). Pixmap_t TGX11::CreateBitmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height . ). overridevirtual . Create a bitmap (i.e. pixmap with depth 1) from the bitmap data. ; Reimplemented from TVirtualX.; Definition at li",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:61270,Availability,mask,mask,61270,"ection(). void TGX11::ConvertSelection ; (; Window_t ; win, . Atom_t & ; sel, . Atom_t & ; target, . Atom_t & ; prop, . Time_t & ; stamp . ). overridevirtual . Requests that the specified selection be converted to the specified target type. ; Reimplemented from TVirtualX.; Definition at line 2732 of file GX11Gui.cxx. ◆ CopyArea(). void TGX11::CopyArea ; (; Drawable_t ; src, . Drawable_t ; dest, . GContext_t ; gc, . Int_t ; src_x, . Int_t ; src_y, . UInt_t ; width, . UInt_t ; height, . Int_t ; dest_x, . Int_t ; dest_y . ). overridevirtual . Copy a drawable (i.e. ; pixmap) to another drawable (pixmap, window). The graphics context gc will be used and the source will be copied from src_x,src_y,src_x+width,src_y+height to dest_x,dest_y. ; Reimplemented from TVirtualX.; Definition at line 1685 of file GX11Gui.cxx. ◆ CopyGC(). void TGX11::CopyGC ; (; GContext_t ; org, . GContext_t ; dest, . Mask_t ; mask . ). overridevirtual . Copies graphics context from org to dest. ; Only the values specified in mask are copied. If mask = 0 then copy all fields. Both org and dest must exist. ; Reimplemented from TVirtualX.; Definition at line 1012 of file GX11Gui.cxx. ◆ CopyPixmap(). void TGX11::CopyPixmap ; (; Int_t ; wid, . Int_t ; xpos, . Int_t ; ypos . ). overridevirtual . Copy the pixmap wid at the position xpos, ypos in the current window. ; Reimplemented from TVirtualX.; Definition at line 496 of file TGX11.cxx. ◆ CopyWindowtoPixmap(). void TGX11::CopyWindowtoPixmap ; (; Drawable * ; pix, . Int_t ; xpos, . Int_t ; ypos . ). private . Copy area of current window in the pixmap pix. ; Definition at line 508 of file TGX11.cxx. ◆ CreateBitmap(). Pixmap_t TGX11::CreateBitmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height . ). overridevirtual . Create a bitmap (i.e. pixmap with depth 1) from the bitmap data. ; Reimplemented from TVirtualX.; Definition at line 1082 of file GX11Gui.cxx. ◆ CreateCursor(). Cursor_t TGX11::CreateCursor ; (; ECursor ; curs",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:61290,Availability,mask,mask,61290,"(; Window_t ; win, . Atom_t & ; sel, . Atom_t & ; target, . Atom_t & ; prop, . Time_t & ; stamp . ). overridevirtual . Requests that the specified selection be converted to the specified target type. ; Reimplemented from TVirtualX.; Definition at line 2732 of file GX11Gui.cxx. ◆ CopyArea(). void TGX11::CopyArea ; (; Drawable_t ; src, . Drawable_t ; dest, . GContext_t ; gc, . Int_t ; src_x, . Int_t ; src_y, . UInt_t ; width, . UInt_t ; height, . Int_t ; dest_x, . Int_t ; dest_y . ). overridevirtual . Copy a drawable (i.e. ; pixmap) to another drawable (pixmap, window). The graphics context gc will be used and the source will be copied from src_x,src_y,src_x+width,src_y+height to dest_x,dest_y. ; Reimplemented from TVirtualX.; Definition at line 1685 of file GX11Gui.cxx. ◆ CopyGC(). void TGX11::CopyGC ; (; GContext_t ; org, . GContext_t ; dest, . Mask_t ; mask . ). overridevirtual . Copies graphics context from org to dest. ; Only the values specified in mask are copied. If mask = 0 then copy all fields. Both org and dest must exist. ; Reimplemented from TVirtualX.; Definition at line 1012 of file GX11Gui.cxx. ◆ CopyPixmap(). void TGX11::CopyPixmap ; (; Int_t ; wid, . Int_t ; xpos, . Int_t ; ypos . ). overridevirtual . Copy the pixmap wid at the position xpos, ypos in the current window. ; Reimplemented from TVirtualX.; Definition at line 496 of file TGX11.cxx. ◆ CopyWindowtoPixmap(). void TGX11::CopyWindowtoPixmap ; (; Drawable * ; pix, . Int_t ; xpos, . Int_t ; ypos . ). private . Copy area of current window in the pixmap pix. ; Definition at line 508 of file TGX11.cxx. ◆ CreateBitmap(). Pixmap_t TGX11::CreateBitmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height . ). overridevirtual . Create a bitmap (i.e. pixmap with depth 1) from the bitmap data. ; Reimplemented from TVirtualX.; Definition at line 1082 of file GX11Gui.cxx. ◆ CreateCursor(). Cursor_t TGX11::CreateCursor ; (; ECursor ; cursor). overridevirtual . Create cursor hand",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:62639,Availability,mask,mask,62639,"e current window. ; Reimplemented from TVirtualX.; Definition at line 496 of file TGX11.cxx. ◆ CopyWindowtoPixmap(). void TGX11::CopyWindowtoPixmap ; (; Drawable * ; pix, . Int_t ; xpos, . Int_t ; ypos . ). private . Copy area of current window in the pixmap pix. ; Definition at line 508 of file TGX11.cxx. ◆ CreateBitmap(). Pixmap_t TGX11::CreateBitmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height . ). overridevirtual . Create a bitmap (i.e. pixmap with depth 1) from the bitmap data. ; Reimplemented from TVirtualX.; Definition at line 1082 of file GX11Gui.cxx. ◆ CreateCursor(). Cursor_t TGX11::CreateCursor ; (; ECursor ; cursor). overridevirtual . Create cursor handle (just return cursor from cursor pool fCursors). ; Reimplemented from TVirtualX.; Definition at line 1043 of file GX11Gui.cxx. ◆ CreateGC(). GContext_t TGX11::CreateGC ; (; Drawable_t ; id, . GCValues_t * ; gval . ). overridevirtual . Create a graphics context using the values set in gval (but only for those entries that are in the mask). ; Reimplemented from TVirtualX.; Definition at line 971 of file GX11Gui.cxx. ◆ CreateImage(). Drawable_t TGX11::CreateImage ; (; UInt_t ; width, . UInt_t ; height . ). overridevirtual . Create a client-side XImage. Returns handle to XImage. ; Reimplemented from TVirtualX.; Definition at line 2613 of file GX11Gui.cxx. ◆ CreatePictureFromData(). Bool_t TGX11::CreatePictureFromData ; (; Drawable_t ; id, . char ** ; data, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). overridevirtual . Create a picture pixmap from data. ; The picture attributes are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If mask does not exist it is set to kNone. ; Reimplemented from TVirtualX.; Definition at line 1236 of file GX11Gui.cxx. ◆ CreatePictureFromFile(). Bool_t TGX11::CreatePictureFromFile ; (; Drawable_t ; id, . const char * ; filename, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:63315,Availability,mask,mask,63315,"ursor pool fCursors). ; Reimplemented from TVirtualX.; Definition at line 1043 of file GX11Gui.cxx. ◆ CreateGC(). GContext_t TGX11::CreateGC ; (; Drawable_t ; id, . GCValues_t * ; gval . ). overridevirtual . Create a graphics context using the values set in gval (but only for those entries that are in the mask). ; Reimplemented from TVirtualX.; Definition at line 971 of file GX11Gui.cxx. ◆ CreateImage(). Drawable_t TGX11::CreateImage ; (; UInt_t ; width, . UInt_t ; height . ). overridevirtual . Create a client-side XImage. Returns handle to XImage. ; Reimplemented from TVirtualX.; Definition at line 2613 of file GX11Gui.cxx. ◆ CreatePictureFromData(). Bool_t TGX11::CreatePictureFromData ; (; Drawable_t ; id, . char ** ; data, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). overridevirtual . Create a picture pixmap from data. ; The picture attributes are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If mask does not exist it is set to kNone. ; Reimplemented from TVirtualX.; Definition at line 1236 of file GX11Gui.cxx. ◆ CreatePictureFromFile(). Bool_t TGX11::CreatePictureFromFile ; (; Drawable_t ; id, . const char * ; filename, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). overridevirtual . Create a picture pixmap from data on file. ; The picture attributes are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If mask does not exist it is set to kNone. ; Reimplemented from TVirtualX.; Definition at line 1183 of file GX11Gui.cxx. ◆ CreatePixmap() [1/2]. Pixmap_t TGX11::CreatePixmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height, . ULong_t ; forecolor, . ULong_t ; backcolor, . Int_t ; depth . ). overridevirtual . Create a pixmap from bitmap data. ; Ones will get foreground color and zeroes background color. ; Reimplemented from TVirtualX.; Definition at line 1071 of file GX11Gui.cxx. ◆ CreatePixmap() [2",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:63800,Availability,mask,mask,63800,"rridevirtual . Create a client-side XImage. Returns handle to XImage. ; Reimplemented from TVirtualX.; Definition at line 2613 of file GX11Gui.cxx. ◆ CreatePictureFromData(). Bool_t TGX11::CreatePictureFromData ; (; Drawable_t ; id, . char ** ; data, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). overridevirtual . Create a picture pixmap from data. ; The picture attributes are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If mask does not exist it is set to kNone. ; Reimplemented from TVirtualX.; Definition at line 1236 of file GX11Gui.cxx. ◆ CreatePictureFromFile(). Bool_t TGX11::CreatePictureFromFile ; (; Drawable_t ; id, . const char * ; filename, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). overridevirtual . Create a picture pixmap from data on file. ; The picture attributes are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If mask does not exist it is set to kNone. ; Reimplemented from TVirtualX.; Definition at line 1183 of file GX11Gui.cxx. ◆ CreatePixmap() [1/2]. Pixmap_t TGX11::CreatePixmap ; (; Drawable_t ; id, . const char * ; bitmap, . UInt_t ; width, . UInt_t ; height, . ULong_t ; forecolor, . ULong_t ; backcolor, . Int_t ; depth . ). overridevirtual . Create a pixmap from bitmap data. ; Ones will get foreground color and zeroes background color. ; Reimplemented from TVirtualX.; Definition at line 1071 of file GX11Gui.cxx. ◆ CreatePixmap() [2/2]. Pixmap_t TGX11::CreatePixmap ; (; Drawable_t ; id, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Creates a pixmap of the width and height you specified and returns a pixmap ID that identifies it. ; Reimplemented from TVirtualX.; Definition at line 1062 of file GX11Gui.cxx. ◆ CreatePixmapFromData(). Pixmap_t TGX11::CreatePixmapFromData ; (; unsigned char * ; bits, . UInt_t ; width, . UInt_t ; height . ). overridevirtual . create pixmap from RGB data. ; RGB data is in forma",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:68491,Availability,down,down,68491,"implemented from TVirtualX.; Definition at line 267 of file GX11Gui.cxx. ◆ DestroyWindow(). void TGX11::DestroyWindow ; (; Window_t ; id). overridevirtual . Destroy window. ; Reimplemented from TVirtualX.; Definition at line 257 of file GX11Gui.cxx. ◆ DisplayName(). const char * TGX11::DisplayName ; (; const char * ; dpyName = nullptr). overridevirtual . Return hostname on which the display is opened. ; Reimplemented from TVirtualX.; Definition at line 996 of file TGX11.cxx. ◆ DrawBox(). void TGX11::DrawBox ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2, . EBoxMode ; mode . ). overridevirtual . Draw a box. . mode=0 hollow (kHollow); mode=1 solid (kSolid) . Reimplemented from TVirtualX.; Definition at line 525 of file TGX11.cxx. ◆ DrawCellArray(). void TGX11::DrawCellArray ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2, . Int_t ; nx, . Int_t ; ny, . Int_t * ; ic . ). overridevirtual . Draw a cell array. ; Parameters. [in]x1,y1: left down corner ; [in]x2,y2: right up corner ; [in]nx,ny: array size ; [in]ic: array. Draw a cell array. The drawing is done with the pixel precision if (X2-X1)/NX (or Y) is not a exact pixel number the position of the top right corner may be wrong. ; Reimplemented from TVirtualX.; Definition at line 559 of file TGX11.cxx. ◆ DrawFillArea(). void TGX11::DrawFillArea ; (; Int_t ; n, . TPoint * ; xy . ). overridevirtual . Fill area described by polygon. ; Parameters. [in]nnumber of points ; [in]xylist of points . Reimplemented from TVirtualX.; Definition at line 589 of file TGX11.cxx. ◆ DrawLine() [1/2]. void TGX11::DrawLine ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). overridevirtual . Draw a line. ; Reimplemented from TVirtualX.; Definition at line 1731 of file GX11Gui.cxx. ◆ DrawLine() [2/2]. void TGX11::DrawLine ; (; Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). overridevirtual . Draw a line. ; Parameters. [in]x1,y1: begin of line ; [in]x2,y2: end of li",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:87494,Availability,failure,failure,87494,"lX.; Definition at line 186 of file TGX11.h. ◆ IconifyWindow(). void TGX11::IconifyWindow ; (; Window_t ; id). overridevirtual . Iconify the window. ; Reimplemented from TVirtualX.; Definition at line 330 of file GX11Gui.cxx. ◆ ImgPickPalette(). void TGX11::ImgPickPalette ; (; RXImage * ; image, . Int_t & ; ncol, . Int_t *& ; R, . Int_t *& ; G, . Int_t *& ; B . ). private . Returns in R G B the ncol colors of the palette used by the image. ; The image pixels are changed to index values in these R G B arrays. This produces a colormap with only the used colors (so even on displays with more than 8 planes we will be able to create GIF's when the image contains no more than 256 different colors). If it does contain more colors we will have to use GIFquantize to reduce the number of colors. The R G B arrays must be deleted by the caller. ; Definition at line 3331 of file TGX11.cxx. ◆ Init(). Bool_t TGX11::Init ; (; void * ; display). overridevirtual . Initialize X11 system. Returns kFALSE in case of failure. ; Reimplemented from TVirtualX.; Reimplemented in TGX11TTF.; Definition at line 342 of file TGX11.cxx. ◆ InitWindow(). Int_t TGX11::InitWindow ; (; ULong_t ; win). overridevirtual . Open window and return window number. ; Returns-1 if window initialization fails. ; Reimplemented from TVirtualX.; Definition at line 1301 of file TGX11.cxx. ◆ InternAtom(). Atom_t TGX11::InternAtom ; (; const char * ; atom_name, . Bool_t ; only_if_exist . ). overridevirtual . Return atom handle for atom_name. ; If it does not exist create it if only_if_exist is false. Atoms are used to communicate between different programs (i.e. window manager) via the X server. ; Reimplemented from TVirtualX.; Definition at line 900 of file GX11Gui.cxx. ◆ IntersectRegion(). void TGX11::IntersectRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Compute the intersection of rega and regb and return result region. ; The output region may be the same as the result reg",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:91634,Availability,mask,mask,91634,"ed from TVirtualX.; Definition at line 287 of file GX11Gui.cxx. ◆ MakeOpaqueColors(). void TGX11::MakeOpaqueColors ; (; Int_t ; percent, . ULong_t * ; orgcolors, . Int_t ; ncolors . ). private . Get RGB values for orgcolors, add percent neutral to the RGB and allocate fNewColors. ; Definition at line 2974 of file TGX11.cxx. ◆ MapColorStruct(). void TGX11::MapColorStruct ; (; ColorStruct_t * ; color, . RXColor & ; xcolor . ). private . Map a ColorStruct_t to a XColor structure. ; Definition at line 1315 of file GX11Gui.cxx. ◆ MapCursor(). void TGX11::MapCursor ; (; ECursor ; cursor, . Int_t & ; xcursor . ). private . ◆ MapEvent(). void TGX11::MapEvent ; (; Event_t & ; ev, . void * ; xevi, . Bool_t ; tox = kTRUE . ). private . Map Event_t structure to XEvent structure. ; If tox is false map the other way. ; Definition at line 1483 of file GX11Gui.cxx. ◆ MapEventMask(). void TGX11::MapEventMask ; (; UInt_t & ; emask, . UInt_t & ; xemask, . Bool_t ; tox = kTRUE . ). private . Map event mask to or from X. ; Definition at line 402 of file GX11Gui.cxx. ◆ MapGCValues(). void TGX11::MapGCValues ; (; GCValues_t & ; gval, . ULong_t & ; xmask, . RXGCValues & ; xgval, . Bool_t ; tox = kTRUE . ). private . Map a GCValues_t to a XCGValues structure if tox is true. ; Map the other way in case tox is false. ; Definition at line 556 of file GX11Gui.cxx. ◆ MapKeySym(). void TGX11::MapKeySym ; (; UInt_t & ; keysym, . UInt_t & ; xkeysym, . Bool_t ; tox = kTRUE . ). private . Map to and from X key symbols. ; Keysym are the values returned by XLookUpString. ; Definition at line 2303 of file GX11Gui.cxx. ◆ MapModifierState(). void TGX11::MapModifierState ; (; UInt_t & ; state, . UInt_t & ; xstate, . Bool_t ; tox = kTRUE . ). private . Map modifier key state to or from X. ; Definition at line 1422 of file GX11Gui.cxx. ◆ MapPictureAttributes(). void TGX11::MapPictureAttributes ; (; PictureAttributes_t & ; attr, . RXpmAttributes & ; xpmattr, . Bool_t ; toxpm = kTRUE . ). private . Map a Pictur",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:95046,Availability,failure,failure,95046,"e window wid. ; Parameters. [in]wid: Window identifier. ; [in]x: x new window position ; [in]y: y new window position . Reimplemented from TVirtualX.; Definition at line 1080 of file TGX11.cxx. ◆ MoveWindow() [2/2]. void TGX11::MoveWindow ; (; Window_t ; id, . Int_t ; x, . Int_t ; y . ). overridevirtual . Move a window. ; Reimplemented from TVirtualX.; Definition at line 297 of file GX11Gui.cxx. ◆ NextEvent(). void TGX11::NextEvent ; (; Event_t & ; event). overridevirtual . Copies first pending event from event queue to Event_t structure and removes event from queue. ; Not all of the event fields are valid for each event type, except fType and fWindow. ; Reimplemented from TVirtualX.; Definition at line 1411 of file GX11Gui.cxx. ◆ OpenDisplay() [1/2]. Int_t TGX11::OpenDisplay ; (; const char * ; dpyName). overridevirtual . Open connection to display server (if such a thing exist on the current platform). ; On X11 this method returns on success the X display socket descriptor (> 0), 0 in case of batch mode and < 0 in case of failure (cannot connect to display dpyName). It also initializes the TGX11 class via Init(). Called from TGClient ctor. ; Reimplemented from TVirtualX.; Definition at line 809 of file GX11Gui.cxx. ◆ OpenDisplay() [2/2]. Int_t TGX11::OpenDisplay ; (; void * ; display). Open the display. Return -1 if the opening fails, 0 when ok. ; Definition at line 1091 of file TGX11.cxx. ◆ OpenPixmap(). Int_t TGX11::OpenPixmap ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Open a new pixmap. ; Parameters. [in]w,h: Width and height of the pixmap. . Reimplemented from TVirtualX.; Definition at line 1243 of file TGX11.cxx. ◆ ParseColor(). Bool_t TGX11::ParseColor ; (; Colormap_t ; cmap, . const char * ; cname, . ColorStruct_t & ; color . ). overridevirtual . Parse string cname containing color name, like ""green"" or ""#00FF00"". ; It returns a filled in ColorStruct_t. Returns kFALSE in case parsing failed, kTRUE in case of success. On success, the ColorStruct_t f",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:96062,Availability,mask,mask,96062,"failure (cannot connect to display dpyName). It also initializes the TGX11 class via Init(). Called from TGClient ctor. ; Reimplemented from TVirtualX.; Definition at line 809 of file GX11Gui.cxx. ◆ OpenDisplay() [2/2]. Int_t TGX11::OpenDisplay ; (; void * ; display). Open the display. Return -1 if the opening fails, 0 when ok. ; Definition at line 1091 of file TGX11.cxx. ◆ OpenPixmap(). Int_t TGX11::OpenPixmap ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Open a new pixmap. ; Parameters. [in]w,h: Width and height of the pixmap. . Reimplemented from TVirtualX.; Definition at line 1243 of file TGX11.cxx. ◆ ParseColor(). Bool_t TGX11::ParseColor ; (; Colormap_t ; cmap, . const char * ; cname, . ColorStruct_t & ; color . ). overridevirtual . Parse string cname containing color name, like ""green"" or ""#00FF00"". ; It returns a filled in ColorStruct_t. Returns kFALSE in case parsing failed, kTRUE in case of success. On success, the ColorStruct_t fRed, fGreen and fBlue fields are all filled in and the mask is set for all three colors, but fPixel is not set. ; Reimplemented from TVirtualX.; Definition at line 1331 of file GX11Gui.cxx. ◆ PointInRegion(). Bool_t TGX11::PointInRegion ; (; Int_t ; x, . Int_t ; y, . Region_t ; reg . ). overridevirtual . Returns true if the point x,y is in the region. ; Reimplemented from TVirtualX.; Definition at line 2569 of file GX11Gui.cxx. ◆ PolygonRegion(). Region_t TGX11::PolygonRegion ; (; Point_t * ; points, . Int_t ; np, . Bool_t ; winding . ). overridevirtual . Create region for the polygon defined by the points array. ; If winding is true use WindingRule else EvenOddRule as fill rule. ; Reimplemented from TVirtualX.; Definition at line 2517 of file GX11Gui.cxx. ◆ PutImage() [1/2]. void TGX11::PutImage ; (; Drawable_t ; id, . GContext_t ; gc, . Drawable_t ; img, . Int_t ; dx, . Int_t ; dy, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Put (x,y,w,h) part of image img in window win at position dx,dy. ; ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:98819,Availability,mask,mask,98819,"lor components for a specific pixel value. ; On input fPixel should be set on return the fRed, fGreen and fBlue components will be set. ; Reimplemented from TVirtualX.; Definition at line 1371 of file GX11Gui.cxx. ◆ QueryColors(). void TGX11::QueryColors ; (; Colormap ; cmap, . RXColor * ; colors, . Int_t ; ncolors . ). protected . Returns the current RGB value for the pixel in the XColor structure. ; Definition at line 383 of file TGX11.cxx. ◆ QueryPointer() [1/2]. void TGX11::QueryPointer ; (; Int_t & ; ix, . Int_t & ; iy . ). overridevirtual . Query pointer position. ; Parameters. [in]ix: X coordinate of pointer ; [in]iy: Y coordinate of pointer (both coordinates are relative to the origin of the root window) . Reimplemented from TVirtualX.; Definition at line 1454 of file TGX11.cxx. ◆ QueryPointer() [2/2]. void TGX11::QueryPointer ; (; Window_t ; id, . Window_t & ; rootw, . Window_t & ; childw, . Int_t & ; root_x, . Int_t & ; root_y, . Int_t & ; win_x, . Int_t & ; win_y, . UInt_t & ; mask . ). overridevirtual . Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ; The pointer coordinates returned to win_x and win_y are relative to the origin of the specified window. In this case, QueryPointer returns the child that contains the pointer, if any, or else kNone to childw. QueryPointer returns the current logical state of the keyboard buttons and the modifier keys in mask. ; Reimplemented from TVirtualX.; Definition at line 2438 of file GX11Gui.cxx. ◆ RaiseWindow(). void TGX11::RaiseWindow ; (; Window_t ; id). overridevirtual . Put window on top of window stack. ; Reimplemented from TVirtualX.; Definition at line 277 of file GX11Gui.cxx. ◆ ReadGIF(). Pixmap_t TGX11::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file, . Window_t ; id = 0 . ). overridevirtual . If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ; Otherwise creates pixmap from gif file ; Rei",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:99272,Availability,mask,mask,99272,"ition at line 383 of file TGX11.cxx. ◆ QueryPointer() [1/2]. void TGX11::QueryPointer ; (; Int_t & ; ix, . Int_t & ; iy . ). overridevirtual . Query pointer position. ; Parameters. [in]ix: X coordinate of pointer ; [in]iy: Y coordinate of pointer (both coordinates are relative to the origin of the root window) . Reimplemented from TVirtualX.; Definition at line 1454 of file TGX11.cxx. ◆ QueryPointer() [2/2]. void TGX11::QueryPointer ; (; Window_t ; id, . Window_t & ; rootw, . Window_t & ; childw, . Int_t & ; root_x, . Int_t & ; root_y, . Int_t & ; win_x, . Int_t & ; win_y, . UInt_t & ; mask . ). overridevirtual . Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ; The pointer coordinates returned to win_x and win_y are relative to the origin of the specified window. In this case, QueryPointer returns the child that contains the pointer, if any, or else kNone to childw. QueryPointer returns the current logical state of the keyboard buttons and the modifier keys in mask. ; Reimplemented from TVirtualX.; Definition at line 2438 of file GX11Gui.cxx. ◆ RaiseWindow(). void TGX11::RaiseWindow ; (; Window_t ; id). overridevirtual . Put window on top of window stack. ; Reimplemented from TVirtualX.; Definition at line 277 of file GX11Gui.cxx. ◆ ReadGIF(). Pixmap_t TGX11::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file, . Window_t ; id = 0 . ). overridevirtual . If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ; Otherwise creates pixmap from gif file ; Reimplemented from TVirtualX.; Definition at line 3515 of file TGX11.cxx. ◆ ReadPictureDataFromFile(). Bool_t TGX11::ReadPictureDataFromFile ; (; const char * ; filename, . char *** ; ret_data . ). overridevirtual . Read picture data from file and store in ret_data. ; Returns kTRUE in case of success, kFALSE otherwise. ; Reimplemented from TVirtualX.; Definition at line 1278 of file GX11Gui.cxx. ◆ RemovePixmap",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:103499,Availability,mask,mask,103499,"]w,h: Width and height of the pixmap . Reimplemented from TVirtualX.; Definition at line 1875 of file TGX11.cxx. ◆ ResizeWindow() [1/2]. void TGX11::ResizeWindow ; (; Int_t ; wid). overridevirtual . Resize the current window if necessary. ; Reimplemented from TVirtualX.; Definition at line 1919 of file TGX11.cxx. ◆ ResizeWindow() [2/2]. void TGX11::ResizeWindow ; (; Window_t ; id, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Resize the window. ; Reimplemented from TVirtualX.; Definition at line 317 of file GX11Gui.cxx. ◆ ScreenWidthMM(). UInt_t TGX11::ScreenWidthMM ; (; ); const. overridevirtual . Returns the width of the screen in millimeters. ; Reimplemented from TVirtualX.; Definition at line 2684 of file GX11Gui.cxx. ◆ SelectInput(). void TGX11::SelectInput ; (; Window_t ; id, . UInt_t ; evmask . ). overridevirtual . Defines which input events the window is interested in. ; By default events are propagated up the window stack. This mask can also be set at window creation time via the SetWindowAttributes_t::fEventMask attribute. ; Reimplemented from TVirtualX.; Definition at line 2198 of file GX11Gui.cxx. ◆ SelectWindow(). void TGX11::SelectWindow ; (; Int_t ; wid). overridevirtual . Select window to which subsequent output is directed. ; Reimplemented from TVirtualX.; Definition at line 1958 of file TGX11.cxx. ◆ SendEvent(). void TGX11::SendEvent ; (; Window_t ; id, . Event_t * ; ev . ). overridevirtual . Send event ev to window id. ; Reimplemented from TVirtualX.; Definition at line 1784 of file GX11Gui.cxx. ◆ SetCharacterUp(). void TGX11::SetCharacterUp ; (; Float_t ; chupx, . Float_t ; chupy . ). overridevirtual . Set character up vector. ; Reimplemented from TVirtualX.; Definition at line 1983 of file TGX11.cxx. ◆ SetClassHints(). void TGX11::SetClassHints ; (; Window_t ; id, . char * ; className, . char * ; resourceName . ). overridevirtual . Set the windows class and resource name. ; Reimplemented from TVirtualX.; Definition at line 1940 of file GX11Gu",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:105059,Availability,mask,mask,105059,"inition at line 1784 of file GX11Gui.cxx. ◆ SetCharacterUp(). void TGX11::SetCharacterUp ; (; Float_t ; chupx, . Float_t ; chupy . ). overridevirtual . Set character up vector. ; Reimplemented from TVirtualX.; Definition at line 1983 of file TGX11.cxx. ◆ SetClassHints(). void TGX11::SetClassHints ; (; Window_t ; id, . char * ; className, . char * ; resourceName . ). overridevirtual . Set the windows class and resource name. ; Reimplemented from TVirtualX.; Definition at line 1940 of file GX11Gui.cxx. ◆ SetClipOFF(). void TGX11::SetClipOFF ; (; Int_t ; wid). overridevirtual . Turn off the clipping for the window wid. ; Reimplemented from TVirtualX.; Definition at line 2004 of file TGX11.cxx. ◆ SetClipRectangles(). void TGX11::SetClipRectangles ; (; GContext_t ; gc, . Int_t ; x, . Int_t ; y, . Rectangle_t * ; recs, . Int_t ; n . ). overridevirtual . Set clipping rectangles in graphics context. ; X, Y specify the origin of the rectangles. Recs specifies an array of rectangles that define the clipping mask and n is the number of rectangles. ; Reimplemented from TVirtualX.; Definition at line 2470 of file GX11Gui.cxx. ◆ SetClipRegion(). void TGX11::SetClipRegion ; (; Int_t ; wid, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Set clipping region for the window wid. ; Parameters. [in]wid: Window identifier ; [in]x,y: origin of clipping rectangle ; [in]w,h: size of clipping rectangle; . Reimplemented from TVirtualX.; Definition at line 2020 of file TGX11.cxx. ◆ SetColor(). void TGX11::SetColor ; (; void * ; gc, . Int_t ; ci . ). private . Set the foreground color in GC. ; Definition at line 2043 of file TGX11.cxx. ◆ SetCursor() [1/2]. void TGX11::SetCursor ; (; Int_t ; win, . ECursor ; cursor . ). overridevirtual . Set the cursor. ; Reimplemented from TVirtualX.; Definition at line 2076 of file TGX11.cxx. ◆ SetCursor() [2/2]. void TGX11::SetCursor ; (; Window_t ; id, . Cursor_t ; curid . ). overridevirtual . Set the specified cursor. ; Reimpleme",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:107747,Availability,echo,echo,107747,"w win. ; Reimplemented from TVirtualX.; Definition at line 2764 of file GX11Gui.cxx. ◆ SetDoubleBuffer(). void TGX11::SetDoubleBuffer ; (; Int_t ; wid, . Int_t ; mode . ). overridevirtual . Set the double buffer on/off on window wid. ; Parameters. [in]wid: Window identifier.; 999 means all the opened windows. . [in]mode:; 1 double buffer is on; 0 double buffer is off . Reimplemented from TVirtualX.; Definition at line 2091 of file TGX11.cxx. ◆ SetDoubleBufferOFF(). void TGX11::SetDoubleBufferOFF ; (; ). overridevirtual . Turn double buffer mode off. ; Reimplemented from TVirtualX.; Definition at line 2124 of file TGX11.cxx. ◆ SetDoubleBufferON(). void TGX11::SetDoubleBufferON ; (; ). overridevirtual . Turn double buffer mode on. ; Reimplemented from TVirtualX.; Definition at line 2134 of file TGX11.cxx. ◆ SetDrawMode(). void TGX11::SetDrawMode ; (; EDrawMode ; mode). overridevirtual . Set the drawing mode. ; Parameters. [in]mode: drawing mode; mode=1 copy; mode=2 xor; mode=3 invert; mode=4 set the suitable mode for cursor echo according to the vendor . Reimplemented from TVirtualX.; Definition at line 2159 of file TGX11.cxx. ◆ SetFillColor(). void TGX11::SetFillColor ; (; Color_t ; cindex). overridevirtual . Set color index for fill areas. ; Reimplemented from TAttFill.; Definition at line 2183 of file TGX11.cxx. ◆ SetFillStyle(). void TGX11::SetFillStyle ; (; Style_t ; fstyle). overridevirtual . Set fill area style. ; Parameters. [in]fstyle: compound fill area interior style; fstyle = 1000*interiorstyle + styleindex . Reimplemented from TAttFill.; Definition at line 2202 of file TGX11.cxx. ◆ SetFillStyleIndex(). void TGX11::SetFillStyleIndex ; (; Int_t ; style, . Int_t ; fasi . ). private . Set fill area style index. ; Definition at line 2214 of file TGX11.cxx. ◆ SetForeground(). void TGX11::SetForeground ; (; GContext_t ; gc, . ULong_t ; foreground . ). overridevirtual . Set foreground color in graphics context (shortcut for ChangeGC with only foreground mask set).",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:108700,Availability,mask,mask,108700,"ode; mode=1 copy; mode=2 xor; mode=3 invert; mode=4 set the suitable mode for cursor echo according to the vendor . Reimplemented from TVirtualX.; Definition at line 2159 of file TGX11.cxx. ◆ SetFillColor(). void TGX11::SetFillColor ; (; Color_t ; cindex). overridevirtual . Set color index for fill areas. ; Reimplemented from TAttFill.; Definition at line 2183 of file TGX11.cxx. ◆ SetFillStyle(). void TGX11::SetFillStyle ; (; Style_t ; fstyle). overridevirtual . Set fill area style. ; Parameters. [in]fstyle: compound fill area interior style; fstyle = 1000*interiorstyle + styleindex . Reimplemented from TAttFill.; Definition at line 2202 of file TGX11.cxx. ◆ SetFillStyleIndex(). void TGX11::SetFillStyleIndex ; (; Int_t ; style, . Int_t ; fasi . ). private . Set fill area style index. ; Definition at line 2214 of file TGX11.cxx. ◆ SetForeground(). void TGX11::SetForeground ; (; GContext_t ; gc, . ULong_t ; foreground . ). overridevirtual . Set foreground color in graphics context (shortcut for ChangeGC with only foreground mask set). ; Reimplemented from TVirtualX.; Definition at line 2460 of file GX11Gui.cxx. ◆ SetIconName(). void TGX11::SetIconName ; (; Window_t ; id, . char * ; name . ). overridevirtual . Set window icon name. ; Reimplemented from TVirtualX.; Definition at line 1908 of file GX11Gui.cxx. ◆ SetIconPixmap(). void TGX11::SetIconPixmap ; (; Window_t ; id, . Pixmap_t ; pic . ). overridevirtual . Set pixmap the WM can use when the window is iconized. ; Reimplemented from TVirtualX.; Definition at line 1925 of file GX11Gui.cxx. ◆ SetInput(). void TGX11::SetInput ; (; Int_t ; inp). private . Set input on or off. ; Definition at line 2257 of file TGX11.cxx. ◆ SetInputFocus(). void TGX11::SetInputFocus ; (; Window_t ; id). overridevirtual . Set keyboard input focus to window id. ; Reimplemented from TVirtualX.; Definition at line 2224 of file GX11Gui.cxx. ◆ SetKeyAutoRepeat(). void TGX11::SetKeyAutoRepeat ; (; Bool_t ; on = kTRUE). overridevirtual . Turn key",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:117697,Availability,mask,mask,117697,"MSizeHints(). void TGX11::SetWMSizeHints ; (; Window_t ; id, . UInt_t ; wmin, . UInt_t ; hmin, . UInt_t ; wmax, . UInt_t ; hmax, . UInt_t ; winc, . UInt_t ; hinc . ). overridevirtual . Give the window manager minimum and maximum size hints. ; Also specify via winc and hinc the resize increments. ; Reimplemented from TVirtualX.; Definition at line 2005 of file GX11Gui.cxx. ◆ SetWMState(). void TGX11::SetWMState ; (; Window_t ; id, . EInitialState ; state . ). overridevirtual . Set the initial state of the window. Either kNormalState or kIconicState. ; Reimplemented from TVirtualX.; Definition at line 2027 of file GX11Gui.cxx. ◆ SetWMTransientHint(). void TGX11::SetWMTransientHint ; (; Window_t ; id, . Window_t ; main_id . ). overridevirtual . Tell window manager that window is a transient window of main. ; Reimplemented from TVirtualX.; Definition at line 2048 of file GX11Gui.cxx. ◆ ShapeCombineMask(). void TGX11::ShapeCombineMask ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . Pixmap_t ; mask . ). overridevirtual . The Nonrectangular Window Shape Extension adds nonrectangular windows to the System. ; This allows for making shaped (partially transparent) windows ; Reimplemented from TVirtualX.; Definition at line 2675 of file GX11Gui.cxx. ◆ Streamer(). void TGX11::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGX11TTF. ◆ StreamerNVirtual(). void TGX11::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 401 of file TGX11.h. ◆ SubtractRegion(). void TGX11::SubtractRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Subtract rega from regb. ; Reimplemented from TVirtualX.; Definition at line 2544 of file GX11Gui.cxx. ◆ SupportsExtension(). Int_t TGX11::SupportsExtension ; (; const char * ; ext); const. overridevirtual . Returns 1 if window system server supports extension given by the argument, returns 0 ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:118755,Availability,error,error,118755,"sk . ). overridevirtual . The Nonrectangular Window Shape Extension adds nonrectangular windows to the System. ; This allows for making shaped (partially transparent) windows ; Reimplemented from TVirtualX.; Definition at line 2675 of file GX11Gui.cxx. ◆ Streamer(). void TGX11::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGX11TTF. ◆ StreamerNVirtual(). void TGX11::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 401 of file TGX11.h. ◆ SubtractRegion(). void TGX11::SubtractRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Subtract rega from regb. ; Reimplemented from TVirtualX.; Definition at line 2544 of file GX11Gui.cxx. ◆ SupportsExtension(). Int_t TGX11::SupportsExtension ; (; const char * ; ext); const. overridevirtual . Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ; Examples:; ""Apple-WM"" - does server run on MacOS X;; ""XINERAMA"" - does server support Xinerama. See also the output of xdpyinfo. . Reimplemented from TVirtualX.; Definition at line 3692 of file TGX11.cxx. ◆ Sync(). void TGX11::Sync ; (; Int_t ; mode). overridevirtual . Set synchronisation on or off. ; Parameters. [in]mode: synchronisation on/off; mode=1 on; mode<>0 off . Reimplemented from TVirtualX.; Definition at line 3215 of file TGX11.cxx. ◆ TextWidth(). Int_t TGX11::TextWidth ; (; FontStruct_t ; font, . const char * ; s, . Int_t ; len . ). overridevirtual . Return length of string in pixels. Size depends on font. ; Reimplemented from TVirtualX.; Definition at line 2069 of file GX11Gui.cxx. ◆ TranslateCoordinates(). void TGX11::TranslateCoordinates ; (; Window_t ; src, . Window_t ; dest, . Int_t ; src_x, . Int_t ; src_y, . Int_t & ; dest_x, . Int_t & ; dest_y, . Window_t & ; child . ). ov",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:28814,Deployability,update,updated,28814,"ar *mess) const;  Default version is noop, but in principle what ROOT understands as ascent is text related. ;  ; virtual Int_t GetFontDescent () const;  Returns the descent of the current font (in pixels. ;  ; virtual Int_t GetFontDescent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as descent requires a certain text. ;  ; virtual FontStruct_t GetGCFont (GContext_t gc);  Return the font associated with the graphics context gc. ;  ; virtual Double_t GetOpenGLScalingFactor ();  On a HiDPI resolution it can be > 1., this means glViewport should use scaled width and height. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsCmdThread () const;  ; virtual Bool_t MakeOpenGLContextCurrent (Handle_t ctx, Window_t windowID);  Makes context ctx current OpenGL context. ;  ; virtual void MapGCFont (GContext_t, FontStruct_t);  Map the XftFont with the Graphics Context using it. ;  ; virtual Bool_t NeedRedraw (ULongptr_t tgwindow, Bool_t force);  Notify the low level GUI layer ROOT requires ""tgwindow"" to be updated. ;  ; virtual void SelectPixmap (Int_t qpixid);  Selects the pixmap ""qpixid"". ;  ; void SetFillColor (Color_t cindex) override;  Sets color index ""cindex"" for fill areas. ;  ; void SetFillStyle (Style_t style) override;  Sets fill area style. ;  ; void SetLineColor (Color_t cindex) override;  Sets color index ""cindex"" for drawing lines. ;  ; void SetLineStyle (Style_t linestyle) override;  Sets the line style. ;  ; void SetLineWidth (Width_t width) override;  Sets the line width. ;  ; void SetMarkerColor (Color_t cindex) override;  Sets color index ""cindex"" for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Sets marker size index. ;  ; void SetMarkerStyle (Style_t markerstyle) override;  Sets marker style. ;  ; void SetTextAlign (Short_t talign=11) override;  Sets the text alignment. ;  ; void SetTextColor (Color_t cindex) override;  Sets the color index ""cindex"" for text. ;  ; void SetTextFont (Fon",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:101400,Deployability,release,released,101400,"_t ; qwid). overridevirtual . Remove a window created by Qt (like CloseWindow1()). ; Reimplemented from TVirtualX.; Definition at line 1422 of file TGX11.cxx. ◆ ReparentWindow(). void TGX11::ReparentWindow ; (; Window_t ; id, . Window_t ; pid, . Int_t ; x, . Int_t ; y . ). overridevirtual . Reparent window to new parent window at position (x,y). ; Reimplemented from TVirtualX.; Definition at line 340 of file GX11Gui.cxx. ◆ RequestLocator(). Int_t TGX11::RequestLocator ; (; Int_t ; mode, . Int_t ; ctyp, . Int_t & ; x, . Int_t & ; y . ). overridevirtual . Request Locator position. ; Parameters. [in]x,y: cursor position at moment of button press (output) ; [in]ctyp: cursor type (input); ctyp=1 tracking cross; ctyp=2 cross-hair; ctyp=3 rubber circle; ctyp=4 rubber band; ctyp=5 rubber rectangle. [in]mode: input mode; mode=0 request; mode=1 sample. Request locator: return button number:; 1 = left is pressed; 2 = middle is pressed; 3 = right is pressed in sample mode:; 11 = left is released; 12 = middle is released; 13 = right is released; -1 = nothing is pressed or released; -2 = leave the window; else = keycode (keyboard is pressed) . Reimplemented from TVirtualX.; Definition at line 1505 of file TGX11.cxx. ◆ RequestString(). Int_t TGX11::RequestString ; (; Int_t ; x, . Int_t ; y, . char * ; text . ). overridevirtual . Request a string. ; Parameters. [in]x,y: position where text is displayed ; [in]text: text displayed (input), edited text (output). Request string: text is displayed and can be edited with Emacs-like keybinding return termination code (0 for ESC, 1 for RETURN) ; Reimplemented from TVirtualX.; Definition at line 1683 of file TGX11.cxx. ◆ RescaleWindow(). void TGX11::RescaleWindow ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Rescale the window wid. ; Parameters. [in]wid: Window identifier ; [in]w: Width ; [in]h: Height . Reimplemented from TVirtualX.; Definition at line 1841 of file TGX11.cxx. ◆ ResizePixmap(). int TGX11::ResizePixmap ;",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:101425,Deployability,release,released,101425,"_t ; qwid). overridevirtual . Remove a window created by Qt (like CloseWindow1()). ; Reimplemented from TVirtualX.; Definition at line 1422 of file TGX11.cxx. ◆ ReparentWindow(). void TGX11::ReparentWindow ; (; Window_t ; id, . Window_t ; pid, . Int_t ; x, . Int_t ; y . ). overridevirtual . Reparent window to new parent window at position (x,y). ; Reimplemented from TVirtualX.; Definition at line 340 of file GX11Gui.cxx. ◆ RequestLocator(). Int_t TGX11::RequestLocator ; (; Int_t ; mode, . Int_t ; ctyp, . Int_t & ; x, . Int_t & ; y . ). overridevirtual . Request Locator position. ; Parameters. [in]x,y: cursor position at moment of button press (output) ; [in]ctyp: cursor type (input); ctyp=1 tracking cross; ctyp=2 cross-hair; ctyp=3 rubber circle; ctyp=4 rubber band; ctyp=5 rubber rectangle. [in]mode: input mode; mode=0 request; mode=1 sample. Request locator: return button number:; 1 = left is pressed; 2 = middle is pressed; 3 = right is pressed in sample mode:; 11 = left is released; 12 = middle is released; 13 = right is released; -1 = nothing is pressed or released; -2 = leave the window; else = keycode (keyboard is pressed) . Reimplemented from TVirtualX.; Definition at line 1505 of file TGX11.cxx. ◆ RequestString(). Int_t TGX11::RequestString ; (; Int_t ; x, . Int_t ; y, . char * ; text . ). overridevirtual . Request a string. ; Parameters. [in]x,y: position where text is displayed ; [in]text: text displayed (input), edited text (output). Request string: text is displayed and can be edited with Emacs-like keybinding return termination code (0 for ESC, 1 for RETURN) ; Reimplemented from TVirtualX.; Definition at line 1683 of file TGX11.cxx. ◆ RescaleWindow(). void TGX11::RescaleWindow ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Rescale the window wid. ; Parameters. [in]wid: Window identifier ; [in]w: Width ; [in]h: Height . Reimplemented from TVirtualX.; Definition at line 1841 of file TGX11.cxx. ◆ ResizePixmap(). int TGX11::ResizePixmap ;",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:101449,Deployability,release,released,101449,"_t ; qwid). overridevirtual . Remove a window created by Qt (like CloseWindow1()). ; Reimplemented from TVirtualX.; Definition at line 1422 of file TGX11.cxx. ◆ ReparentWindow(). void TGX11::ReparentWindow ; (; Window_t ; id, . Window_t ; pid, . Int_t ; x, . Int_t ; y . ). overridevirtual . Reparent window to new parent window at position (x,y). ; Reimplemented from TVirtualX.; Definition at line 340 of file GX11Gui.cxx. ◆ RequestLocator(). Int_t TGX11::RequestLocator ; (; Int_t ; mode, . Int_t ; ctyp, . Int_t & ; x, . Int_t & ; y . ). overridevirtual . Request Locator position. ; Parameters. [in]x,y: cursor position at moment of button press (output) ; [in]ctyp: cursor type (input); ctyp=1 tracking cross; ctyp=2 cross-hair; ctyp=3 rubber circle; ctyp=4 rubber band; ctyp=5 rubber rectangle. [in]mode: input mode; mode=0 request; mode=1 sample. Request locator: return button number:; 1 = left is pressed; 2 = middle is pressed; 3 = right is pressed in sample mode:; 11 = left is released; 12 = middle is released; 13 = right is released; -1 = nothing is pressed or released; -2 = leave the window; else = keycode (keyboard is pressed) . Reimplemented from TVirtualX.; Definition at line 1505 of file TGX11.cxx. ◆ RequestString(). Int_t TGX11::RequestString ; (; Int_t ; x, . Int_t ; y, . char * ; text . ). overridevirtual . Request a string. ; Parameters. [in]x,y: position where text is displayed ; [in]text: text displayed (input), edited text (output). Request string: text is displayed and can be edited with Emacs-like keybinding return termination code (0 for ESC, 1 for RETURN) ; Reimplemented from TVirtualX.; Definition at line 1683 of file TGX11.cxx. ◆ RescaleWindow(). void TGX11::RescaleWindow ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Rescale the window wid. ; Parameters. [in]wid: Window identifier ; [in]w: Width ; [in]h: Height . Reimplemented from TVirtualX.; Definition at line 1841 of file TGX11.cxx. ◆ ResizePixmap(). int TGX11::ResizePixmap ;",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:101486,Deployability,release,released,101486,"_t ; qwid). overridevirtual . Remove a window created by Qt (like CloseWindow1()). ; Reimplemented from TVirtualX.; Definition at line 1422 of file TGX11.cxx. ◆ ReparentWindow(). void TGX11::ReparentWindow ; (; Window_t ; id, . Window_t ; pid, . Int_t ; x, . Int_t ; y . ). overridevirtual . Reparent window to new parent window at position (x,y). ; Reimplemented from TVirtualX.; Definition at line 340 of file GX11Gui.cxx. ◆ RequestLocator(). Int_t TGX11::RequestLocator ; (; Int_t ; mode, . Int_t ; ctyp, . Int_t & ; x, . Int_t & ; y . ). overridevirtual . Request Locator position. ; Parameters. [in]x,y: cursor position at moment of button press (output) ; [in]ctyp: cursor type (input); ctyp=1 tracking cross; ctyp=2 cross-hair; ctyp=3 rubber circle; ctyp=4 rubber band; ctyp=5 rubber rectangle. [in]mode: input mode; mode=0 request; mode=1 sample. Request locator: return button number:; 1 = left is pressed; 2 = middle is pressed; 3 = right is pressed in sample mode:; 11 = left is released; 12 = middle is released; 13 = right is released; -1 = nothing is pressed or released; -2 = leave the window; else = keycode (keyboard is pressed) . Reimplemented from TVirtualX.; Definition at line 1505 of file TGX11.cxx. ◆ RequestString(). Int_t TGX11::RequestString ; (; Int_t ; x, . Int_t ; y, . char * ; text . ). overridevirtual . Request a string. ; Parameters. [in]x,y: position where text is displayed ; [in]text: text displayed (input), edited text (output). Request string: text is displayed and can be edited with Emacs-like keybinding return termination code (0 for ESC, 1 for RETURN) ; Reimplemented from TVirtualX.; Definition at line 1683 of file TGX11.cxx. ◆ RescaleWindow(). void TGX11::RescaleWindow ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Rescale the window wid. ; Parameters. [in]wid: Window identifier ; [in]w: Width ; [in]h: Height . Reimplemented from TVirtualX.; Definition at line 1841 of file TGX11.cxx. ◆ ResizePixmap(). int TGX11::ResizePixmap ;",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:121209,Deployability,update,update,121209,"Definition at line 2507 of file GX11Gui.cxx. ◆ UnionRegion(). void TGX11::UnionRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Compute the union of rega and regb and return result region. ; The output region may be the same result region. ; Reimplemented from TVirtualX.; Definition at line 2527 of file GX11Gui.cxx. ◆ UnmapWindow(). void TGX11::UnmapWindow ; (; Window_t ; id). overridevirtual . Unmap window from screen. ; Reimplemented from TVirtualX.; Definition at line 247 of file GX11Gui.cxx. ◆ Update(). void TGX11::Update ; (; Int_t ; mode = 0). overridevirtual . Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ; Flush flushes output buffer. Sync flushes buffer and waits till all requests have been processed by X server. ; Reimplemented from TVirtualX.; Definition at line 2480 of file GX11Gui.cxx. ◆ UpdateWindow(). void TGX11::UpdateWindow ; (; Int_t ; mode). overridevirtual . Update display. ; Parameters. [in]mode: (1) update (0) sync. Synchronise client and server once (not permanent). Copy the pixmap gCws->fDrawing on the window gCws->fWindow if the double buffer is on. ; Reimplemented from TVirtualX.; Definition at line 3238 of file TGX11.cxx. ◆ Warp(). void TGX11::Warp ; (; Int_t ; ix, . Int_t ; iy, . Window_t ; id = 0 . ). overridevirtual . Set pointer position. ; Parameters. [in]ixNew X coordinate of pointer ; [in]iyNew Y coordinate of pointer ; [in]idWindow identifier. Coordinates are relative to the origin of the window id or to the origin of the current window if id == 0. ; Reimplemented from TVirtualX.; Definition at line 3261 of file TGX11.cxx. ◆ WMDeleteNotify(). void TGX11::WMDeleteNotify ; (; Window_t ; id). overridevirtual . Tell WM to send message when window is closed via WM. ; Reimplemented from TVirtualX.; Definition at line 1798 of file GX11Gui.cxx. ◆ WriteGIF(). Int_t TGX11::WriteGIF ; (; char * ; name). overridevirtual . Writes the current window into GIF file. ; Returns 1 in cas",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:1541,Energy Efficiency,allocate,allocate,1541,"ss to basic X11 graphics, pixmap, text and font handling routines.; The companion class for Win32 is TGWin32.; The file G11Gui.cxx contains the implementation of the GUI methods of the TGX11 class. Most of the methods are used by the machine independent GUI classes (libGUI.so).; This code was initially developed in the context of HIGZ and PAW by Olivier Couet (package X11INT). ; Definition at line 80 of file TGX11.h. Public Member Functions;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Register pixmap created by gVirtualGL. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sound bell. Percent is loudness from -100% .. 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, by values from gval. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAt",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:16735,Energy Efficiency,green,green,16735,"Map window on screen and put on top of all windows. ;  ; void MapSubwindows (Window_t id) override;  Map sub windows. ;  ; void MapWindow (Window_t id) override;  Map window on screen. ;  ; void MoveResizeWindow (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Move and resize a window. ;  ; void MoveWindow (Int_t wid, Int_t x, Int_t y) override;  Move the window wid. ;  ; void MoveWindow (Window_t id, Int_t x, Int_t y) override;  Move a window. ;  ; void NextEvent (Event_t &event) override;  Copies first pending event from event queue to Event_t structure and removes event from queue. ;  ; Int_t OpenDisplay (const char *dpyName) override;  Open connection to display server (if such a thing exist on the current platform). ;  ; Int_t OpenDisplay (void *display);  Open the display. Return -1 if the opening fails, 0 when ok. ;  ; Int_t OpenPixmap (UInt_t w, UInt_t h) override;  Open a new pixmap. ;  ; Bool_t ParseColor (Colormap_t cmap, const char *cname, ColorStruct_t &color) override;  Parse string cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Put (x,y,w,h) part of image img in window win at position dx,dy. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Set pixel at specified location in XImage img. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Fill in the primary color components for a specific pixel value. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Query pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:47213,Energy Efficiency,green,green,47213,"ructure associated to color index cid. ;  ; void * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (Colormap cmap, RXColor *colors, Int_t ncolors);  Returns the current RGB value for the pixel in the XColor structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; ULong_t fBlackPixel;  Value of black pixel in colormap. ;  ; Int_t fBlueDiv;  Blue value divider. ;  ; Int_t fBlueShift;  Bits to left shift blue. ;  ; Float_t fCharacterUpX;  Character Up vector along X. ;  ; Float_t fCharacterUpY;  Character Up vector along Y. ;  ; Colormap fColormap;  Default colormap, 0 if b/w. ;  ; Int_t fDepth;  Number of color planes. ;  ; void * fDisplay;  Pointer to display. ;  ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fHasXft;  True when XftFonts are used. ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; Drawable fRootWin;  Root window used as parent of all windows. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Drawable fVisRootWin;  Root window with fVisual to be used to create GC's and XImages. ;  ; RVisual * fVisual;  Pointer to visual used by all windows. ;  ; ULong_t fWhitePixel;  Value of white pixel in colormap. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inhe",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:49925,Energy Efficiency,allocate,allocate,49925,"e. ;  . Private Member Functions; void ClearPixmap (Drawable *pix);  Clear the pixmap pix. ;  ; void CloseWindow1 ();  Delete current window. ;  ; void CollectImageColors (ULong_t pixel, ULong_t *&orgcolors, Int_t &ncolors, Int_t &maxcolors);  Collect in orgcolors all different original image colors. ;  ; void CopyWindowtoPixmap (Drawable *pix, Int_t xpos, Int_t ypos);  Copy area of current window in the pixmap pix. ;  ; void FindBestVisual ();  Find best visual, i.e. ;  ; Int_t FindColor (ULong_t pixel, ULong_t *orgcolors, Int_t ncolors);  Returns index in orgcolors (and fNewColors) for pixel. ;  ; void FindUsableVisual (RXVisualInfo *vlist, Int_t nitems);  Check if visual is usable, if so set fVisual, fDepth, fColormap, fBlackPixel and fWhitePixel. ;  ; void ImgPickPalette (RXImage *image, Int_t &ncol, Int_t *&R, Int_t *&G, Int_t *&B);  Returns in R G B the ncol colors of the palette used by the image. ;  ; void MakeOpaqueColors (Int_t percent, ULong_t *orgcolors, Int_t ncolors);  Get RGB values for orgcolors, add percent neutral to the RGB and allocate fNewColors. ;  ; void MapColorStruct (ColorStruct_t *color, RXColor &xcolor);  Map a ColorStruct_t to a XColor structure. ;  ; void MapCursor (ECursor cursor, Int_t &xcursor);  ; void MapEvent (Event_t &ev, void *xev, Bool_t tox=kTRUE);  Map Event_t structure to XEvent structure. ;  ; void MapEventMask (UInt_t &emask, UInt_t &xemask, Bool_t tox=kTRUE);  Map event mask to or from X. ;  ; void MapGCValues (GCValues_t &gval, ULong_t &xmask, RXGCValues &xgval, Bool_t tox=kTRUE);  Map a GCValues_t to a XCGValues structure if tox is true. ;  ; void MapKeySym (UInt_t &keysym, UInt_t &xkeysym, Bool_t tox=kTRUE);  Map to and from X key symbols. ;  ; void MapModifierState (UInt_t &state, UInt_t &xstate, Bool_t tox=kTRUE);  Map modifier key state to or from X. ;  ; void MapPictureAttributes (PictureAttributes_t &attr, RXpmAttributes &xpmattr, Bool_t toxpm=kTRUE);  Map a PictureAttributes_t to a XpmAttributes structure. ;  ; v",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:54584,Energy Efficiency,green,green,54584,"ap ; (; ULong_t ; pixid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Register pixmap created by gVirtualGL. ; Parameters. [in]pixidPixmap identifier ; [in]w,hWidth and height of the pixmap. register new pixmap ; Reimplemented from TVirtualX.; Definition at line 3645 of file TGX11.cxx. ◆ AddWindow(). Int_t TGX11::AddWindow ; (; ULong_t ; qwid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Register a window created by Qt as a ROOT window (like InitWindow()). ; Reimplemented from TVirtualX.; Definition at line 1378 of file TGX11.cxx. ◆ AllocColor() [1/2]. Bool_t TGX11::AllocColor ; (; Colormap ; cmap, . RXColor * ; color . ). protected . Allocate color in colormap. ; If we are on an <= 8 plane machine we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane true color machine we will calculate the pixel value using: for 15 and 16 bit true colors have 6 bits precision per color however only the 5 most significant bits are used in the color index. Except for 16 bits where green uses all 6 bits. I.e.: 15 bits = rrrrrgggggbbbbb; 16 bits = rrrrrggggggbbbbb; for 24 bits each r, g and b are represented by 8 bits.; Since all colors are set with a max of 65535 (16 bits) per r, g, b we just right shift them by 10, 11 and 10 bits for 16 planes, and (10, 10, 10 for 15 planes) and by 8 bits for 24 planes. Returns kFALSE in case color allocation failed. ; Definition at line 366 of file TGX11.cxx. ◆ AllocColor() [2/2]. Bool_t TGX11::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Find and allocate a color cell according to the color values specified in the ColorStruct_t. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE. ; Reimplemented from TVirtualX.; Definition at line 1351 of file GX11Gui.cxx. ◆ Bell(). void TGX11::Bell ; (; Int_t ; percent). overridevirtual . Sound bell. Percent is loudness from -100% .. 100%. ; Reimplemented from TVirtualX.; Definition at line 1675 of file GX11Gui.cxx. ◆ ChangeActivePointe",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:55134,Energy Efficiency,allocate,allocate,55134,"Color ; (; Colormap ; cmap, . RXColor * ; color . ). protected . Allocate color in colormap. ; If we are on an <= 8 plane machine we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane true color machine we will calculate the pixel value using: for 15 and 16 bit true colors have 6 bits precision per color however only the 5 most significant bits are used in the color index. Except for 16 bits where green uses all 6 bits. I.e.: 15 bits = rrrrrgggggbbbbb; 16 bits = rrrrrggggggbbbbb; for 24 bits each r, g and b are represented by 8 bits.; Since all colors are set with a max of 65535 (16 bits) per r, g, b we just right shift them by 10, 11 and 10 bits for 16 planes, and (10, 10, 10 for 15 planes) and by 8 bits for 24 planes. Returns kFALSE in case color allocation failed. ; Definition at line 366 of file TGX11.cxx. ◆ AllocColor() [2/2]. Bool_t TGX11::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Find and allocate a color cell according to the color values specified in the ColorStruct_t. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE. ; Reimplemented from TVirtualX.; Definition at line 1351 of file GX11Gui.cxx. ◆ Bell(). void TGX11::Bell ; (; Int_t ; percent). overridevirtual . Sound bell. Percent is loudness from -100% .. 100%. ; Reimplemented from TVirtualX.; Definition at line 1675 of file GX11Gui.cxx. ◆ ChangeActivePointerGrab(). void TGX11::ChangeActivePointerGrab ; (; Window_t ; , . UInt_t ; mask, . Cursor_t ; cur . ). overridevirtual . Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ; Reimplemented from TVirtualX.; Definition at line 2718 of file GX11Gui.cxx. ◆ ChangeGC(). void TGX11::ChangeGC ; (; GContext_t ; gc, . GCValues_t * ; gval . ). overridevirtual . Change entries in an existing graphics context, gc, by values from gval. ; Reimplemented from TVirtualX.; Definition at line 993 of file GX11Gui.cxx. ◆ ChangeProperties(). void TGX11::ChangeProperti",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:55240,Energy Efficiency,allocate,allocated,55240,"n colormap. ; If we are on an <= 8 plane machine we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane true color machine we will calculate the pixel value using: for 15 and 16 bit true colors have 6 bits precision per color however only the 5 most significant bits are used in the color index. Except for 16 bits where green uses all 6 bits. I.e.: 15 bits = rrrrrgggggbbbbb; 16 bits = rrrrrggggggbbbbb; for 24 bits each r, g and b are represented by 8 bits.; Since all colors are set with a max of 65535 (16 bits) per r, g, b we just right shift them by 10, 11 and 10 bits for 16 planes, and (10, 10, 10 for 15 planes) and by 8 bits for 24 planes. Returns kFALSE in case color allocation failed. ; Definition at line 366 of file TGX11.cxx. ◆ AllocColor() [2/2]. Bool_t TGX11::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Find and allocate a color cell according to the color values specified in the ColorStruct_t. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE. ; Reimplemented from TVirtualX.; Definition at line 1351 of file GX11Gui.cxx. ◆ Bell(). void TGX11::Bell ; (; Int_t ; percent). overridevirtual . Sound bell. Percent is loudness from -100% .. 100%. ; Reimplemented from TVirtualX.; Definition at line 1675 of file GX11Gui.cxx. ◆ ChangeActivePointerGrab(). void TGX11::ChangeActivePointerGrab ; (; Window_t ; , . UInt_t ; mask, . Cursor_t ; cur . ). overridevirtual . Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ; Reimplemented from TVirtualX.; Definition at line 2718 of file GX11Gui.cxx. ◆ ChangeGC(). void TGX11::ChangeGC ; (; GContext_t ; gc, . GCValues_t * ; gval . ). overridevirtual . Change entries in an existing graphics context, gc, by values from gval. ; Reimplemented from TVirtualX.; Definition at line 993 of file GX11Gui.cxx. ◆ ChangeProperties(). void TGX11::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, .",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:87252,Energy Efficiency,reduce,reduce,87252,"rabbing client window. ; Reimplemented from TVirtualX.; Definition at line 1872 of file GX11Gui.cxx. ◆ HasTTFonts(). Bool_t TGX11::HasTTFonts ; (; ); const. inlineoverridevirtual . Returns True when TrueType fonts are used. ; Reimplemented from TVirtualX.; Definition at line 186 of file TGX11.h. ◆ IconifyWindow(). void TGX11::IconifyWindow ; (; Window_t ; id). overridevirtual . Iconify the window. ; Reimplemented from TVirtualX.; Definition at line 330 of file GX11Gui.cxx. ◆ ImgPickPalette(). void TGX11::ImgPickPalette ; (; RXImage * ; image, . Int_t & ; ncol, . Int_t *& ; R, . Int_t *& ; G, . Int_t *& ; B . ). private . Returns in R G B the ncol colors of the palette used by the image. ; The image pixels are changed to index values in these R G B arrays. This produces a colormap with only the used colors (so even on displays with more than 8 planes we will be able to create GIF's when the image contains no more than 256 different colors). If it does contain more colors we will have to use GIFquantize to reduce the number of colors. The R G B arrays must be deleted by the caller. ; Definition at line 3331 of file TGX11.cxx. ◆ Init(). Bool_t TGX11::Init ; (; void * ; display). overridevirtual . Initialize X11 system. Returns kFALSE in case of failure. ; Reimplemented from TVirtualX.; Reimplemented in TGX11TTF.; Definition at line 342 of file TGX11.cxx. ◆ InitWindow(). Int_t TGX11::InitWindow ; (; ULong_t ; win). overridevirtual . Open window and return window number. ; Returns-1 if window initialization fails. ; Reimplemented from TVirtualX.; Definition at line 1301 of file TGX11.cxx. ◆ InternAtom(). Atom_t TGX11::InternAtom ; (; const char * ; atom_name, . Bool_t ; only_if_exist . ). overridevirtual . Return atom handle for atom_name. ; If it does not exist create it if only_if_exist is false. Atoms are used to communicate between different programs (i.e. window manager) via the X server. ; Reimplemented from TVirtualX.; Definition at line 900 of file GX11Gui.cxx. ◆ ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:90897,Energy Efficiency,allocate,allocate,90897,"uct_t. Free the loaded font using DeleteFont(). ; Reimplemented from TVirtualX.; Definition at line 941 of file GX11Gui.cxx. ◆ LookupString(). void TGX11::LookupString ; (; Event_t * ; event, . char * ; buf, . Int_t ; buflen, . UInt_t & ; keysym . ). overridevirtual . Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ; In buf a null terminated ASCII string is returned representing the string that is currently mapped to the key code. ; Reimplemented from TVirtualX.; Definition at line 2281 of file GX11Gui.cxx. ◆ LowerWindow(). void TGX11::LowerWindow ; (; Window_t ; id). overridevirtual . Lower window so it lays below all its siblings. ; Reimplemented from TVirtualX.; Definition at line 287 of file GX11Gui.cxx. ◆ MakeOpaqueColors(). void TGX11::MakeOpaqueColors ; (; Int_t ; percent, . ULong_t * ; orgcolors, . Int_t ; ncolors . ). private . Get RGB values for orgcolors, add percent neutral to the RGB and allocate fNewColors. ; Definition at line 2974 of file TGX11.cxx. ◆ MapColorStruct(). void TGX11::MapColorStruct ; (; ColorStruct_t * ; color, . RXColor & ; xcolor . ). private . Map a ColorStruct_t to a XColor structure. ; Definition at line 1315 of file GX11Gui.cxx. ◆ MapCursor(). void TGX11::MapCursor ; (; ECursor ; cursor, . Int_t & ; xcursor . ). private . ◆ MapEvent(). void TGX11::MapEvent ; (; Event_t & ; ev, . void * ; xevi, . Bool_t ; tox = kTRUE . ). private . Map Event_t structure to XEvent structure. ; If tox is false map the other way. ; Definition at line 1483 of file GX11Gui.cxx. ◆ MapEventMask(). void TGX11::MapEventMask ; (; UInt_t & ; emask, . UInt_t & ; xemask, . Bool_t ; tox = kTRUE . ). private . Map event mask to or from X. ; Definition at line 402 of file GX11Gui.cxx. ◆ MapGCValues(). void TGX11::MapGCValues ; (; GCValues_t & ; gval, . ULong_t & ; xmask, . RXGCValues & ; xgval, . Bool_t ; tox = kTRUE . ). private . Map a GCValues_t to a XCG",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:95850,Energy Efficiency,green,green,95850,"ual . Open connection to display server (if such a thing exist on the current platform). ; On X11 this method returns on success the X display socket descriptor (> 0), 0 in case of batch mode and < 0 in case of failure (cannot connect to display dpyName). It also initializes the TGX11 class via Init(). Called from TGClient ctor. ; Reimplemented from TVirtualX.; Definition at line 809 of file GX11Gui.cxx. ◆ OpenDisplay() [2/2]. Int_t TGX11::OpenDisplay ; (; void * ; display). Open the display. Return -1 if the opening fails, 0 when ok. ; Definition at line 1091 of file TGX11.cxx. ◆ OpenPixmap(). Int_t TGX11::OpenPixmap ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Open a new pixmap. ; Parameters. [in]w,h: Width and height of the pixmap. . Reimplemented from TVirtualX.; Definition at line 1243 of file TGX11.cxx. ◆ ParseColor(). Bool_t TGX11::ParseColor ; (; Colormap_t ; cmap, . const char * ; cname, . ColorStruct_t & ; color . ). overridevirtual . Parse string cname containing color name, like ""green"" or ""#00FF00"". ; It returns a filled in ColorStruct_t. Returns kFALSE in case parsing failed, kTRUE in case of success. On success, the ColorStruct_t fRed, fGreen and fBlue fields are all filled in and the mask is set for all three colors, but fPixel is not set. ; Reimplemented from TVirtualX.; Definition at line 1331 of file GX11Gui.cxx. ◆ PointInRegion(). Bool_t TGX11::PointInRegion ; (; Int_t ; x, . Int_t ; y, . Region_t ; reg . ). overridevirtual . Returns true if the point x,y is in the region. ; Reimplemented from TVirtualX.; Definition at line 2569 of file GX11Gui.cxx. ◆ PolygonRegion(). Region_t TGX11::PolygonRegion ; (; Point_t * ; points, . Int_t ; np, . Bool_t ; winding . ). overridevirtual . Create region for the polygon defined by the points array. ; If winding is true use WindingRule else EvenOddRule as fill rule. ; Reimplemented from TVirtualX.; Definition at line 2517 of file GX11Gui.cxx. ◆ PutImage() [1/2]. void TGX11::PutImage ; (; Drawable_t ; id,",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:113319,Energy Efficiency,green,green,113319,"lX.; Definition at line 1954 of file GX11Gui.cxx. ◆ SetOpacity(). void TGX11::SetOpacity ; (; Int_t ; percent). overridevirtual . Set opacity of a window. ; This image manipulation routine works by adding to a percent amount of neutral to each pixels RGB. Since it requires quite some additional color map entries is it only supported on displays with more than > 8 color planes (> 256 colors). ; Reimplemented from TVirtualX.; Definition at line 2884 of file TGX11.cxx. ◆ SetPrimarySelectionOwner(). void TGX11::SetPrimarySelectionOwner ; (; Window_t ; id). overridevirtual . Makes the window id the current owner of the primary selection. ; That is the window in which, for example some text is selected. ; Reimplemented from TVirtualX.; Definition at line 2249 of file GX11Gui.cxx. ◆ SetRGB(). void TGX11::SetRGB ; (; Int_t ; cindex, . Float_t ; r, . Float_t ; g, . Float_t ; b . ). overridevirtual . Set color intensities for given color index. ; Parameters. [in]cindex: color index ; [in]r,g,b: red, green, blue intensities between 0.0 and 1.0 . Reimplemented from TVirtualX.; Definition at line 3035 of file TGX11.cxx. ◆ SetSelectionOwner(). Bool_t TGX11::SetSelectionOwner ; (; Window_t ; owner, . Atom_t & ; sel . ). overridevirtual . Changes the owner and last-change time for the specified selection. ; Reimplemented from TVirtualX.; Definition at line 2741 of file GX11Gui.cxx. ◆ SetTextAlign(). void TGX11::SetTextAlign ; (; Short_t ; talign = 11). overridevirtual . Set text alignment. ; Parameters. [in]taligntext alignment . Reimplemented from TAttText.; Definition at line 3068 of file TGX11.cxx. ◆ SetTextColor(). void TGX11::SetTextColor ; (; Color_t ; cindex). overridevirtual . Set color index for text. ; Reimplemented from TAttText.; Definition at line 3125 of file TGX11.cxx. ◆ SetTextFont() [1/2]. Int_t TGX11::SetTextFont ; (; char * ; fontname, . ETextSetMode ; mode . ). overridevirtual . Set text font to specified name. ; Parameters. [in]fontnamefont name ; [in]modeloadin",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:124340,Energy Efficiency,green,green,124340," fCharacterUpX. Float_t TGX11::fCharacterUpX. protected . Character Up vector along X. ; Definition at line 136 of file TGX11.h. ◆ fCharacterUpY. Float_t TGX11::fCharacterUpY. protected . Character Up vector along Y. ; Definition at line 137 of file TGX11.h. ◆ fColormap. Colormap TGX11::fColormap. protected . Default colormap, 0 if b/w. ; Definition at line 129 of file TGX11.h. ◆ fColors. TExMap* TGX11::fColors. private . Hash list of colors. ; Definition at line 85 of file TGX11.h. ◆ fCursors. Cursor TGX11::fCursors[kNumCursors]. private . List of cursors. ; Definition at line 86 of file TGX11.h. ◆ fDepth. Int_t TGX11::fDepth. protected . Number of color planes. ; Definition at line 139 of file TGX11.h. ◆ fDisplay. void* TGX11::fDisplay. protected . Pointer to display. ; Definition at line 125 of file TGX11.h. ◆ fGreenDiv. Int_t TGX11::fGreenDiv. protected . Green value divider. ; Definition at line 141 of file TGX11.h. ◆ fGreenShift. Int_t TGX11::fGreenShift. protected . Bits to left shift green. ; Definition at line 144 of file TGX11.h. ◆ fHasTTFonts. Bool_t TGX11::fHasTTFonts. protected . True when TrueType fonts are used. ; Definition at line 146 of file TGX11.h. ◆ fHasXft. Bool_t TGX11::fHasXft. protected . True when XftFonts are used. ; Definition at line 147 of file TGX11.h. ◆ fMaxNumberOfWindows. Int_t TGX11::fMaxNumberOfWindows. private . Maximum number of windows. ; Definition at line 83 of file TGX11.h. ◆ fRedDiv. Int_t TGX11::fRedDiv. protected . Red value divider, -1 if no TrueColor visual. ; Definition at line 140 of file TGX11.h. ◆ fRedShift. Int_t TGX11::fRedShift. protected . Bits to left shift red, -1 if no TrueColor visual. ; Definition at line 143 of file TGX11.h. ◆ fRootWin. Drawable TGX11::fRootWin. protected . Root window used as parent of all windows. ; Definition at line 127 of file TGX11.h. ◆ fScreenNumber. Int_t TGX11::fScreenNumber. protected . Screen number. ; Definition at line 132 of file TGX11.h. ◆ fTextAlign. Int_t TGX11::fTextAlign",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:414,Integrability,interface,interface,414,". ROOT: TGX11 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TGX11 Class ReferenceGraphics » Graphics' Backends » X11 backend. ; This class is the basic interface to the X11 (Xlib) graphics system. ; It is an implementation of the abstract TVirtualX class.; This class gives access to basic X11 graphics, pixmap, text and font handling routines.; The companion class for Win32 is TGWin32.; The file G11Gui.cxx contains the implementation of the GUI methods of the TGX11 class. Most of the methods are used by the machine independent GUI classes (libGUI.so).; This code was initially developed in the context of HIGZ and PAW by Olivier Couet (package X11INT). ; Definition at line 80 of file TGX11.h. Public Member Functions;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Register pixmap created by gVirtualGL. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sound bell. Percent is loudness from -100% .. 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, b",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:597,Integrability,rout,routines,597,". ROOT: TGX11 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TGX11 Class ReferenceGraphics » Graphics' Backends » X11 backend. ; This class is the basic interface to the X11 (Xlib) graphics system. ; It is an implementation of the abstract TVirtualX class.; This class gives access to basic X11 graphics, pixmap, text and font handling routines.; The companion class for Win32 is TGWin32.; The file G11Gui.cxx contains the implementation of the GUI methods of the TGX11 class. Most of the methods are used by the machine independent GUI classes (libGUI.so).; This code was initially developed in the context of HIGZ and PAW by Olivier Couet (package X11INT). ; Definition at line 80 of file TGX11.h. Public Member Functions;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Register pixmap created by gVirtualGL. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sound bell. Percent is loudness from -100% .. 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, b",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:25026,Integrability,depend,depends,25026,"e. ;  ; void SetWMTransientHint (Window_t id, Window_t main_id) override;  Tell window manager that window is a transient window of main. ;  ; void ShapeCombineMask (Window_t id, Int_t x, Int_t y, Pixmap_t mask) override;  The Nonrectangular Window Shape Extension adds nonrectangular windows to the System. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtract rega from regb. ;  ; Int_t SupportsExtension (const char *ext) const override;  Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ; void Sync (Int_t mode) override;  Set synchronisation on or off. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of reference of one window to another. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Union of rectangle with a region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override; ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:25697,Integrability,synchroniz,synchronize,25697," server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ; void Sync (Int_t mode) override;  Set synchronisation on or off. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of reference of one window to another. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Union of rectangle with a region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Write the pixmap wid in the bitmap file pxname. ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculate the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creat",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:25950,Integrability,message,message,25950,"truct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of reference of one window to another. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Union of rectangle with a region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Write the pixmap wid in the bitmap file pxname. ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculate the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext);  Creates OpenGL context for window ""windowID"". ;  ; virtual Window_t CreateOpenGLWindow (Window_t parentID, UInt_t width, UInt_t hei",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:27213,Integrability,message,messageID,27213,"Region_t rega, Region_t regb, Region_t result) override;  Calculate the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext);  Creates OpenGL context for window ""windowID"". ;  ; virtual Window_t CreateOpenGLWindow (Window_t parentID, UInt_t width, UInt_t height, const std::vector< std::pair< UInt_t, Int_t > > &format);  Create window with special pixel format. Noop everywhere except Cocoa. ;  ; virtual void DeleteOpenGLContext (Int_t wid=0);  Deletes OpenGL context for window ""wid"". ;  ; virtual void DispatchClientMessage (UInt_t messageID);  Force processing of event, sent by SendEvent before. ;  ; virtual UInt_t ExecCommand (TGWin32Command *code);  Executes the command ""code"" coming from the other threads (Win32) ;  ; virtual void FlushOpenGLBuffer (Handle_t ctx);  Flushes OpenGL buffer. ;  ; virtual Handle_t GetCurrentOpenGLContext ();  Asks OpenGL subsystem about the current OpenGL context. ;  ; EDrawMode GetDrawMode ();  ; virtual Int_t GetFontAscent () const;  Returns the ascent of the current font (in pixels). ;  ; virtual Int_t GetFontAscent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as ascent is text related. ;  ; virtual Int_t GetFontDescent () const;  Returns the descent of the current font (in pixels. ;  ; virtual Int_t GetFontDescent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as descent requires a certain text. ;  ; virtual FontStruct_t GetGCFont (GContext_t gc);  Return the font associated with the graphics con",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:33171,Integrability,message,message,33171,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:33712,Integrability,message,message,33712,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:34702,Integrability,message,message,34702,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:37796,Integrability,message,message,37796,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:38169,Integrability,message,message,38169," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:76560,Integrability,interface,interface,76560,"finition at line 899 of file TGX11.cxx. ◆ GetColor(). XColor_t & TGX11::GetColor ; (; Int_t ; cid). protected . Return reference to internal color structure associated to color index cid. ; Definition at line 909 of file TGX11.cxx. ◆ GetColorBits(). unsigned char * TGX11::GetColorBits ; (; Drawable_t ; wid, . Int_t ; x = 0, . Int_t ; y = 0, . UInt_t ; w = 0, . UInt_t ; h = 0 . ). overridevirtual . Returns an array of pixels created from a part of drawable (defined by x, y, w, h) in format: b1, g1, r1, 0, b2, g2, r2, 0, ..., bn, gn, rn, 0. ; Pixels are numbered from left to right and from top to bottom. By default all pixels from the whole drawable are returned.; Note that return array is 32-bit aligned ; Reimplemented from TVirtualX.; Definition at line 3618 of file TGX11.cxx. ◆ GetColormap(). Colormap_t TGX11::GetColormap ; (; ); const. overridevirtual . Returns handle to colormap (might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. ; GL interface). ; Reimplemented from TVirtualX.; Definition at line 871 of file GX11Gui.cxx. ◆ GetCurrentWindow(). Window_t TGX11::GetCurrentWindow ; (; ); const. overridevirtual . Return current window pointer. Protected method used by TGX11TTF. ; Reimplemented from TVirtualX.; Definition at line 922 of file TGX11.cxx. ◆ GetDefaultRootWindow(). Window_t TGX11::GetDefaultRootWindow ; (; ); const. overridevirtual . Return handle to the default root window created when calling XOpenDisplay(). ; Reimplemented from TVirtualX.; Definition at line 912 of file GX11Gui.cxx. ◆ GetDepth(). Int_t TGX11::GetDepth ; (; ); const. overridevirtual . Returns depth of screen (number of bit planes). ; Equivalent to GetPlanes(). ; Reimplemented from TVirtualX.; Definition at line 890 of file GX11Gui.cxx. ◆ GetDisplay(). Display_t TGX11::GetDisplay ; (; ); const. overridevirtual . Returns handle to display (might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. ; GL inter",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:77558,Integrability,interface,interface,77558,"interface). ; Reimplemented from TVirtualX.; Definition at line 871 of file GX11Gui.cxx. ◆ GetCurrentWindow(). Window_t TGX11::GetCurrentWindow ; (; ); const. overridevirtual . Return current window pointer. Protected method used by TGX11TTF. ; Reimplemented from TVirtualX.; Definition at line 922 of file TGX11.cxx. ◆ GetDefaultRootWindow(). Window_t TGX11::GetDefaultRootWindow ; (; ); const. overridevirtual . Return handle to the default root window created when calling XOpenDisplay(). ; Reimplemented from TVirtualX.; Definition at line 912 of file GX11Gui.cxx. ◆ GetDepth(). Int_t TGX11::GetDepth ; (; ); const. overridevirtual . Returns depth of screen (number of bit planes). ; Equivalent to GetPlanes(). ; Reimplemented from TVirtualX.; Definition at line 890 of file GX11Gui.cxx. ◆ GetDisplay(). Display_t TGX11::GetDisplay ; (; ); const. overridevirtual . Returns handle to display (might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. ; GL interface). ; Reimplemented from TVirtualX.; Definition at line 851 of file GX11Gui.cxx. ◆ GetDoubleBuffer(). Int_t TGX11::GetDoubleBuffer ; (; Int_t ; wid). overridevirtual . Query the double buffer value for the window wid. ; Reimplemented from TVirtualX.; Definition at line 943 of file TGX11.cxx. ◆ GetFontHandle(). FontH_t TGX11::GetFontHandle ; (; FontStruct_t ; fs). overridevirtual . Return handle to font described by font structure. ; Reimplemented from TVirtualX.; Definition at line 950 of file GX11Gui.cxx. ◆ GetFontProperties(). void TGX11::GetFontProperties ; (; FontStruct_t ; font, . Int_t & ; max_ascent, . Int_t & ; max_descent . ). overridevirtual . Return some font properties. ; Reimplemented from TVirtualX.; Definition at line 2077 of file GX11Gui.cxx. ◆ GetFontStruct(). FontStruct_t TGX11::GetFontStruct ; (; FontH_t ; fh). overridevirtual . Retrieve associated font structure once we have the font handle. ; Free returned FontStruct_t using FreeFontStruct(). ; Reimplemented f",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:82770,Integrability,interface,interface,82770,"list . ). overridevirtual . Returns the actual type of the property; the actual format of the property; the number of 8-bit, 16-bit, or 32-bit items transferred; the number of bytes remaining to be read in the property; and a pointer to the data actually returned. ; Reimplemented from TVirtualX.; Definition at line 2705 of file GX11Gui.cxx. ◆ GetRegionBox(). void TGX11::GetRegionBox ; (; Region_t ; reg, . Rectangle_t * ; rect . ). overridevirtual . Return smallest enclosing rectangle. ; Reimplemented from TVirtualX.; Definition at line 2585 of file GX11Gui.cxx. ◆ GetRGB(). void TGX11::GetRGB ; (; Int_t ; index, . Float_t & ; r, . Float_t & ; g, . Float_t & ; b . ). overridevirtual . Get rgb values for color ""index"". ; Reimplemented from TVirtualX.; Definition at line 1027 of file TGX11.cxx. ◆ GetScreen(). Int_t TGX11::GetScreen ; (; ); const. overridevirtual . Returns screen number (might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. ; GL interface). ; Reimplemented from TVirtualX.; Definition at line 881 of file GX11Gui.cxx. ◆ GetTextExtent() [1/2]. void TGX11::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . wchar_t * ; mess . ). inlineoverridevirtual . Returns the size of the specified character string ""mess"". ; Parameters. [in]wthe text width ; [in]hthe text height ; [in]messthe string . Reimplemented from TVirtualX.; Definition at line 183 of file TGX11.h. ◆ GetTextExtent() [2/2]. void TGX11::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . char * ; mess . ). overridevirtual . Return the size of a character string. ; Parameters. [in]w: text width ; [in]h: text height ; [in]mess: message . Reimplemented from TVirtualX.; Definition at line 1048 of file TGX11.cxx. ◆ GetTextMagnitude(). Float_t TGX11::GetTextMagnitude ; (; ). inlineoverridevirtual . Returns the current font magnification factor. ; Reimplemented from TVirtualX.; Definition at line 184 of file TGX11.h. ◆ GetVisual(). Visual_t TGX11::GetVisual ; (; ); co",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:83432,Integrability,message,message,83432,"Float_t & ; g, . Float_t & ; b . ). overridevirtual . Get rgb values for color ""index"". ; Reimplemented from TVirtualX.; Definition at line 1027 of file TGX11.cxx. ◆ GetScreen(). Int_t TGX11::GetScreen ; (; ); const. overridevirtual . Returns screen number (might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. ; GL interface). ; Reimplemented from TVirtualX.; Definition at line 881 of file GX11Gui.cxx. ◆ GetTextExtent() [1/2]. void TGX11::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . wchar_t * ; mess . ). inlineoverridevirtual . Returns the size of the specified character string ""mess"". ; Parameters. [in]wthe text width ; [in]hthe text height ; [in]messthe string . Reimplemented from TVirtualX.; Definition at line 183 of file TGX11.h. ◆ GetTextExtent() [2/2]. void TGX11::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . char * ; mess . ). overridevirtual . Return the size of a character string. ; Parameters. [in]w: text width ; [in]h: text height ; [in]mess: message . Reimplemented from TVirtualX.; Definition at line 1048 of file TGX11.cxx. ◆ GetTextMagnitude(). Float_t TGX11::GetTextMagnitude ; (; ). inlineoverridevirtual . Returns the current font magnification factor. ; Reimplemented from TVirtualX.; Definition at line 184 of file TGX11.h. ◆ GetVisual(). Visual_t TGX11::GetVisual ; (; ); const. overridevirtual . Returns handle to visual (might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. ; GL interface). ; Reimplemented from TVirtualX.; Definition at line 861 of file GX11Gui.cxx. ◆ GetWindowAttributes(). void TGX11::GetWindowAttributes ; (; Window_t ; id, . WindowAttributes_t & ; attr . ). overridevirtual . Get window attributes and return filled in attributes structure. ; Reimplemented from TVirtualX.; Definition at line 763 of file GX11Gui.cxx. ◆ GetWindowID(). Window_t TGX11::GetWindowID ; (; Int_t ; wid). overridevirtual . Return the X11 window identifier. ; Paramete",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:83924,Integrability,interface,interface,83924,"w, . UInt_t & ; h, . wchar_t * ; mess . ). inlineoverridevirtual . Returns the size of the specified character string ""mess"". ; Parameters. [in]wthe text width ; [in]hthe text height ; [in]messthe string . Reimplemented from TVirtualX.; Definition at line 183 of file TGX11.h. ◆ GetTextExtent() [2/2]. void TGX11::GetTextExtent ; (; UInt_t & ; w, . UInt_t & ; h, . char * ; mess . ). overridevirtual . Return the size of a character string. ; Parameters. [in]w: text width ; [in]h: text height ; [in]mess: message . Reimplemented from TVirtualX.; Definition at line 1048 of file TGX11.cxx. ◆ GetTextMagnitude(). Float_t TGX11::GetTextMagnitude ; (; ). inlineoverridevirtual . Returns the current font magnification factor. ; Reimplemented from TVirtualX.; Definition at line 184 of file TGX11.h. ◆ GetVisual(). Visual_t TGX11::GetVisual ; (; ); const. overridevirtual . Returns handle to visual (might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. ; GL interface). ; Reimplemented from TVirtualX.; Definition at line 861 of file GX11Gui.cxx. ◆ GetWindowAttributes(). void TGX11::GetWindowAttributes ; (; Window_t ; id, . WindowAttributes_t & ; attr . ). overridevirtual . Get window attributes and return filled in attributes structure. ; Reimplemented from TVirtualX.; Definition at line 763 of file GX11Gui.cxx. ◆ GetWindowID(). Window_t TGX11::GetWindowID ; (; Int_t ; wid). overridevirtual . Return the X11 window identifier. ; Parameters. [in]wid: Workstation identifier (input) . Reimplemented from TVirtualX.; Definition at line 1068 of file TGX11.cxx. ◆ GetWindowSize(). void TGX11::GetWindowSize ; (; Drawable_t ; id, . Int_t & ; x, . Int_t & ; y, . UInt_t & ; w, . UInt_t & ; h . ). overridevirtual . Return geometry of window (should be called GetGeometry but signature already used). ; Reimplemented from TVirtualX.; Definition at line 2403 of file GX11Gui.cxx. ◆ GrabButton(). void TGX11::GrabButton ; (; Window_t ; id, . EMouseButton ; button",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:89268,Integrability,depend,dependent,89268,"n(). void TGX11::IntersectRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Compute the intersection of rega and regb and return result region. ; The output region may be the same as the result region. ; Reimplemented from TVirtualX.; Definition at line 2536 of file GX11Gui.cxx. ◆ IsA(). TClass * TGX11::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TGX11TTF.; Definition at line 401 of file TGX11.h. ◆ IsDNDAware(). Bool_t TGX11::IsDNDAware ; (; Window_t ; win, . Atom_t * ; typelist . ). overridevirtual . Checks if Window win is DND aware, and knows any of the DND formats passed in argument. ; Reimplemented from TVirtualX.; Definition at line 2853 of file GX11Gui.cxx. ◆ KeysymToKeycode(). Int_t TGX11::KeysymToKeycode ; (; UInt_t ; keysym). overridevirtual . Convert a keysym to the appropriate keycode. ; For example keysym is a letter and keycode is the matching keyboard key (which is dependent on the current keyboard mapping). ; Reimplemented from TVirtualX.; Definition at line 2154 of file GX11Gui.cxx. ◆ ListFonts(). char ** TGX11::ListFonts ; (; const char * ; fontname, . Int_t ; max, . Int_t & ; count . ). overridevirtual . Return list of font names matching fontname regexp, like ""-*-times-*"". ; Reimplemented from TVirtualX.; Definition at line 2593 of file GX11Gui.cxx. ◆ LoadQueryFont(). FontStruct_t TGX11::LoadQueryFont ; (; const char * ; font_name). overridevirtual . Load font and query font. ; If font is not found 0 is returned, otherwise an opaque pointer to the FontStruct_t. Free the loaded font using DeleteFont(). ; Reimplemented from TVirtualX.; Definition at line 941 of file GX11Gui.cxx. ◆ LookupString(). void TGX11::LookupString ; (; Event_t * ; event, . char * ; buf, . Int_t ; buflen, . UInt_t & ; keysym . ). overridevirtual . Convert the keycode from the event structure to a key symbol (according to the modifiers specified in th",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:112495,Integrability,rout,routine,112495,"rker type. ; Parameters. [in]type: marker type ; [in]n: length of marker description ; [in]xy: list of points describing marker shape. if n == 0 marker is a single point; if TYPE == 0 marker is hollow circle of diameter N; if TYPE == 1 marker is filled circle of diameter N; if TYPE == 2 marker is a hollow polygon describe by line XY; if TYPE == 3 marker is a filled polygon describe by line XY; if TYPE == 4 marker is described by segmented line XY e.g. TYPE=4,N=4,XY=(-3,0,3,0,0,-3,0,3) sets a plus shape of 7x7 pixels . Definition at line 2420 of file TGX11.cxx. ◆ SetMWMHints(). void TGX11::SetMWMHints ; (; Window_t ; id, . UInt_t ; value, . UInt_t ; funcs, . UInt_t ; input . ). overridevirtual . Set decoration style for MWM-compatible wm (mwm, ncdwm, fvwm?). ; Reimplemented from TVirtualX.; Definition at line 1954 of file GX11Gui.cxx. ◆ SetOpacity(). void TGX11::SetOpacity ; (; Int_t ; percent). overridevirtual . Set opacity of a window. ; This image manipulation routine works by adding to a percent amount of neutral to each pixels RGB. Since it requires quite some additional color map entries is it only supported on displays with more than > 8 color planes (> 256 colors). ; Reimplemented from TVirtualX.; Definition at line 2884 of file TGX11.cxx. ◆ SetPrimarySelectionOwner(). void TGX11::SetPrimarySelectionOwner ; (; Window_t ; id). overridevirtual . Makes the window id the current owner of the primary selection. ; That is the window in which, for example some text is selected. ; Reimplemented from TVirtualX.; Definition at line 2249 of file GX11Gui.cxx. ◆ SetRGB(). void TGX11::SetRGB ; (; Int_t ; cindex, . Float_t ; r, . Float_t ; g, . Float_t ; b . ). overridevirtual . Set color intensities for given color index. ; Parameters. [in]cindex: color index ; [in]r,g,b: red, green, blue intensities between 0.0 and 1.0 . Reimplemented from TVirtualX.; Definition at line 3035 of file TGX11.cxx. ◆ SetSelectionOwner(). Bool_t TGX11::SetSelectionOwner ; (; Window_t ; owner, . ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:119403,Integrability,depend,depends,119403," rega from regb. ; Reimplemented from TVirtualX.; Definition at line 2544 of file GX11Gui.cxx. ◆ SupportsExtension(). Int_t TGX11::SupportsExtension ; (; const char * ; ext); const. overridevirtual . Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ; Examples:; ""Apple-WM"" - does server run on MacOS X;; ""XINERAMA"" - does server support Xinerama. See also the output of xdpyinfo. . Reimplemented from TVirtualX.; Definition at line 3692 of file TGX11.cxx. ◆ Sync(). void TGX11::Sync ; (; Int_t ; mode). overridevirtual . Set synchronisation on or off. ; Parameters. [in]mode: synchronisation on/off; mode=1 on; mode<>0 off . Reimplemented from TVirtualX.; Definition at line 3215 of file TGX11.cxx. ◆ TextWidth(). Int_t TGX11::TextWidth ; (; FontStruct_t ; font, . const char * ; s, . Int_t ; len . ). overridevirtual . Return length of string in pixels. Size depends on font. ; Reimplemented from TVirtualX.; Definition at line 2069 of file GX11Gui.cxx. ◆ TranslateCoordinates(). void TGX11::TranslateCoordinates ; (; Window_t ; src, . Window_t ; dest, . Int_t ; src_x, . Int_t ; src_y, . Int_t & ; dest_x, . Int_t & ; dest_y, . Window_t & ; child . ). overridevirtual . TranslateCoordinates translates coordinates from the frame of reference of one window to another. ; If the point is contained in a mapped child of the destination, the id of that child is returned as well. ; Reimplemented from TVirtualX.; Definition at line 2387 of file GX11Gui.cxx. ◆ UnionRectWithRegion(). void TGX11::UnionRectWithRegion ; (; Rectangle_t * ; rect, . Region_t ; src, . Region_t ; dest . ). overridevirtual . Union of rectangle with a region. ; Reimplemented from TVirtualX.; Definition at line 2507 of file GX11Gui.cxx. ◆ UnionRegion(). void TGX11::UnionRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Compute the union of rega and",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:120854,Integrability,synchroniz,synchronize,120854," of the destination, the id of that child is returned as well. ; Reimplemented from TVirtualX.; Definition at line 2387 of file GX11Gui.cxx. ◆ UnionRectWithRegion(). void TGX11::UnionRectWithRegion ; (; Rectangle_t * ; rect, . Region_t ; src, . Region_t ; dest . ). overridevirtual . Union of rectangle with a region. ; Reimplemented from TVirtualX.; Definition at line 2507 of file GX11Gui.cxx. ◆ UnionRegion(). void TGX11::UnionRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Compute the union of rega and regb and return result region. ; The output region may be the same result region. ; Reimplemented from TVirtualX.; Definition at line 2527 of file GX11Gui.cxx. ◆ UnmapWindow(). void TGX11::UnmapWindow ; (; Window_t ; id). overridevirtual . Unmap window from screen. ; Reimplemented from TVirtualX.; Definition at line 247 of file GX11Gui.cxx. ◆ Update(). void TGX11::Update ; (; Int_t ; mode = 0). overridevirtual . Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ; Flush flushes output buffer. Sync flushes buffer and waits till all requests have been processed by X server. ; Reimplemented from TVirtualX.; Definition at line 2480 of file GX11Gui.cxx. ◆ UpdateWindow(). void TGX11::UpdateWindow ; (; Int_t ; mode). overridevirtual . Update display. ; Parameters. [in]mode: (1) update (0) sync. Synchronise client and server once (not permanent). Copy the pixmap gCws->fDrawing on the window gCws->fWindow if the double buffer is on. ; Reimplemented from TVirtualX.; Definition at line 3238 of file TGX11.cxx. ◆ Warp(). void TGX11::Warp ; (; Int_t ; ix, . Int_t ; iy, . Window_t ; id = 0 . ). overridevirtual . Set pointer position. ; Parameters. [in]ixNew X coordinate of pointer ; [in]iyNew Y coordinate of pointer ; [in]idWindow identifier. Coordinates are relative to the origin of the window id or to the origin of the current window if id == 0. ; Reimplemented from TVirtualX.; Definition at line 3261 of file TGX11.cxx. ◆",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:121960,Integrability,message,message,121960,"ts have been processed by X server. ; Reimplemented from TVirtualX.; Definition at line 2480 of file GX11Gui.cxx. ◆ UpdateWindow(). void TGX11::UpdateWindow ; (; Int_t ; mode). overridevirtual . Update display. ; Parameters. [in]mode: (1) update (0) sync. Synchronise client and server once (not permanent). Copy the pixmap gCws->fDrawing on the window gCws->fWindow if the double buffer is on. ; Reimplemented from TVirtualX.; Definition at line 3238 of file TGX11.cxx. ◆ Warp(). void TGX11::Warp ; (; Int_t ; ix, . Int_t ; iy, . Window_t ; id = 0 . ). overridevirtual . Set pointer position. ; Parameters. [in]ixNew X coordinate of pointer ; [in]iyNew Y coordinate of pointer ; [in]idWindow identifier. Coordinates are relative to the origin of the window id or to the origin of the current window if id == 0. ; Reimplemented from TVirtualX.; Definition at line 3261 of file TGX11.cxx. ◆ WMDeleteNotify(). void TGX11::WMDeleteNotify ; (; Window_t ; id). overridevirtual . Tell WM to send message when window is closed via WM. ; Reimplemented from TVirtualX.; Definition at line 1798 of file GX11Gui.cxx. ◆ WriteGIF(). Int_t TGX11::WriteGIF ; (; char * ; name). overridevirtual . Writes the current window into GIF file. ; Returns 1 in case of success, 0 otherwise. ; Reimplemented from TVirtualX.; Definition at line 3387 of file TGX11.cxx. ◆ WritePixmap(). void TGX11::WritePixmap ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h, . char * ; pxname . ). overridevirtual . Write the pixmap wid in the bitmap file pxname. ; Parameters. [in]wid: Pixmap address ; [in]w,h: Width and height of the pixmap. ; [in]pxname: pixmap name . Reimplemented from TVirtualX.; Definition at line 3278 of file TGX11.cxx. ◆ XorRegion(). void TGX11::XorRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Calculate the difference between the union and intersection of two regions. ; Reimplemented from TVirtualX.; Definition at line 2553 of file GX11Gui.cxx. Member Data Documentati",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:26385,Modifiability,inherit,inherited,26385,"onRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Write the pixmap wid in the bitmap file pxname. ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculate the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext);  Creates OpenGL context for window ""windowID"". ;  ; virtual Window_t CreateOpenGLWindow (Window_t parentID, UInt_t width, UInt_t height, const std::vector< std::pair< UInt_t, Int_t > > &format);  Create window with special pixel format. Noop everywhere except Cocoa. ;  ; virtual void DeleteOpenGLContext (Int_t wid=0);  Deletes OpenGL context for window ""wid"". ;  ; virtual void DispatchClientMessage (UInt_t messageID);  Force processing of event, sent by SendEvent before. ;  ; virtual UInt_t ExecCommand (TGWin32Command *code);  Executes the command ""code"" coming from the other threads (Win32) ;  ; virtual void Flu",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:30080,Modifiability,inherit,inherited,30080,"dex) override;  Sets color index ""cindex"" for drawing lines. ;  ; void SetLineStyle (Style_t linestyle) override;  Sets the line style. ;  ; void SetLineWidth (Width_t width) override;  Sets the line width. ;  ; void SetMarkerColor (Color_t cindex) override;  Sets color index ""cindex"" for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Sets marker size index. ;  ; void SetMarkerStyle (Style_t markerstyle) override;  Sets marker style. ;  ; void SetTextAlign (Short_t talign=11) override;  Sets the text alignment. ;  ; void SetTextColor (Color_t cindex) override;  Sets the color index ""cindex"" for text. ;  ; void SetTextFont (Font_t fontnumber) override;  Sets the current text font number. ;  ; void SetTextSize (Float_t textsize) override;  Sets the current text size to ""textsize"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:31708,Modifiability,inherit,inherited,31708,"ual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:32801,Modifiability,inherit,inheritance,32801,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:34800,Modifiability,inherit,inherits,34800,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:34917,Modifiability,inherit,inherits,34917,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:38476,Modifiability,inherit,inherited,38476,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:39771,Modifiability,inherit,inherited,39771,"o a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:40876,Modifiability,inherit,inherited,40876,"t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a new TAttText. ;  ; virtual Short_t GetTextAlign () const;  Return the text alignment. ;  ; virtual Float_t GetTextAngle () const;  Return the text angle. ;  ; virtual Color_t GetTextColor () const;  Return the text color. ;  ; virtual Font_t GetTextFont () const;  Return the text font. ;  ; virtual Float_t GetTextSize () const;  Return the text size. ;  ; virtual Float_t GetTextSizePercent (Float_t size);  Return the text in percent of the pad size. ;  ; virtual void Modify ();  Change current text attributes if necessary. ;  ; virtual void ResetAttText (Option_t *toption="""");  Reset this text attributes to default values. ;  ; virtual void SaveTextAttributes (std::ost",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:42474,Modifiability,inherit,inherited,42474,"xt font. ;  ; virtual Float_t GetTextSize () const;  Return the text size. ;  ; virtual Float_t GetTextSizePercent (Float_t size);  Return the text in percent of the pad size. ;  ; virtual void Modify ();  Change current text attributes if necessary. ;  ; virtual void ResetAttText (Option_t *toption="""");  Reset this text attributes to default values. ;  ; virtual void SaveTextAttributes (std::ostream &out, const char *name, Int_t alidef=12, Float_t angdef=0, Int_t coldef=1, Int_t fondef=61, Float_t sizdef=1);  Save text attributes as C++ statement(s) on output stream out. ;  ; virtual void SetTextAngle (Float_t tangle=0);  Set the text angle. ;  ; virtual void SetTextAttributes ();  Invoke the DialogCanvas Text attributes. ;  ; virtual void SetTextColorAlpha (Color_t tcolor, Float_t talpha);  Set a transparent text color. ;  ; virtual void SetTextSizePixels (Int_t npixels);  Set the text size in pixel. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:43864,Modifiability,inherit,inherited,43864,"tual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualX; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualX *& Instance ();  Returns gVirtualX global. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inhe",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:44142,Modifiability,inherit,inherited,44142," statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualX; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualX *& Instance ();  Returns gVirtualX global. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; s",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:44352,Modifiability,inherit,inherited,44352," statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualX; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualX *& Instance ();  Returns gVirtualX global. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; s",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:44870,Modifiability,inherit,inherited,44870," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Bool_t AllocColor (Colormap cmap, RXColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index cid. ;  ; void * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (Colormap cmap, RXColor *colors, Int_t ncolors);  Retu",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:45082,Modifiability,inherit,inherited,45082," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Bool_t AllocColor (Colormap cmap, RXColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index cid. ;  ; void * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (Colormap cmap, RXColor *colors, Int_t ncolors);  Retu",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:45294,Modifiability,inherit,inherited,45294," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Bool_t AllocColor (Colormap cmap, RXColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index cid. ;  ; void * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (Colormap cmap, RXColor *colors, Int_t ncolors);  Retu",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:45506,Modifiability,inherit,inherited,45506," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Bool_t AllocColor (Colormap cmap, RXColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index cid. ;  ; void * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (Colormap cmap, RXColor *colors, Int_t ncolors);  Retu",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:46516,Modifiability,inherit,inherited,46516,"har * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Bool_t AllocColor (Colormap cmap, RXColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index cid. ;  ; void * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (Colormap cmap, RXColor *colors, Int_t ncolors);  Returns the current RGB value for the pixel in the XColor structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; ULong_t fBlackPixel;  Value of black pixel in colormap. ;  ; Int_t fBlueDiv;  Blue value divider. ;  ; Int_t fBlueShift;  Bits to left shift blue. ;  ; Float_t fCharacterUpX;  Character Up vector along X. ;  ; Float_t fCharacterUpY;  Character Up vector along Y. ;  ; Colormap fColormap;  Default colormap, 0 if b/w. ;  ; Int_t fDepth;  Number of color planes. ;  ; void * fDisplay;  Pointer to display. ;  ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fHasXft;  True when XftFonts are used. ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; Drawable fRootWin;  Root window used as parent of all windows. ;  ; Int_t fScreenNumber;  Screen n",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:48036,Modifiability,inherit,inherited,48036," ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fHasXft;  True when XftFonts are used. ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; Drawable fRootWin;  Root window used as parent of all windows. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Drawable fVisRootWin;  Root window with fVisual to be used to create GC's and XImages. ;  ; RVisual * fVisual;  Pointer to visual used by all windows. ;  ; ULong_t fWhitePixel;  Value of white pixel in colormap. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions; void ClearPixmap (Drawable *pix);  Clear the pixmap pix. ;  ; void CloseWindow1 ();  Delete current window. ;  ; void CollectImageColors (ULong_t pixel, ULong_t *&orgcolors, Int_t &ncolors, Int_t &maxcolors);  Collect in orgcolors a",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:48108,Modifiability,inherit,inherited,48108," ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fHasXft;  True when XftFonts are used. ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; Drawable fRootWin;  Root window used as parent of all windows. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Drawable fVisRootWin;  Root window with fVisual to be used to create GC's and XImages. ;  ; RVisual * fVisual;  Pointer to visual used by all windows. ;  ; ULong_t fWhitePixel;  Value of white pixel in colormap. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions; void ClearPixmap (Drawable *pix);  Clear the pixmap pix. ;  ; void CloseWindow1 ();  Delete current window. ;  ; void CollectImageColors (ULong_t pixel, ULong_t *&orgcolors, Int_t &ncolors, Int_t &maxcolors);  Collect in orgcolors a",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:48190,Modifiability,inherit,inherited,48190," ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fHasXft;  True when XftFonts are used. ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; Drawable fRootWin;  Root window used as parent of all windows. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Drawable fVisRootWin;  Root window with fVisual to be used to create GC's and XImages. ;  ; RVisual * fVisual;  Pointer to visual used by all windows. ;  ; ULong_t fWhitePixel;  Value of white pixel in colormap. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions; void ClearPixmap (Drawable *pix);  Clear the pixmap pix. ;  ; void CloseWindow1 ();  Delete current window. ;  ; void CollectImageColors (ULong_t pixel, ULong_t *&orgcolors, Int_t &ncolors, Int_t &maxcolors);  Collect in orgcolors a",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:48351,Modifiability,inherit,inherited,48351,"er, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; Drawable fRootWin;  Root window used as parent of all windows. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Drawable fVisRootWin;  Root window with fVisual to be used to create GC's and XImages. ;  ; RVisual * fVisual;  Pointer to visual used by all windows. ;  ; ULong_t fWhitePixel;  Value of white pixel in colormap. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions; void ClearPixmap (Drawable *pix);  Clear the pixmap pix. ;  ; void CloseWindow1 ();  Delete current window. ;  ; void CollectImageColors (ULong_t pixel, ULong_t *&orgcolors, Int_t &ncolors, Int_t &maxcolors);  Collect in orgcolors all different original image colors. ;  ; void CopyWindowtoPixmap (Drawable *pix, Int_t xpos, Int_t ypos);  Copy area of current window in the pixmap pix. ;  ; void FindBestVisual ();  Find best visual, i.e. ;  ; Int_t FindColor (ULong_t pix",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:48484,Modifiability,inherit,inherited,48484,"ot window used as parent of all windows. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Drawable fVisRootWin;  Root window with fVisual to be used to create GC's and XImages. ;  ; RVisual * fVisual;  Pointer to visual used by all windows. ;  ; ULong_t fWhitePixel;  Value of white pixel in colormap. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions; void ClearPixmap (Drawable *pix);  Clear the pixmap pix. ;  ; void CloseWindow1 ();  Delete current window. ;  ; void CollectImageColors (ULong_t pixel, ULong_t *&orgcolors, Int_t &ncolors, Int_t &maxcolors);  Collect in orgcolors all different original image colors. ;  ; void CopyWindowtoPixmap (Drawable *pix, Int_t xpos, Int_t ypos);  Copy area of current window in the pixmap pix. ;  ; void FindBestVisual ();  Find best visual, i.e. ;  ; Int_t FindColor (ULong_t pixel, ULong_t *orgcolors, Int_t ncolors);  Returns index in orgcolors (and fNewColors) for pixel. ;  ; void FindUsableVisual (RXVisualI",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:48720,Modifiability,inherit,inherited,48720,"ertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Drawable fVisRootWin;  Root window with fVisual to be used to create GC's and XImages. ;  ; RVisual * fVisual;  Pointer to visual used by all windows. ;  ; ULong_t fWhitePixel;  Value of white pixel in colormap. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions; void ClearPixmap (Drawable *pix);  Clear the pixmap pix. ;  ; void CloseWindow1 ();  Delete current window. ;  ; void CollectImageColors (ULong_t pixel, ULong_t *&orgcolors, Int_t &ncolors, Int_t &maxcolors);  Collect in orgcolors all different original image colors. ;  ; void CopyWindowtoPixmap (Drawable *pix, Int_t xpos, Int_t ypos);  Copy area of current window in the pixmap pix. ;  ; void FindBestVisual ();  Find best visual, i.e. ;  ; Int_t FindColor (ULong_t pixel, ULong_t *orgcolors, Int_t ncolors);  Returns index in orgcolors (and fNewColors) for pixel. ;  ; void FindUsableVisual (RXVisualInfo *vlist, Int_t nitems);  Check if visual is usable, if so set fVisual, fDepth, fColormap, fBlackPixel and fWhitePixel. ;  ; void ImgPickPalette (RXImage *image, Int_t &ncol, Int_t *&R, Int_t *&G, Int_t *&B);  Returns in R G B the ncol",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:51888,Modifiability,inherit,inherited,51888,"et, Int_t itran, Int_t x0, Int_t y0, Int_t nx, Int_t ny, Int_t xmin, Int_t ymin, Int_t xmax, Int_t ymax, UChar_t *image, Drawable_t id);  Draw image. ;  ; void RemovePixmap (Drawable *pix);  Remove the pixmap pix. ;  ; void SetColor (void *gc, Int_t ci);  Set the foreground color in GC. ;  ; void SetFillStyleIndex (Int_t style, Int_t fasi);  Set fill area style index. ;  ; void SetInput (Int_t inp);  Set input on or off. ;  ; void SetMarkerType (Int_t type, Int_t n, RXPoint *xy);  Set marker type. ;  . Private Attributes; TExMap * fColors;  Hash list of colors. ;  ; Cursor fCursors [kNumCursors];  List of cursors. ;  ; Int_t fMaxNumberOfWindows;  Maximum number of windows. ;  ; XWindow_t * fWindows;  List of windows. ;  ; void * fXEvent;  Current native (X11) event. ;  . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGX11.h>. Inheritance diagram for TGX11:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGX11() [1/3]. TGX11::TGX11 ; (; ). Default const",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:52112,Modifiability,inherit,inherited,52112,"et, Int_t itran, Int_t x0, Int_t y0, Int_t nx, Int_t ny, Int_t xmin, Int_t ymin, Int_t xmax, Int_t ymax, UChar_t *image, Drawable_t id);  Draw image. ;  ; void RemovePixmap (Drawable *pix);  Remove the pixmap pix. ;  ; void SetColor (void *gc, Int_t ci);  Set the foreground color in GC. ;  ; void SetFillStyleIndex (Int_t style, Int_t fasi);  Set fill area style index. ;  ; void SetInput (Int_t inp);  Set input on or off. ;  ; void SetMarkerType (Int_t type, Int_t n, RXPoint *xy);  Set marker type. ;  . Private Attributes; TExMap * fColors;  Hash list of colors. ;  ; Cursor fCursors [kNumCursors];  List of cursors. ;  ; Int_t fMaxNumberOfWindows;  Maximum number of windows. ;  ; XWindow_t * fWindows;  List of windows. ;  ; void * fXEvent;  Current native (X11) event. ;  . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGX11.h>. Inheritance diagram for TGX11:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGX11() [1/3]. TGX11::TGX11 ; (; ). Default const",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:52753,Modifiability,inherit,inherited,52753," of windows. ;  ; void * fXEvent;  Current native (X11) event. ;  . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGX11.h>. Inheritance diagram for TGX11:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGX11() [1/3]. TGX11::TGX11 ; (; ). Default constructor. ; Definition at line 173 of file TGX11.cxx. ◆ TGX11() [2/3]. TGX11::TGX11 ; (; const TGX11 & ; org). Copy constructor. Currently only used by TGX11TTF. ; Definition at line 251 of file TGX11.cxx. ◆ TGX11() [3/3]. TGX11::TGX11 ; (; const char * ; name, . const char * ; title . ). Normal Constructor. ; Definition at line 209 of file TGX11.cxx. ◆ ~TGX11(). TGX11::~TGX11 ; (; ). override . Destructor. ; Definition at line 324 of file TGX11.cxx. Member Function Documentation. ◆ AddPixmap(). Int_t TGX11::AddPixmap ; (; ULong_t ; pixid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Register pixmap created by gVirtualGL. ; Parameters. [in]pixidPixmap identifier ; [in]w,hWidth and height of the pixmap",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:16223,Performance,queue,queue,16223,"_t LoadQueryFont (const char *font_name) override;  Load font and query font. ;  ; void LookupString (Event_t *event, char *buf, Int_t buflen, UInt_t &keysym) override;  Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ;  ; void LowerWindow (Window_t id) override;  Lower window so it lays below all its siblings. ;  ; void MapRaised (Window_t id) override;  Map window on screen and put on top of all windows. ;  ; void MapSubwindows (Window_t id) override;  Map sub windows. ;  ; void MapWindow (Window_t id) override;  Map window on screen. ;  ; void MoveResizeWindow (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Move and resize a window. ;  ; void MoveWindow (Int_t wid, Int_t x, Int_t y) override;  Move the window wid. ;  ; void MoveWindow (Window_t id, Int_t x, Int_t y) override;  Move a window. ;  ; void NextEvent (Event_t &event) override;  Copies first pending event from event queue to Event_t structure and removes event from queue. ;  ; Int_t OpenDisplay (const char *dpyName) override;  Open connection to display server (if such a thing exist on the current platform). ;  ; Int_t OpenDisplay (void *display);  Open the display. Return -1 if the opening fails, 0 when ok. ;  ; Int_t OpenPixmap (UInt_t w, UInt_t h) override;  Open a new pixmap. ;  ; Bool_t ParseColor (Colormap_t cmap, const char *cname, ColorStruct_t &color) override;  Parse string cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Put (x,y,w,h) part of image img in window win at position",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:16273,Performance,queue,queue,16273,"_t LoadQueryFont (const char *font_name) override;  Load font and query font. ;  ; void LookupString (Event_t *event, char *buf, Int_t buflen, UInt_t &keysym) override;  Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ;  ; void LowerWindow (Window_t id) override;  Lower window so it lays below all its siblings. ;  ; void MapRaised (Window_t id) override;  Map window on screen and put on top of all windows. ;  ; void MapSubwindows (Window_t id) override;  Map sub windows. ;  ; void MapWindow (Window_t id) override;  Map window on screen. ;  ; void MoveResizeWindow (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Move and resize a window. ;  ; void MoveWindow (Int_t wid, Int_t x, Int_t y) override;  Move the window wid. ;  ; void MoveWindow (Window_t id, Int_t x, Int_t y) override;  Move a window. ;  ; void NextEvent (Event_t &event) override;  Copies first pending event from event queue to Event_t structure and removes event from queue. ;  ; Int_t OpenDisplay (const char *dpyName) override;  Open connection to display server (if such a thing exist on the current platform). ;  ; Int_t OpenDisplay (void *display);  Open the display. Return -1 if the opening fails, 0 when ok. ;  ; Int_t OpenPixmap (UInt_t w, UInt_t h) override;  Open a new pixmap. ;  ; Bool_t ParseColor (Colormap_t cmap, const char *cname, ColorStruct_t &color) override;  Parse string cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Put (x,y,w,h) part of image img in window win at position",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:18018,Performance,load,loads,18018," points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Put (x,y,w,h) part of image img in window win at position dx,dy. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Set pixel at specified location in XImage img. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Fill in the primary color components for a specific pixel value. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Query pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Put window on top of window stack. ;  ; Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0) override;  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Read picture data from file and store in ret_data. ;  ; void RemoveWindow (ULong_t qwid) override;  Remove a window created by Qt (like CloseWindow1()). ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  Reparent window to new parent window at position (x,y). ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Request Locator position. ;  ; Int_t RequestString (Int_t x, Int_t y, char *text) override;  Request a string. ;  ; void RescaleWindow (Int_t wid, UInt_t w, UInt_t h) override;  Rescale the window wid. ;  ; Int_t ResizePixmap (Int_t wid, UInt_t w, UInt_t h) override;  Resize a pixmap. ;  ; void ResizeWindow (Int_t wid) override;  Resize the current window if necessary. ;  ; void ResizeWindow (Window_t id, UInt_t w, UInt_t h) override;  Resize the ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:89890,Performance,load,loaded,89890,"in is DND aware, and knows any of the DND formats passed in argument. ; Reimplemented from TVirtualX.; Definition at line 2853 of file GX11Gui.cxx. ◆ KeysymToKeycode(). Int_t TGX11::KeysymToKeycode ; (; UInt_t ; keysym). overridevirtual . Convert a keysym to the appropriate keycode. ; For example keysym is a letter and keycode is the matching keyboard key (which is dependent on the current keyboard mapping). ; Reimplemented from TVirtualX.; Definition at line 2154 of file GX11Gui.cxx. ◆ ListFonts(). char ** TGX11::ListFonts ; (; const char * ; fontname, . Int_t ; max, . Int_t & ; count . ). overridevirtual . Return list of font names matching fontname regexp, like ""-*-times-*"". ; Reimplemented from TVirtualX.; Definition at line 2593 of file GX11Gui.cxx. ◆ LoadQueryFont(). FontStruct_t TGX11::LoadQueryFont ; (; const char * ; font_name). overridevirtual . Load font and query font. ; If font is not found 0 is returned, otherwise an opaque pointer to the FontStruct_t. Free the loaded font using DeleteFont(). ; Reimplemented from TVirtualX.; Definition at line 941 of file GX11Gui.cxx. ◆ LookupString(). void TGX11::LookupString ; (; Event_t * ; event, . char * ; buf, . Int_t ; buflen, . UInt_t & ; keysym . ). overridevirtual . Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ; In buf a null terminated ASCII string is returned representing the string that is currently mapped to the key code. ; Reimplemented from TVirtualX.; Definition at line 2281 of file GX11Gui.cxx. ◆ LowerWindow(). void TGX11::LowerWindow ; (; Window_t ; id). overridevirtual . Lower window so it lays below all its siblings. ; Reimplemented from TVirtualX.; Definition at line 287 of file GX11Gui.cxx. ◆ MakeOpaqueColors(). void TGX11::MakeOpaqueColors ; (; Int_t ; percent, . ULong_t * ; orgcolors, . Int_t ; ncolors . ). private . Get RGB values for orgcolors, add percent neutral to the RGB and allo",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:94523,Performance,queue,queue,94523,"rtual . Map window on screen. ; Reimplemented from TVirtualX.; Definition at line 217 of file GX11Gui.cxx. ◆ MoveResizeWindow(). void TGX11::MoveResizeWindow ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Move and resize a window. ; Reimplemented from TVirtualX.; Definition at line 307 of file GX11Gui.cxx. ◆ MoveWindow() [1/2]. void TGX11::MoveWindow ; (; Int_t ; wid, . Int_t ; x, . Int_t ; y . ). overridevirtual . Move the window wid. ; Parameters. [in]wid: Window identifier. ; [in]x: x new window position ; [in]y: y new window position . Reimplemented from TVirtualX.; Definition at line 1080 of file TGX11.cxx. ◆ MoveWindow() [2/2]. void TGX11::MoveWindow ; (; Window_t ; id, . Int_t ; x, . Int_t ; y . ). overridevirtual . Move a window. ; Reimplemented from TVirtualX.; Definition at line 297 of file GX11Gui.cxx. ◆ NextEvent(). void TGX11::NextEvent ; (; Event_t & ; event). overridevirtual . Copies first pending event from event queue to Event_t structure and removes event from queue. ; Not all of the event fields are valid for each event type, except fType and fWindow. ; Reimplemented from TVirtualX.; Definition at line 1411 of file GX11Gui.cxx. ◆ OpenDisplay() [1/2]. Int_t TGX11::OpenDisplay ; (; const char * ; dpyName). overridevirtual . Open connection to display server (if such a thing exist on the current platform). ; On X11 this method returns on success the X display socket descriptor (> 0), 0 in case of batch mode and < 0 in case of failure (cannot connect to display dpyName). It also initializes the TGX11 class via Init(). Called from TGClient ctor. ; Reimplemented from TVirtualX.; Definition at line 809 of file GX11Gui.cxx. ◆ OpenDisplay() [2/2]. Int_t TGX11::OpenDisplay ; (; void * ; display). Open the display. Return -1 if the opening fails, 0 when ok. ; Definition at line 1091 of file TGX11.cxx. ◆ OpenPixmap(). Int_t TGX11::OpenPixmap ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Open a new pixmap.",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:94573,Performance,queue,queue,94573,"rtual . Map window on screen. ; Reimplemented from TVirtualX.; Definition at line 217 of file GX11Gui.cxx. ◆ MoveResizeWindow(). void TGX11::MoveResizeWindow ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Move and resize a window. ; Reimplemented from TVirtualX.; Definition at line 307 of file GX11Gui.cxx. ◆ MoveWindow() [1/2]. void TGX11::MoveWindow ; (; Int_t ; wid, . Int_t ; x, . Int_t ; y . ). overridevirtual . Move the window wid. ; Parameters. [in]wid: Window identifier. ; [in]x: x new window position ; [in]y: y new window position . Reimplemented from TVirtualX.; Definition at line 1080 of file TGX11.cxx. ◆ MoveWindow() [2/2]. void TGX11::MoveWindow ; (; Window_t ; id, . Int_t ; x, . Int_t ; y . ). overridevirtual . Move a window. ; Reimplemented from TVirtualX.; Definition at line 297 of file GX11Gui.cxx. ◆ NextEvent(). void TGX11::NextEvent ; (; Event_t & ; event). overridevirtual . Copies first pending event from event queue to Event_t structure and removes event from queue. ; Not all of the event fields are valid for each event type, except fType and fWindow. ; Reimplemented from TVirtualX.; Definition at line 1411 of file GX11Gui.cxx. ◆ OpenDisplay() [1/2]. Int_t TGX11::OpenDisplay ; (; const char * ; dpyName). overridevirtual . Open connection to display server (if such a thing exist on the current platform). ; On X11 this method returns on success the X display socket descriptor (> 0), 0 in case of batch mode and < 0 in case of failure (cannot connect to display dpyName). It also initializes the TGX11 class via Init(). Called from TGClient ctor. ; Reimplemented from TVirtualX.; Definition at line 809 of file GX11Gui.cxx. ◆ OpenDisplay() [2/2]. Int_t TGX11::OpenDisplay ; (; void * ; display). Open the display. Return -1 if the opening fails, 0 when ok. ; Definition at line 1091 of file TGX11.cxx. ◆ OpenPixmap(). Int_t TGX11::OpenPixmap ; (; UInt_t ; w, . UInt_t ; h . ). overridevirtual . Open a new pixmap.",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:99698,Performance,load,loads,99698,"w, . Int_t & ; root_x, . Int_t & ; root_y, . Int_t & ; win_x, . Int_t & ; win_y, . UInt_t & ; mask . ). overridevirtual . Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ; The pointer coordinates returned to win_x and win_y are relative to the origin of the specified window. In this case, QueryPointer returns the child that contains the pointer, if any, or else kNone to childw. QueryPointer returns the current logical state of the keyboard buttons and the modifier keys in mask. ; Reimplemented from TVirtualX.; Definition at line 2438 of file GX11Gui.cxx. ◆ RaiseWindow(). void TGX11::RaiseWindow ; (; Window_t ; id). overridevirtual . Put window on top of window stack. ; Reimplemented from TVirtualX.; Definition at line 277 of file GX11Gui.cxx. ◆ ReadGIF(). Pixmap_t TGX11::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file, . Window_t ; id = 0 . ). overridevirtual . If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ; Otherwise creates pixmap from gif file ; Reimplemented from TVirtualX.; Definition at line 3515 of file TGX11.cxx. ◆ ReadPictureDataFromFile(). Bool_t TGX11::ReadPictureDataFromFile ; (; const char * ; filename, . char *** ; ret_data . ). overridevirtual . Read picture data from file and store in ret_data. ; Returns kTRUE in case of success, kFALSE otherwise. ; Reimplemented from TVirtualX.; Definition at line 1278 of file GX11Gui.cxx. ◆ RemovePixmap(). void TGX11::RemovePixmap ; (; Drawable * ; pix). private . Remove the pixmap pix. ; Definition at line 1472 of file TGX11.cxx. ◆ RemoveWindow(). void TGX11::RemoveWindow ; (; ULong_t ; qwid). overridevirtual . Remove a window created by Qt (like CloseWindow1()). ; Reimplemented from TVirtualX.; Definition at line 1422 of file TGX11.cxx. ◆ ReparentWindow(). void TGX11::ReparentWindow ; (; Window_t ; id, . Window_t ; pid, . Int_t ; x, . Int_t ; y . ). overridevirtual . Reparent window to new ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:114392,Performance,load,load,114392,"en 0.0 and 1.0 . Reimplemented from TVirtualX.; Definition at line 3035 of file TGX11.cxx. ◆ SetSelectionOwner(). Bool_t TGX11::SetSelectionOwner ; (; Window_t ; owner, . Atom_t & ; sel . ). overridevirtual . Changes the owner and last-change time for the specified selection. ; Reimplemented from TVirtualX.; Definition at line 2741 of file GX11Gui.cxx. ◆ SetTextAlign(). void TGX11::SetTextAlign ; (; Short_t ; talign = 11). overridevirtual . Set text alignment. ; Parameters. [in]taligntext alignment . Reimplemented from TAttText.; Definition at line 3068 of file TGX11.cxx. ◆ SetTextColor(). void TGX11::SetTextColor ; (; Color_t ; cindex). overridevirtual . Set color index for text. ; Reimplemented from TAttText.; Definition at line 3125 of file TGX11.cxx. ◆ SetTextFont() [1/2]. Int_t TGX11::SetTextFont ; (; char * ; fontname, . ETextSetMode ; mode . ). overridevirtual . Set text font to specified name. ; Parameters. [in]fontnamefont name ; [in]modeloading flag; mode=0 search if the font exist (kCheck); mode=1 search the font and load it if it exists (kLoad). Set text font to specified name. This function returns 0 if the specified font is found, 1 if not. ; Reimplemented from TVirtualX.; Reimplemented in TGX11TTF.; Definition at line 3154 of file TGX11.cxx. ◆ SetTextFont() [2/2]. void TGX11::SetTextFont ; (; Font_t ; fontnumber). overridevirtual . Set current text font number. ; Reimplemented from TAttText.; Reimplemented in TGX11TTF.; Definition at line 3195 of file TGX11.cxx. ◆ SetTextMagnitude(). void TGX11::SetTextMagnitude ; (; Float_t ; mgn = 1). inlineoverridevirtual . Sets the current text magnification factor to ""mgn"". ; Reimplemented from TVirtualX.; Definition at line 225 of file TGX11.h. ◆ SetTextSize(). void TGX11::SetTextSize ; (; Float_t ; textsize). overridevirtual . Set current text size. ; Reimplemented from TAttText.; Reimplemented in TGX11TTF.; Definition at line 3203 of file TGX11.cxx. ◆ SetTypeList(). void TGX11::SetTypeList ; (; Window_t ; win, ",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:536,Security,access,access,536,". ROOT: TGX11 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TGX11 Class ReferenceGraphics » Graphics' Backends » X11 backend. ; This class is the basic interface to the X11 (Xlib) graphics system. ; It is an implementation of the abstract TVirtualX class.; This class gives access to basic X11 graphics, pixmap, text and font handling routines.; The companion class for Win32 is TGWin32.; The file G11Gui.cxx contains the implementation of the GUI methods of the TGX11 class. Most of the methods are used by the machine independent GUI classes (libGUI.so).; This code was initially developed in the context of HIGZ and PAW by Olivier Couet (package X11INT). ; Definition at line 80 of file TGX11.h. Public Member Functions;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Register pixmap created by gVirtualGL. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sound bell. Percent is loudness from -100% .. 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, b",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:30948,Security,hash,hash,30948," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:17754,Testability,log,logically,17754,"ring cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Put (x,y,w,h) part of image img in window win at position dx,dy. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Set pixel at specified location in XImage img. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Fill in the primary color components for a specific pixel value. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Query pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Put window on top of window stack. ;  ; Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0) override;  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Read picture data from file and store in ret_data. ;  ; void RemoveWindow (ULong_t qwid) override;  Remove a window created by Qt (like CloseWindow1()). ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  Reparent window to new parent window at position (x,y). ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Request Locator position. ;  ; Int_t RequestString (Int_t x, Int_t y, char *text) override;  Request a string. ;  ; void RescaleWindow (Int_t wid",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:98886,Testability,log,logically,98886,"fRed, fGreen and fBlue components will be set. ; Reimplemented from TVirtualX.; Definition at line 1371 of file GX11Gui.cxx. ◆ QueryColors(). void TGX11::QueryColors ; (; Colormap ; cmap, . RXColor * ; colors, . Int_t ; ncolors . ). protected . Returns the current RGB value for the pixel in the XColor structure. ; Definition at line 383 of file TGX11.cxx. ◆ QueryPointer() [1/2]. void TGX11::QueryPointer ; (; Int_t & ; ix, . Int_t & ; iy . ). overridevirtual . Query pointer position. ; Parameters. [in]ix: X coordinate of pointer ; [in]iy: Y coordinate of pointer (both coordinates are relative to the origin of the root window) . Reimplemented from TVirtualX.; Definition at line 1454 of file TGX11.cxx. ◆ QueryPointer() [2/2]. void TGX11::QueryPointer ; (; Window_t ; id, . Window_t & ; rootw, . Window_t & ; childw, . Int_t & ; root_x, . Int_t & ; root_y, . Int_t & ; win_x, . Int_t & ; win_y, . UInt_t & ; mask . ). overridevirtual . Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ; The pointer coordinates returned to win_x and win_y are relative to the origin of the specified window. In this case, QueryPointer returns the child that contains the pointer, if any, or else kNone to childw. QueryPointer returns the current logical state of the keyboard buttons and the modifier keys in mask. ; Reimplemented from TVirtualX.; Definition at line 2438 of file GX11Gui.cxx. ◆ RaiseWindow(). void TGX11::RaiseWindow ; (; Window_t ; id). overridevirtual . Put window on top of window stack. ; Reimplemented from TVirtualX.; Definition at line 277 of file GX11Gui.cxx. ◆ ReadGIF(). Pixmap_t TGX11::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file, . Window_t ; id = 0 . ). overridevirtual . If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ; Otherwise creates pixmap from gif file ; Reimplemented from TVirtualX.; Definition at line 3515 of file TGX11.cxx. ◆ ReadPictureDataF",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:99209,Testability,log,logical,99209,"ition at line 383 of file TGX11.cxx. ◆ QueryPointer() [1/2]. void TGX11::QueryPointer ; (; Int_t & ; ix, . Int_t & ; iy . ). overridevirtual . Query pointer position. ; Parameters. [in]ix: X coordinate of pointer ; [in]iy: Y coordinate of pointer (both coordinates are relative to the origin of the root window) . Reimplemented from TVirtualX.; Definition at line 1454 of file TGX11.cxx. ◆ QueryPointer() [2/2]. void TGX11::QueryPointer ; (; Window_t ; id, . Window_t & ; rootw, . Window_t & ; childw, . Int_t & ; root_x, . Int_t & ; root_y, . Int_t & ; win_x, . Int_t & ; win_y, . UInt_t & ; mask . ). overridevirtual . Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ; The pointer coordinates returned to win_x and win_y are relative to the origin of the specified window. In this case, QueryPointer returns the child that contains the pointer, if any, or else kNone to childw. QueryPointer returns the current logical state of the keyboard buttons and the modifier keys in mask. ; Reimplemented from TVirtualX.; Definition at line 2438 of file GX11Gui.cxx. ◆ RaiseWindow(). void TGX11::RaiseWindow ; (; Window_t ; id). overridevirtual . Put window on top of window stack. ; Reimplemented from TVirtualX.; Definition at line 277 of file GX11Gui.cxx. ◆ ReadGIF(). Pixmap_t TGX11::ReadGIF ; (; Int_t ; x0, . Int_t ; y0, . const char * ; file, . Window_t ; id = 0 . ). overridevirtual . If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ; Otherwise creates pixmap from gif file ; Reimplemented from TVirtualX.; Definition at line 3515 of file TGX11.cxx. ◆ ReadPictureDataFromFile(). Bool_t TGX11::ReadPictureDataFromFile ; (; const char * ; filename, . char *** ; ret_data . ). overridevirtual . Read picture data from file and store in ret_data. ; Returns kTRUE in case of success, kFALSE otherwise. ; Reimplemented from TVirtualX.; Definition at line 1278 of file GX11Gui.cxx. ◆ RemovePixmap",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:49548,Usability,usab,usable,49548,"nt. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions; void ClearPixmap (Drawable *pix);  Clear the pixmap pix. ;  ; void CloseWindow1 ();  Delete current window. ;  ; void CollectImageColors (ULong_t pixel, ULong_t *&orgcolors, Int_t &ncolors, Int_t &maxcolors);  Collect in orgcolors all different original image colors. ;  ; void CopyWindowtoPixmap (Drawable *pix, Int_t xpos, Int_t ypos);  Copy area of current window in the pixmap pix. ;  ; void FindBestVisual ();  Find best visual, i.e. ;  ; Int_t FindColor (ULong_t pixel, ULong_t *orgcolors, Int_t ncolors);  Returns index in orgcolors (and fNewColors) for pixel. ;  ; void FindUsableVisual (RXVisualInfo *vlist, Int_t nitems);  Check if visual is usable, if so set fVisual, fDepth, fColormap, fBlackPixel and fWhitePixel. ;  ; void ImgPickPalette (RXImage *image, Int_t &ncol, Int_t *&R, Int_t *&G, Int_t *&B);  Returns in R G B the ncol colors of the palette used by the image. ;  ; void MakeOpaqueColors (Int_t percent, ULong_t *orgcolors, Int_t ncolors);  Get RGB values for orgcolors, add percent neutral to the RGB and allocate fNewColors. ;  ; void MapColorStruct (ColorStruct_t *color, RXColor &xcolor);  Map a ColorStruct_t to a XColor structure. ;  ; void MapCursor (ECursor cursor, Int_t &xcursor);  ; void MapEvent (Event_t &ev, void *xev, Bool_t tox=kTRUE);  Map Event_t structure to XEvent structure. ;  ; void MapEventMask (UInt_t &emask, UInt_t &xemask, Bool_t tox=kTRUE);  Map event mask to or from X. ;  ; void MapGCValues (GCValues_t &gval, ULong_t &xmask, RXGCValues &xgval, Bool_t tox=kTRUE);  Map a GCValues_t to a XCGValues structure if tox is true. ;  ; void MapKeySym (UInt_t &keysym, UInt_t &xkeysym, Bool_t tox=kTRUE",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11.html:74633,Usability,usab,usable,74633,"e . Find best visual, i.e. ; the one with the most planes and TrueColor or DirectColor. Sets fVisual, fDepth, fRootWin, fColormap, fBlackPixel and fWhitePixel. ; Definition at line 780 of file TGX11.cxx. ◆ FindColor(). Int_t TGX11::FindColor ; (; ULong_t ; pixel, . ULong_t * ; orgcolors, . Int_t ; ncolors . ). private . Returns index in orgcolors (and fNewColors) for pixel. ; Definition at line 3019 of file TGX11.cxx. ◆ FindRWindow(). Window_t TGX11::FindRWindow ; (; Window_t ; win, . Window_t ; dragwin, . Window_t ; input, . int ; x, . int ; y, . int ; maxd . ). overridevirtual . Recursively search in the children of Window for a Window which is at location x, y and is DND aware, with a maximum depth of maxd. ; Possibility to exclude dragwin and input. ; Reimplemented from TVirtualX.; Definition at line 2802 of file GX11Gui.cxx. ◆ FindUsableVisual(). void TGX11::FindUsableVisual ; (; RXVisualInfo * ; vlist, . Int_t ; nitems . ). private . Check if visual is usable, if so set fVisual, fDepth, fColormap, fBlackPixel and fWhitePixel. ; Definition at line 848 of file TGX11.cxx. ◆ FreeColor(). void TGX11::FreeColor ; (; Colormap_t ; cmap, . ULong_t ; pixel . ). overridevirtual . Free color cell with specified pixel value. ; Reimplemented from TVirtualX.; Definition at line 1391 of file GX11Gui.cxx. ◆ FreeFontNames(). void TGX11::FreeFontNames ; (; char ** ; fontlist). overridevirtual . Free list of font names. ; Reimplemented from TVirtualX.; Definition at line 2605 of file GX11Gui.cxx. ◆ FreeFontStruct(). void TGX11::FreeFontStruct ; (; FontStruct_t ; fs). overridevirtual . Free font structure returned by GetFontStruct(). ; Reimplemented from TVirtualX.; Definition at line 2123 of file GX11Gui.cxx. ◆ GetCharacterUp(). void TGX11::GetCharacterUp ; (; Float_t & ; chupx, . Float_t & ; chupy . ). overridevirtual . Return character up vector. ; Reimplemented from TVirtualX.; Definition at line 899 of file TGX11.cxx. ◆ GetColor(). XColor_t & TGX11::GetColor ; (; Int_t ; cid)",MatchSource.WIKI,doc/master/classTGX11.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11.html
https://root.cern/doc/master/classTGX11TTF.html:1222,Availability,failure,failure,1222," |; Private Member Functions |; Private Attributes |; List of all members ; TGX11TTF Class ReferenceGraphics » Graphics' Backends » X11 backend. ; Interface to low level X11 (Xlib). ; This class gives access to basic X11 graphics via the parent class TGX11. However, all text and font handling is done via the Freetype TrueType library. When the shared library containing this class is loaded the global gVirtualX is redirected to point to this class. ; Definition at line 27 of file TGX11TTF.h. Public Member Functions;  TGX11TTF (const TGX11 &org);  Create copy of TGX11 but now use TrueType fonts. ;  ;  ~TGX11TTF () override;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const char *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const wchar_t *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; Bool_t Init (void *display) override;  Initialize X11 system. Returns kFALSE in case of failure. ;  ; TClass * IsA () const override;  ; Int_t SetTextFont (char *fontname, ETextSetMode mode) override;  Set text font to specified name. ;  ; void SetTextFont (Font_t fontnumber) override;  Set specified font. ;  ; void SetTextSize (Float_t textsize) override;  Set current text size. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGX11;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Register pixmap created by gVirtualGL. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colorm",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:4536,Availability,mask,mask,4536," Int_t y, UInt_t w, UInt_t h) override;  Clear a window area to the background color. ;  ; void ClearWindow () override;  Clear current window. ;  ; void ClearWindow (Window_t id) override;  Clear window. ;  ; void CloseDisplay () override;  Close connection to display server. ;  ; void ClosePixmap () override;  Delete current pixmap. ;  ; void CloseWindow () override;  Delete current window. ;  ; void ConvertPrimarySelection (Window_t id, Atom_t clipboard, Time_t when) override;  XConvertSelection() causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Requests that the specified selection be converted to the specified target type. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y) override;  Copy a drawable (i.e. ;  ; void CopyGC (GContext_t org, GContext_t dest, Mask_t mask) override;  Copies graphics context from org to dest. ;  ; void CopyPixmap (Int_t wid, Int_t xpos, Int_t ypos) override;  Copy the pixmap wid at the position xpos, ypos in the current window. ;  ; Pixmap_t CreateBitmap (Drawable_t id, const char *bitmap, UInt_t width, UInt_t height) override;  Create a bitmap (i.e. pixmap with depth 1) from the bitmap data. ;  ; Cursor_t CreateCursor (ECursor cursor) override;  Create cursor handle (just return cursor from cursor pool fCursors). ;  ; GContext_t CreateGC (Drawable_t id, GCValues_t *gval) override;  Create a graphics context using the values set in gval (but only for those entries that are in the mask). ;  ; Drawable_t CreateImage (UInt_t width, UInt_t height) override;  Create a client-side XImage. Returns handle to XImage. ;  ; Bool_t CreatePictureFromData (Drawable_t id, char **data, Pixmap_t &pict, Pixmap_t &pict_mask, PictureAttributes_t &attr) override;  Create a picture pixmap from data. ;  ; Bool_t CreatePictureFromFile (Dra",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:5194,Availability,mask,mask,5194,"tion owner. ;  ; void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &) override;  Requests that the specified selection be converted to the specified target type. ;  ; void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y) override;  Copy a drawable (i.e. ;  ; void CopyGC (GContext_t org, GContext_t dest, Mask_t mask) override;  Copies graphics context from org to dest. ;  ; void CopyPixmap (Int_t wid, Int_t xpos, Int_t ypos) override;  Copy the pixmap wid at the position xpos, ypos in the current window. ;  ; Pixmap_t CreateBitmap (Drawable_t id, const char *bitmap, UInt_t width, UInt_t height) override;  Create a bitmap (i.e. pixmap with depth 1) from the bitmap data. ;  ; Cursor_t CreateCursor (ECursor cursor) override;  Create cursor handle (just return cursor from cursor pool fCursors). ;  ; GContext_t CreateGC (Drawable_t id, GCValues_t *gval) override;  Create a graphics context using the values set in gval (but only for those entries that are in the mask). ;  ; Drawable_t CreateImage (UInt_t width, UInt_t height) override;  Create a client-side XImage. Returns handle to XImage. ;  ; Bool_t CreatePictureFromData (Drawable_t id, char **data, Pixmap_t &pict, Pixmap_t &pict_mask, PictureAttributes_t &attr) override;  Create a picture pixmap from data. ;  ; Bool_t CreatePictureFromFile (Drawable_t id, const char *filename, Pixmap_t &pict, Pixmap_t &pict_mask, PictureAttributes_t &attr) override;  Create a picture pixmap from data on file. ;  ; Pixmap_t CreatePixmap (Drawable_t id, const char *bitmap, UInt_t width, UInt_t height, ULong_t forecolor, ULong_t backcolor, Int_t depth) override;  Create a pixmap from bitmap data. ;  ; Pixmap_t CreatePixmap (Drawable_t id, UInt_t w, UInt_t h) override;  Creates a pixmap of the width and height you specified and returns a pixmap ID that identifies it. ;  ; Pixmap_t CreatePixmapFromData (unsigned char *bits, UInt_t",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:18005,Availability,mask,mask,18005,"ring cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Put (x,y,w,h) part of image img in window win at position dx,dy. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Set pixel at specified location in XImage img. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Fill in the primary color components for a specific pixel value. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Query pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Put window on top of window stack. ;  ; Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0) override;  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Read picture data from file and store in ret_data. ;  ; void RemoveWindow (ULong_t qwid) override;  Remove a window created by Qt (like CloseWindow1()). ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  Reparent window to new parent window at position (x,y). ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Request Locator position. ;  ; Int_t RequestString (Int_t x, Int_t y, char *text) override;  Request a string. ;  ; void RescaleWindow (Int_t wid",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:21331,Availability,mask,mask,21331,"ipping region for the window wid. ;  ; void SetCursor (Int_t win, ECursor cursor) override;  Set the cursor. ;  ; void SetCursor (Window_t id, Cursor_t curid) override;  Set the specified cursor. ;  ; void SetDashes (GContext_t gc, Int_t offset, const char *dash_list, Int_t n) override;  Specify a dash pattern. ;  ; void SetDNDAware (Window_t, Atom_t *) override;  Add XdndAware property and the list of drag and drop types to the Window win. ;  ; void SetDoubleBuffer (Int_t wid, Int_t mode) override;  Set the double buffer on/off on window wid. ;  ; void SetDoubleBufferOFF () override;  Turn double buffer mode off. ;  ; void SetDoubleBufferON () override;  Turn double buffer mode on. ;  ; void SetDrawMode (EDrawMode mode) override;  Set the drawing mode. ;  ; void SetFillColor (Color_t cindex) override;  Set color index for fill areas. ;  ; void SetFillStyle (Style_t style) override;  Set fill area style. ;  ; void SetForeground (GContext_t gc, ULong_t foreground) override;  Set foreground color in graphics context (shortcut for ChangeGC with only foreground mask set). ;  ; void SetIconName (Window_t id, char *name) override;  Set window icon name. ;  ; void SetIconPixmap (Window_t id, Pixmap_t pic) override;  Set pixmap the WM can use when the window is iconized. ;  ; void SetInputFocus (Window_t id) override;  Set keyboard input focus to window id. ;  ; void SetKeyAutoRepeat (Bool_t on=kTRUE) override;  Turn key auto repeat on or off. ;  ; void SetLineColor (Color_t cindex) override;  Set color index for lines. ;  ; void SetLineStyle (Style_t linestyle) override;  Set line style. ;  ; void SetLineType (Int_t n, Int_t *dash) override;  Set line type. ;  ; void SetLineWidth (Width_t width) override;  Set line width. ;  ; void SetMarkerColor (Color_t cindex) override;  Set color index for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Set marker size index. ;  ; void SetMarkerStyle (Style_t markerstyle) override;  Set marker style. ;  ; void SetMWMHin",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:24283,Availability,mask,mask,24283,";  Set the window background color. ;  ; void SetWindowBackgroundPixmap (Window_t id, Pixmap_t pxm) override;  Set pixmap as window background. ;  ; void SetWindowName (Window_t id, char *name) override;  Set window name. ;  ; void SetWMPosition (Window_t id, Int_t x, Int_t y) override;  Tell the window manager the desired window position. ;  ; void SetWMSize (Window_t id, UInt_t w, UInt_t h) override;  Tell the window manager the desired window size. ;  ; void SetWMSizeHints (Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc) override;  Give the window manager minimum and maximum size hints. ;  ; void SetWMState (Window_t id, EInitialState state) override;  Set the initial state of the window. Either kNormalState or kIconicState. ;  ; void SetWMTransientHint (Window_t id, Window_t main_id) override;  Tell window manager that window is a transient window of main. ;  ; void ShapeCombineMask (Window_t id, Int_t x, Int_t y, Pixmap_t mask) override;  The Nonrectangular Window Shape Extension adds nonrectangular windows to the System. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtract rega from regb. ;  ; Int_t SupportsExtension (const char *ext) const override;  Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ; void Sync (Int_t mode) override;  Set synchronisation on or off. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of reference of one window to another. ;  ; void UnionRectWithRegion (Rectangle_t *",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:24770,Availability,error,error,24770,"w, UInt_t h) override;  Tell the window manager the desired window size. ;  ; void SetWMSizeHints (Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc) override;  Give the window manager minimum and maximum size hints. ;  ; void SetWMState (Window_t id, EInitialState state) override;  Set the initial state of the window. Either kNormalState or kIconicState. ;  ; void SetWMTransientHint (Window_t id, Window_t main_id) override;  Tell window manager that window is a transient window of main. ;  ; void ShapeCombineMask (Window_t id, Int_t x, Int_t y, Pixmap_t mask) override;  The Nonrectangular Window Shape Extension adds nonrectangular windows to the System. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtract rega from regb. ;  ; Int_t SupportsExtension (const char *ext) const override;  Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ; void Sync (Int_t mode) override;  Set synchronisation on or off. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of reference of one window to another. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Union of rectangle with a region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mod",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:33134,Availability,error,error,33134,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:33223,Availability,error,error,33223,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:33378,Availability,error,error,33378,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:33675,Availability,error,error,33675,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:37759,Availability,error,error,37759,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:53239,Availability,avail,available,53239,"ass_Name(). static const char * TGX11TTF::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGX11TTF::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 74 of file TGX11TTF.h. ◆ DeclFileName(). static const char * TGX11TTF::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 74 of file TGX11TTF.h. ◆ DrawImage(). void TGX11TTF::DrawImage ; (; FT_Bitmap * ; source, . ULong_t ; fore, . ULong_t ; back, . RXImage * ; xim, . Int_t ; bx, . Int_t ; by . ). private . Draw FT_Bitmap bitmap to xim image at position bx,by using specified foreground color. ; Definition at line 244 of file TGX11TTF.cxx. ◆ DrawText() [1/2]. void TGX11TTF::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const char * ; text, . ETextMode ; mode . ). overridevirtual . Draw text using TrueType fonts. ; If TrueType fonts are not available the text is drawn with TGX11::DrawText. ; Reimplemented from TGX11.; Definition at line 367 of file TGX11TTF.cxx. ◆ DrawText() [2/2]. void TGX11TTF::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const wchar_t * ; text, . ETextMode ; mode . ). overridevirtual . Draw text using TrueType fonts. ; If TrueType fonts are not available the text is drawn with TGX11::DrawText. ; Reimplemented from TGX11.; Definition at line 386 of file TGX11TTF.cxx. ◆ GetBackground(). RXImage * TGX11TTF::GetBackground ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). private . Get the background of the current window in an XImage. ; Definition at line 404 of file TGX11TTF.cxx. ◆ Init(). Bool_t TGX11TTF::Init ; (; void * ; display). overridevirtual . Initialize X11 system. Returns kFALSE in case of failure. ; Reimplemented from TGX11.; Definition at line 184 of file TGX11TTF.cxx. ◆ IsA(). TClass * TGX11TTF::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describi",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:53600,Availability,avail,available,53600,"rnsName of the file containing the class declaration ; Definition at line 74 of file TGX11TTF.h. ◆ DrawImage(). void TGX11TTF::DrawImage ; (; FT_Bitmap * ; source, . ULong_t ; fore, . ULong_t ; back, . RXImage * ; xim, . Int_t ; bx, . Int_t ; by . ). private . Draw FT_Bitmap bitmap to xim image at position bx,by using specified foreground color. ; Definition at line 244 of file TGX11TTF.cxx. ◆ DrawText() [1/2]. void TGX11TTF::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const char * ; text, . ETextMode ; mode . ). overridevirtual . Draw text using TrueType fonts. ; If TrueType fonts are not available the text is drawn with TGX11::DrawText. ; Reimplemented from TGX11.; Definition at line 367 of file TGX11TTF.cxx. ◆ DrawText() [2/2]. void TGX11TTF::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const wchar_t * ; text, . ETextMode ; mode . ). overridevirtual . Draw text using TrueType fonts. ; If TrueType fonts are not available the text is drawn with TGX11::DrawText. ; Reimplemented from TGX11.; Definition at line 386 of file TGX11TTF.cxx. ◆ GetBackground(). RXImage * TGX11TTF::GetBackground ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). private . Get the background of the current window in an XImage. ; Definition at line 404 of file TGX11TTF.cxx. ◆ Init(). Bool_t TGX11TTF::Init ; (; void * ; display). overridevirtual . Initialize X11 system. Returns kFALSE in case of failure. ; Reimplemented from TGX11.; Definition at line 184 of file TGX11TTF.cxx. ◆ IsA(). TClass * TGX11TTF::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGX11.; Definition at line 74 of file TGX11TTF.h. ◆ IsVisible(). Bool_t TGX11TTF::IsVisible ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). private . Test if there is really something to render. ; Definition at line 430 of file TGX11TTF.cxx. ◆ RenderString(). void TGX11TTF::RenderString ; (; Int_t ; x, . Int",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:54073,Availability,failure,failure,54073,", . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const char * ; text, . ETextMode ; mode . ). overridevirtual . Draw text using TrueType fonts. ; If TrueType fonts are not available the text is drawn with TGX11::DrawText. ; Reimplemented from TGX11.; Definition at line 367 of file TGX11TTF.cxx. ◆ DrawText() [2/2]. void TGX11TTF::DrawText ; (; Int_t ; x, . Int_t ; y, . Float_t ; angle, . Float_t ; mgn, . const wchar_t * ; text, . ETextMode ; mode . ). overridevirtual . Draw text using TrueType fonts. ; If TrueType fonts are not available the text is drawn with TGX11::DrawText. ; Reimplemented from TGX11.; Definition at line 386 of file TGX11TTF.cxx. ◆ GetBackground(). RXImage * TGX11TTF::GetBackground ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). private . Get the background of the current window in an XImage. ; Definition at line 404 of file TGX11TTF.cxx. ◆ Init(). Bool_t TGX11TTF::Init ; (; void * ; display). overridevirtual . Initialize X11 system. Returns kFALSE in case of failure. ; Reimplemented from TGX11.; Definition at line 184 of file TGX11TTF.cxx. ◆ IsA(). TClass * TGX11TTF::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGX11.; Definition at line 74 of file TGX11TTF.h. ◆ IsVisible(). Bool_t TGX11TTF::IsVisible ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). private . Test if there is really something to render. ; Definition at line 430 of file TGX11TTF.cxx. ◆ RenderString(). void TGX11TTF::RenderString ; (; Int_t ; x, . Int_t ; y, . ETextMode ; mode . ). private . Perform the string rendering in the pad. ; LayoutGlyphs should have been called before. ; Definition at line 458 of file TGX11TTF.cxx. ◆ SetTextFont() [1/2]. Int_t TGX11TTF::SetTextFont ; (; char * ; fontname, . ETextSetMode ; mode . ). overridevirtual . Set text font to specified name. ; mode : loading flag mode=0 : search if the font exist (kCheck) mode=1 : search the font and load it if it exists (kLoad) f",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:28783,Deployability,update,updated,28783,"ar *mess) const;  Default version is noop, but in principle what ROOT understands as ascent is text related. ;  ; virtual Int_t GetFontDescent () const;  Returns the descent of the current font (in pixels. ;  ; virtual Int_t GetFontDescent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as descent requires a certain text. ;  ; virtual FontStruct_t GetGCFont (GContext_t gc);  Return the font associated with the graphics context gc. ;  ; virtual Double_t GetOpenGLScalingFactor ();  On a HiDPI resolution it can be > 1., this means glViewport should use scaled width and height. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsCmdThread () const;  ; virtual Bool_t MakeOpenGLContextCurrent (Handle_t ctx, Window_t windowID);  Makes context ctx current OpenGL context. ;  ; virtual void MapGCFont (GContext_t, FontStruct_t);  Map the XftFont with the Graphics Context using it. ;  ; virtual Bool_t NeedRedraw (ULongptr_t tgwindow, Bool_t force);  Notify the low level GUI layer ROOT requires ""tgwindow"" to be updated. ;  ; virtual void SelectPixmap (Int_t qpixid);  Selects the pixmap ""qpixid"". ;  ; void SetFillColor (Color_t cindex) override;  Sets color index ""cindex"" for fill areas. ;  ; void SetFillStyle (Style_t style) override;  Sets fill area style. ;  ; void SetLineColor (Color_t cindex) override;  Sets color index ""cindex"" for drawing lines. ;  ; void SetLineStyle (Style_t linestyle) override;  Sets the line style. ;  ; void SetLineWidth (Width_t width) override;  Sets the line width. ;  ; void SetMarkerColor (Color_t cindex) override;  Sets color index ""cindex"" for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Sets marker size index. ;  ; void SetMarkerStyle (Style_t markerstyle) override;  Sets marker style. ;  ; void SetTextAlign (Short_t talign=11) override;  Sets the text alignment. ;  ; void SetTextColor (Color_t cindex) override;  Sets the color index ""cindex"" for text. ;  ; void SetTextFont (Fon",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:2266,Energy Efficiency,allocate,allocate,2266,"e;  ; Int_t SetTextFont (char *fontname, ETextSetMode mode) override;  Set text font to specified name. ;  ; void SetTextFont (Font_t fontnumber) override;  Set specified font. ;  ; void SetTextSize (Float_t textsize) override;  Set current text size. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGX11;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Register pixmap created by gVirtualGL. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sound bell. Percent is loudness from -100% .. 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) override;  Change entries in an existing graphics context, gc, by values from gval. ;  ; void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len) override;  This function alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; void ChangeWindowAt",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:17042,Energy Efficiency,green,green,17042,"Map window on screen and put on top of all windows. ;  ; void MapSubwindows (Window_t id) override;  Map sub windows. ;  ; void MapWindow (Window_t id) override;  Map window on screen. ;  ; void MoveResizeWindow (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Move and resize a window. ;  ; void MoveWindow (Int_t wid, Int_t x, Int_t y) override;  Move the window wid. ;  ; void MoveWindow (Window_t id, Int_t x, Int_t y) override;  Move a window. ;  ; void NextEvent (Event_t &event) override;  Copies first pending event from event queue to Event_t structure and removes event from queue. ;  ; Int_t OpenDisplay (const char *dpyName) override;  Open connection to display server (if such a thing exist on the current platform). ;  ; Int_t OpenDisplay (void *display);  Open the display. Return -1 if the opening fails, 0 when ok. ;  ; Int_t OpenPixmap (UInt_t w, UInt_t h) override;  Open a new pixmap. ;  ; Bool_t ParseColor (Colormap_t cmap, const char *cname, ColorStruct_t &color) override;  Parse string cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Put (x,y,w,h) part of image img in window win at position dx,dy. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Set pixel at specified location in XImage img. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Fill in the primary color components for a specific pixel value. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Query pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:49322,Energy Efficiency,green,green,49322,"color index cid. ;  ; void * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (Colormap cmap, RXColor *colors, Int_t ncolors);  Returns the current RGB value for the pixel in the XColor structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGX11; ULong_t fBlackPixel;  Value of black pixel in colormap. ;  ; Int_t fBlueDiv;  Blue value divider. ;  ; Int_t fBlueShift;  Bits to left shift blue. ;  ; Float_t fCharacterUpX;  Character Up vector along X. ;  ; Float_t fCharacterUpY;  Character Up vector along Y. ;  ; Colormap fColormap;  Default colormap, 0 if b/w. ;  ; Int_t fDepth;  Number of color planes. ;  ; void * fDisplay;  Pointer to display. ;  ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fHasXft;  True when XftFonts are used. ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; Drawable fRootWin;  Root window used as parent of all windows. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Drawable fVisRootWin;  Root window with fVisual to be used to create GC's and XImages. ;  ; RVisual * fVisual;  Pointer to visual used by all windows. ;  ; ULong_t fWhitePixel;  Value of white pixel in colormap. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inhe",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:24995,Integrability,depend,depends,24995,"ide;  Set the initial state of the window. Either kNormalState or kIconicState. ;  ; void SetWMTransientHint (Window_t id, Window_t main_id) override;  Tell window manager that window is a transient window of main. ;  ; void ShapeCombineMask (Window_t id, Int_t x, Int_t y, Pixmap_t mask) override;  The Nonrectangular Window Shape Extension adds nonrectangular windows to the System. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SubtractRegion (Region_t rega, Region_t regb, Region_t result) override;  Subtract rega from regb. ;  ; Int_t SupportsExtension (const char *ext) const override;  Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ; void Sync (Int_t mode) override;  Set synchronisation on or off. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of reference of one window to another. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Union of rectangle with a region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override; ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:25666,Integrability,synchroniz,synchronize,25666," server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ;  ; void Sync (Int_t mode) override;  Set synchronisation on or off. ;  ; Int_t TextWidth (FontStruct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of reference of one window to another. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Union of rectangle with a region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Write the pixmap wid in the bitmap file pxname. ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculate the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creat",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:25919,Integrability,message,message,25919,"truct_t font, const char *s, Int_t len) override;  Return length of string in pixels. Size depends on font. ;  ; void TranslateCoordinates (Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t &dest_x, Int_t &dest_y, Window_t &child) override;  TranslateCoordinates translates coordinates from the frame of reference of one window to another. ;  ; void UnionRectWithRegion (Rectangle_t *rect, Region_t src, Region_t dest) override;  Union of rectangle with a region. ;  ; void UnionRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Write the pixmap wid in the bitmap file pxname. ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculate the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext);  Creates OpenGL context for window ""windowID"". ;  ; virtual Window_t CreateOpenGLWindow (Window_t parentID, UInt_t width, UInt_t hei",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:27182,Integrability,message,messageID,27182,"Region_t rega, Region_t regb, Region_t result) override;  Calculate the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext);  Creates OpenGL context for window ""windowID"". ;  ; virtual Window_t CreateOpenGLWindow (Window_t parentID, UInt_t width, UInt_t height, const std::vector< std::pair< UInt_t, Int_t > > &format);  Create window with special pixel format. Noop everywhere except Cocoa. ;  ; virtual void DeleteOpenGLContext (Int_t wid=0);  Deletes OpenGL context for window ""wid"". ;  ; virtual void DispatchClientMessage (UInt_t messageID);  Force processing of event, sent by SendEvent before. ;  ; virtual UInt_t ExecCommand (TGWin32Command *code);  Executes the command ""code"" coming from the other threads (Win32) ;  ; virtual void FlushOpenGLBuffer (Handle_t ctx);  Flushes OpenGL buffer. ;  ; virtual Handle_t GetCurrentOpenGLContext ();  Asks OpenGL subsystem about the current OpenGL context. ;  ; EDrawMode GetDrawMode ();  ; virtual Int_t GetFontAscent () const;  Returns the ascent of the current font (in pixels). ;  ; virtual Int_t GetFontAscent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as ascent is text related. ;  ; virtual Int_t GetFontDescent () const;  Returns the descent of the current font (in pixels. ;  ; virtual Int_t GetFontDescent (const char *mess) const;  Default version is noop, but in principle what ROOT understands as descent requires a certain text. ;  ; virtual FontStruct_t GetGCFont (GContext_t gc);  Return the font associated with the graphics con",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:33140,Integrability,message,message,33140,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:33681,Integrability,message,message,33681,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:34671,Integrability,message,message,34671,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:37765,Integrability,message,message,37765,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:38138,Integrability,message,message,38138," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:1689,Modifiability,inherit,inherited,1689,"finition at line 27 of file TGX11TTF.h. Public Member Functions;  TGX11TTF (const TGX11 &org);  Create copy of TGX11 but now use TrueType fonts. ;  ;  ~TGX11TTF () override;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const char *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const wchar_t *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; Bool_t Init (void *display) override;  Initialize X11 system. Returns kFALSE in case of failure. ;  ; TClass * IsA () const override;  ; Int_t SetTextFont (char *fontname, ETextSetMode mode) override;  Set text font to specified name. ;  ; void SetTextFont (Font_t fontnumber) override;  Set specified font. ;  ; void SetTextSize (Float_t textsize) override;  Set current text size. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGX11;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) override;  Register pixmap created by gVirtualGL. ;  ; Int_t AddWindow (ULong_t qwid, UInt_t w, UInt_t h) override;  Register a window created by Qt as a ROOT window (like InitWindow()). ;  ; Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color) override;  Find and allocate a color cell according to the color values specified in the ColorStruct_t. ;  ; void Bell (Int_t percent) override;  Sound bell. Percent is loudness from -100% .. 100%. ;  ; void ChangeActivePointerGrab (Window_t, UInt_t, Cursor_t) override;  Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ;  ; void ChangeGC (GContext_t gc, GCValues_t *gval) overri",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:26354,Modifiability,inherit,inherited,26354,"onRegion (Region_t rega, Region_t regb, Region_t result) override;  Compute the union of rega and regb and return result region. ;  ; void UnmapWindow (Window_t id) override;  Unmap window from screen. ;  ; void Update (Int_t mode=0) override;  Flush (mode = 0, default) or synchronize (mode = 1) X output buffer. ;  ; void UpdateWindow (Int_t mode) override;  Update display. ;  ; void Warp (Int_t ix, Int_t iy, Window_t id=0) override;  Set pointer position. ;  ; void WMDeleteNotify (Window_t id) override;  Tell WM to send message when window is closed via WM. ;  ; Int_t WriteGIF (char *name) override;  Writes the current window into GIF file. ;  ; void WritePixmap (Int_t wid, UInt_t w, UInt_t h, char *pxname) override;  Write the pixmap wid in the bitmap file pxname. ;  ; void XorRegion (Region_t rega, Region_t regb, Region_t result) override;  Calculate the difference between the union and intersection of two regions. ;  ;  Public Member Functions inherited from TVirtualX;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual void BeginModalSessionFor (Window_t window);  Start a modal session for a dialog window. ;  ; virtual void CreateOpenGLContext (Int_t wid=0);  Creates OpenGL context for window ""wid"". ;  ; virtual Handle_t CreateOpenGLContext (Window_t windowID, Handle_t sharedContext);  Creates OpenGL context for window ""windowID"". ;  ; virtual Window_t CreateOpenGLWindow (Window_t parentID, UInt_t width, UInt_t height, const std::vector< std::pair< UInt_t, Int_t > > &format);  Create window with special pixel format. Noop everywhere except Cocoa. ;  ; virtual void DeleteOpenGLContext (Int_t wid=0);  Deletes OpenGL context for window ""wid"". ;  ; virtual void DispatchClientMessage (UInt_t messageID);  Force processing of event, sent by SendEvent before. ;  ; virtual UInt_t ExecCommand (TGWin32Command *code);  Executes the command ""code"" coming from the other threads (Win32) ;  ; virtual void Flu",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:30049,Modifiability,inherit,inherited,30049,"dex) override;  Sets color index ""cindex"" for drawing lines. ;  ; void SetLineStyle (Style_t linestyle) override;  Sets the line style. ;  ; void SetLineWidth (Width_t width) override;  Sets the line width. ;  ; void SetMarkerColor (Color_t cindex) override;  Sets color index ""cindex"" for markers. ;  ; void SetMarkerSize (Float_t markersize) override;  Sets marker size index. ;  ; void SetMarkerStyle (Style_t markerstyle) override;  Sets marker style. ;  ; void SetTextAlign (Short_t talign=11) override;  Sets the text alignment. ;  ; void SetTextColor (Color_t cindex) override;  Sets the color index ""cindex"" for text. ;  ; void SetTextFont (Font_t fontnumber) override;  Sets the current text font number. ;  ; void SetTextSize (Float_t textsize) override;  Sets the current text size to ""textsize"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:31677,Modifiability,inherit,inherited,31677,"ual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:32770,Modifiability,inherit,inheritance,32770,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:34769,Modifiability,inherit,inherits,34769,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:34886,Modifiability,inherit,inherits,34886,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:38445,Modifiability,inherit,inherited,38445,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:39740,Modifiability,inherit,inherited,39740,"o a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:40845,Modifiability,inherit,inherited,40845,"t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a new TAttText. ;  ; virtual Short_t GetTextAlign () const;  Return the text alignment. ;  ; virtual Float_t GetTextAngle () const;  Return the text angle. ;  ; virtual Color_t GetTextColor () const;  Return the text color. ;  ; virtual Font_t GetTextFont () const;  Return the text font. ;  ; virtual Float_t GetTextSize () const;  Return the text size. ;  ; virtual Float_t GetTextSizePercent (Float_t size);  Return the text in percent of the pad size. ;  ; virtual void Modify ();  Change current text attributes if necessary. ;  ; virtual void ResetAttText (Option_t *toption="""");  Reset this text attributes to default values. ;  ; virtual void SaveTextAttributes (std::ost",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:42443,Modifiability,inherit,inherited,42443,"xt font. ;  ; virtual Float_t GetTextSize () const;  Return the text size. ;  ; virtual Float_t GetTextSizePercent (Float_t size);  Return the text in percent of the pad size. ;  ; virtual void Modify ();  Change current text attributes if necessary. ;  ; virtual void ResetAttText (Option_t *toption="""");  Reset this text attributes to default values. ;  ; virtual void SaveTextAttributes (std::ostream &out, const char *name, Int_t alidef=12, Float_t angdef=0, Int_t coldef=1, Int_t fondef=61, Float_t sizdef=1);  Save text attributes as C++ statement(s) on output stream out. ;  ; virtual void SetTextAngle (Float_t tangle=0);  Set the text angle. ;  ; virtual void SetTextAttributes ();  Invoke the DialogCanvas Text attributes. ;  ; virtual void SetTextColorAlpha (Color_t tcolor, Float_t talpha);  Set a transparent text color. ;  ; virtual void SetTextSizePixels (Int_t npixels);  Set the text size in pixel. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:43920,Modifiability,inherit,inherited,43920,"ary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void Activate ();  Static method setting TGX11TTF as the acting gVirtualX. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGX11; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualX; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualX *& Instance ();  Returns gVirtualX global. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Tur",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:44129,Modifiability,inherit,inherited,44129,"ary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void Activate ();  Static method setting TGX11TTF as the acting gVirtualX. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGX11; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualX; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualX *& Instance ();  Returns gVirtualX global. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Tur",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:44407,Modifiability,inherit,inherited,44407, Static Public Member Functions; static void Activate ();  Static method setting TGX11TTF as the acting gVirtualX. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGX11; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualX; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualX *& Instance ();  Returns gVirtualX global. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; s,MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:44617,Modifiability,inherit,inherited,44617, Static Public Member Functions; static void Activate ();  Static method setting TGX11TTF as the acting gVirtualX. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGX11; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualX; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualX *& Instance ();  Returns gVirtualX global. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; s,MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:45135,Modifiability,inherit,inherited,45135," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Private Types; enum  EAlign { ;   kNone; , kTLeft; , kTCenter; , kTRight; , ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void DrawImage (FT_Bitmap *source, ULong_t fore, ULong_t back, RXImage *xim, Int_t bx, Int_t by);  Draw FT_Bitmap bitmap to xim image at position bx,by using specified foregro",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:45347,Modifiability,inherit,inherited,45347," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Private Types; enum  EAlign { ;   kNone; , kTLeft; , kTCenter; , kTRight; , ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void DrawImage (FT_Bitmap *source, ULong_t fore, ULong_t back, RXImage *xim, Int_t bx, Int_t by);  Draw FT_Bitmap bitmap to xim image at position bx,by using specified foregro",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:45559,Modifiability,inherit,inherited,45559," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Private Types; enum  EAlign { ;   kNone; , kTLeft; , kTCenter; , kTRight; , ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void DrawImage (FT_Bitmap *source, ULong_t fore, ULong_t back, RXImage *xim, Int_t bx, Int_t by);  Draw FT_Bitmap bitmap to xim image at position bx,by using specified foregro",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:45771,Modifiability,inherit,inherited,45771," char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Private Types; enum  EAlign { ;   kNone; , kTLeft; , kTCenter; , kTRight; , ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void DrawImage (FT_Bitmap *source, ULong_t fore, ULong_t back, RXImage *xim, Int_t bx, Int_t by);  Draw FT_Bitmap bitmap to xim image at position bx,by using specified foregro",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:46492,Modifiability,variab,variables,46492,"t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttText; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Private Types; enum  EAlign { ;   kNone; , kTLeft; , kTCenter; , kTRight; , ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void DrawImage (FT_Bitmap *source, ULong_t fore, ULong_t back, RXImage *xim, Int_t bx, Int_t by);  Draw FT_Bitmap bitmap to xim image at position bx,by using specified foreground color. ;  ; RXImage * GetBackground (Int_t x, Int_t y, UInt_t w, UInt_t h);  Get the background of the current window in an XImage. ;  ; Bool_t IsVisible (Int_t x, Int_t y, UInt_t w, UInt_t h);  Test if there is really something to render. ;  ; void RenderString (Int_t x, Int_t y, ETextMode mode);  Perform the string rendering in the pad. ;  . Private Attributes; FT_Vector fAlign;  alignment vector ;  . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x0",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:47138,Modifiability,inherit,inherited,47138,"e; , kTLeft; , kTCenter; , kTRight; , ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void DrawImage (FT_Bitmap *source, ULong_t fore, ULong_t back, RXImage *xim, Int_t bx, Int_t by);  Draw FT_Bitmap bitmap to xim image at position bx,by using specified foreground color. ;  ; RXImage * GetBackground (Int_t x, Int_t y, UInt_t w, UInt_t h);  Get the background of the current window in an XImage. ;  ; Bool_t IsVisible (Int_t x, Int_t y, UInt_t w, UInt_t h);  Test if there is really something to render. ;  ; void RenderString (Int_t x, Int_t y, ETextMode mode);  Perform the string rendering in the pad. ;  . Private Attributes; FT_Vector fAlign;  alignment vector ;  . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGX11; Bool_t AllocColor (Colormap cmap, RXColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:47362,Modifiability,inherit,inherited,47362,"e; , kTLeft; , kTCenter; , kTRight; , ;   kMLeft; , kMCenter; , kMRight; , kBLeft; , ;   kBCenter; , kBRight. };  . Private Member Functions; void Align (void);  Compute alignment variables. ;  ; void DrawImage (FT_Bitmap *source, ULong_t fore, ULong_t back, RXImage *xim, Int_t bx, Int_t by);  Draw FT_Bitmap bitmap to xim image at position bx,by using specified foreground color. ;  ; RXImage * GetBackground (Int_t x, Int_t y, UInt_t w, UInt_t h);  Get the background of the current window in an XImage. ;  ; Bool_t IsVisible (Int_t x, Int_t y, UInt_t w, UInt_t h);  Test if there is really something to render. ;  ; void RenderString (Int_t x, Int_t y, ETextMode mode);  Perform the string rendering in the pad. ;  . Private Attributes; FT_Vector fAlign;  alignment vector ;  . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGX11; Bool_t AllocColor (Colormap cmap, RXColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:48003,Modifiability,inherit,inherited,48003," . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGX11; Bool_t AllocColor (Colormap cmap, RXColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index cid. ;  ; void * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (Colormap cmap, RXColor *colors, Int_t ncolors);  Returns the current RGB value for the pixel in the XColor structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGX11; ULong_t fBlackPixel;  Value of black pixel in colormap. ;  ; Int_t fBlueDiv;  Blue value divider. ;  ; Int_t fBlueShift;  Bits to left shift blue. ;  ; Float_t fCharacterUpX;  Character Up vector along X. ;  ; Float_t fCharacterUpY;  Character Up vector along Y",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:48102,Modifiability,inherit,inherited,48102," . Additional Inherited Members;  Public Types inherited from TVirtualX; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGX11; Bool_t AllocColor (Colormap cmap, RXColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index cid. ;  ; void * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (Colormap cmap, RXColor *colors, Int_t ncolors);  Returns the current RGB value for the pixel in the XColor structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGX11; ULong_t fBlackPixel;  Value of black pixel in colormap. ;  ; Int_t fBlueDiv;  Blue value divider. ;  ; Int_t fBlueShift;  Bits to left shift blue. ;  ; Float_t fCharacterUpX;  Character Up vector along X. ;  ; Float_t fCharacterUpY;  Character Up vector along Y",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:48603,Modifiability,inherit,inherited,48603,"tedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGX11; Bool_t AllocColor (Colormap cmap, RXColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index cid. ;  ; void * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (Colormap cmap, RXColor *colors, Int_t ncolors);  Returns the current RGB value for the pixel in the XColor structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGX11; ULong_t fBlackPixel;  Value of black pixel in colormap. ;  ; Int_t fBlueDiv;  Blue value divider. ;  ; Int_t fBlueShift;  Bits to left shift blue. ;  ; Float_t fCharacterUpX;  Character Up vector along X. ;  ; Float_t fCharacterUpY;  Character Up vector along Y. ;  ; Colormap fColormap;  Default colormap, 0 if b/w. ;  ; Int_t fDepth;  Number of color planes. ;  ; void * fDisplay;  Pointer to display. ;  ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fHasXft;  True when XftFonts are used. ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; Drawable fRootWin;  Root window used as parent of all windows. ;  ; Int_t fS",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:48808,Modifiability,inherit,inherited,48808,"= (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGX11; Bool_t AllocColor (Colormap cmap, RXColor *color);  Allocate color in colormap. ;  ; XColor_t & GetColor (Int_t cid);  Return reference to internal color structure associated to color index cid. ;  ; void * GetGC (Int_t which) const;  Return desired Graphics Context (""which"" maps directly on gGCList[]). ;  ; void QueryColors (Colormap cmap, RXColor *colors, Int_t ncolors);  Returns the current RGB value for the pixel in the XColor structure. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGX11; ULong_t fBlackPixel;  Value of black pixel in colormap. ;  ; Int_t fBlueDiv;  Blue value divider. ;  ; Int_t fBlueShift;  Bits to left shift blue. ;  ; Float_t fCharacterUpX;  Character Up vector along X. ;  ; Float_t fCharacterUpY;  Character Up vector along Y. ;  ; Colormap fColormap;  Default colormap, 0 if b/w. ;  ; Int_t fDepth;  Number of color planes. ;  ; void * fDisplay;  Pointer to display. ;  ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fHasXft;  True when XftFonts are used. ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; Drawable fRootWin;  Root window used as parent of all windows. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fText",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:50145,Modifiability,inherit,inherited,50145," ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fHasXft;  True when XftFonts are used. ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; Drawable fRootWin;  Root window used as parent of all windows. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Drawable fVisRootWin;  Root window with fVisual to be used to create GC's and XImages. ;  ; RVisual * fVisual;  Pointer to visual used by all windows. ;  ; ULong_t fWhitePixel;  Value of white pixel in colormap. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . #include <TGX11TTF.h>. Inheritance diagram for TGX11TTF:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAlign. enum TGX11TTF::EAlign. private . EnumeratorkNone ; kTLeft ; ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:50217,Modifiability,inherit,inherited,50217," ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fHasXft;  True when XftFonts are used. ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; Drawable fRootWin;  Root window used as parent of all windows. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Drawable fVisRootWin;  Root window with fVisual to be used to create GC's and XImages. ;  ; RVisual * fVisual;  Pointer to visual used by all windows. ;  ; ULong_t fWhitePixel;  Value of white pixel in colormap. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . #include <TGX11TTF.h>. Inheritance diagram for TGX11TTF:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAlign. enum TGX11TTF::EAlign. private . EnumeratorkNone ; kTLeft ; ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:50299,Modifiability,inherit,inherited,50299," ; Int_t fGreenDiv;  Green value divider. ;  ; Int_t fGreenShift;  Bits to left shift green. ;  ; Bool_t fHasTTFonts;  True when TrueType fonts are used. ;  ; Bool_t fHasXft;  True when XftFonts are used. ;  ; Int_t fRedDiv;  Red value divider, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; Drawable fRootWin;  Root window used as parent of all windows. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Drawable fVisRootWin;  Root window with fVisual to be used to create GC's and XImages. ;  ; RVisual * fVisual;  Pointer to visual used by all windows. ;  ; ULong_t fWhitePixel;  Value of white pixel in colormap. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . #include <TGX11TTF.h>. Inheritance diagram for TGX11TTF:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAlign. enum TGX11TTF::EAlign. private . EnumeratorkNone ; kTLeft ; ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:50460,Modifiability,inherit,inherited,50460,"er, -1 if no TrueColor visual. ;  ; Int_t fRedShift;  Bits to left shift red, -1 if no TrueColor visual. ;  ; Drawable fRootWin;  Root window used as parent of all windows. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Drawable fVisRootWin;  Root window with fVisual to be used to create GC's and XImages. ;  ; RVisual * fVisual;  Pointer to visual used by all windows. ;  ; ULong_t fWhitePixel;  Value of white pixel in colormap. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . #include <TGX11TTF.h>. Inheritance diagram for TGX11TTF:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAlign. enum TGX11TTF::EAlign. private . EnumeratorkNone ; kTLeft ; kTCenter ; kTRight ; kMLeft ; kMCenter ; kMRight ; kBLeft ; kBCenter ; kBRight . Definition at line 30 of file TGX11TTF.h. Constructor & Destructor Documentation. ◆ TGX11TTF(). TGX11TTF::TGX11TTF ; (; const TGX11 & ; org). Create copy of TG",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:50593,Modifiability,inherit,inherited,50593,"ot window used as parent of all windows. ;  ; Int_t fScreenNumber;  Screen number. ;  ; Int_t fTextAlign;  Text alignment (set in SetTextAlign) ;  ; Int_t fTextAlignH;  Text Alignment Horizontal. ;  ; Int_t fTextAlignV;  Text Alignment Vertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Drawable fVisRootWin;  Root window with fVisual to be used to create GC's and XImages. ;  ; RVisual * fVisual;  Pointer to visual used by all windows. ;  ; ULong_t fWhitePixel;  Value of white pixel in colormap. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . #include <TGX11TTF.h>. Inheritance diagram for TGX11TTF:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAlign. enum TGX11TTF::EAlign. private . EnumeratorkNone ; kTLeft ; kTCenter ; kTRight ; kMLeft ; kMCenter ; kMRight ; kBLeft ; kBCenter ; kBRight . Definition at line 30 of file TGX11TTF.h. Constructor & Destructor Documentation. ◆ TGX11TTF(). TGX11TTF::TGX11TTF ; (; const TGX11 & ; org). Create copy of TGX11 but now use TrueType fonts. ; Definition at line 152 of file TGX11TTF.cxx. ◆ ~TGX11TTF(). TGX11TTF::~TGX11TTF ; (; ). inlineoverr",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:50829,Modifiability,inherit,inherited,50829,"ertical. ;  ; Float_t fTextMagnitude;  Text Magnitude. ;  ; Drawable fVisRootWin;  Root window with fVisual to be used to create GC's and XImages. ;  ; RVisual * fVisual;  Pointer to visual used by all windows. ;  ; ULong_t fWhitePixel;  Value of white pixel in colormap. ;  ;  Protected Attributes inherited from TVirtualX; EDrawMode fDrawMode;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttText; Short_t fTextAlign;  Text alignment. ;  ; Float_t fTextAngle;  Text angle. ;  ; Color_t fTextColor;  Text color. ;  ; Font_t fTextFont;  Text font. ;  ; Float_t fTextSize;  Text size. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . #include <TGX11TTF.h>. Inheritance diagram for TGX11TTF:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAlign. enum TGX11TTF::EAlign. private . EnumeratorkNone ; kTLeft ; kTCenter ; kTRight ; kMLeft ; kMCenter ; kMRight ; kBLeft ; kBCenter ; kBRight . Definition at line 30 of file TGX11TTF.h. Constructor & Destructor Documentation. ◆ TGX11TTF(). TGX11TTF::TGX11TTF ; (; const TGX11 & ; org). Create copy of TGX11 but now use TrueType fonts. ; Definition at line 152 of file TGX11TTF.cxx. ◆ ~TGX11TTF(). TGX11TTF::~TGX11TTF ; (; ). inlineoverride . Definition at line 47 of file TGX11TTF.h. Member Function Documentation. ◆ Activate(). void TGX11TTF::Activate ; (; ). static . Static method setting TGX11TTF as the acting gVirtualX. ; Definition at line 172 of file TGX11TTF.cxx. ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:51922,Modifiability,variab,variables,51922,"  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . #include <TGX11TTF.h>. Inheritance diagram for TGX11TTF:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAlign. enum TGX11TTF::EAlign. private . EnumeratorkNone ; kTLeft ; kTCenter ; kTRight ; kMLeft ; kMCenter ; kMRight ; kBLeft ; kBCenter ; kBRight . Definition at line 30 of file TGX11TTF.h. Constructor & Destructor Documentation. ◆ TGX11TTF(). TGX11TTF::TGX11TTF ; (; const TGX11 & ; org). Create copy of TGX11 but now use TrueType fonts. ; Definition at line 152 of file TGX11TTF.cxx. ◆ ~TGX11TTF(). TGX11TTF::~TGX11TTF ; (; ). inlineoverride . Definition at line 47 of file TGX11TTF.h. Member Function Documentation. ◆ Activate(). void TGX11TTF::Activate ; (; ). static . Static method setting TGX11TTF as the acting gVirtualX. ; Definition at line 172 of file TGX11TTF.cxx. ◆ Align(). void TGX11TTF::Align ; (; void ; ). private . Compute alignment variables. ; The alignment is done on the horizontal string then the rotation is applied on the alignment variables. SetRotation and LayoutGlyphs should have been called before. ; Definition at line 213 of file TGX11TTF.cxx. ◆ Class(). static TClass * TGX11TTF::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGX11TTF::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGX11TTF::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 74 of file TGX11TTF.h. ◆ DeclFileName(). static const char * TGX11TTF::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 74 of file TGX11TTF.h. ◆ DrawImage(). void TGX11TTF::DrawImage ; (; FT_Bitmap * ; source, . ULong_t ; fore, . ULong_t ; back, . RXImage * ; xim, . Int_t ; bx, . Int_t ; by . ). private . Draw FT_Bitmap bitmap to xim image at position ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:52028,Modifiability,variab,variables,52028,"de <TGX11TTF.h>. Inheritance diagram for TGX11TTF:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAlign. enum TGX11TTF::EAlign. private . EnumeratorkNone ; kTLeft ; kTCenter ; kTRight ; kMLeft ; kMCenter ; kMRight ; kBLeft ; kBCenter ; kBRight . Definition at line 30 of file TGX11TTF.h. Constructor & Destructor Documentation. ◆ TGX11TTF(). TGX11TTF::TGX11TTF ; (; const TGX11 & ; org). Create copy of TGX11 but now use TrueType fonts. ; Definition at line 152 of file TGX11TTF.cxx. ◆ ~TGX11TTF(). TGX11TTF::~TGX11TTF ; (; ). inlineoverride . Definition at line 47 of file TGX11TTF.h. Member Function Documentation. ◆ Activate(). void TGX11TTF::Activate ; (; ). static . Static method setting TGX11TTF as the acting gVirtualX. ; Definition at line 172 of file TGX11TTF.cxx. ◆ Align(). void TGX11TTF::Align ; (; void ; ). private . Compute alignment variables. ; The alignment is done on the horizontal string then the rotation is applied on the alignment variables. SetRotation and LayoutGlyphs should have been called before. ; Definition at line 213 of file TGX11TTF.cxx. ◆ Class(). static TClass * TGX11TTF::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGX11TTF::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGX11TTF::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 74 of file TGX11TTF.h. ◆ DeclFileName(). static const char * TGX11TTF::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 74 of file TGX11TTF.h. ◆ DrawImage(). void TGX11TTF::DrawImage ; (; FT_Bitmap * ; source, . ULong_t ; fore, . ULong_t ; back, . RXImage * ; xim, . Int_t ; bx, . Int_t ; by . ). private . Draw FT_Bitmap bitmap to xim image at position bx,by using specified foreground color. ; Definition at line 244 of",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:598,Performance,load,loaded,598,". ROOT: TGX11TTF Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGX11TTF Class ReferenceGraphics » Graphics' Backends » X11 backend. ; Interface to low level X11 (Xlib). ; This class gives access to basic X11 graphics via the parent class TGX11. However, all text and font handling is done via the Freetype TrueType library. When the shared library containing this class is loaded the global gVirtualX is redirected to point to this class. ; Definition at line 27 of file TGX11TTF.h. Public Member Functions;  TGX11TTF (const TGX11 &org);  Create copy of TGX11 but now use TrueType fonts. ;  ;  ~TGX11TTF () override;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const char *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const wchar_t *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; Bool_t Init (void *display) override;  Initialize X11 system. Returns kFALSE in case of failure. ;  ; TClass * IsA () const override;  ; Int_t SetTextFont (char *fontname, ETextSetMode mode) override;  Set text font to specified name. ;  ; void SetTextFont (Font_t fontnumber) override;  Set specified font. ;  ; void SetTextSize (Float_t textsize) override;  Set current text size. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGX11;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) overr",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:16530,Performance,queue,queue,16530,"_t LoadQueryFont (const char *font_name) override;  Load font and query font. ;  ; void LookupString (Event_t *event, char *buf, Int_t buflen, UInt_t &keysym) override;  Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ;  ; void LowerWindow (Window_t id) override;  Lower window so it lays below all its siblings. ;  ; void MapRaised (Window_t id) override;  Map window on screen and put on top of all windows. ;  ; void MapSubwindows (Window_t id) override;  Map sub windows. ;  ; void MapWindow (Window_t id) override;  Map window on screen. ;  ; void MoveResizeWindow (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Move and resize a window. ;  ; void MoveWindow (Int_t wid, Int_t x, Int_t y) override;  Move the window wid. ;  ; void MoveWindow (Window_t id, Int_t x, Int_t y) override;  Move a window. ;  ; void NextEvent (Event_t &event) override;  Copies first pending event from event queue to Event_t structure and removes event from queue. ;  ; Int_t OpenDisplay (const char *dpyName) override;  Open connection to display server (if such a thing exist on the current platform). ;  ; Int_t OpenDisplay (void *display);  Open the display. Return -1 if the opening fails, 0 when ok. ;  ; Int_t OpenPixmap (UInt_t w, UInt_t h) override;  Open a new pixmap. ;  ; Bool_t ParseColor (Colormap_t cmap, const char *cname, ColorStruct_t &color) override;  Parse string cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Put (x,y,w,h) part of image img in window win at position",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:16580,Performance,queue,queue,16580,"_t LoadQueryFont (const char *font_name) override;  Load font and query font. ;  ; void LookupString (Event_t *event, char *buf, Int_t buflen, UInt_t &keysym) override;  Convert the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ;  ; void LowerWindow (Window_t id) override;  Lower window so it lays below all its siblings. ;  ; void MapRaised (Window_t id) override;  Map window on screen and put on top of all windows. ;  ; void MapSubwindows (Window_t id) override;  Map sub windows. ;  ; void MapWindow (Window_t id) override;  Map window on screen. ;  ; void MoveResizeWindow (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Move and resize a window. ;  ; void MoveWindow (Int_t wid, Int_t x, Int_t y) override;  Move the window wid. ;  ; void MoveWindow (Window_t id, Int_t x, Int_t y) override;  Move a window. ;  ; void NextEvent (Event_t &event) override;  Copies first pending event from event queue to Event_t structure and removes event from queue. ;  ; Int_t OpenDisplay (const char *dpyName) override;  Open connection to display server (if such a thing exist on the current platform). ;  ; Int_t OpenDisplay (void *display);  Open the display. Return -1 if the opening fails, 0 when ok. ;  ; Int_t OpenPixmap (UInt_t w, UInt_t h) override;  Open a new pixmap. ;  ; Bool_t ParseColor (Colormap_t cmap, const char *cname, ColorStruct_t &color) override;  Parse string cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Put (x,y,w,h) part of image img in window win at position",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:18325,Performance,load,loads,18325," points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Put (x,y,w,h) part of image img in window win at position dx,dy. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Set pixel at specified location in XImage img. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Fill in the primary color components for a specific pixel value. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Query pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Put window on top of window stack. ;  ; Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0) override;  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Read picture data from file and store in ret_data. ;  ; void RemoveWindow (ULong_t qwid) override;  Remove a window created by Qt (like CloseWindow1()). ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  Reparent window to new parent window at position (x,y). ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Request Locator position. ;  ; Int_t RequestString (Int_t x, Int_t y, char *text) override;  Request a string. ;  ; void RescaleWindow (Int_t wid, UInt_t w, UInt_t h) override;  Rescale the window wid. ;  ; Int_t ResizePixmap (Int_t wid, UInt_t w, UInt_t h) override;  Resize a pixmap. ;  ; void ResizeWindow (Int_t wid) override;  Resize the current window if necessary. ;  ; void ResizeWindow (Window_t id, UInt_t w, UInt_t h) override;  Resize the ",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:54949,Performance,load,loading,54949,"itialize X11 system. Returns kFALSE in case of failure. ; Reimplemented from TGX11.; Definition at line 184 of file TGX11TTF.cxx. ◆ IsA(). TClass * TGX11TTF::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGX11.; Definition at line 74 of file TGX11TTF.h. ◆ IsVisible(). Bool_t TGX11TTF::IsVisible ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). private . Test if there is really something to render. ; Definition at line 430 of file TGX11TTF.cxx. ◆ RenderString(). void TGX11TTF::RenderString ; (; Int_t ; x, . Int_t ; y, . ETextMode ; mode . ). private . Perform the string rendering in the pad. ; LayoutGlyphs should have been called before. ; Definition at line 458 of file TGX11TTF.cxx. ◆ SetTextFont() [1/2]. Int_t TGX11TTF::SetTextFont ; (; char * ; fontname, . ETextSetMode ; mode . ). overridevirtual . Set text font to specified name. ; mode : loading flag mode=0 : search if the font exist (kCheck) mode=1 : search the font and load it if it exists (kLoad) font : font name; Set text font to specified name. This function returns 0 if the specified font is found, 1 if not. ; Reimplemented from TGX11.; Definition at line 567 of file TGX11TTF.cxx. ◆ SetTextFont() [2/2]. void TGX11TTF::SetTextFont ; (; Font_t ; fontnumber). overridevirtual . Set specified font. ; Reimplemented from TGX11.; Definition at line 547 of file TGX11TTF.cxx. ◆ SetTextSize(). void TGX11TTF::SetTextSize ; (; Float_t ; textsize). overridevirtual . Set current text size. ; Reimplemented from TGX11.; Definition at line 579 of file TGX11TTF.cxx. ◆ Streamer(). void TGX11TTF::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGX11. ◆ StreamerNVirtual(). void TGX11TTF::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 74 of file TGX11TTF.h. Member Data Documentation. ◆ fAlign. FT_Vector TGX11TTF::fAlign. private . alignment vector ; Definitio",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:55034,Performance,load,load,55034,"itialize X11 system. Returns kFALSE in case of failure. ; Reimplemented from TGX11.; Definition at line 184 of file TGX11TTF.cxx. ◆ IsA(). TClass * TGX11TTF::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGX11.; Definition at line 74 of file TGX11TTF.h. ◆ IsVisible(). Bool_t TGX11TTF::IsVisible ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). private . Test if there is really something to render. ; Definition at line 430 of file TGX11TTF.cxx. ◆ RenderString(). void TGX11TTF::RenderString ; (; Int_t ; x, . Int_t ; y, . ETextMode ; mode . ). private . Perform the string rendering in the pad. ; LayoutGlyphs should have been called before. ; Definition at line 458 of file TGX11TTF.cxx. ◆ SetTextFont() [1/2]. Int_t TGX11TTF::SetTextFont ; (; char * ; fontname, . ETextSetMode ; mode . ). overridevirtual . Set text font to specified name. ; mode : loading flag mode=0 : search if the font exist (kCheck) mode=1 : search the font and load it if it exists (kLoad) font : font name; Set text font to specified name. This function returns 0 if the specified font is found, 1 if not. ; Reimplemented from TGX11.; Definition at line 567 of file TGX11TTF.cxx. ◆ SetTextFont() [2/2]. void TGX11TTF::SetTextFont ; (; Font_t ; fontnumber). overridevirtual . Set specified font. ; Reimplemented from TGX11.; Definition at line 547 of file TGX11TTF.cxx. ◆ SetTextSize(). void TGX11TTF::SetTextSize ; (; Float_t ; textsize). overridevirtual . Set current text size. ; Reimplemented from TGX11.; Definition at line 579 of file TGX11TTF.cxx. ◆ Streamer(). void TGX11TTF::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGX11. ◆ StreamerNVirtual(). void TGX11TTF::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 74 of file TGX11TTF.h. Member Data Documentation. ◆ fAlign. FT_Vector TGX11TTF::fAlign. private . alignment vector ; Definitio",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:413,Security,access,access,413,". ROOT: TGX11TTF Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TGX11TTF Class ReferenceGraphics » Graphics' Backends » X11 backend. ; Interface to low level X11 (Xlib). ; This class gives access to basic X11 graphics via the parent class TGX11. However, all text and font handling is done via the Freetype TrueType library. When the shared library containing this class is loaded the global gVirtualX is redirected to point to this class. ; Definition at line 27 of file TGX11TTF.h. Public Member Functions;  TGX11TTF (const TGX11 &org);  Create copy of TGX11 but now use TrueType fonts. ;  ;  ~TGX11TTF () override;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const char *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; void DrawText (Int_t x, Int_t y, Float_t angle, Float_t mgn, const wchar_t *text, ETextMode mode) override;  Draw text using TrueType fonts. ;  ; Bool_t Init (void *display) override;  Initialize X11 system. Returns kFALSE in case of failure. ;  ; TClass * IsA () const override;  ; Int_t SetTextFont (char *fontname, ETextSetMode mode) override;  Set text font to specified name. ;  ; void SetTextFont (Font_t fontnumber) override;  Set specified font. ;  ; void SetTextSize (Float_t textsize) override;  Set current text size. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGX11;  TGX11 ();  Default constructor. ;  ;  TGX11 (const char *name, const char *title);  Normal Constructor. ;  ;  TGX11 (const TGX11 &org);  Copy constructor. Currently only used by TGX11TTF. ;  ;  ~TGX11 () override;  Destructor. ;  ; Int_t AddPixmap (ULong_t pixid, UInt_t w, UInt_t h) overr",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:30917,Security,hash,hash,30917," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGX11TTF.html:18061,Testability,log,logically,18061,"ring cname containing color name, like ""green"" or ""#00FF00"". ;  ; Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg) override;  Returns true if the point x,y is in the region. ;  ; Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding) override;  Create region for the polygon defined by the points array. ;  ; void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Put (x,y,w,h) part of image img in window win at position dx,dy. ;  ; void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel) override;  Set pixel at specified location in XImage img. ;  ; void QueryColor (Colormap_t cmap, ColorStruct_t &color) override;  Fill in the primary color components for a specific pixel value. ;  ; void QueryPointer (Int_t &ix, Int_t &iy) override;  Query pointer position. ;  ; void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask) override;  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; void RaiseWindow (Window_t id) override;  Put window on top of window stack. ;  ; Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0) override;  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data) override;  Read picture data from file and store in ret_data. ;  ; void RemoveWindow (ULong_t qwid) override;  Remove a window created by Qt (like CloseWindow1()). ;  ; void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y) override;  Reparent window to new parent window at position (x,y). ;  ; Int_t RequestLocator (Int_t mode, Int_t ctyp, Int_t &x, Int_t &y) override;  Request Locator position. ;  ; Int_t RequestString (Int_t x, Int_t y, char *text) override;  Request a string. ;  ; void RescaleWindow (Int_t wid",MatchSource.WIKI,doc/master/classTGX11TTF.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGX11TTF.html
https://root.cern/doc/master/classTGXYLayout.html:4495,Availability,error,error,4495,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:4584,Availability,error,error,4584,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:4739,Availability,error,error,4739,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:5036,Availability,error,error,5036,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:9462,Availability,error,error,9462,"id Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLayoutManager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr ",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:4501,Integrability,message,message,4501,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:5042,Integrability,message,message,5042,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:6244,Integrability,message,message,6244,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:9468,Integrability,message,message,9468,"id Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLayoutManager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr ",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:9841,Integrability,message,message,9841,"move this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLayoutManager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectSt",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:2415,Modifiability,inherit,inherited,2415,"ever becomes smaller than defined by the TGXYLayoutHints and the X and Y coordinates becomes never smaller than defined by the layout hints. ; Definition at line 58 of file TGXYLayout.h. Public Member Functions;  TGXYLayout (TGCompositeFrame *main);  Constructor. The main is the frame for which this layout manager works. ;  ; TGDimension GetDefaultSize () const override;  Returns the original size of the frame. ;  ; TClass * IsA () const override;  ; void Layout () override;  Recalculates the postion and the size of all widgets. ;  ; void NewSize ();  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save XY layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutManager;  TGLayoutManager ();  ; virtual Bool_t IsModified () const;  ; virtual void SetDefaultHeight (UInt_t);  ; virtual void SetDefaultWidth (UInt_t);  ; virtual void SetModified (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; vi",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:2734,Modifiability,inherit,inherited,2734,"ever becomes smaller than defined by the TGXYLayoutHints and the X and Y coordinates becomes never smaller than defined by the layout hints. ; Definition at line 58 of file TGXYLayout.h. Public Member Functions;  TGXYLayout (TGCompositeFrame *main);  Constructor. The main is the frame for which this layout manager works. ;  ; TGDimension GetDefaultSize () const override;  Returns the original size of the frame. ;  ; TClass * IsA () const override;  ; void Layout () override;  Recalculates the postion and the size of all widgets. ;  ; void NewSize ();  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save XY layout manager as a C++ statement(s) on output stream. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutManager;  TGLayoutManager ();  ; virtual Bool_t IsModified () const;  ; virtual void SetDefaultHeight (UInt_t);  ; virtual void SetDefaultWidth (UInt_t);  ; virtual void SetModified (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; vi",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:4131,Modifiability,inherit,inheritance,4131,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:6342,Modifiability,inherit,inherits,6342,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:6459,Modifiability,inherit,inherits,6459,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:10342,Modifiability,inherit,inherited,10342,"error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLayoutManager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGXYLayout (const TGXYLayout &);  copy constructor ;  ; TGXYLayout & operator= (const TGXYLayout &);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fFirst;  flag to de",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:10561,Modifiability,inherit,inherited,10561,"error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLayoutManager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGXYLayout (const TGXYLayout &);  copy constructor ;  ; TGXYLayout & operator= (const TGXYLayout &);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fFirst;  flag to de",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:11231,Modifiability,inherit,inherited,11231,"();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLayoutManager; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGXYLayout (const TGXYLayout &);  copy constructor ;  ; TGXYLayout & operator= (const TGXYLayout &);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fFirst;  flag to determine the first call of Layout() ;  ; UInt_t fFirstHeight;  original height of the frame fMain ;  ; UInt_t fFirstWidth;  original width of the frame fMain ;  ; TList * fList;  list of frames to arrange ;  ; TGCompositeFrame * fMain;  container frame ;  ; Int_t fTHeight;  text height ;  ; Int_t fTWidth;  text width of a default character ""1234567890"" / 10 ;  ;  Protected Attributes inherited from TGLayoutManager; Bool_t fModified;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL <",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:11848,Modifiability,inherit,inherited,11848,"ic constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGXYLayout (const TGXYLayout &);  copy constructor ;  ; TGXYLayout & operator= (const TGXYLayout &);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fFirst;  flag to determine the first call of Layout() ;  ; UInt_t fFirstHeight;  original height of the frame fMain ;  ; UInt_t fFirstWidth;  original width of the frame fMain ;  ; TList * fList;  list of frames to arrange ;  ; TGCompositeFrame * fMain;  container frame ;  ; Int_t fTHeight;  text height ;  ; Int_t fTWidth;  text width of a default character ""1234567890"" / 10 ;  ;  Protected Attributes inherited from TGLayoutManager; Bool_t fModified;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . ",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:11945,Modifiability,inherit,inherited,11945,"ng of objects in the TObjectTable. ;  . Protected Member Functions;  TGXYLayout (const TGXYLayout &);  copy constructor ;  ; TGXYLayout & operator= (const TGXYLayout &);  assignment operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fFirst;  flag to determine the first call of Layout() ;  ; UInt_t fFirstHeight;  original height of the frame fMain ;  ; UInt_t fFirstWidth;  original width of the frame fMain ;  ; TList * fList;  list of frames to arrange ;  ; TGCompositeFrame * fMain;  container frame ;  ; Int_t fTHeight;  text height ;  ; Int_t fTWidth;  text width of a default character ""1234567890"" / 10 ;  ;  Protected Attributes inherited from TGLayoutManager; Bool_t fModified;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGXYLayout.h>. Inheritance diagram for TGXYLayout:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGXYLayout() [1/2]. TGXYLayout::TGXYLayout ; (; const TGXYLayout & ; xyl). protected . copy constructor ; Definition at line 200 of file TGXYLayout.cxx",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:12586,Modifiability,inherit,inherited,12586,"ame fMain ;  ; TList * fList;  list of frames to arrange ;  ; TGCompositeFrame * fMain;  container frame ;  ; Int_t fTHeight;  text height ;  ; Int_t fTWidth;  text width of a default character ""1234567890"" / 10 ;  ;  Protected Attributes inherited from TGLayoutManager; Bool_t fModified;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGXYLayout.h>. Inheritance diagram for TGXYLayout:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGXYLayout() [1/2]. TGXYLayout::TGXYLayout ; (; const TGXYLayout & ; xyl). protected . copy constructor ; Definition at line 200 of file TGXYLayout.cxx. ◆ TGXYLayout() [2/2]. TGXYLayout::TGXYLayout ; (; TGCompositeFrame * ; main). Constructor. The main is the frame for which this layout manager works. ; Definition at line 172 of file TGXYLayout.cxx. Member Function Documentation. ◆ Class(). static TClass * TGXYLayout::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGXYLayout::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGXYLayout::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 83 of file ",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayout.html:5973,Security,hash,hash,5973," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGXYLayout.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayout.html
https://root.cern/doc/master/classTGXYLayoutHints.html:7115,Availability,error,error,7115,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:7204,Availability,error,error,7204,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:7359,Availability,error,error,7359,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:7656,Availability,error,error,7656,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:11853,Availability,error,error,11853,"rtual void Paint (Option_t *option="""");  This method must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TRefCnt;  TRefCnt (EReferenceFlag);  Leave fRefs alone. ;  ;  TRefCnt (Int_t initRef=0);  ; virtual ~TRefCnt ();  ; void AddReference ();  ; UInt_t References () const;  ; UInt_t RemoveReference ();  ; void SetRefCount (UInt_t r);  . Static Public Member Functions; static TClass * Class ();  ; ",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:7121,Integrability,message,message,7121,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:7662,Integrability,message,message,7662,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:8864,Integrability,message,message,8864,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle again",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:11859,Integrability,message,message,11859,"rtual void Paint (Option_t *option="""");  This method must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TRefCnt;  TRefCnt (EReferenceFlag);  Leave fRefs alone. ;  ;  TRefCnt (Int_t initRef=0);  ; virtual ~TRefCnt ();  ; void AddReference ();  ; UInt_t References () const;  ; UInt_t RemoveReference ();  ; void SetRefCount (UInt_t r);  . Static Public Member Functions; static TClass * Class ();  ; ",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:12232,Integrability,message,message,12232,"move this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TRefCnt;  TRefCnt (EReferenceFlag);  Leave fRefs alone. ;  ;  TRefCnt (Int_t initRef=0);  ; virtual ~TRefCnt ();  ; void AddReference ();  ; UInt_t References () const;  ; UInt_t RemoveReference ();  ; void SetRefCount (UInt_t r);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLayoutHints; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions ",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:3014,Modifiability,inherit,inherited,3014,"ere the position and the size of each widget in the frame are defined by X / Y ...Definition TGXYLayout.h:58; Normally there is one layout hint per widget. Therefore these can be deleted like in the following example in the destructor of the frame:; TGMyFrame::~TGMyFrame(); {; // Destructor, deletes all frames and their layout hints.; ; TGFrameElement *ptr;; ; // delete all frames and layout hints; if (fList) {; TIter next(fList);; while ((ptr = (TGFrameElement *) next())) {; if (ptr->fLayout); delete ptr->fLayout;; if (ptr->fFrame); delete ptr->fFrame;; }; }; }; TGFrameElementDefinition TGLayout.h:105; TGFrameElement::fLayoutTGLayoutHints * fLayoutDefinition TGLayout.h:114; TGFrameElement::fFrameTGFrame * fFrameDefinition TGLayout.h:112; TIterDefinition TCollection.h:235. Definition at line 19 of file TGXYLayout.h. Public Types; enum  ERubberFlag { kLRubberX = (1ULL << ( 0 )); , kLRubberY = (1ULL << ( 1 )); , kLRubberW = (1ULL << ( 2 )); , kLRubberH = (1ULL << ( 3 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TRefCnt; enum  EReferenceFlag { kStaticInit; };  . Public Member Functions;  TGXYLayoutHints (Double_t x, Double_t y, Double_t w, Double_t h, UInt_t rubberFlag=kLRubberX|kLRubberY);  Constructor. ;  ; UInt_t GetFlag () const;  ; Double_t GetH () const;  ; Double_t GetW () const;  ; Double_t GetX () const;  ; Double_t GetY () const;  ; TClass ",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:3652,Modifiability,inherit,inherited,3652,"ion TGLayout.h:114; TGFrameElement::fFrameTGFrame * fFrameDefinition TGLayout.h:112; TIterDefinition TCollection.h:235. Definition at line 19 of file TGXYLayout.h. Public Types; enum  ERubberFlag { kLRubberX = (1ULL << ( 0 )); , kLRubberY = (1ULL << ( 1 )); , kLRubberW = (1ULL << ( 2 )); , kLRubberH = (1ULL << ( 3 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TRefCnt; enum  EReferenceFlag { kStaticInit; };  . Public Member Functions;  TGXYLayoutHints (Double_t x, Double_t y, Double_t w, Double_t h, UInt_t rubberFlag=kLRubberX|kLRubberY);  Constructor. ;  ; UInt_t GetFlag () const;  ; Double_t GetH () const;  ; Double_t GetW () const;  ; Double_t GetX () const;  ; Double_t GetY () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save XY layout hints as a C++ statement(s) on output stream. ;  ; void SetFlag (UInt_t flag);  ; void SetH (Double_t h);  ; void SetW (Double_t w);  ; void SetX (Double_t x);  ; void SetY (Double_t y);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutHints;  TGLayoutHints (const TGLayoutHints &lh);  Constructor. ;  ;  TGLayoutHints (ULong_t hints=kLHintsNormal, Int_t padleft=0, Int_t padright=0, Int_t padtop=0, Int_t padbo",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:4476,Modifiability,inherit,inherited,4476,"ed = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TRefCnt; enum  EReferenceFlag { kStaticInit; };  . Public Member Functions;  TGXYLayoutHints (Double_t x, Double_t y, Double_t w, Double_t h, UInt_t rubberFlag=kLRubberX|kLRubberY);  Constructor. ;  ; UInt_t GetFlag () const;  ; Double_t GetH () const;  ; Double_t GetW () const;  ; Double_t GetX () const;  ; Double_t GetY () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save XY layout hints as a C++ statement(s) on output stream. ;  ; void SetFlag (UInt_t flag);  ; void SetH (Double_t h);  ; void SetW (Double_t w);  ; void SetX (Double_t x);  ; void SetY (Double_t y);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutHints;  TGLayoutHints (const TGLayoutHints &lh);  Constructor. ;  ;  TGLayoutHints (ULong_t hints=kLHintsNormal, Int_t padleft=0, Int_t padright=0, Int_t padtop=0, Int_t padbottom=0);  ;  ~TGLayoutHints () override;  Destructor. ;  ; ULong_t GetLayoutHints () const;  ; Int_t GetPadBottom () const;  ; Int_t GetPadLeft () const;  ; Int_t GetPadRight () const;  ; Int_t GetPadTop () const;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void Print (Option_t *option="""") const override;  Printing. ;  ; virtual void SetLayoutHints (ULong_t lh);  ; virtual void SetPadBottom (Int_t v);  ; virtual void SetPadLeft (Int_t v);  ; virtual void SetPadRight (Int_t v);  ; virtual void SetPadTop (Int_t v);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor.",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:5354,Modifiability,inherit,inherited,5354,"tW (Double_t w);  ; void SetX (Double_t x);  ; void SetY (Double_t y);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGLayoutHints;  TGLayoutHints (const TGLayoutHints &lh);  Constructor. ;  ;  TGLayoutHints (ULong_t hints=kLHintsNormal, Int_t padleft=0, Int_t padright=0, Int_t padtop=0, Int_t padbottom=0);  ;  ~TGLayoutHints () override;  Destructor. ;  ; ULong_t GetLayoutHints () const;  ; Int_t GetPadBottom () const;  ; Int_t GetPadLeft () const;  ; Int_t GetPadRight () const;  ; Int_t GetPadTop () const;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void Print (Option_t *option="""") const override;  Printing. ;  ; virtual void SetLayoutHints (ULong_t lh);  ; virtual void SetPadBottom (Int_t v);  ; virtual void SetPadLeft (Int_t v);  ; virtual void SetPadRight (Int_t v);  ; virtual void SetPadTop (Int_t v);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make ",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:6751,Modifiability,inherit,inheritance,6751,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:8962,Modifiability,inherit,inherits,8962,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality th",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:9079,Modifiability,inherit,inherits,9079,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden t",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:12539,Modifiability,inherit,inherited,12539,"DrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TRefCnt;  TRefCnt (EReferenceFlag);  Leave fRefs alone. ;  ;  TRefCnt (Int_t initRef=0);  ; virtual ~TRefCnt ();  ; void AddReference ();  ; UInt_t References () const;  ; UInt_t RemoveReference ();  ; void SetRefCount (UInt_t r);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLayoutHints; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDto",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:13007,Modifiability,inherit,inherited,13007,"een invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TRefCnt;  TRefCnt (EReferenceFlag);  Leave fRefs alone. ;  ;  TRefCnt (Int_t initRef=0);  ; virtual ~TRefCnt ();  ; void AddReference ();  ; UInt_t References () const;  ; UInt_t RemoveReference ();  ; void SetRefCount (UInt_t r);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLayoutHints; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; UInt_t fFlag;  rubber flag ;  ; Double_t fH;  height of widget ;  ; Double_t fW;  width of widget ;  ; Double_t fX;  x - position of widget ;  ; Double_t fY;  y - position of widget ;  ;  Protected Attributes inherited from TGLayoutHints; ULong_t fLayoutHints;  ; Int_t fPadbottom;  ; Int_t fPadleft;  ; Int_t fPadright;  ; Int_t fPadtop;  ;  Protected Attributes inherited from TRefCnt; UInt_t",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:13224,Modifiability,inherit,inherited,13224,"een invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TRefCnt;  TRefCnt (EReferenceFlag);  Leave fRefs alone. ;  ;  TRefCnt (Int_t initRef=0);  ; virtual ~TRefCnt ();  ; void AddReference ();  ; UInt_t References () const;  ; UInt_t RemoveReference ();  ; void SetRefCount (UInt_t r);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLayoutHints; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; UInt_t fFlag;  rubber flag ;  ; Double_t fH;  height of widget ;  ; Double_t fW;  width of widget ;  ; Double_t fX;  x - position of widget ;  ; Double_t fY;  y - position of widget ;  ;  Protected Attributes inherited from TGLayoutHints; ULong_t fLayoutHints;  ; Int_t fPadbottom;  ; Int_t fPadleft;  ; Int_t fPadright;  ; Int_t fPadtop;  ;  Protected Attributes inherited from TRefCnt; UInt_t",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:13941,Modifiability,inherit,inherited,13941,"rsion ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLayoutHints; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; UInt_t fFlag;  rubber flag ;  ; Double_t fH;  height of widget ;  ; Double_t fW;  width of widget ;  ; Double_t fX;  x - position of widget ;  ; Double_t fY;  y - position of widget ;  ;  Protected Attributes inherited from TGLayoutHints; ULong_t fLayoutHints;  ; Int_t fPadbottom;  ; Int_t fPadleft;  ; Int_t fPadright;  ; Int_t fPadtop;  ;  Protected Attributes inherited from TRefCnt; UInt_t fRefs;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGLayoutHints; void UpdateFrameElements (TGLayoutHints *l);  Update layout hints of frame elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGXYLayout.h>. Inheritance diagram for TGXYLayoutHints:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ERubberFlag. enum TGXYLayoutHints::ERubberFlag. EnumeratorkLRubberX ; kLRubberY ; kLRubberW ; kLRubberH . Defi",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:14096,Modifiability,inherit,inherited,14096,"rsion ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGLayoutHints; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; UInt_t fFlag;  rubber flag ;  ; Double_t fH;  height of widget ;  ; Double_t fW;  width of widget ;  ; Double_t fX;  x - position of widget ;  ; Double_t fY;  y - position of widget ;  ;  Protected Attributes inherited from TGLayoutHints; ULong_t fLayoutHints;  ; Int_t fPadbottom;  ; Int_t fPadleft;  ; Int_t fPadright;  ; Int_t fPadtop;  ;  Protected Attributes inherited from TRefCnt; UInt_t fRefs;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGLayoutHints; void UpdateFrameElements (TGLayoutHints *l);  Update layout hints of frame elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGXYLayout.h>. Inheritance diagram for TGXYLayoutHints:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ERubberFlag. enum TGXYLayoutHints::ERubberFlag. EnumeratorkLRubberX ; kLRubberY ; kLRubberW ; kLRubberH . Defi",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:14184,Modifiability,inherit,inherited,14184,"ass ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; UInt_t fFlag;  rubber flag ;  ; Double_t fH;  height of widget ;  ; Double_t fW;  width of widget ;  ; Double_t fX;  x - position of widget ;  ; Double_t fY;  y - position of widget ;  ;  Protected Attributes inherited from TGLayoutHints; ULong_t fLayoutHints;  ; Int_t fPadbottom;  ; Int_t fPadleft;  ; Int_t fPadright;  ; Int_t fPadtop;  ;  Protected Attributes inherited from TRefCnt; UInt_t fRefs;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGLayoutHints; void UpdateFrameElements (TGLayoutHints *l);  Update layout hints of frame elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGXYLayout.h>. Inheritance diagram for TGXYLayoutHints:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ERubberFlag. enum TGXYLayoutHints::ERubberFlag. EnumeratorkLRubberX ; kLRubberY ; kLRubberW ; kLRubberH . Definition at line 30 of file TGXYLayout.h. Constructor & Destructor Documentation. ◆ TGXYLayoutHints(). TGXYLayoutHints::TGXYLayoutHints ; (; Double_t ; x, . Double_t ; y, . Double_t ; w, . Double_t ; h, . UInt_t ; rubberFlag = kLRubberX | kLRubberY . ). Constructor. ; The x, y, w and h define the position of the widget in its frame and the size",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:14283,Modifiability,inherit,inherited,14283,"ass ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; UInt_t fFlag;  rubber flag ;  ; Double_t fH;  height of widget ;  ; Double_t fW;  width of widget ;  ; Double_t fX;  x - position of widget ;  ; Double_t fY;  y - position of widget ;  ;  Protected Attributes inherited from TGLayoutHints; ULong_t fLayoutHints;  ; Int_t fPadbottom;  ; Int_t fPadleft;  ; Int_t fPadright;  ; Int_t fPadtop;  ;  Protected Attributes inherited from TRefCnt; UInt_t fRefs;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGLayoutHints; void UpdateFrameElements (TGLayoutHints *l);  Update layout hints of frame elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGXYLayout.h>. Inheritance diagram for TGXYLayoutHints:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ERubberFlag. enum TGXYLayoutHints::ERubberFlag. EnumeratorkLRubberX ; kLRubberY ; kLRubberW ; kLRubberH . Definition at line 30 of file TGXYLayout.h. Constructor & Destructor Documentation. ◆ TGXYLayoutHints(). TGXYLayoutHints::TGXYLayoutHints ; (; Double_t ; x, . Double_t ; y, . Double_t ; w, . Double_t ; h, . UInt_t ; rubberFlag = kLRubberX | kLRubberY . ). Constructor. ; The x, y, w and h define the position of the widget in its frame and the size",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:14431,Modifiability,inherit,inherited,14431,"ectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; UInt_t fFlag;  rubber flag ;  ; Double_t fH;  height of widget ;  ; Double_t fW;  width of widget ;  ; Double_t fX;  x - position of widget ;  ; Double_t fY;  y - position of widget ;  ;  Protected Attributes inherited from TGLayoutHints; ULong_t fLayoutHints;  ; Int_t fPadbottom;  ; Int_t fPadleft;  ; Int_t fPadright;  ; Int_t fPadtop;  ;  Protected Attributes inherited from TRefCnt; UInt_t fRefs;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGLayoutHints; void UpdateFrameElements (TGLayoutHints *l);  Update layout hints of frame elements. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGXYLayout.h>. Inheritance diagram for TGXYLayoutHints:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ERubberFlag. enum TGXYLayoutHints::ERubberFlag. EnumeratorkLRubberX ; kLRubberY ; kLRubberW ; kLRubberH . Definition at line 30 of file TGXYLayout.h. Constructor & Destructor Documentation. ◆ TGXYLayoutHints(). TGXYLayoutHints::TGXYLayoutHints ; (; Double_t ; x, . Double_t ; y, . Double_t ; w, . Double_t ; h, . UInt_t ; rubberFlag = kLRubberX | kLRubberY . ). Constructor. ; The x, y, w and h define the position of the widget in its frame and the size of the widget. The unit is the size of a character. The rubberFlag defines how to move and to resize the widget when the frame is resized. Default is moving the X and Y position but keep the size of the widget. ; Definition",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTGXYLayoutHints.html:8593,Security,hash,hash,8593," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTGXYLayoutHints.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTGXYLayoutHints.html
https://root.cern/doc/master/classTH1-members.html:4019,Availability,error,error,4019,"st char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoFillN(Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1)TH1protectedvirtual; DoIntegral(Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) constTH1protectedvirtual; Draw(Option_t *option="""") overrideTH1virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constTH1virtual; DrawNormalized(Option_t *option="""", Double_t norm=1) constTH1virtual; DrawPanel()TH1virtual; Dump() constTObjectvirtual; EBinErrorOpt enum nameTH1; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatOverflows enum nameTH1; EStatusBits enum nameTH1; Eval(TF1 *f1, Option_t *option="""")TH1virtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTH1virtual; ExtendAxis(Double_t x, TAxis *axis)TH1virtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBarOffsetTH1protected; fBarWidthTH1protected; fBinStatErrOptTH1protected; fBitsTObjectprivate; fBufferTH1protected; fBufferSizeTH1protected; fContourTH1protected; fDimensionTH1protected; fDirectoryTH1protected; fEntriesTH1protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; FFT(TH1 *h_output, Option_t *option)TH1virtual; fFunctionsTH1protected; fgAddDirectoryTH1protectedstatic; fgBufferSizeTH1protectedstatic; fgDefaultSumw2TH1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgStatOverflowsTH1protectedstatic; Fill(Double_t x)TH1virtual; Fill(Double_t x, Double_t w)TH1virtual; Fill(const char *name, Double_t w)TH1virtual; FillBuffer(char *&buffer)TNamedvirtual; FillN(Int_t ntimes, const Double",MatchSource.WIKI,doc/master/classTH1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1-members.html
https://root.cern/doc/master/classTH1-members.html:4100,Availability,error,error,4100,"st char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoFillN(Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1)TH1protectedvirtual; DoIntegral(Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) constTH1protectedvirtual; Draw(Option_t *option="""") overrideTH1virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constTH1virtual; DrawNormalized(Option_t *option="""", Double_t norm=1) constTH1virtual; DrawPanel()TH1virtual; Dump() constTObjectvirtual; EBinErrorOpt enum nameTH1; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatOverflows enum nameTH1; EStatusBits enum nameTH1; Eval(TF1 *f1, Option_t *option="""")TH1virtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTH1virtual; ExtendAxis(Double_t x, TAxis *axis)TH1virtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBarOffsetTH1protected; fBarWidthTH1protected; fBinStatErrOptTH1protected; fBitsTObjectprivate; fBufferTH1protected; fBufferSizeTH1protected; fContourTH1protected; fDimensionTH1protected; fDirectoryTH1protected; fEntriesTH1protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; FFT(TH1 *h_output, Option_t *option)TH1virtual; fFunctionsTH1protected; fgAddDirectoryTH1protectedstatic; fgBufferSizeTH1protectedstatic; fgDefaultSumw2TH1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgStatOverflowsTH1protectedstatic; Fill(Double_t x)TH1virtual; Fill(Double_t x, Double_t w)TH1virtual; Fill(const char *name, Double_t w)TH1virtual; FillBuffer(char *&buffer)TNamedvirtual; FillN(Int_t ntimes, const Double",MatchSource.WIKI,doc/master/classTH1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1-members.html
https://root.cern/doc/master/classTH1-members.html:17393,Availability,error,error,17393,,MatchSource.WIKI,doc/master/classTH1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1-members.html
https://root.cern/doc/master/classTH1-members.html:17456,Availability,error,error,17456,,MatchSource.WIKI,doc/master/classTH1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1-members.html
https://root.cern/doc/master/classTH1-members.html:17531,Availability,error,error,17531,,MatchSource.WIKI,doc/master/classTH1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1-members.html
https://root.cern/doc/master/classTH1-members.html:19070,Availability,error,error,19070,"t_t binx, Int_t biny, Int_t binz, Double_t error)TH1virtual; SetBinErrorOption(EBinErrorOpt type)TH1inlinevirtual; SetBins(Int_t nx, Double_t xmin, Double_t xmax)TH1virtual; SetBins(Int_t nx, const Double_t *xBins)TH1virtual; SetBins(Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax)TH1virtual; SetBins(Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins)TH1virtual; SetBins(Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax)TH1virtual; SetBins(Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins)TH1virtual; SetBinsLength(Int_t=-1)TH1inlinevirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetBuffer(Int_t buffersize, Option_t *option="""")TH1virtual; SetCanExtend(UInt_t extendBitMask)TH1virtual; SetCellContent(Int_t binx, Int_t biny, Double_t content)TH1inlinevirtual; SetCellError(Int_t binx, Int_t biny, Double_t content)TH1inlinevirtual; SetColors(Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1)TH1virtual; SetContent(const Double_t *content)TH1virtual; SetContour(Int_t nlevels, const Double_t *levels=nullptr)TH1virtual; SetContourLevel(Int_t level, Double_t value)TH1virtual; SetDefaultBufferSize(Int_t buffersize=1000)TH1static; SetDefaultSumw2(Bool_t sumw2=kTRUE)TH1static; SetDirectory(TDirectory *dir)TH1virtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEntries(Double_t n)TH1inlinevirtual; SetError(const Double_t *error)TH1virtual; SetFillAttributes()TAttFillvirtual; SetFillColor(Color_t fcolor)TAttFillinlinevirtual; SetFillColorAlpha(Color_t fcolor, Float_t falpha)TAttFillvirtual; SetFillStyle(Style_t fstyle)TAttFillinlinevirtual; SetHighlight(Bool_t set=kTRUE)TH1virtual; SetLabelColor(Color_t color=1, Option_t *axis=""X"")TH1virtual; SetLabelFont(Style_t font=62, Option_t *axis=""X"")TH1virtual; SetLabelOffset(Float_t offset=0.",MatchSource.WIKI,doc/master/classTH1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1-members.html
https://root.cern/doc/master/classTH1-members.html:179,Modifiability,inherit,inherited,179,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TH1 Member List. This is the complete list of members for TH1, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TF1 *h1, Double_t c1=1, Option_t *option="""")TH1virtual; Add(const TH1 *h1, Double_t c1=1)TH1virtual; Add(const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1)TH1virtual; AddBinContent(Int_t bin)TH1virtual; AddBinContent(Int_t bin, Double_t w)TH1virtual; AddDirectory(Bool_t add=kTRUE)TH1static; AddDirectoryStatus()TH1static; AddToTObjectTable(TObject *)TObjectprivatestatic; AndersonDarlingTest(const TH1 *h2, Option_t *option="""") constTH1virtual; AndersonDarlingTest(const TH1 *h2, Double_t &advalue) constTH1virtual; AppendPad(Option_t *option="""")TObjectvirtual; AutoP2FindLimits(Double_t min, Double_t max)TH1protectedvirtual; AutoP2GetBins(Int_t n)TH1inlineprotectedstatic; AutoP2GetPower2(Double_t x, Bool_t next=kTRUE)TH1inlineprotectedstatic; AxisChoice(Option_t *axis) constTH1protected; Browse(TBrowser *b) overrideTH1virtual; BufferEmpty(Int_t action=0)TH1virtual; BufferFill(Double_t x, Double_t w)TH1protectedvirtual; Build()TH1private; CanExtendAllAxes() constTH1virtual; CheckAxisLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLabels(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckBinLimits(const TAxis *a1, const TAxis *a2)TH1protectedstatic; CheckConsistency(const TH1 *h1, const TH1 *h2)TH1protectedstatic; CheckConsistentSubAxes(const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0)TH1protectedstatic; CheckedHash()TObjectinline; CheckEqualAxes(const TAxis *a1, const TAxis *a2)TH1protectedstatic; Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constTH1virtual; Chisquare(TF1 *f1, Option_t *",MatchSource.WIKI,doc/master/classTH1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1-members.html
https://root.cern/doc/master/classTH1-members.html:18344,Modifiability,extend,extendBitMask,18344,"evirtual; SetBinError(Int_t bin, Double_t error)TH1virtual; SetBinError(Int_t binx, Int_t biny, Double_t error)TH1virtual; SetBinError(Int_t binx, Int_t biny, Int_t binz, Double_t error)TH1virtual; SetBinErrorOption(EBinErrorOpt type)TH1inlinevirtual; SetBins(Int_t nx, Double_t xmin, Double_t xmax)TH1virtual; SetBins(Int_t nx, const Double_t *xBins)TH1virtual; SetBins(Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax)TH1virtual; SetBins(Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins)TH1virtual; SetBins(Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax)TH1virtual; SetBins(Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins)TH1virtual; SetBinsLength(Int_t=-1)TH1inlinevirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetBuffer(Int_t buffersize, Option_t *option="""")TH1virtual; SetCanExtend(UInt_t extendBitMask)TH1virtual; SetCellContent(Int_t binx, Int_t biny, Double_t content)TH1inlinevirtual; SetCellError(Int_t binx, Int_t biny, Double_t content)TH1inlinevirtual; SetColors(Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1)TH1virtual; SetContent(const Double_t *content)TH1virtual; SetContour(Int_t nlevels, const Double_t *levels=nullptr)TH1virtual; SetContourLevel(Int_t level, Double_t value)TH1virtual; SetDefaultBufferSize(Int_t buffersize=1000)TH1static; SetDefaultSumw2(Bool_t sumw2=kTRUE)TH1static; SetDirectory(TDirectory *dir)TH1virtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEntries(Double_t n)TH1inlinevirtual; SetError(const Double_t *error)TH1virtual; SetFillAttributes()TAttFillvirtual; SetFillColor(Color_t fcolor)TAttFillinlinevirtual; SetFillColorAlpha(Color_t fcolor, Float_t falpha)TAttFillvirtual; SetFillStyle(Style_t fstyle)TAttFillinlinevirtual; SetHighlight(Bool_t set=kTRUE)TH1virtual; SetLabelColor(Col",MatchSource.WIKI,doc/master/classTH1-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1-members.html
https://root.cern/doc/master/classTH1.html:826,Availability,error,errors,826,". ROOT: TH1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TH1 Class ReferenceHistogram Library » Histogram classes. ; TH1 is the base class of all histogram classes in ROOT. ; It provides the common interface for operations such as binning, filling, drawing, which will be detailed below. Creating histograms; Labelling axes. Binning; Fix or variable bin size; Convention for numbering bins; Alphanumeric Bin Labels; Histograms with automatic bins; Rebinning. Filling histograms; Associated errors; Associated functions; Projections of histograms; Random Numbers and histograms; Making a copy of a histogram; Normalizing histograms. Drawing histograms; Setting Drawing histogram contour levels (2-D hists only); Setting histogram graphics attributes; Customising how axes are drawn. Fitting histograms; Saving/reading histograms to/from a ROOT file; Operations on histograms; Miscellaneous operations. ROOT supports the following histogram types:. 1-D histograms:; TH1C : histograms with one byte per channel. Maximum bin content = 127; TH1S : histograms with one short per channel. Maximum bin content = 32767; TH1I : histograms with one int per channel. Maximum bin content = INT_MAX (*); TH1L : histograms with one long64 per channel. Maximum bin content = LLONG_MAX (**); TH1F : histograms with one float per channel. Maximum precision 7 digits, maximum integer bin content = +/-16777216 (***); TH1D : histograms with one double per channel. Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (****). 2-D histograms:; TH2C : histograms with one byte per channel. Maximum bin content = 127; TH2S : histograms with one short per channel",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:7792,Availability,error,error,7792,"s contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis. To access the axis parameters, use: TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; See class TAxis for a description of all the access functions. The axis range is always stored internally in double precision. Convention for numbering bins; For all histogram types: nbins, xlow, xup bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; In case of 2-D or 3-D histograms, a ""global bin"" number is defined. For example, assuming a 3-D histogram with (binx, biny, binz), the function Int_t gbin = h->GetBin(binx, biny, binz);; int; returns a global/linearized gbin number. This global gbin is useful to access the bin content/error information independently of the dimension. Note that to access the information other than bin content and errors one should use the TAxis object directly with e.g.: Double_t xcenter = h3->GetZaxis()->GetBinCenter(27);; double; returns the center along z of bin number 27 (not the global bin) in the 3-D histogram h3. Alphanumeric Bin Labels; By default, a histogram axis is drawn with its numeric bin labels. One can specify alphanumeric labels instead with:. call TAxis::SetBinLabel(bin, label); This can always be done before or after filling. When the histogram is drawn, bin labels will be automatically drawn. See examples labels1.C and labels2.C; call to a Fill function with one of the arguments being a string, e.g. hist1->Fill(somename, weight);; hist2->Fill(x, somename, weight);; hist2->Fill(somename, y, weight);; hist2->Fill(somenamex, somenamey, weight);; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; See examples hlabels1.C and hlabels2.C; via",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:7905,Availability,error,errors,7905,"xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; See class TAxis for a description of all the access functions. The axis range is always stored internally in double precision. Convention for numbering bins; For all histogram types: nbins, xlow, xup bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; In case of 2-D or 3-D histograms, a ""global bin"" number is defined. For example, assuming a 3-D histogram with (binx, biny, binz), the function Int_t gbin = h->GetBin(binx, biny, binz);; int; returns a global/linearized gbin number. This global gbin is useful to access the bin content/error information independently of the dimension. Note that to access the information other than bin content and errors one should use the TAxis object directly with e.g.: Double_t xcenter = h3->GetZaxis()->GetBinCenter(27);; double; returns the center along z of bin number 27 (not the global bin) in the 3-D histogram h3. Alphanumeric Bin Labels; By default, a histogram axis is drawn with its numeric bin labels. One can specify alphanumeric labels instead with:. call TAxis::SetBinLabel(bin, label); This can always be done before or after filling. When the histogram is drawn, bin labels will be automatically drawn. See examples labels1.C and labels2.C; call to a Fill function with one of the arguments being a string, e.g. hist1->Fill(somename, weight);; hist2->Fill(x, somename, weight);; hist2->Fill(somename, y, weight);; hist2->Fill(somenamex, somenamey, weight);; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; See examples hlabels1.C and hlabels2.C; via TTree::Draw. see for example cernstaff.C tree.Draw(""Nation::Division"");; where ""Nation"" and ""Division"" are two",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:9645,Availability,down,down,9645,"(somename, weight);; hist2->Fill(x, somename, weight);; hist2->Fill(somename, y, weight);; hist2->Fill(somenamex, somenamey, weight);; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; See examples hlabels1.C and hlabels2.C; via TTree::Draw. see for example cernstaff.C tree.Draw(""Nation::Division"");; where ""Nation"" and ""Division"" are two branches of a Tree. When using the options 2 or 3 above, the labels are automatically added to the list (THashList) of labels for a given axis. By default, an axis is drawn with the order of bins corresponding to the filling sequence. It is possible to reorder the axis. alphabetically; by increasing or decreasing values. The reordering can be triggered via the TAxis context menu by selecting the menu item ""LabelsOption"" or by calling directly TH1::LabelsOption(option, axis) where. axis may be ""X"", ""Y"" or ""Z""; option may be:; ""a"" sort by alphabetic order; "">"" sort by decreasing values; ""<"" sort by increasing values; ""h"" draw labels horizontal; ""v"" draw labels vertical; ""u"" draw labels up (end of label right adjusted); ""d"" draw labels down (start of label left adjusted). When using the option 2 above, new labels are added by doubling the current number of bins in case one label does not exist yet. When the Filling is terminated, it is possible to trim the number of bins to match the number of active labels by calling TH1::LabelsDeflate(axis) with axis = ""X"", ""Y"" or ""Z""; TH1::LabelsDeflatevirtual void LabelsDeflate(Option_t *axis=""X"")Reduce the number of bins for the axis passed in the option to the number of bins having a label.Definition TH1.cxx:5245; This operation is automatic when using TTree::Draw. Once bin labels have been created, they become persistent if the histogram is written to a file or when generating the C++ code via SavePrimitive. Histograms with automatic bins; When a histogram is created with an axis lower limit greater or equal to its upper limit, the SetBuffer is automatically called wi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:10943,Availability,error,errors,10943," ""X"", ""Y"" or ""Z""; TH1::LabelsDeflatevirtual void LabelsDeflate(Option_t *axis=""X"")Reduce the number of bins for the axis passed in the option to the number of bins having a label.Definition TH1.cxx:5245; This operation is automatic when using TTree::Draw. Once bin labels have been created, they become persistent if the histogram is written to a file or when generating the C++ code via SavePrimitive. Histograms with automatic bins; When a histogram is created with an axis lower limit greater or equal to its upper limit, the SetBuffer is automatically called with an argument fBufferSize equal to fgBufferSize (default value=1000). fgBufferSize may be reset via the static function TH1::SetDefaultBufferSize. The axis limits will be automatically computed when the buffer will be full or when the function BufferEmpty is called. Rebinning; At any time, a histogram can be rebinned via TH1::Rebin. This function returns a new histogram with the rebinned contents. If bin errors were stored, they are recomputed during the rebinning. Filling histograms; A histogram is typically filled with statements like: h1->Fill(x);; h1->Fill(x, w); //fill with weight; h2->Fill(x, y); h2->Fill(x, y, w); h3->Fill(x, y, z); h3->Fill(x, y, z, w); wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; or via one of the Fill functions accepting names described above. The Fill functions compute the bin number corresponding to the given x, y or z argument and increment this bin by the given weight. The Fill functions return the bin number for 1-D histograms or global bin number for 2-D and 3-D histograms. If TH1::Sumw2 has been called before filling, the sum of squares of weights is also stored. One can also increment directly a bin number via TH1::AddBinContent or replace the existing content via TH1::SetBinContent. Passing an out-of-range bin to TH1::AddBinContent leads to undefined behavior. To access the b",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:13068,Availability,error,errors,13068,"nt axis ranges. If the automatic binning option has been set via h->SetCanExtend(TH1::kAllAxes);; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; then, the Fill Function will automatically extend the axis range to accomodate the new value specified in the Fill argument. The method used is to double the bin size until the new value fits in the range, merging bins two by two. This automatic binning options is extensively used by the TTree::Draw function when histogramming Tree variables with an unknown range. This automatic binning option is supported for 1-D, 2-D and 3-D histograms.; During filling, some statistics parameters are incremented to compute the mean value and Root Mean Square with the maximum precision.; In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S a check is made that the bin contents do not exceed the maximum positive capacity (127 or 32767). Histograms of all types may have positive or/and negative bin contents. Associated errors; By default, for each bin, the sum of weights is computed at fill time. One can also call TH1::Sumw2 to force the storage and computation of the sum of the square of weights per bin. If Sumw2 has been called, the error per bin is computed as the sqrt(sum of squares of weights), otherwise the error is set equal to the sqrt(bin content). To return the error for a given bin number, do: Double_t error = h->GetBinError(bin);. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to this list. Given a histogram h, one can retrieve an associated function with: TF1 *myfunc = h->GetFunction(""myfunc"");; TF11-Dim function classDefinition TF1.h:233. Operations on histograms; Many types of operations are supported on histograms or between histograms. Addition of a histogram to the current histogram.; Additions of two histograms with coefficients and storage into the current histogram.",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:13288,Availability,error,error,13288,"e specified in the Fill argument. The method used is to double the bin size until the new value fits in the range, merging bins two by two. This automatic binning options is extensively used by the TTree::Draw function when histogramming Tree variables with an unknown range. This automatic binning option is supported for 1-D, 2-D and 3-D histograms.; During filling, some statistics parameters are incremented to compute the mean value and Root Mean Square with the maximum precision.; In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S a check is made that the bin contents do not exceed the maximum positive capacity (127 or 32767). Histograms of all types may have positive or/and negative bin contents. Associated errors; By default, for each bin, the sum of weights is computed at fill time. One can also call TH1::Sumw2 to force the storage and computation of the sum of the square of weights per bin. If Sumw2 has been called, the error per bin is computed as the sqrt(sum of squares of weights), otherwise the error is set equal to the sqrt(bin content). To return the error for a given bin number, do: Double_t error = h->GetBinError(bin);. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to this list. Given a histogram h, one can retrieve an associated function with: TF1 *myfunc = h->GetFunction(""myfunc"");; TF11-Dim function classDefinition TF1.h:233. Operations on histograms; Many types of operations are supported on histograms or between histograms. Addition of a histogram to the current histogram.; Additions of two histograms with coefficients and storage into the current histogram.; Multiplications and Divisions are supported in the same way as additions.; The Add, Divide and Multiply functions also exist to add, divide or multiply a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:13368,Availability,error,error,13368,"e specified in the Fill argument. The method used is to double the bin size until the new value fits in the range, merging bins two by two. This automatic binning options is extensively used by the TTree::Draw function when histogramming Tree variables with an unknown range. This automatic binning option is supported for 1-D, 2-D and 3-D histograms.; During filling, some statistics parameters are incremented to compute the mean value and Root Mean Square with the maximum precision.; In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S a check is made that the bin contents do not exceed the maximum positive capacity (127 or 32767). Histograms of all types may have positive or/and negative bin contents. Associated errors; By default, for each bin, the sum of weights is computed at fill time. One can also call TH1::Sumw2 to force the storage and computation of the sum of the square of weights per bin. If Sumw2 has been called, the error per bin is computed as the sqrt(sum of squares of weights), otherwise the error is set equal to the sqrt(bin content). To return the error for a given bin number, do: Double_t error = h->GetBinError(bin);. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to this list. Given a histogram h, one can retrieve an associated function with: TF1 *myfunc = h->GetFunction(""myfunc"");; TF11-Dim function classDefinition TF1.h:233. Operations on histograms; Many types of operations are supported on histograms or between histograms. Addition of a histogram to the current histogram.; Additions of two histograms with coefficients and storage into the current histogram.; Multiplications and Divisions are supported in the same way as additions.; The Add, Divide and Multiply functions also exist to add, divide or multiply a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:13427,Availability,error,error,13427,"g bins two by two. This automatic binning options is extensively used by the TTree::Draw function when histogramming Tree variables with an unknown range. This automatic binning option is supported for 1-D, 2-D and 3-D histograms.; During filling, some statistics parameters are incremented to compute the mean value and Root Mean Square with the maximum precision.; In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S a check is made that the bin contents do not exceed the maximum positive capacity (127 or 32767). Histograms of all types may have positive or/and negative bin contents. Associated errors; By default, for each bin, the sum of weights is computed at fill time. One can also call TH1::Sumw2 to force the storage and computation of the sum of the square of weights per bin. If Sumw2 has been called, the error per bin is computed as the sqrt(sum of squares of weights), otherwise the error is set equal to the sqrt(bin content). To return the error for a given bin number, do: Double_t error = h->GetBinError(bin);. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to this list. Given a histogram h, one can retrieve an associated function with: TF1 *myfunc = h->GetFunction(""myfunc"");; TF11-Dim function classDefinition TF1.h:233. Operations on histograms; Many types of operations are supported on histograms or between histograms. Addition of a histogram to the current histogram.; Additions of two histograms with coefficients and storage into the current histogram.; Multiplications and Divisions are supported in the same way as additions.; The Add, Divide and Multiply functions also exist to add, divide or multiply a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 has been called), the resulting error bars are also computed assuming independent histograms. In case of divisions, Binom",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:13470,Availability,error,error,13470,"g bins two by two. This automatic binning options is extensively used by the TTree::Draw function when histogramming Tree variables with an unknown range. This automatic binning option is supported for 1-D, 2-D and 3-D histograms.; During filling, some statistics parameters are incremented to compute the mean value and Root Mean Square with the maximum precision.; In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S a check is made that the bin contents do not exceed the maximum positive capacity (127 or 32767). Histograms of all types may have positive or/and negative bin contents. Associated errors; By default, for each bin, the sum of weights is computed at fill time. One can also call TH1::Sumw2 to force the storage and computation of the sum of the square of weights per bin. If Sumw2 has been called, the error per bin is computed as the sqrt(sum of squares of weights), otherwise the error is set equal to the sqrt(bin content). To return the error for a given bin number, do: Double_t error = h->GetBinError(bin);. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to this list. Given a histogram h, one can retrieve an associated function with: TF1 *myfunc = h->GetFunction(""myfunc"");; TF11-Dim function classDefinition TF1.h:233. Operations on histograms; Many types of operations are supported on histograms or between histograms. Addition of a histogram to the current histogram.; Additions of two histograms with coefficients and storage into the current histogram.; Multiplications and Divisions are supported in the same way as additions.; The Add, Divide and Multiply functions also exist to add, divide or multiply a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 has been called), the resulting error bars are also computed assuming independent histograms. In case of divisions, Binom",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:14312,Availability,error,error,14312,"otherwise the error is set equal to the sqrt(bin content). To return the error for a given bin number, do: Double_t error = h->GetBinError(bin);. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to this list. Given a histogram h, one can retrieve an associated function with: TF1 *myfunc = h->GetFunction(""myfunc"");; TF11-Dim function classDefinition TF1.h:233. Operations on histograms; Many types of operations are supported on histograms or between histograms. Addition of a histogram to the current histogram.; Additions of two histograms with coefficients and storage into the current histogram.; Multiplications and Divisions are supported in the same way as additions.; The Add, Divide and Multiply functions also exist to add, divide or multiply a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 has been called), the resulting error bars are also computed assuming independent histograms. In case of divisions, Binomial errors are also supported. One can mark a histogram to be an ""average"" histogram by setting its bit kIsAverage via myhist.SetBit(TH1::kIsAverage); When adding (see TH1::Add) average histograms, the histograms are averaged and not summed. Projections of histograms; One can:. make a 1-D projection of a 2-D histogram or Profile see functions TH2::ProjectionX,Y, TH2::ProfileX,Y, TProfile::ProjectionX; make a 1-D, 2-D or profile out of a 3-D histogram see functions TH3::ProjectionZ, TH3::Project3D. One can fit these projections via: TH2::FitSlicesX,Y, TH3::FitSlicesZ.; TH2::FitSlicesXvirtual void FitSlicesX(TF1 *f1=nullptr, Int_t firstybin=0, Int_t lastybin=-1, Int_t cut=0, Option_t *option=""QNR"", TObjArray *arr=nullptr)Project slices along X in case of a 2-D histogram, then fit each slice with function f1 and make a hi...Definition TH2.cxx:1016; TH3::FitSlicesZvirtual void FitSlicesZ(TF",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:14367,Availability,error,error,14367,"otherwise the error is set equal to the sqrt(bin content). To return the error for a given bin number, do: Double_t error = h->GetBinError(bin);. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to this list. Given a histogram h, one can retrieve an associated function with: TF1 *myfunc = h->GetFunction(""myfunc"");; TF11-Dim function classDefinition TF1.h:233. Operations on histograms; Many types of operations are supported on histograms or between histograms. Addition of a histogram to the current histogram.; Additions of two histograms with coefficients and storage into the current histogram.; Multiplications and Divisions are supported in the same way as additions.; The Add, Divide and Multiply functions also exist to add, divide or multiply a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 has been called), the resulting error bars are also computed assuming independent histograms. In case of divisions, Binomial errors are also supported. One can mark a histogram to be an ""average"" histogram by setting its bit kIsAverage via myhist.SetBit(TH1::kIsAverage); When adding (see TH1::Add) average histograms, the histograms are averaged and not summed. Projections of histograms; One can:. make a 1-D projection of a 2-D histogram or Profile see functions TH2::ProjectionX,Y, TH2::ProfileX,Y, TProfile::ProjectionX; make a 1-D, 2-D or profile out of a 3-D histogram see functions TH3::ProjectionZ, TH3::Project3D. One can fit these projections via: TH2::FitSlicesX,Y, TH3::FitSlicesZ.; TH2::FitSlicesXvirtual void FitSlicesX(TF1 *f1=nullptr, Int_t firstybin=0, Int_t lastybin=-1, Int_t cut=0, Option_t *option=""QNR"", TObjArray *arr=nullptr)Project slices along X in case of a 2-D histogram, then fit each slice with function f1 and make a hi...Definition TH2.cxx:1016; TH3::FitSlicesZvirtual void FitSlicesZ(TF",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:14460,Availability,error,errors,14460,"do: Double_t error = h->GetBinError(bin);. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to this list. Given a histogram h, one can retrieve an associated function with: TF1 *myfunc = h->GetFunction(""myfunc"");; TF11-Dim function classDefinition TF1.h:233. Operations on histograms; Many types of operations are supported on histograms or between histograms. Addition of a histogram to the current histogram.; Additions of two histograms with coefficients and storage into the current histogram.; Multiplications and Divisions are supported in the same way as additions.; The Add, Divide and Multiply functions also exist to add, divide or multiply a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 has been called), the resulting error bars are also computed assuming independent histograms. In case of divisions, Binomial errors are also supported. One can mark a histogram to be an ""average"" histogram by setting its bit kIsAverage via myhist.SetBit(TH1::kIsAverage); When adding (see TH1::Add) average histograms, the histograms are averaged and not summed. Projections of histograms; One can:. make a 1-D projection of a 2-D histogram or Profile see functions TH2::ProjectionX,Y, TH2::ProfileX,Y, TProfile::ProjectionX; make a 1-D, 2-D or profile out of a 3-D histogram see functions TH3::ProjectionZ, TH3::Project3D. One can fit these projections via: TH2::FitSlicesX,Y, TH3::FitSlicesZ.; TH2::FitSlicesXvirtual void FitSlicesX(TF1 *f1=nullptr, Int_t firstybin=0, Int_t lastybin=-1, Int_t cut=0, Option_t *option=""QNR"", TObjArray *arr=nullptr)Project slices along X in case of a 2-D histogram, then fit each slice with function f1 and make a hi...Definition TH2.cxx:1016; TH3::FitSlicesZvirtual void FitSlicesZ(TF1 *f1=nullptr, Int_t binminx=1, Int_t binmaxx=0, Int_t binminy=1, Int_t binmaxy=0, Int_t cut=0, Option",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:16493,Availability,error,errors,16493,"ion=""QNR"")Project slices along Z in case of a 3-D histogram, then fit each slice with function f1 and make a 2-...Definition TH3.cxx:978. Random Numbers and histograms; TH1::FillRandom can be used to randomly fill a histogram using the contents of an existing TF1 function or another TH1 histogram (for all dimensions). For example, the following two statements create and fill a histogram 10000 times with a default gaussian distribution of mean 0 and sigma 1: TH1F h1(""h1"", ""histo from a gaussian"", 100, -3, 3);; h1.FillRandom(""gaus"", 10000);; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::GetRandom can be used to return a random number distributed according to the contents of a histogram. Making a copy of a histogram; Like for any other ROOT object derived from TObject, one can use the Clone() function. This makes an identical copy of the original histogram including all associated errors and functions, e.g.: TH1F *hnew = (TH1F*)h->Clone(""hnew"");; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752. Normalizing histograms; One can scale a histogram such that the bins integral is equal to the normalization parameter via TH1::Scale(Double_t norm), where norm is the desired normalization divided by the integral of the histogram. Drawing histograms; Histograms are drawn via the THistPainter class. Each histogram has a pointer to its own painter (to be usable in a multithreaded program). Many drawing options are supported. See THistPainter::Paint() for more details.; The same histogram can be drawn with different options in different pads. When a histogram drawn in a pad is deleted, the histogram is automatically removed from the pad or pads where it was drawn. If a histogram is drawn in a pad, then filled again, the new status of the histogram will be automat",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:20767,Availability,error,errors,20767,"e. Because TH1 derives from TNamed, the key identifier on the file is the histogram name: TFile f(""histos.root"", ""new"");; TH1F h1(""hgaus"", ""histo from a gaussian"", 100, -3, 3);; h1.FillRandom(""gaus"", 10000);; h1->Write();; f#define f(i)Definition RSha256.hxx:104; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; To read this histogram in another Root session, do: TFile f(""histos.root"");; TH1F *h = (TH1F*)f.Get(""hgaus"");; One can save all histograms in memory to the file by: file->Write();. Miscellaneous operations; TH1::KolmogorovTest(): statistical test of compatibility in shape; between two histograms; TH1::Smooth() smooths the bin contents of a 1-d histogram; TH1::Integral() returns the integral of bin contents in a given bin range; TH1::GetMean(int axis) returns the mean value along axis; TH1::GetStdDev(int axis) returns the sigma distribution along axis; TH1::GetEntries() returns the number of entries; TH1::Reset() resets the bin contents and errors of a histogram; d#define d(i)Definition RSha256.hxx:102; a#define a(i)Definition RSha256.hxx:99; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Smoothvirtual void Smooth(Int_t ntimes=1, Option_t *option="""")Smooth bin contents of this histogram.Definition TH1.cxx:6879; TH1::GetStdDevvirtual Double_t GetStdDev(Int_t axis=1) constReturns the Standard Deviation (Sigma).Definition TH1.cxx:7607; TH1::GetMeanvirtual Double_t GetMean(Int_t axis=1) constFor axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis.Definition TH",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:21654,Availability,error,errors,21654,"GetStdDev(int axis) returns the sigma distribution along axis; TH1::GetEntries() returns the number of entries; TH1::Reset() resets the bin contents and errors of a histogram; d#define d(i)Definition RSha256.hxx:102; a#define a(i)Definition RSha256.hxx:99; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Smoothvirtual void Smooth(Int_t ntimes=1, Option_t *option="""")Smooth bin contents of this histogram.Definition TH1.cxx:6879; TH1::GetStdDevvirtual Double_t GetStdDev(Int_t axis=1) constReturns the Standard Deviation (Sigma).Definition TH1.cxx:7607; TH1::GetMeanvirtual Double_t GetMean(Int_t axis=1) constFor axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis.Definition TH1.cxx:7535; TH1::Resetvirtual void Reset(Option_t *option="""")Reset this histogram: contents, errors, etc.Definition TH1.cxx:7103; TH1::Integralvirtual Double_t Integral(Option_t *option="""") constReturn integral of bin contents.Definition TH1.cxx:7941; TH1::GetEntriesvirtual Double_t GetEntries() constReturn the current number of entries.Definition TH1.cxx:4423; TH1::KolmogorovTestvirtual Double_t KolmogorovTest(const TH1 *h2, Option_t *option="""") constStatistical test of compatibility in shape between this histogram and h2, using Kolmogorov test.Definition TH1.cxx:8178; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; IMPORTANT NOTE: The returned values for GetMean and GetStdDev depend on how the histogram statistics are calculated. By default, if no range has been set, the returned values are the (unbinned) ones calculated at fill time. If a range has been set, however, the values are calculated using the bins in range; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:23237,Availability,error,errors,23237,"nalysisProxy.h:11; IMPORTANT NOTE: The returned values for GetMean and GetStdDev depend on how the histogram statistics are calculated. By default, if no range has been set, the returned values are the (unbinned) ones calculated at fill time. If a range has been set, however, the values are calculated using the bins in range; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned values are always those of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats. ; Definition at line 59 of file TH1.h. Public Types; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type of statistics for bin errors. More...;  ; enum  EStatOverflows { kIgnore = 0; , kConsider = 1; , kNeutral = 2; };  Enumeration specifying the way to treat statoverflow. More...;  ; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kUserContour = (1ULL << ( 10 )); , kLogX = (1ULL << ( 15 )); , kIsZoomed = (1ULL << ( 16 )); , ;   kNoTitle = (1ULL << ( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMust",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:24716,Availability,error,errors,24716," (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual void AddBinContent (Int_t bin);  Increment bin content by 1. ;  ; virtual void AddBinContent (Int_t bin, Double_t w);  Increment bin content by a weight w. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxe",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:24753,Availability,error,errors,24753," (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual void AddBinContent (Int_t bin);  Increment bin content by 1. ;  ; virtual void AddBinContent (Int_t bin, Double_t w);  Increment bin content by a weight w. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxe",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:24902,Availability,error,errors,24902," kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual void AddBinContent (Int_t bin);  Increment bin content by 1. ;  ; virtual void AddBinContent (Int_t bin, Double_t w);  Increment bin content by a weight w. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:24939,Availability,error,errors,24939," kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual void AddBinContent (Int_t bin);  Increment bin content by 1. ;  ; virtual void AddBinContent (Int_t bin, Double_t w);  Increment bin content by a weight w. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:26333,Availability,error,error,26333,"eturning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; void Copy (TObject &hnew) const override;  Copy this histogram structure to newth1. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPr",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:27686,Availability,error,errors,27686,"ore content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; void Copy (TObject &hnew) const override;  Copy this histogram structure to newth1. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; void Draw (Option_t *option="""") override;  Draw this histogram with options. ;  ; virtual TH1 * DrawCopy (Option_t *option="""", const char *name_postfix=""_copy"") const;  Copy this histogram and Draw in the current pad. ;  ; virtual TH1 * DrawNormalized (Option_t *option="""", Double_t norm=1) const;  Draw a normalized copy of this histogram. ;  ; virtual void DrawPanel ();  Display a panel with all histogram drawing options. ;  ; virtual void Eval (TF1 *f1, Option_t *option="""");  Evaluate function f1 at the center of bins of this histogram. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void ExtendAxis (Double_t x, TAxis *axis);  Histogram is resized along axis such that x is in the axis range. ;  ; virtual TH1 * FFT (TH1 *h_output, Option_t *option);  This function allows to do discrete Fourier transforms of TH1 and TH2. ; ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:27723,Availability,error,errors,27723,"ore content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; void Copy (TObject &hnew) const override;  Copy this histogram structure to newth1. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; void Draw (Option_t *option="""") override;  Draw this histogram with options. ;  ; virtual TH1 * DrawCopy (Option_t *option="""", const char *name_postfix=""_copy"") const;  Copy this histogram and Draw in the current pad. ;  ; virtual TH1 * DrawNormalized (Option_t *option="""", Double_t norm=1) const;  Draw a normalized copy of this histogram. ;  ; virtual void DrawPanel ();  Display a panel with all histogram drawing options. ;  ; virtual void Eval (TF1 *f1, Option_t *option="""");  Evaluate function f1 at the center of bins of this histogram. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void ExtendAxis (Double_t x, TAxis *axis);  Histogram is resized along axis such that x is in the axis range. ;  ; virtual TH1 * FFT (TH1 *h_output, Option_t *option);  This function allows to do discrete Fourier transforms of TH1 and TH2. ; ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:31710,Availability,error,error,31710,"t (TF1 *f1, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0);  Fit histogram with the function pointer f1. ;  ; virtual void FitPanel ();  Display a panel with all histogram fit options. ;  ; TH1 * GetAsymmetry (TH1 *h2, Double_t c2=1, Double_t dc2=0);  Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined as: ;  ; virtual Color_t GetAxisColor (Option_t *axis=""X"") const;  Return the number of divisions for ""axis"". ;  ; virtual Float_t GetBarOffset () const;  ; virtual Float_t GetBarWidth () const;  ; virtual Int_t GetBin (Int_t binx, Int_t biny=0, Int_t binz=0) const;  Return Global bin number corresponding to binx,y,z. ;  ; virtual Double_t GetBinCenter (Int_t bin) const;  Return bin center for 1D histogram. ;  ; virtual Double_t GetBinContent (Int_t bin) const;  Return content of bin number bin. ;  ; virtual Double_t GetBinContent (Int_t bin, Int_t) const;  ; virtual Double_t GetBinContent (Int_t bin, Int_t, Int_t) const;  ; virtual Double_t GetBinError (Int_t bin) const;  Return value of error associated to bin number bin. ;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny) const;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny, Int_t binz) const;  ; virtual Double_t GetBinErrorLow (Int_t bin) const;  Return lower error associated to bin number bin. ;  ; virtual EBinErrorOpt GetBinErrorOption () const;  ; virtual Double_t GetBinErrorUp (Int_t bin) const;  Return upper error associated to bin number bin. ;  ; virtual Double_t GetBinLowEdge (Int_t bin) const;  Return bin lower edge for 1D histogram. ;  ; virtual Double_t GetBinWidth (Int_t bin) const;  Return bin width for 1D histogram. ;  ; virtual Double_t GetBinWithContent (Double_t c, Int_t &binx, Int_t firstx=0, Int_t lastx=0, Double_t maxdiff=0) const;  Compute first binx in the range [firstx,lastx] for which diff = abs(bin_content-c) <= maxdiff. ;  ; virtual void GetBinXYZ (Int_t binglobal, Int_t &binx, Int_t &biny, Int",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:31956,Availability,error,error,31956,"TH1 *h2, Double_t c2=1, Double_t dc2=0);  Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined as: ;  ; virtual Color_t GetAxisColor (Option_t *axis=""X"") const;  Return the number of divisions for ""axis"". ;  ; virtual Float_t GetBarOffset () const;  ; virtual Float_t GetBarWidth () const;  ; virtual Int_t GetBin (Int_t binx, Int_t biny=0, Int_t binz=0) const;  Return Global bin number corresponding to binx,y,z. ;  ; virtual Double_t GetBinCenter (Int_t bin) const;  Return bin center for 1D histogram. ;  ; virtual Double_t GetBinContent (Int_t bin) const;  Return content of bin number bin. ;  ; virtual Double_t GetBinContent (Int_t bin, Int_t) const;  ; virtual Double_t GetBinContent (Int_t bin, Int_t, Int_t) const;  ; virtual Double_t GetBinError (Int_t bin) const;  Return value of error associated to bin number bin. ;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny) const;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny, Int_t binz) const;  ; virtual Double_t GetBinErrorLow (Int_t bin) const;  Return lower error associated to bin number bin. ;  ; virtual EBinErrorOpt GetBinErrorOption () const;  ; virtual Double_t GetBinErrorUp (Int_t bin) const;  Return upper error associated to bin number bin. ;  ; virtual Double_t GetBinLowEdge (Int_t bin) const;  Return bin lower edge for 1D histogram. ;  ; virtual Double_t GetBinWidth (Int_t bin) const;  Return bin width for 1D histogram. ;  ; virtual Double_t GetBinWithContent (Double_t c, Int_t &binx, Int_t firstx=0, Int_t lastx=0, Double_t maxdiff=0) const;  Compute first binx in the range [firstx,lastx] for which diff = abs(bin_content-c) <= maxdiff. ;  ; virtual void GetBinXYZ (Int_t binglobal, Int_t &binx, Int_t &biny, Int_t &binz) const;  Return binx, biny, binz corresponding to the global bin number globalbin see TH1::GetBin function above. ;  ; const Double_t * GetBuffer () const;  ; Int_t GetBufferLength () const;  ; Int_t GetBufferSize () const;  ; vir",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:32113,Availability,error,error,32113,") const;  Return the number of divisions for ""axis"". ;  ; virtual Float_t GetBarOffset () const;  ; virtual Float_t GetBarWidth () const;  ; virtual Int_t GetBin (Int_t binx, Int_t biny=0, Int_t binz=0) const;  Return Global bin number corresponding to binx,y,z. ;  ; virtual Double_t GetBinCenter (Int_t bin) const;  Return bin center for 1D histogram. ;  ; virtual Double_t GetBinContent (Int_t bin) const;  Return content of bin number bin. ;  ; virtual Double_t GetBinContent (Int_t bin, Int_t) const;  ; virtual Double_t GetBinContent (Int_t bin, Int_t, Int_t) const;  ; virtual Double_t GetBinError (Int_t bin) const;  Return value of error associated to bin number bin. ;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny) const;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny, Int_t binz) const;  ; virtual Double_t GetBinErrorLow (Int_t bin) const;  Return lower error associated to bin number bin. ;  ; virtual EBinErrorOpt GetBinErrorOption () const;  ; virtual Double_t GetBinErrorUp (Int_t bin) const;  Return upper error associated to bin number bin. ;  ; virtual Double_t GetBinLowEdge (Int_t bin) const;  Return bin lower edge for 1D histogram. ;  ; virtual Double_t GetBinWidth (Int_t bin) const;  Return bin width for 1D histogram. ;  ; virtual Double_t GetBinWithContent (Double_t c, Int_t &binx, Int_t firstx=0, Int_t lastx=0, Double_t maxdiff=0) const;  Compute first binx in the range [firstx,lastx] for which diff = abs(bin_content-c) <= maxdiff. ;  ; virtual void GetBinXYZ (Int_t binglobal, Int_t &binx, Int_t &biny, Int_t &binz) const;  Return binx, biny, binz corresponding to the global bin number globalbin see TH1::GetBin function above. ;  ; const Double_t * GetBuffer () const;  ; Int_t GetBufferLength () const;  ; Int_t GetBufferSize () const;  ; virtual Double_t GetCellContent (Int_t binx, Int_t biny) const;  ; virtual Double_t GetCellError (Int_t binx, Int_t biny) const;  ; virtual void GetCenter (Double_t *center) const;  Fill array with center ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:35442,Availability,error,error,35442,"offset. ;  ; virtual Float_t GetLabelSize (Option_t *axis=""X"") const;  Return the ""axis"" label size. ;  ; TList * GetListOfFunctions () const;  ; virtual void GetLowEdge (Double_t *edge) const;  Fill array with low edge of bins for 1D histogram Better to use h1.GetXaxis()->GetLowEdge(edge) ;  ; virtual Double_t GetMaximum (Double_t maxval=FLT_MAX) const;  Return maximum value smaller than maxval of bins in the range, unless the value has been overridden by TH1::SetMaximum, in which case it returns that value. ;  ; virtual Int_t GetMaximumBin () const;  Return location of bin with maximum value in the range. ;  ; virtual Int_t GetMaximumBin (Int_t &locmax, Int_t &locmay, Int_t &locmaz) const;  Return location of bin with maximum value in the range. ;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMean (Int_t axis=1) const;  For axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis. ;  ; virtual Double_t GetMeanError (Int_t axis=1) const;  Return standard error of mean of this histogram along the X axis. ;  ; virtual Double_t GetMinimum (Double_t minval=-FLT_MAX) const;  Return minimum value larger than minval of bins in the range, unless the value has been overridden by TH1::SetMinimum, in which case it returns that value. ;  ; virtual void GetMinimumAndMaximum (Double_t &min, Double_t &max) const;  Retrieve the minimum and maximum values in the histogram. ;  ; virtual Int_t GetMinimumBin () const;  Return location of bin with minimum value in the range. ;  ; virtual Int_t GetMinimumBin (Int_t &locmix, Int_t &locmiy, Int_t &locmiz) const;  Return location of bin with minimum value in the range. ;  ; virtual Double_t GetMinimumStored () const;  ; virtual Int_t GetNbinsX () const;  ; virtual Int_t GetNbinsY () const;  ; virtual Int_t GetNbinsZ () const;  ; virtual Int_t GetNcells () const;  ; virtual Int_t GetNdivisions (Option_t *axis=""X"") const;  Return the number of divisions for ""axis"". ;  ; virtual Double_t GetNormFacto",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:37804,Availability,error,error,37804,"_p := Q(p) is defined as the value x_p such that the cumulative probability distribution Function F of variable X yields: ;  ; virtual Double_t GetRandom (TRandom *rng=nullptr) const;  Return a random number distributed according the histogram bin contents. ;  ; Double_t GetRMS (Int_t axis=1) const;  This function returns the Standard Deviation (Sigma) of the distribution not the Root Mean Square (RMS). ;  ; Double_t GetRMSError (Int_t axis=1) const;  ; virtual Double_t GetSkewness (Int_t axis=1) const;  ; EStatOverflows GetStatOverflows () const;  Get the behaviour adopted by the object about the statoverflows. See EStatOverflows for more information. ;  ; virtual void GetStats (Double_t *stats) const;  fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ;  ; virtual Double_t GetStdDev (Int_t axis=1) const;  Returns the Standard Deviation (Sigma). ;  ; virtual Double_t GetStdDevError (Int_t axis=1) const;  Return error of standard deviation estimation for Normal distribution. ;  ; virtual Double_t GetSumOfWeights () const;  Return the sum of weights excluding under/overflows. ;  ; virtual TArrayD * GetSumw2 ();  ; virtual const TArrayD * GetSumw2 () const;  ; virtual Int_t GetSumw2N () const;  ; virtual Float_t GetTickLength (Option_t *axis=""X"") const;  Return the ""axis"" tick length. ;  ; virtual Style_t GetTitleFont (Option_t *axis=""X"") const;  Return the ""axis"" title font. ;  ; virtual Float_t GetTitleOffset (Option_t *axis=""X"") const;  Return the ""axis"" title offset. ;  ; virtual Float_t GetTitleSize (Option_t *axis=""X"") const;  Return the ""axis"" title size. ;  ; TAxis * GetXaxis ();  ; const TAxis * GetXaxis () const;  ; TAxis * GetYaxis ();  ; const TAxis * GetYaxis () const;  ; TAxis * GetZaxis ();  ; const TAxis * GetZaxis () const;  ; virtual Double_t Integral (Int_t binx1, Int_t binx2, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2]. ;  ; virtual D",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:39055,Availability,error,error,39055,"  ; virtual TArrayD * GetSumw2 ();  ; virtual const TArrayD * GetSumw2 () const;  ; virtual Int_t GetSumw2N () const;  ; virtual Float_t GetTickLength (Option_t *axis=""X"") const;  Return the ""axis"" tick length. ;  ; virtual Style_t GetTitleFont (Option_t *axis=""X"") const;  Return the ""axis"" title font. ;  ; virtual Float_t GetTitleOffset (Option_t *axis=""X"") const;  Return the ""axis"" title offset. ;  ; virtual Float_t GetTitleSize (Option_t *axis=""X"") const;  Return the ""axis"" title size. ;  ; TAxis * GetXaxis ();  ; const TAxis * GetXaxis () const;  ; TAxis * GetYaxis ();  ; const TAxis * GetYaxis () const;  ; TAxis * GetZaxis ();  ; const TAxis * GetZaxis () const;  ; virtual Double_t Integral (Int_t binx1, Int_t binx2, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2]. ;  ; virtual Double_t Integral (Option_t *option="""") const;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2] and its error. ;  ; virtual Double_t Interpolate (Double_t x) const;  Given a point x, approximates the value via linear interpolation based on the two nearest bin centers. ;  ; virtual Double_t Interpolate (Double_t x, Double_t y) const;  2d Interpolation. Not yet implemented. ;  ; virtual Double_t Interpolate (Double_t x, Double_t y, Double_t z) const;  3d Interpolation. Not yet implemented. ;  ; TClass * IsA () const override;  ; Bool_t IsBinOverflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is overflow. ;  ; Bool_t IsBinUnderflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is underflow. ;  ; virtual Bool_t IsHighlight () const;  ; virtual Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using Kolmogorov test. ;  ; virtual void LabelsDeflate (Option_t *axis=""X"");  Reduce the number of bin",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:41441,Availability,error,errors,41441," ; Long64_t Merge (TCollection *list, Option_t *option);  Add all histograms in the collection to this histogram. ;  ; virtual Bool_t Multiply (const TH1 *h1);  Multiply this histogram by h1. ;  ; virtual Bool_t Multiply (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2. ;  ; virtual Bool_t Multiply (TF1 *f1, Double_t c1=1);  Performs the operation: ;  ; void Paint (Option_t *option="""") override;  Control routine to paint any kind of histograms. ;  ; void Print (Option_t *option="""") const override;  Print some global quantities for this histogram. ;  ; virtual void PutStats (Double_t *stats);  Replace current statistics with the values in array stats. ;  ; virtual TH1 * Rebin (Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr);  Rebin this histogram. ;  ; virtual void RebinAxis (Double_t x, TAxis *axis);  ; virtual TH1 * RebinX (Int_t ngroup=2, const char *newname="""");  ; virtual void Rebuild (Option_t *option="""");  Using the current bin info, recompute the arrays for contents and errors. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual void Reset (Option_t *option="""");  Reset this histogram: contents, errors, etc. ;  ; virtual void ResetStats ();  Reset the statistics including the number of entries and replace with values calculated from bin content. ;  ; void SaveAs (const char *filename=""hist"", Option_t *option="""") const override;  Save the histogram as .csv, .tsv or .txt. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void Scale (Double_t c1=1, Option_t *option="""");  Multiply this histogram by a constant c1. ;  ; virtual void SetAxisColor (Color_t color=1, Option_t *axis=""X"");  Set color to draw the axis line and tick marks. ;  ; virtual void SetAxisRange (Double_t xmin, Double",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:41635,Availability,error,errors,41635,"t c2=1, Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2. ;  ; virtual Bool_t Multiply (TF1 *f1, Double_t c1=1);  Performs the operation: ;  ; void Paint (Option_t *option="""") override;  Control routine to paint any kind of histograms. ;  ; void Print (Option_t *option="""") const override;  Print some global quantities for this histogram. ;  ; virtual void PutStats (Double_t *stats);  Replace current statistics with the values in array stats. ;  ; virtual TH1 * Rebin (Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr);  Rebin this histogram. ;  ; virtual void RebinAxis (Double_t x, TAxis *axis);  ; virtual TH1 * RebinX (Int_t ngroup=2, const char *newname="""");  ; virtual void Rebuild (Option_t *option="""");  Using the current bin info, recompute the arrays for contents and errors. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual void Reset (Option_t *option="""");  Reset this histogram: contents, errors, etc. ;  ; virtual void ResetStats ();  Reset the statistics including the number of entries and replace with values calculated from bin content. ;  ; void SaveAs (const char *filename=""hist"", Option_t *option="""") const override;  Save the histogram as .csv, .tsv or .txt. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void Scale (Double_t c1=1, Option_t *option="""");  Multiply this histogram by a constant c1. ;  ; virtual void SetAxisColor (Color_t color=1, Option_t *axis=""X"");  Set color to draw the axis line and tick marks. ;  ; virtual void SetAxisRange (Double_t xmin, Double_t xmax, Option_t *axis=""X"");  Set the ""axis"" range. ;  ; virtual void SetBarOffset (Float_t offset=0.25);  Set the bar offset as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:43140,Availability,error,error,43140,"am by a constant c1. ;  ; virtual void SetAxisColor (Color_t color=1, Option_t *axis=""X"");  Set color to draw the axis line and tick marks. ;  ; virtual void SetAxisRange (Double_t xmin, Double_t xmax, Option_t *axis=""X"");  Set the ""axis"" range. ;  ; virtual void SetBarOffset (Float_t offset=0.25);  Set the bar offset as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinContent (Int_t bin, Double_t content);  Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Doub",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:43264,Availability,error,error,43264,"am by a constant c1. ;  ; virtual void SetAxisColor (Color_t color=1, Option_t *axis=""X"");  Set color to draw the axis line and tick marks. ;  ; virtual void SetAxisRange (Double_t xmin, Double_t xmax, Option_t *axis=""X"");  Set the ""axis"" range. ;  ; virtual void SetBarOffset (Float_t offset=0.25);  Set the bar offset as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinContent (Int_t bin, Double_t content);  Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Doub",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:43389,Availability,error,error,43389,"virtual void SetBarOffset (Float_t offset=0.25);  Set the bar offset as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinContent (Int_t bin, Double_t content);  Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:43524,Availability,error,error,43524,"ual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinContent (Int_t bin, Double_t content);  Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis paramet",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:44823,Availability,mask,mask,44823,"t Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBinsLength (Int_t=-1);  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:44853,Availability,mask,mask,44853,"t Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBinsLength (Int_t=-1);  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:45799,Availability,error,error,45799,"le / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Double_t *error);  Replace bin errors by values in array error. ;  ; virtual void SetHighlight (Bool_t set=kTRUE);  Set highlight (enable/disable) mode for the histogram by default highlight mode is disable. ;  ; virtual void SetLabelColor (Color_t color=1, Option_t *axis=""X"");  Set axis labels color. ;  ; virtual void SetLabelFont (Style_t font=62, Option_t *axis=""X"");  Set font number used to draw axis labels. ;  ; virtual void SetLabelOffset (Float_t offset=0.005, Option_t *axis=""X"");  Set offset between axis and axis' labels. ;  ; virtual void SetLabelSize (Float_t size=0.02, Option_t *axis=""X"");  Set size of axis' labels. ;  ; virtual void SetMaximum (Double_t maximum=-1111);  ; virtual void SetMinimum (Double_t minimum=-1111);  ; void SetName (const char *name) override;  Change the name of this histogram. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the name and title of this histogram. ;  ; virtual void SetNdivisions (Int_t n=510, Option_",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:45820,Availability,error,errors,45820,"le / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Double_t *error);  Replace bin errors by values in array error. ;  ; virtual void SetHighlight (Bool_t set=kTRUE);  Set highlight (enable/disable) mode for the histogram by default highlight mode is disable. ;  ; virtual void SetLabelColor (Color_t color=1, Option_t *axis=""X"");  Set axis labels color. ;  ; virtual void SetLabelFont (Style_t font=62, Option_t *axis=""X"");  Set font number used to draw axis labels. ;  ; virtual void SetLabelOffset (Float_t offset=0.005, Option_t *axis=""X"");  Set offset between axis and axis' labels. ;  ; virtual void SetLabelSize (Float_t size=0.02, Option_t *axis=""X"");  Set size of axis' labels. ;  ; virtual void SetMaximum (Double_t maximum=-1111);  ; virtual void SetMinimum (Double_t minimum=-1111);  ; void SetName (const char *name) override;  Change the name of this histogram. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the name and title of this histogram. ;  ; virtual void SetNdivisions (Int_t n=510, Option_",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:45846,Availability,error,error,45846,"le / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Double_t *error);  Replace bin errors by values in array error. ;  ; virtual void SetHighlight (Bool_t set=kTRUE);  Set highlight (enable/disable) mode for the histogram by default highlight mode is disable. ;  ; virtual void SetLabelColor (Color_t color=1, Option_t *axis=""X"");  Set axis labels color. ;  ; virtual void SetLabelFont (Style_t font=62, Option_t *axis=""X"");  Set font number used to draw axis labels. ;  ; virtual void SetLabelOffset (Float_t offset=0.005, Option_t *axis=""X"");  Set offset between axis and axis' labels. ;  ; virtual void SetLabelSize (Float_t size=0.02, Option_t *axis=""X"");  Set size of axis' labels. ;  ; virtual void SetMaximum (Double_t maximum=-1111);  ; virtual void SetMinimum (Double_t minimum=-1111);  ; void SetName (const char *name) override;  Change the name of this histogram. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the name and title of this histogram. ;  ; virtual void SetNdivisions (Int_t n=510, Option_",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:51154,Availability,error,error,51154,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method,",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:51243,Availability,error,error,51243,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const c",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:51398,Availability,error,error,51398,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if o",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:51575,Availability,error,error,51575,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDe",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:54807,Availability,error,error,54807,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:60614,Availability,error,errors,60614,"E);  Sets the flag controlling the automatic add of histograms in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: cannot be inlined on Windows/NT. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the default buffer size for automatic histograms the parameter fgBufferSize may be changed via SetDefaultBufferSize. ;  ; static Bool_t GetDefaultSumw2 ();  Return kTRUE if TH1::Sumw2 must be called when creating new histograms. ;  ; static void SetDefaultBufferSize (Int_t buffersize=1000);  Static function to set the default buffer size for automatic histograms. ;  ; static void SetDefaultSumw2 (Bool_t sumw2=kTRUE);  When this static function is called with sumw2=kTRUE, all new histograms will automatically activate the storage of the sum of squares of errors, ie TH1::Sumw2 is automatically called. ;  ; static void SmoothArray (Int_t NN, Double_t *XX, Int_t ntimes=1);  Smooth array xx, translation of Hbook routine hsmoof.F. ;  ; static void StatOverflows (Bool_t flag=kTRUE);  if flag=kTRUE, underflows and overflows are used by the Fill functions in the computation of statistics (mean value, StdDev). ;  ; static TH1 * TransformHisto (TVirtualFFT *fft, TH1 *h_output, Option_t *option);  For a given transform (first parameter), fills the histogram (second parameter) with the transform output data, specified in the third parameter If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created and the user is responsible for deleting it. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:64277,Availability,error,error,64277,"tructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; virtual Double_t GetBinErrorSqUnchecked (Int_t bin) const;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual Double_t RetrieveBinContent (Int_t bin) const;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option=""""); ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:67305,Availability,error,errors,67305,"const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  Same limits and bins. ;  . Protected Attributes; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ! Histogram dimension (1, 2 or 3 dim) ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this histogram ;  ; Double_t fEntries;  Number of entries. ;  ; TList * fFunctions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in statistics. ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:70745,Availability,error,errors,70745," Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TH1.h>. Inheritance diagram for TH1:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. Enumeration specifying which axes can be extended. . EnumeratorkNoAxis NOTE: Must always be 0 !!! . kXaxis ; kYaxis ; kZaxis ; kAllAxes . Definition at line 71 of file TH1.h. ◆ anonymous enum. anonymous enum. Size of statistics data (size of array used in GetStats()/ PutStats ) . s[0] = sumw s[1] = sumw2; s[2] = sumwx s[3] = sumwx2; s[4] = sumwy s[5] = sumwy2 s[6] = sumwxy; s[7] = sumwz s[8] = sumwz2 s[9] = sumwxz s[10] = sumwyz; s[11] = sumwt s[12] = sumwt2 (11 and 12 used only by TProfile3D) . EnumeratorkNstat Size of statistics data (up to TProfile3D) . Definition at line 183 of file TH1.h. ◆ EBinErrorOpt. enum TH1::EBinErrorOpt. Enumeration specifying type of statistics for bin errors. . EnumeratorkNormal Errors with Normal (Wald) approximation: errorUp=errorLow= sqrt(N) . kPoisson Errors from Poisson interval at 68.3% (1 sigma) . kPoisson2 Errors from Poisson interval at 95% CL (~ 2 sigma) . Definition at line 64 of file TH1.h. ◆ EStatOverflows. enum TH1::EStatOverflows. Enumeration specifying the way to treat statoverflow. . EnumeratorkIgnore Override global flag ignoring the overflows. . kConsider Override global flag considering the overflows. . kNeutral Adapt to the global flag. . Definition at line 80 of file TH1.h. ◆ EStatusBits. enum TH1::EStatusBits. TH1 status bits. . EnumeratorkNoStats Don't draw stats box. . kUserContour User specified contour levels. . kLogX X-axis in log scale. . kIsZoomed Bit set when zooming on Y axis. . kNoTitle Don't draw the histogram title. . kIsAverage Bin contents are average (used by Add) . kIsNotW Histogram is forced to be not weighted even when the histogram is filled with weighted. . kAutoBinPTw",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:70814,Availability,error,errorUp,70814,"um  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TH1.h>. Inheritance diagram for TH1:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. Enumeration specifying which axes can be extended. . EnumeratorkNoAxis NOTE: Must always be 0 !!! . kXaxis ; kYaxis ; kZaxis ; kAllAxes . Definition at line 71 of file TH1.h. ◆ anonymous enum. anonymous enum. Size of statistics data (size of array used in GetStats()/ PutStats ) . s[0] = sumw s[1] = sumw2; s[2] = sumwx s[3] = sumwx2; s[4] = sumwy s[5] = sumwy2 s[6] = sumwxy; s[7] = sumwz s[8] = sumwz2 s[9] = sumwxz s[10] = sumwyz; s[11] = sumwt s[12] = sumwt2 (11 and 12 used only by TProfile3D) . EnumeratorkNstat Size of statistics data (up to TProfile3D) . Definition at line 183 of file TH1.h. ◆ EBinErrorOpt. enum TH1::EBinErrorOpt. Enumeration specifying type of statistics for bin errors. . EnumeratorkNormal Errors with Normal (Wald) approximation: errorUp=errorLow= sqrt(N) . kPoisson Errors from Poisson interval at 68.3% (1 sigma) . kPoisson2 Errors from Poisson interval at 95% CL (~ 2 sigma) . Definition at line 64 of file TH1.h. ◆ EStatOverflows. enum TH1::EStatOverflows. Enumeration specifying the way to treat statoverflow. . EnumeratorkIgnore Override global flag ignoring the overflows. . kConsider Override global flag considering the overflows. . kNeutral Adapt to the global flag. . Definition at line 80 of file TH1.h. ◆ EStatusBits. enum TH1::EStatusBits. TH1 status bits. . EnumeratorkNoStats Don't draw stats box. . kUserContour User specified contour levels. . kLogX X-axis in log scale. . kIsZoomed Bit set when zooming on Y axis. . kNoTitle Don't draw the histogram title. . kIsAverage Bin contents are average (used by Add) . kIsNotW Histogram is forced to be not weighted even when the histogram is filled with weighted. . kAutoBinPTwo different than 1. ; Use Power(2)-based algorithm for autobinning . kIsHig",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:70822,Availability,error,errorLow,70822,"um  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TH1.h>. Inheritance diagram for TH1:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. Enumeration specifying which axes can be extended. . EnumeratorkNoAxis NOTE: Must always be 0 !!! . kXaxis ; kYaxis ; kZaxis ; kAllAxes . Definition at line 71 of file TH1.h. ◆ anonymous enum. anonymous enum. Size of statistics data (size of array used in GetStats()/ PutStats ) . s[0] = sumw s[1] = sumw2; s[2] = sumwx s[3] = sumwx2; s[4] = sumwy s[5] = sumwy2 s[6] = sumwxy; s[7] = sumwz s[8] = sumwz2 s[9] = sumwxz s[10] = sumwyz; s[11] = sumwt s[12] = sumwt2 (11 and 12 used only by TProfile3D) . EnumeratorkNstat Size of statistics data (up to TProfile3D) . Definition at line 183 of file TH1.h. ◆ EBinErrorOpt. enum TH1::EBinErrorOpt. Enumeration specifying type of statistics for bin errors. . EnumeratorkNormal Errors with Normal (Wald) approximation: errorUp=errorLow= sqrt(N) . kPoisson Errors from Poisson interval at 68.3% (1 sigma) . kPoisson2 Errors from Poisson interval at 95% CL (~ 2 sigma) . Definition at line 64 of file TH1.h. ◆ EStatOverflows. enum TH1::EStatOverflows. Enumeration specifying the way to treat statoverflow. . EnumeratorkIgnore Override global flag ignoring the overflows. . kConsider Override global flag considering the overflows. . kNeutral Adapt to the global flag. . Definition at line 80 of file TH1.h. ◆ EStatusBits. enum TH1::EStatusBits. TH1 status bits. . EnumeratorkNoStats Don't draw stats box. . kUserContour User specified contour levels. . kLogX X-axis in log scale. . kIsZoomed Bit set when zooming on Y axis. . kNoTitle Don't draw the histogram title. . kIsAverage Bin contents are average (used by Add) . kIsNotW Histogram is forced to be not weighted even when the histogram is filled with weighted. . kAutoBinPTwo different than 1. ; Use Power(2)-based algorithm for autobinning . kIsHig",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:74356,Availability,error,errors,74356,". const char * ; title, . Int_t ; nbins, . const Double_t * ; xbins . ). protected . Constructor for variable bin size histograms using an input array of type double. ; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type double and size nbins+1 . Definition at line 741 of file TH1.cxx. ◆ ~TH1(). TH1::~TH1 ; (; ). override . Histogram default destructor. ; Definition at line 643 of file TH1.cxx. Member Function Documentation. ◆ Add() [1/3]. Bool_t TH1::Add ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1 . ). virtual . Replace contents of this histogram by the addition of h1 and h2. ; this = c1*h1 + c2*h2 if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; Note also that adding histogram with labels is not supported, histogram will be added merging them by bin number independently of the labels. For adding histogram ith labels one should use TH1::Merge; SPECIAL CASE (Average/Efficiency histograms) For histograms representing averages or efficiencies, one should compute the average of the two histograms and not the sum. One can mark a histogram to be an average histogram by setting its bit kIsAverage with myhist.SetBit(TH1::kIsAverage); Note that the two histograms must have their kIsAverage bit set; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; IMPORTANT NOTE2: You should be careful about the statistics of the returned histogram, whose statistics may be binned or unbinned, depending on whether c",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:74393,Availability,error,errors,74393,". const char * ; title, . Int_t ; nbins, . const Double_t * ; xbins . ). protected . Constructor for variable bin size histograms using an input array of type double. ; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type double and size nbins+1 . Definition at line 741 of file TH1.cxx. ◆ ~TH1(). TH1::~TH1 ; (; ). override . Histogram default destructor. ; Definition at line 643 of file TH1.cxx. Member Function Documentation. ◆ Add() [1/3]. Bool_t TH1::Add ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1 . ). virtual . Replace contents of this histogram by the addition of h1 and h2. ; this = c1*h1 + c2*h2 if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; Note also that adding histogram with labels is not supported, histogram will be added merging them by bin number independently of the labels. For adding histogram ith labels one should use TH1::Merge; SPECIAL CASE (Average/Efficiency histograms) For histograms representing averages or efficiencies, one should compute the average of the two histograms and not the sum. One can mark a histogram to be an average histogram by setting its bit kIsAverage with myhist.SetBit(TH1::kIsAverage); Note that the two histograms must have their kIsAverage bit set; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; IMPORTANT NOTE2: You should be careful about the statistics of the returned histogram, whose statistics may be binned or unbinned, depending on whether c",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:75116,Availability,error,errors,75116,"ile TH1.cxx. Member Function Documentation. ◆ Add() [1/3]. Bool_t TH1::Add ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1 . ). virtual . Replace contents of this histogram by the addition of h1 and h2. ; this = c1*h1 + c2*h2 if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; Note also that adding histogram with labels is not supported, histogram will be added merging them by bin number independently of the labels. For adding histogram ith labels one should use TH1::Merge; SPECIAL CASE (Average/Efficiency histograms) For histograms representing averages or efficiencies, one should compute the average of the two histograms and not the sum. One can mark a histogram to be an average histogram by setting its bit kIsAverage with myhist.SetBit(TH1::kIsAverage); Note that the two histograms must have their kIsAverage bit set; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; IMPORTANT NOTE2: You should be careful about the statistics of the returned histogram, whose statistics may be binned or unbinned, depending on whether c1 is negative, whether TAxis::kAxisRange is true, and whether TH1::ResetStats has been called on either this or h1. See TH1::GetStats.; ANOTHER SPECIAL CASE : h1 = h2 and c2 < 0 do a scaling this = c1 * h1 / (bin Volume); The function returns kFALSE if the Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 1104 of file TH1.cxx. ◆ Add() [2/3]. Bool_t TH1::Add ; (; const TH1 * ; h1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:75946,Availability,error,errors,75946,"ts bit kIsAverage with myhist.SetBit(TH1::kIsAverage); Note that the two histograms must have their kIsAverage bit set; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; IMPORTANT NOTE2: You should be careful about the statistics of the returned histogram, whose statistics may be binned or unbinned, depending on whether c1 is negative, whether TAxis::kAxisRange is true, and whether TH1::ResetStats has been called on either this or h1. See TH1::GetStats.; ANOTHER SPECIAL CASE : h1 = h2 and c2 < 0 do a scaling this = c1 * h1 / (bin Volume); The function returns kFALSE if the Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 1104 of file TH1.cxx. ◆ Add() [2/3]. Bool_t TH1::Add ; (; const TH1 * ; h1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set.; Note also that adding histogram with labels is not supported, histogram will be added merging them by bin number independently of the labels. For adding histogram with labels one should use TH1::Merge; SPECIAL CASE (Average/Efficiency histograms) For histograms representing averages or efficiencies, one should compute the average of the two histograms and not the sum. One can mark a histogram to be an average histogram by setting its bit kIsAverage with myhist.SetBit(TH1::kIsAverage); Note that the two histograms must have their kIsAverage bit set; IMPORTANT NOTE1: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor is used , ie this = t",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:75983,Availability,error,errors,75983,"ts bit kIsAverage with myhist.SetBit(TH1::kIsAverage); Note that the two histograms must have their kIsAverage bit set; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; IMPORTANT NOTE2: You should be careful about the statistics of the returned histogram, whose statistics may be binned or unbinned, depending on whether c1 is negative, whether TAxis::kAxisRange is true, and whether TH1::ResetStats has been called on either this or h1. See TH1::GetStats.; ANOTHER SPECIAL CASE : h1 = h2 and c2 < 0 do a scaling this = c1 * h1 / (bin Volume); The function returns kFALSE if the Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 1104 of file TH1.cxx. ◆ Add() [2/3]. Bool_t TH1::Add ; (; const TH1 * ; h1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set.; Note also that adding histogram with labels is not supported, histogram will be added merging them by bin number independently of the labels. For adding histogram with labels one should use TH1::Merge; SPECIAL CASE (Average/Efficiency histograms) For histograms representing averages or efficiencies, one should compute the average of the two histograms and not the sum. One can mark a histogram to be an average histogram by setting its bit kIsAverage with myhist.SetBit(TH1::kIsAverage); Note that the two histograms must have their kIsAverage bit set; IMPORTANT NOTE1: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor is used , ie this = t",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:76703,Availability,error,errors,76703,"he Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 1104 of file TH1.cxx. ◆ Add() [2/3]. Bool_t TH1::Add ; (; const TH1 * ; h1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set.; Note also that adding histogram with labels is not supported, histogram will be added merging them by bin number independently of the labels. For adding histogram with labels one should use TH1::Merge; SPECIAL CASE (Average/Efficiency histograms) For histograms representing averages or efficiencies, one should compute the average of the two histograms and not the sum. One can mark a histogram to be an average histogram by setting its bit kIsAverage with myhist.SetBit(TH1::kIsAverage); Note that the two histograms must have their kIsAverage bit set; IMPORTANT NOTE1: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor is used , ie this = this + c1*factor*h1 Use the other TH1::Add function if you do not want this feature; IMPORTANT NOTE3: You should be careful about the statistics of the returned histogram, whose statistics may be binned or unbinned, depending on whether c1 is negative, whether TAxis::kAxisRange is true, and whether TH1::ResetStats has been called on either this or h1. See TH1::GetStats.; The function return kFALSE if the Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 954 of file TH1.cxx. ◆ Add() [3/3]. Bool_t TH1::Add ; (; TF1 * ; f1, . Double_t ; c1 = 1, . Option_t * ; option = """" . ). virtual . Performs the operation: this = this + c1*f1 if errors are defined (see TH1::S",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:77648,Availability,error,errors,77648,"et; IMPORTANT NOTE1: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor is used , ie this = this + c1*factor*h1 Use the other TH1::Add function if you do not want this feature; IMPORTANT NOTE3: You should be careful about the statistics of the returned histogram, whose statistics may be binned or unbinned, depending on whether c1 is negative, whether TAxis::kAxisRange is true, and whether TH1::ResetStats has been called on either this or h1. See TH1::GetStats.; The function return kFALSE if the Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 954 of file TH1.cxx. ◆ Add() [3/3]. Bool_t TH1::Add ; (; TF1 * ; f1, . Double_t ; c1 = 1, . Option_t * ; option = """" . ). virtual . Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ; By default, the function is computed at the centre of the bin. if option ""I"" is specified (1-d histogram only), the integral of the function in each bin is used instead of the value of the function at the centre of the bin.; Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; The function return kFALSE if the Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 826 of file TH1.cxx. ◆ AddBinContent() [1/2]. void TH1::AddBinContent ; (; Int_t ; bin). virtual . Increment bin content by 1. ; Passing an out-of-range bin leads to undefined behavior ; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, and TH3D.",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:77685,Availability,error,errors,77685,"et; IMPORTANT NOTE1: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor is used , ie this = this + c1*factor*h1 Use the other TH1::Add function if you do not want this feature; IMPORTANT NOTE3: You should be careful about the statistics of the returned histogram, whose statistics may be binned or unbinned, depending on whether c1 is negative, whether TAxis::kAxisRange is true, and whether TH1::ResetStats has been called on either this or h1. See TH1::GetStats.; The function return kFALSE if the Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 954 of file TH1.cxx. ◆ Add() [3/3]. Bool_t TH1::Add ; (; TF1 * ; f1, . Double_t ; c1 = 1, . Option_t * ; option = """" . ). virtual . Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ; By default, the function is computed at the centre of the bin. if option ""I"" is specified (1-d histogram only), the integral of the function in each bin is used instead of the value of the function at the centre of the bin.; Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; The function return kFALSE if the Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 826 of file TH1.cxx. ◆ AddBinContent() [1/2]. void TH1::AddBinContent ; (; Int_t ; bin). virtual . Increment bin content by 1. ; Passing an out-of-range bin leads to undefined behavior ; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, and TH3D.",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:78036,Availability,error,errors,78036," You should be careful about the statistics of the returned histogram, whose statistics may be binned or unbinned, depending on whether c1 is negative, whether TAxis::kAxisRange is true, and whether TH1::ResetStats has been called on either this or h1. See TH1::GetStats.; The function return kFALSE if the Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 954 of file TH1.cxx. ◆ Add() [3/3]. Bool_t TH1::Add ; (; TF1 * ; f1, . Double_t ; c1 = 1, . Option_t * ; option = """" . ). virtual . Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ; By default, the function is computed at the centre of the bin. if option ""I"" is specified (1-d histogram only), the integral of the function in each bin is used instead of the value of the function at the centre of the bin.; Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; The function return kFALSE if the Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 826 of file TH1.cxx. ◆ AddBinContent() [1/2]. void TH1::AddBinContent ; (; Int_t ; bin). virtual . Increment bin content by 1. ; Passing an out-of-range bin leads to undefined behavior ; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, and TH3D.; Definition at line 1268 of file TH1.cxx. ◆ AddBinContent() [2/2]. void TH1::AddBinContent ; (; Int_t ; bin, . Double_t ; w . ). virtual . Increment bin content by a weight w. ; Passing an out-of-range bin leads to undefined behavior ; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, and TH3D.; Definition at line 127",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:92658,Availability,down,down,92658,"m variable with a distribution approximated by the normal probability distribution \( N(Wp_{i},\sigma_{i}^{2}) \) where \( \sigma_{i}^{2} \) is the variance of the weight wi. If we replace the variance \( \sigma_{i}^{2} \) with estimate \( s_{i}^{2} \) (sum of squares of weights of events in the ith bin) and the hypothesis of identity is valid, then the maximum likelihood estimator of pi,i=1,...,r, is ; \[; \hat{p}_{i} = \frac{Ww_{i}-Ns_{i}^{2}+\sqrt{(Ww_{i}-Ns_{i}^{2})^{2}+4W^{2}s_{i}^{2}n_{i}}}{2W^{2}}; \]. We may then use the test statistic ; \[; X^{2} = \sum_{i=1}^{r} \frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r} \frac{(w_{i}-W\hat{p}_{i})^{2}}{s_{i}^{2}}; \]. and it has approximately a \( \sigma^{2}_{(r-1)} \) distribution [2]. This test, as well as the original one [3], has a restriction on the expected frequencies. The expected frequencies recommended for the weighted histogram is more than 25. The value of the minimal expected frequency can be decreased down to 10 for the case when the weights of the events are close to constant. In the case of a weighted histogram if the number of events is unknown, then we can apply this recommendation for the equivalent number of events as ; \[; n_{i}^{equiv} = \frac{ w_{i}^{2} }{ s_{i}^{2} }; \]. The minimal expected frequency for an unweighted histogram must be 1. Notice that any usual (unweighted) histogram can be considered as a weighted histogram with events that have constant weights equal to 1. The variance \( z_{i}^{2} \) of the difference between the weight wi and the estimated expectation value of the weight is approximately equal to: ; \[; z_{i}^{2} = Var(w_{i}-W\hat{p}_{i}) = N\hat{p}_{i}(1-N\hat{p}_{i})\left(\frac{Ws_{i}^{2}}{\sqrt{(Ns_{i}^{2}-w_{i}W)^{2}+4W^{2}s_{i}^{2}n_{i}}}\right)^{2}+\frac{s_{i}^{2}}{4}\left(1+\frac{Ns_{i}^{2}-w_{i}W}{\sqrt{(Ns_{i}^{2}-w_{i}W)^{2}+4W^{2}s_{i}^{2}n_{i}}}\right)^{2}; \]. The residuals ; \[; r_{i} = \frac{w_{i}-W\hat{p}_{i}}{z_{i}}; \]. have approximately a ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:98752,Availability,robust,robustness,98752,"ized residuals plot (see Fig. 2c) and the normal Q-Q plot (see Fig. 2d) of residuals are not regular and we can identify the outlier or bin with a big influence on \( \chi^{2} \).; References:. [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to Association and Normal Correlation. Drapers' Co. Memoirs, Biometric Series No. 1, London.; [2] Gagunashvili, N., 2006. \( \sigma^{2} \) test for comparison of weighted and unweighted histograms. Statistical Problems in Particle Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05, Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44. Gagunashvili,N., Comparison of weighted and unweighted histograms, arXiv:physics/0605123, 2006.; [3] Cramer, H., 1946. Mathematical methods of statistics. Princeton University Press, Princeton.; [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables. Biometrics 29, 205-220.; [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity test in 2xN tables. Biometrics 21, 19-33.; [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis. John Wiley & Sons Inc., New York. . Definition at line 2008 of file TH1.cxx. ◆ Chi2TestX(). Double_t TH1::Chi2TestX ; (; const TH1 * ; h2, . Double_t & ; chi2, . Int_t & ; ndf, . Int_t & ; igood, . Option_t * ; option = ""UU"", . Double_t * ; res = nullptr . ); const. virtual . The computation routine of the Chisquare test. ; For the method description, see Chi2Test() function.; Returnsp-value ; Parameters. [in]h2the second histogram ; [in]option; ""UU"" = experiment experiment comparison (unweighted-unweighted); ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first histogram should be unweighted; ""WW"" = MC MC comparison (weighted-weighted); ""NORM"" = if one or both histograms is scaled; ""OF"" = overflows included; ""UF"" = underflows included by default underflows and overflows are not included . [out]igoodtest output; igood=0 - no problems; For unweighted unwe",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:101026,Availability,error,error,101026,"2 are satisfied'. For unweighted weighted comparison; igood=1'There is a bin in the 1st histogram with less then 1 event'; igood=2'There is a bin in the 2nd histogram with less then 10 effective number of events'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'. For weighted weighted comparison; igood=1'There is a bin in the 1st histogram with less then 10 effective number of events'; igood=2'There is a bin in the 2nd histogram with less then 10 effective number of events'; igood=3'when the conditions for igood=1 and igood=2 are satisfied' . [out]chi2chisquare of the test ; [out]ndfnumber of degrees of freedom (important, when both histograms have the same empty bins) ; [out]resnormalized residuals for further analysis . Definition at line 2067 of file TH1.cxx. ◆ Chisquare(). Double_t TH1::Chisquare ; (; TF1 * ; func, . Option_t * ; option = """" . ); const. virtual . Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ; Use option ""R"" for restricting the chisquare calculation to the given range of the function Use option ""L"" for using the chisquare based on the poisson likelihood (Baker-Cousins Chisquare) Use option ""P"" for using the Pearson chisquare based on the expected bin errors ; Definition at line 2496 of file TH1.cxx. ◆ Class(). static TClass * TH1::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TH1::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TH1::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 444 of file TH1.h. ◆ ClearUnderflowAndOverflow(). void TH1::ClearUnderflowAndOverflow ; (; ). virtual . Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:101348,Availability,error,errors,101348,"good=2 are satisfied'. For weighted weighted comparison; igood=1'There is a bin in the 1st histogram with less then 10 effective number of events'; igood=2'There is a bin in the 2nd histogram with less then 10 effective number of events'; igood=3'when the conditions for igood=1 and igood=2 are satisfied' . [out]chi2chisquare of the test ; [out]ndfnumber of degrees of freedom (important, when both histograms have the same empty bins) ; [out]resnormalized residuals for further analysis . Definition at line 2067 of file TH1.cxx. ◆ Chisquare(). Double_t TH1::Chisquare ; (; TF1 * ; func, . Option_t * ; option = """" . ); const. virtual . Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ; Use option ""R"" for restricting the chisquare calculation to the given range of the function Use option ""L"" for using the chisquare based on the poisson likelihood (Baker-Cousins Chisquare) Use option ""P"" for using the Pearson chisquare based on the expected bin errors ; Definition at line 2496 of file TH1.cxx. ◆ Class(). static TClass * TH1::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TH1::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TH1::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 444 of file TH1.h. ◆ ClearUnderflowAndOverflow(). void TH1::ClearUnderflowAndOverflow ; (; ). virtual . Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ; Definition at line 2517 of file TH1.cxx. ◆ Clone(). TObject * TH1::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a comp",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:102972,Availability,error,error,102972," also cleared, since there is no more content in the bins. ; Definition at line 2517 of file TH1.cxx. ◆ Clone(). TObject * TH1::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a complete copy of the underlying object. ; If 'newname' is set, the copy's name will be set to that name. ; Reimplemented from TObject.; Reimplemented in TH2Poly.; Definition at line 2752 of file TH1.cxx. ◆ ComputeIntegral(). Double_t TH1::ComputeIntegral ; (; Bool_t ; onlyPositive = false). virtual . Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; This function is automatically called by GetRandom when the fIntegral array does not exist or when the number of entries in the histogram has changed since the previous call to GetRandom. The resulting integral is normalized to 1. If the routine is called with the onlyPositive flag set an error will be produced in case of negative bin content and a NaN value returned Returns1 if success, 0 if integral is zero, NAN if onlyPositive-test fails ; Reimplemented in TH2Poly.; Definition at line 2537 of file TH1.cxx. ◆ Copy(). void TH1::Copy ; (; TObject & ; obj); const. overridevirtual . Copy this histogram structure to newth1. ; Note that this function does not copy the list of associated functions. Use TObject::Clone to make a full copy of a histogram.; Note also that the histogram it will be created in gDirectory (if AddDirectoryStatus()=true) or will not be added to any directory if AddDirectoryStatus()=false independently of the current directory stored in the original histogram ; Reimplemented from TObject.; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, TProfile3D, TH2Poly, and TH1K.; Definition at line 2671 of file TH1.cxx. ◆ DeclFileName(). static const char * TH1::DeclFileName ; (; ). inlinestatic . ReturnsName of the ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:105054,Availability,error,errors,105054,"inition at line 444 of file TH1.h. ◆ DirectoryAutoAdd(). void TH1::DirectoryAutoAdd ; (; TDirectory * ; dir). virtual . Perform the automatic addition of the histogram to the given directory. ; Note this function is called in place when the semantic requires this object to be added to a directory (I.e. when being read from a TKey or being Cloned) ; Definition at line 2801 of file TH1.cxx. ◆ DistancetoPrimitive(). Int_t TH1::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a line. ; Compute the closest distance of approach from point px,py to elements of a histogram. The distance is computed in pixels units.; Algorithm:; Currently, this simple model computes the distance from the mouse to the histogram contour only. ; Reimplemented from TObject.; Definition at line 2823 of file TH1.cxx. ◆ Divide() [1/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1). virtual . Divide this histogram by h1. ; this = this/h1 if errors are defined (see TH1::Sumw2), errors are also recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. See the other TH1::Divide that gives the possibility to optionally compute binomial errors.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Scale; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2908 of file TH1.cxx. ◆ Divide() [2/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by the division of h1 by h2. ; this = c1*h1/(c2*h2); If errors are defined (see TH1::Sumw2), errors are also recalculated Note that if h1 or h2 have ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:105091,Availability,error,errors,105091,"inition at line 444 of file TH1.h. ◆ DirectoryAutoAdd(). void TH1::DirectoryAutoAdd ; (; TDirectory * ; dir). virtual . Perform the automatic addition of the histogram to the given directory. ; Note this function is called in place when the semantic requires this object to be added to a directory (I.e. when being read from a TKey or being Cloned) ; Definition at line 2801 of file TH1.cxx. ◆ DistancetoPrimitive(). Int_t TH1::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a line. ; Compute the closest distance of approach from point px,py to elements of a histogram. The distance is computed in pixels units.; Algorithm:; Currently, this simple model computes the distance from the mouse to the histogram contour only. ; Reimplemented from TObject.; Definition at line 2823 of file TH1.cxx. ◆ Divide() [1/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1). virtual . Divide this histogram by h1. ; this = this/h1 if errors are defined (see TH1::Sumw2), errors are also recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. See the other TH1::Divide that gives the possibility to optionally compute binomial errors.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Scale; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2908 of file TH1.cxx. ◆ Divide() [2/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by the division of h1 by h2. ; this = c1*h1/(c2*h2); If errors are defined (see TH1::Sumw2), errors are also recalculated Note that if h1 or h2 have ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:105225,Availability,error,errors,105225,"o the given directory. ; Note this function is called in place when the semantic requires this object to be added to a directory (I.e. when being read from a TKey or being Cloned) ; Definition at line 2801 of file TH1.cxx. ◆ DistancetoPrimitive(). Int_t TH1::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a line. ; Compute the closest distance of approach from point px,py to elements of a histogram. The distance is computed in pixels units.; Algorithm:; Currently, this simple model computes the distance from the mouse to the histogram contour only. ; Reimplemented from TObject.; Definition at line 2823 of file TH1.cxx. ◆ Divide() [1/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1). virtual . Divide this histogram by h1. ; this = this/h1 if errors are defined (see TH1::Sumw2), errors are also recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. See the other TH1::Divide that gives the possibility to optionally compute binomial errors.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Scale; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2908 of file TH1.cxx. ◆ Divide() [2/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by the division of h1 by h2. ; this = c1*h1/(c2*h2); If errors are defined (see TH1::Sumw2), errors are also recalculated Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. However, if option =""B"" is s",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:105365,Availability,error,errors,105365,"requires this object to be added to a directory (I.e. when being read from a TKey or being Cloned) ; Definition at line 2801 of file TH1.cxx. ◆ DistancetoPrimitive(). Int_t TH1::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a line. ; Compute the closest distance of approach from point px,py to elements of a histogram. The distance is computed in pixels units.; Algorithm:; Currently, this simple model computes the distance from the mouse to the histogram contour only. ; Reimplemented from TObject.; Definition at line 2823 of file TH1.cxx. ◆ Divide() [1/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1). virtual . Divide this histogram by h1. ; this = this/h1 if errors are defined (see TH1::Sumw2), errors are also recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. See the other TH1::Divide that gives the possibility to optionally compute binomial errors.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Scale; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2908 of file TH1.cxx. ◆ Divide() [2/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by the division of h1 by h2. ; this = c1*h1/(c2*h2); If errors are defined (see TH1::Sumw2), errors are also recalculated Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. However, if option =""B"" is specified, Binomial errors are computed. In this case c1 and c2 do not make real s",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:105415,Availability,error,errors,105415,"ion at line 2801 of file TH1.cxx. ◆ DistancetoPrimitive(). Int_t TH1::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a line. ; Compute the closest distance of approach from point px,py to elements of a histogram. The distance is computed in pixels units.; Algorithm:; Currently, this simple model computes the distance from the mouse to the histogram contour only. ; Reimplemented from TObject.; Definition at line 2823 of file TH1.cxx. ◆ Divide() [1/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1). virtual . Divide this histogram by h1. ; this = this/h1 if errors are defined (see TH1::Sumw2), errors are also recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. See the other TH1::Divide that gives the possibility to optionally compute binomial errors.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Scale; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2908 of file TH1.cxx. ◆ Divide() [2/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by the division of h1 by h2. ; this = c1*h1/(c2*h2); If errors are defined (see TH1::Sumw2), errors are also recalculated Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. However, if option =""B"" is specified, Binomial errors are computed. In this case c1 and c2 do not make real sense and they are ignored.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you shoul",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:105984,Availability,error,errors,105984,"if errors are defined (see TH1::Sumw2), errors are also recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. See the other TH1::Divide that gives the possibility to optionally compute binomial errors.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Scale; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2908 of file TH1.cxx. ◆ Divide() [2/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by the division of h1 by h2. ; this = c1*h1/(c2*h2); If errors are defined (see TH1::Sumw2), errors are also recalculated Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. However, if option =""B"" is specified, Binomial errors are computed. In this case c1 and c2 do not make real sense and they are ignored.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; Please note also that in the binomial case errors are calculated using standard binomial statistics, which means when b1 = b2, the error is zero. If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower error for the case b1=b2.; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at li",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:106021,Availability,error,errors,106021,"if errors are defined (see TH1::Sumw2), errors are also recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. See the other TH1::Divide that gives the possibility to optionally compute binomial errors.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Scale; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2908 of file TH1.cxx. ◆ Divide() [2/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by the division of h1 by h2. ; this = c1*h1/(c2*h2); If errors are defined (see TH1::Sumw2), errors are also recalculated Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. However, if option =""B"" is specified, Binomial errors are computed. In this case c1 and c2 do not make real sense and they are ignored.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; Please note also that in the binomial case errors are calculated using standard binomial statistics, which means when b1 = b2, the error is zero. If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower error for the case b1=b2.; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at li",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:106161,Availability,error,errors,106161," for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. See the other TH1::Divide that gives the possibility to optionally compute binomial errors.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Scale; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2908 of file TH1.cxx. ◆ Divide() [2/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by the division of h1 by h2. ; this = c1*h1/(c2*h2); If errors are defined (see TH1::Sumw2), errors are also recalculated Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. However, if option =""B"" is specified, Binomial errors are computed. In this case c1 and c2 do not make real sense and they are ignored.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; Please note also that in the binomial case errors are calculated using standard binomial statistics, which means when b1 = b2, the error is zero. If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower error for the case b1=b2.; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2966 of file TH1.cxx. ◆ Divide() [3/3]. Bool_t TH1::Divide ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the ope",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:106264,Availability,error,errors,106264,"uming uncorrelated histograms. See the other TH1::Divide that gives the possibility to optionally compute binomial errors.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Scale; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2908 of file TH1.cxx. ◆ Divide() [2/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by the division of h1 by h2. ; this = c1*h1/(c2*h2); If errors are defined (see TH1::Sumw2), errors are also recalculated Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. However, if option =""B"" is specified, Binomial errors are computed. In this case c1 and c2 do not make real sense and they are ignored.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; Please note also that in the binomial case errors are calculated using standard binomial statistics, which means when b1 = b2, the error is zero. If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower error for the case b1=b2.; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2966 of file TH1.cxx. ◆ Divide() [3/3]. Bool_t TH1::Divide ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), e",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:106395,Availability,error,errors,106395," errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Scale; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2908 of file TH1.cxx. ◆ Divide() [2/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by the division of h1 by h2. ; this = c1*h1/(c2*h2); If errors are defined (see TH1::Sumw2), errors are also recalculated Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. However, if option =""B"" is specified, Binomial errors are computed. In this case c1 and c2 do not make real sense and they are ignored.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; Please note also that in the binomial case errors are calculated using standard binomial statistics, which means when b1 = b2, the error is zero. If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower error for the case b1=b2.; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2966 of file TH1.cxx. ◆ Divide() [3/3]. Bool_t TH1::Divide ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:106596,Availability,error,errors,106596,"turn kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2908 of file TH1.cxx. ◆ Divide() [2/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by the division of h1 by h2. ; this = c1*h1/(c2*h2); If errors are defined (see TH1::Sumw2), errors are also recalculated Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. However, if option =""B"" is specified, Binomial errors are computed. In this case c1 and c2 do not make real sense and they are ignored.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; Please note also that in the binomial case errors are calculated using standard binomial statistics, which means when b1 = b2, the error is zero. If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower error for the case b1=b2.; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2966 of file TH1.cxx. ◆ Divide() [3/3]. Bool_t TH1::Divide ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; The function return kFALSE if the divide operation faile",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:106684,Availability,error,error,106684,"turn kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2908 of file TH1.cxx. ◆ Divide() [2/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by the division of h1 by h2. ; this = c1*h1/(c2*h2); If errors are defined (see TH1::Sumw2), errors are also recalculated Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. However, if option =""B"" is specified, Binomial errors are computed. In this case c1 and c2 do not make real sense and they are ignored.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; Please note also that in the binomial case errors are calculated using standard binomial statistics, which means when b1 = b2, the error is zero. If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower error for the case b1=b2.; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2966 of file TH1.cxx. ◆ Divide() [3/3]. Bool_t TH1::Divide ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; The function return kFALSE if the divide operation faile",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:106732,Availability,error,errors,106732,", . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by the division of h1 by h2. ; this = c1*h1/(c2*h2); If errors are defined (see TH1::Sumw2), errors are also recalculated Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. However, if option =""B"" is specified, Binomial errors are computed. In this case c1 and c2 do not make real sense and they are ignored.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; Please note also that in the binomial case errors are calculated using standard binomial statistics, which means when b1 = b2, the error is zero. If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower error for the case b1=b2.; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2966 of file TH1.cxx. ◆ Divide() [3/3]. Bool_t TH1::Divide ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; The function return kFALSE if the divide operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 2840 of file TH1.cxx. ◆ DoFillN(). void TH1::DoFillN ; (; Int_t ; ntimes, . const Double_t * ; x, . const Double_t * ; w, . Int_t ; ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:106892,Availability,error,error,106892,", . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by the division of h1 by h2. ; this = c1*h1/(c2*h2); If errors are defined (see TH1::Sumw2), errors are also recalculated Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. However, if option =""B"" is specified, Binomial errors are computed. In this case c1 and c2 do not make real sense and they are ignored.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; Please note also that in the binomial case errors are calculated using standard binomial statistics, which means when b1 = b2, the error is zero. If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower error for the case b1=b2.; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2966 of file TH1.cxx. ◆ Divide() [3/3]. Bool_t TH1::Divide ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; The function return kFALSE if the divide operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 2840 of file TH1.cxx. ◆ DoFillN(). void TH1::DoFillN ; (; Int_t ; ntimes, . const Double_t * ; x, . const Double_t * ; w, . Int_t ; ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:107212,Availability,error,errors,107212,"ver, if option =""B"" is specified, Binomial errors are computed. In this case c1 and c2 do not make real sense and they are ignored.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; Please note also that in the binomial case errors are calculated using standard binomial statistics, which means when b1 = b2, the error is zero. If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower error for the case b1=b2.; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2966 of file TH1.cxx. ◆ Divide() [3/3]. Bool_t TH1::Divide ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; The function return kFALSE if the divide operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 2840 of file TH1.cxx. ◆ DoFillN(). void TH1::DoFillN ; (; Int_t ; ntimes, . const Double_t * ; x, . const Double_t * ; w, . Int_t ; stride = 1 . ). protectedvirtual . Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ; Definition at line 3473 of file TH1.cxx. ◆ DoIntegral(). Double_t TH1::DoIntegral ; (; Int_t ; ix1, . Int_t ; ix2, . Int_t ; iy1, . Int_t ; iy2, . Int_t ; iz1, . Int_t ; iz2, . Double_t & ; err, . Option_t * ; opt, . Bool_t ; doerr = kFALSE . ); const. protectedvirtual . Internal fu",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:107249,Availability,error,errors,107249,"ver, if option =""B"" is specified, Binomial errors are computed. In this case c1 and c2 do not make real sense and they are ignored.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; Please note also that in the binomial case errors are calculated using standard binomial statistics, which means when b1 = b2, the error is zero. If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower error for the case b1=b2.; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2966 of file TH1.cxx. ◆ Divide() [3/3]. Bool_t TH1::Divide ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; The function return kFALSE if the divide operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 2840 of file TH1.cxx. ◆ DoFillN(). void TH1::DoFillN ; (; Int_t ; ntimes, . const Double_t * ; x, . const Double_t * ; w, . Int_t ; stride = 1 . ). protectedvirtual . Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ; Definition at line 3473 of file TH1.cxx. ◆ DoIntegral(). Double_t TH1::DoIntegral ; (; Int_t ; ix1, . Int_t ; ix2, . Int_t ; iy1, . Int_t ; iy2, . Int_t ; iz1, . Int_t ; iz2, . Double_t & ; err, . Option_t * ; opt, . Bool_t ; doerr = kFALSE . ); const. protectedvirtual . Internal fu",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:107374,Availability,error,errors,107374," errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; Please note also that in the binomial case errors are calculated using standard binomial statistics, which means when b1 = b2, the error is zero. If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower error for the case b1=b2.; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2966 of file TH1.cxx. ◆ Divide() [3/3]. Bool_t TH1::Divide ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; The function return kFALSE if the divide operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 2840 of file TH1.cxx. ◆ DoFillN(). void TH1::DoFillN ; (; Int_t ; ntimes, . const Double_t * ; x, . const Double_t * ; w, . Int_t ; stride = 1 . ). protectedvirtual . Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ; Definition at line 3473 of file TH1.cxx. ◆ DoIntegral(). Double_t TH1::DoIntegral ; (; Int_t ; ix1, . Int_t ; ix2, . Int_t ; iy1, . Int_t ; iy2, . Int_t ; iz1, . Int_t ; iz2, . Double_t & ; err, . Option_t * ; opt, . Bool_t ; doerr = kFALSE . ); const. protectedvirtual . Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ; Definition at line 7977 o",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:108264,Availability,error,error,108264,"ion range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Divide; The function return kFALSE if the divide operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 2840 of file TH1.cxx. ◆ DoFillN(). void TH1::DoFillN ; (; Int_t ; ntimes, . const Double_t * ; x, . const Double_t * ; w, . Int_t ; stride = 1 . ). protectedvirtual . Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ; Definition at line 3473 of file TH1.cxx. ◆ DoIntegral(). Double_t TH1::DoIntegral ; (; Int_t ; ix1, . Int_t ; ix2, . Int_t ; iy1, . Int_t ; iy2, . Int_t ; iz1, . Int_t ; iz2, . Double_t & ; err, . Option_t * ; opt, . Bool_t ; doerr = kFALSE . ); const. protectedvirtual . Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ; Definition at line 7977 of file TH1.cxx. ◆ Draw(). void TH1::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this histogram with options. ; Histograms are drawn via the THistPainter class. Each histogram has a pointer to its own painter (to be usable in a multithreaded program). The same histogram can be drawn with different options in different pads. When a histogram drawn in a pad is deleted, the histogram is automatically removed from the pad or pads where it was drawn. If a histogram is drawn in a pad, then filled again, the new status of the histogram will be automatically shown in the pad next time the pad is updated. One does not need to redraw the histogram. To draw the current version of a histogram in a pad, one can use h->DrawCopy(); This makes a clone of the histogram. Once the clone is drawn, the original histogram may be modified or deleted without affecting the aspect of the clone. By default, TH1:",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:112937,Availability,error,errors,112937," distributed according to the Poisson distribution, with f1 as the mean. . Definition at line 3192 of file TH1.cxx. ◆ ExecuteEvent(). void TH1::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a histogram is clicked with the locator; If Left button clicked on the bin top value, then the content of this bin is modified according to the new position of the mouse when it is released. ; Reimplemented from TObject.; Definition at line 3240 of file TH1.cxx. ◆ ExtendAxis(). void TH1::ExtendAxis ; (; Double_t ; x, . TAxis * ; axis . ). virtual . Histogram is resized along axis such that x is in the axis range. ; The new axis limits are recomputed by doubling iteratively the current axis range until the specified value x is within the limits. The algorithm makes a copy of the histogram, then loops on all bins of the old histogram to fill the extended histogram. Takes into account errors (Sumw2) if any. The algorithm works for 1-d, 2-D and 3-D histograms. The axis must be extendable before invoking this function. Ex:; h->GetXaxis()->SetCanExtend(kTRUE);; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93. Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6504 of file TH1.cxx. ◆ FFT(). TH1 * TH1::FFT ; (; TH1 * ; h_output, . Option_t * ; option . ). virtual . This function allows to do discrete Fourier transforms of TH1 and TH2. ; Available transform types and flags are described below.; To extract more information about the transform, use the function TVirtualFFT::GetCurrentTransform() to get a pointer to the current transform object.; Parameters. [out]h_outputhistogram for the output. If a null pointer is passed, a new histogram is created and returned, otherwise, the provided histogram is used and should be big enough ; [in]optionoption parameters consists of 3 parts:; option on what to return; ""RE"" - returns a histogram of the real ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:124111,Availability,avail,available,124111,"aximum will be stored here. false if failed (e.g. if the initial axis limits are wrong or the new range is more than \( 2^{64} \) times the old one). ; Definition at line 6460 of file TH1.cxx. ◆ FindObject() [1/2]. TObject * TH1::FindObject ; (; const char * ; name); const. overridevirtual . Search object named name in the list of functions. ; Reimplemented from TObject.; Definition at line 3857 of file TH1.cxx. ◆ FindObject() [2/2]. TObject * TH1::FindObject ; (; const TObject * ; obj); const. overridevirtual . Search object obj in the list of functions. ; Reimplemented from TObject.; Definition at line 3866 of file TH1.cxx. ◆ Fit() [1/2]. TFitResultPtr TH1::Fit ; (; const char * ; fname, . Option_t * ; option = """", . Option_t * ; goption = """", . Double_t ; xxmin = 0, . Double_t ; xxmax = 0 . ). virtual . Fit histogram with function fname. ; fname is the name of a function available in the global ROOT list of functions gROOT->GetListOfFunctions The list include any TF1 object created by the user plus some pre-defined functions which are automatically created by ROOT the first time a pre-defined function is requested from gROOT (i.e. when calling gROOT->GetFunction(const char *name)). These pre-defined functions are:; gaus, gausn where gausn is the normalized Gaussian; landau, landaun; expo; pol1,...9, chebyshev1,...9. For printing the list of all available functions do: TF1::InitStandardFunctions(); // not needed if `gROOT->GetFunction` is called before; gROOT->GetListOfFunctions()->ls(); fname can also be a formula that is accepted by the linear fitter containing the special operator ++, representing linear components separated by ++ sign, for example x++sin(x) for fitting [0]*x+[1]*sin(x); This function finds a pointer to the TF1 object with name fname and calls TH1::Fit(TF1 *, Option_t *, Option_t *,; Double_t, Double_t). See there for the fitting options and the details about fitting histograms ; Definition at line 3898 of file TH1.cxx. ◆ Fit() [2/2]. TFitResult",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:124594,Availability,avail,available,124594,"ition at line 3866 of file TH1.cxx. ◆ Fit() [1/2]. TFitResultPtr TH1::Fit ; (; const char * ; fname, . Option_t * ; option = """", . Option_t * ; goption = """", . Double_t ; xxmin = 0, . Double_t ; xxmax = 0 . ). virtual . Fit histogram with function fname. ; fname is the name of a function available in the global ROOT list of functions gROOT->GetListOfFunctions The list include any TF1 object created by the user plus some pre-defined functions which are automatically created by ROOT the first time a pre-defined function is requested from gROOT (i.e. when calling gROOT->GetFunction(const char *name)). These pre-defined functions are:; gaus, gausn where gausn is the normalized Gaussian; landau, landaun; expo; pol1,...9, chebyshev1,...9. For printing the list of all available functions do: TF1::InitStandardFunctions(); // not needed if `gROOT->GetFunction` is called before; gROOT->GetListOfFunctions()->ls(); fname can also be a formula that is accepted by the linear fitter containing the special operator ++, representing linear components separated by ++ sign, for example x++sin(x) for fitting [0]*x+[1]*sin(x); This function finds a pointer to the TF1 object with name fname and calls TH1::Fit(TF1 *, Option_t *, Option_t *,; Double_t, Double_t). See there for the fitting options and the details about fitting histograms ; Definition at line 3898 of file TH1.cxx. ◆ Fit() [2/2]. TFitResultPtr TH1::Fit ; (; TF1 * ; f1, . Option_t * ; option = """", . Option_t * ; goption = """", . Double_t ; xxmin = 0, . Double_t ; xxmax = 0 . ). virtual . Fit histogram with the function pointer f1. ; Parameters. [in]f1pointer to the function object ; [in]optionstring defining the fit options (see table below). ; [in]goptionspecify a list of graphics options. See TH1::Draw for a complete list of these options. ; [in]xxminlower fitting range ; [in]xxmaxupper fitting range . ReturnsA smart pointer to the TFitResult class. Histogram Fitting Options; Here is the full list of fit options that can be gi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:126335,Availability,error,errors,126335,"ax = 0 . ). virtual . Fit histogram with the function pointer f1. ; Parameters. [in]f1pointer to the function object ; [in]optionstring defining the fit options (see table below). ; [in]goptionspecify a list of graphics options. See TH1::Draw for a complete list of these options. ; [in]xxminlower fitting range ; [in]xxmaxupper fitting range . ReturnsA smart pointer to the TFitResult class. Histogram Fitting Options; Here is the full list of fit options that can be given in the parameter option. Several options can be used together by concatanating the strings without the need of any delimiters. option description . ""L"" Uses a log likelihood method (default is chi-square method). To be used when the histogram represents counts. . ""WL"" Weighted log likelihood method. To be used when the histogram has been filled with weights different than 1. This is needed for getting correct parameter uncertainties for weighted fits. . ""P"" Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value. . ""MULTI"" Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape. . ""W"" Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins. . ""WW"" Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins. . ""I"" Uses the integral of function in the bin instead of the default bin center value. . ""F"" Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter. . ""U"" Uses a user specified objective function (e.g. user providedlikelihood function) defined using TVirtualFitter::SetFCN . ""E"" Performs a better parameter errors estimation using the Minos technique for all fit parameters. . ""M"" Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:126399,Availability,error,error,126399,"s. [in]f1pointer to the function object ; [in]optionstring defining the fit options (see table below). ; [in]goptionspecify a list of graphics options. See TH1::Draw for a complete list of these options. ; [in]xxminlower fitting range ; [in]xxmaxupper fitting range . ReturnsA smart pointer to the TFitResult class. Histogram Fitting Options; Here is the full list of fit options that can be given in the parameter option. Several options can be used together by concatanating the strings without the need of any delimiters. option description . ""L"" Uses a log likelihood method (default is chi-square method). To be used when the histogram represents counts. . ""WL"" Weighted log likelihood method. To be used when the histogram has been filled with weights different than 1. This is needed for getting correct parameter uncertainties for weighted fits. . ""P"" Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value. . ""MULTI"" Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape. . ""W"" Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins. . ""WW"" Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins. . ""I"" Uses the integral of function in the bin instead of the default bin center value. . ""F"" Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter. . ""U"" Uses a user specified objective function (e.g. user providedlikelihood function) defined using TVirtualFitter::SetFCN . ""E"" Performs a better parameter errors estimation using the Minos technique for all fit parameters. . ""M"" Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve the found local minimum by searching for a better one. . ""S"" The full result",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:127191,Availability,error,errors,127191,"s is needed for getting correct parameter uncertainties for weighted fits. . ""P"" Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value. . ""MULTI"" Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape. . ""W"" Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins. . ""WW"" Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins. . ""I"" Uses the integral of function in the bin instead of the default bin center value. . ""F"" Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter. . ""U"" Uses a user specified objective function (e.g. user providedlikelihood function) defined using TVirtualFitter::SetFCN . ""E"" Performs a better parameter errors estimation using the Minos technique for all fit parameters. . ""M"" Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve the found local minimum by searching for a better one. . ""S"" The full result of the fit is returned in the TFitResultPtr. This is needed to get the covariance matrix of the fit. See TFitResult and the base class ROOT::Math::FitResult. . ""Q"" Quiet mode (minimum printing) . ""V"" Verbose mode (default is between Q and V) . ""+"" Adds this new fitted function to the list of fitted functions. By default, the previous function is deleted and only the last one is kept. . ""N"" Does not store the graphics function, does not draw the histogram with the function after fitting. . ""0"" Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions. . ""R"" Fit using a fitting range specified in the function range with TF1::SetRange. . ""B"" Use this option when you w",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:127293,Availability,avail,available,127293,"ses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value. . ""MULTI"" Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape. . ""W"" Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins. . ""WW"" Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins. . ""I"" Uses the integral of function in the bin instead of the default bin center value. . ""F"" Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter. . ""U"" Uses a user specified objective function (e.g. user providedlikelihood function) defined using TVirtualFitter::SetFCN . ""E"" Performs a better parameter errors estimation using the Minos technique for all fit parameters. . ""M"" Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve the found local minimum by searching for a better one. . ""S"" The full result of the fit is returned in the TFitResultPtr. This is needed to get the covariance matrix of the fit. See TFitResult and the base class ROOT::Math::FitResult. . ""Q"" Quiet mode (minimum printing) . ""V"" Verbose mode (default is between Q and V) . ""+"" Adds this new fitted function to the list of fitted functions. By default, the previous function is deleted and only the last one is kept. . ""N"" Does not store the graphics function, does not draw the histogram with the function after fitting. . ""0"" Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions. . ""R"" Fit using a fitting range specified in the function range with TF1::SetRange. . ""B"" Use this option when you want to fix or set limits on one or more parameters and the fitting function is a p",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:129208,Availability,error,errors,129208,"ed one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used. . ""C"" In case of linear fitting, do no calculate the chisquare (saves CPU time). . ""G"" Uses the gradient implemented in TF1::GradientPar for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function. . ""WIDTH"" Scales the histogran bin content by the bin width (useful for variable bins histograms) . ""SERIAL"" Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique . ""MULTITHREAD"" Forces usage of multi-thread execution whenever possible . The default fitting of an histogram (when no option is given) is perfomed as following:; a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; the full range of the histogram is used;; the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; for linear functions (polN, chenbyshev or formula expressions combined using operator ++) a linear minimization is used.; only the status of the fit is returned;; the fit is performed in Multithread whenever is enabled in ROOT;; only the last fitted function is saved in the histogram;; the histogram is drawn after fitting overalyed with the resulting fitting function. Minimizer Configuration; The Fit is perfomed using the default Minimizer, defined in the ROOT::Math::MinimizerOptions class. It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling TH1::Fit):; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm) for changing the minmizer and/or the corresponding algorithm. For example ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""G",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:129244,Availability,error,errors,129244,"ed one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used. . ""C"" In case of linear fitting, do no calculate the chisquare (saves CPU time). . ""G"" Uses the gradient implemented in TF1::GradientPar for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function. . ""WIDTH"" Scales the histogran bin content by the bin width (useful for variable bins histograms) . ""SERIAL"" Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique . ""MULTITHREAD"" Forces usage of multi-thread execution whenever possible . The default fitting of an histogram (when no option is given) is perfomed as following:; a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; the full range of the histogram is used;; the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; for linear functions (polN, chenbyshev or formula expressions combined using operator ++) a linear minimization is used.; only the status of the fit is returned;; the fit is performed in Multithread whenever is enabled in ROOT;; only the last fitted function is saved in the histogram;; the histogram is drawn after fitting overalyed with the resulting fitting function. Minimizer Configuration; The Fit is perfomed using the default Minimizer, defined in the ROOT::Math::MinimizerOptions class. It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling TH1::Fit):; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm) for changing the minmizer and/or the corresponding algorithm. For example ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""G",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:130513,Availability,avail,available,130513,"operator ++) a linear minimization is used.; only the status of the fit is returned;; the fit is performed in Multithread whenever is enabled in ROOT;; only the last fitted function is saved in the histogram;; the histogram is drawn after fitting overalyed with the resulting fitting function. Minimizer Configuration; The Fit is perfomed using the default Minimizer, defined in the ROOT::Math::MinimizerOptions class. It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling TH1::Fit):; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm) for changing the minmizer and/or the corresponding algorithm. For example ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS""); will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization The current defaults are (""Minuit"",""Migrad""). See the documentation of the ROOT::Math::MinimizerOptions for the available minimizers in ROOT and their corresponding algorithms.; ROOT::Math::MinimizerOptions::SetDefaultTolerance for setting a different tolerance value for the minimization.; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls for setting the maximum number of function calls.; ROOT::Math::MinimizerOptions::SetDefaultPrintLevel for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing. Other options are possible depending on the Minimizer used, see the corresponding documentation. The default minimizer can be also set in the resource file in etc/system.rootrc. For example; Root.Fitter: Minuit2. Chi-square Fits; By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method is used where the residual for each bin is computed using as error the observed value (the bin error) returned by TH1::GetBinError. \[; Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; \]. where",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:130653,Availability,toler,tolerance,130653,"whenever is enabled in ROOT;; only the last fitted function is saved in the histogram;; the histogram is drawn after fitting overalyed with the resulting fitting function. Minimizer Configuration; The Fit is perfomed using the default Minimizer, defined in the ROOT::Math::MinimizerOptions class. It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling TH1::Fit):; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm) for changing the minmizer and/or the corresponding algorithm. For example ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS""); will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization The current defaults are (""Minuit"",""Migrad""). See the documentation of the ROOT::Math::MinimizerOptions for the available minimizers in ROOT and their corresponding algorithms.; ROOT::Math::MinimizerOptions::SetDefaultTolerance for setting a different tolerance value for the minimization.; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls for setting the maximum number of function calls.; ROOT::Math::MinimizerOptions::SetDefaultPrintLevel for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing. Other options are possible depending on the Minimizer used, see the corresponding documentation. The default minimizer can be also set in the resource file in etc/system.rootrc. For example; Root.Fitter: Minuit2. Chi-square Fits; By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method is used where the residual for each bin is computed using as error the observed value (the bin error) returned by TH1::GetBinError. \[; Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; \]. where y(i) is the bin content for each bin i, x(i) is the bin center and e(i) is the bin error (sqrt(y(i) for an un-weighted hi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:131359,Availability,error,error,131359,"he BFGS algorithm of the GSL multi-dimensional minimization The current defaults are (""Minuit"",""Migrad""). See the documentation of the ROOT::Math::MinimizerOptions for the available minimizers in ROOT and their corresponding algorithms.; ROOT::Math::MinimizerOptions::SetDefaultTolerance for setting a different tolerance value for the minimization.; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls for setting the maximum number of function calls.; ROOT::Math::MinimizerOptions::SetDefaultPrintLevel for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing. Other options are possible depending on the Minimizer used, see the corresponding documentation. The default minimizer can be also set in the resource file in etc/system.rootrc. For example; Root.Fitter: Minuit2. Chi-square Fits; By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method is used where the residual for each bin is computed using as error the observed value (the bin error) returned by TH1::GetBinError. \[; Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; \]. where y(i) is the bin content for each bin i, x(i) is the bin center and e(i) is the bin error (sqrt(y(i) for an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, f(x(i)|p), but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume. When using option P (Pearson chi2), the expected error computed as e(i) = sqrt(f(x(i)|p)) is used. In this case empty bins are considered in the fit. Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of t",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:131393,Availability,error,error,131393,"he BFGS algorithm of the GSL multi-dimensional minimization The current defaults are (""Minuit"",""Migrad""). See the documentation of the ROOT::Math::MinimizerOptions for the available minimizers in ROOT and their corresponding algorithms.; ROOT::Math::MinimizerOptions::SetDefaultTolerance for setting a different tolerance value for the minimization.; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls for setting the maximum number of function calls.; ROOT::Math::MinimizerOptions::SetDefaultPrintLevel for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing. Other options are possible depending on the Minimizer used, see the corresponding documentation. The default minimizer can be also set in the resource file in etc/system.rootrc. For example; Root.Fitter: Minuit2. Chi-square Fits; By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method is used where the residual for each bin is computed using as error the observed value (the bin error) returned by TH1::GetBinError. \[; Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; \]. where y(i) is the bin content for each bin i, x(i) is the bin center and e(i) is the bin error (sqrt(y(i) for an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, f(x(i)|p), but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume. When using option P (Pearson chi2), the expected error computed as e(i) = sqrt(f(x(i)|p)) is used. In this case empty bins are considered in the fit. Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of t",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:131596,Availability,error,error,131596,"ms.; ROOT::Math::MinimizerOptions::SetDefaultTolerance for setting a different tolerance value for the minimization.; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls for setting the maximum number of function calls.; ROOT::Math::MinimizerOptions::SetDefaultPrintLevel for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing. Other options are possible depending on the Minimizer used, see the corresponding documentation. The default minimizer can be also set in the resource file in etc/system.rootrc. For example; Root.Fitter: Minuit2. Chi-square Fits; By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method is used where the residual for each bin is computed using as error the observed value (the bin error) returned by TH1::GetBinError. \[; Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; \]. where y(i) is the bin content for each bin i, x(i) is the bin center and e(i) is the bin error (sqrt(y(i) for an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, f(x(i)|p), but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume. When using option P (Pearson chi2), the expected error computed as e(i) = sqrt(f(x(i)|p)) is used. In this case empty bins are considered in the fit. Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of the default chi-square fit. The likelihood is built assuming a Poisson probability density function for each bin. The negative log-likelihood to be minimized is. \[; NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; \]. wh",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:131659,Availability,error,errors,131659,"e for the minimization.; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls for setting the maximum number of function calls.; ROOT::Math::MinimizerOptions::SetDefaultPrintLevel for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing. Other options are possible depending on the Minimizer used, see the corresponding documentation. The default minimizer can be also set in the resource file in etc/system.rootrc. For example; Root.Fitter: Minuit2. Chi-square Fits; By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method is used where the residual for each bin is computed using as error the observed value (the bin error) returned by TH1::GetBinError. \[; Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; \]. where y(i) is the bin content for each bin i, x(i) is the bin center and e(i) is the bin error (sqrt(y(i) for an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, f(x(i)|p), but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume. When using option P (Pearson chi2), the expected error computed as e(i) = sqrt(f(x(i)|p)) is used. In this case empty bins are considered in the fit. Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of the default chi-square fit. The likelihood is built assuming a Poisson probability density function for each bin. The negative log-likelihood to be minimized is. \[; NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; \]. where P(y|f) is the Poisson distribution of observing a count y(i) in the bin when the expected",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:131998,Availability,error,error,131998,"nimizer used, see the corresponding documentation. The default minimizer can be also set in the resource file in etc/system.rootrc. For example; Root.Fitter: Minuit2. Chi-square Fits; By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method is used where the residual for each bin is computed using as error the observed value (the bin error) returned by TH1::GetBinError. \[; Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; \]. where y(i) is the bin content for each bin i, x(i) is the bin center and e(i) is the bin error (sqrt(y(i) for an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, f(x(i)|p), but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume. When using option P (Pearson chi2), the expected error computed as e(i) = sqrt(f(x(i)|p)) is used. In this case empty bins are considered in the fit. Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of the default chi-square fit. The likelihood is built assuming a Poisson probability density function for each bin. The negative log-likelihood to be minimized is. \[; NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; \]. where P(y|f) is the Poisson distribution of observing a count y(i) in the bin when the expected count is f(x(i)|p). The exact likelihood used is the Poisson likelihood described in this paper: S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,” Nucl. Instrum. Meth. 221 (1984) 437. \[; NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; \]",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:133174,Availability,error,errors,133174,"ecially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of the default chi-square fit. The likelihood is built assuming a Poisson probability density function for each bin. The negative log-likelihood to be minimized is. \[; NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; \]. where P(y|f) is the Poisson distribution of observing a count y(i) in the bin when the expected count is f(x(i)|p). The exact likelihood used is the Poisson likelihood described in this paper: S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,” Nucl. Instrum. Meth. 221 (1984) 437. \[; NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; \]. By using this formulation, 2*NLL can be interpreted as the chi-square resulting from the fit.; This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ). The likelihood method has the advantage of treating correctly bins with low statistics. In case of high statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit give the same result.; The likelihood method, although a bit slower, it is therefore the recommended method, when the histogram represent counts (Poisson statistics), where the chi-square methods may give incorrect results, especially in case of low statistics. In case of a weighted histogram, it is possible to perform also a likelihood fit by using the option ""WL"". Note a weighted histogram is a histogram which has been filled with weights and it has the information on the sum of the weight square for each bin ( TH1::Sumw2() has been called). The bin error for a weighted histogram is the square root of the sum of the weight square. Fit Result; The function returns a TFitResultPtr which can hold a pointer to a TFitResult object. By default the TFitResultPtr",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:133975,Availability,error,error,133975,"is formulation, 2*NLL can be interpreted as the chi-square resulting from the fit.; This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ). The likelihood method has the advantage of treating correctly bins with low statistics. In case of high statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit give the same result.; The likelihood method, although a bit slower, it is therefore the recommended method, when the histogram represent counts (Poisson statistics), where the chi-square methods may give incorrect results, especially in case of low statistics. In case of a weighted histogram, it is possible to perform also a likelihood fit by using the option ""WL"". Note a weighted histogram is a histogram which has been filled with weights and it has the information on the sum of the weight square for each bin ( TH1::Sumw2() has been called). The bin error for a weighted histogram is the square root of the sum of the weight square. Fit Result; The function returns a TFitResultPtr which can hold a pointer to a TFitResult object. By default the TFitResultPtr contains only the status of the fit which is return by an automatic conversion of the TFitResultPtr to an integer. One can write in this case directly:; Int_t fitStatus = h->Fit(myFunc);; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; If the option ""S"" is instead used, TFitResultPtr behaves as a smart pointer to the TFitResult object. This is useful for retrieving the full result information from the fit, such as the covariance matrix, as shown in this example code:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // pri",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:134964,Availability,error,error,134964,"Sumw2() has been called). The bin error for a weighted histogram is the square root of the sum of the weight square. Fit Result; The function returns a TFitResultPtr which can hold a pointer to a TFitResult object. By default the TFitResultPtr contains only the status of the fit which is return by an automatic conversion of the TFitResultPtr to an integer. One can write in this case directly:; Int_t fitStatus = h->Fit(myFunc);; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; If the option ""S"" is instead used, TFitResultPtr behaves as a smart pointer to the TFitResult object. This is useful for retrieving the full result information from the fit, such as the covariance matrix, as shown in this example code:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TMatrixTSym< Double_t >; The fit parameters, error and chi-square (but not covariance matrix) can be retrieved also directly from the fitted function that is passed to this call. Given a pointer to an associated fitted function myfunc, one can retrieve the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfun",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:135556,Availability,error,error,135556,"fit, such as the covariance matrix, as shown in this example code:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TMatrixTSym< Double_t >; The fit parameters, error and chi-square (but not covariance matrix) can be retrieved also directly from the fitted function that is passed to this call. Given a pointer to an associated fitted function myfunc, one can retrieve the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter; Associated functions; One or more object ( can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions). If the histogram is made persistent, the list of associated functions is also persistent. Given a histogram h, one can retrieve an associated function with:; TF1 *myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently i",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:135963,Availability,error,error,135963,"he parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TMatrixTSym< Double_t >; The fit parameters, error and chi-square (but not covariance matrix) can be retrieved also directly from the fitted function that is passed to this call. Given a pointer to an associated fitted function myfunc, one can retrieve the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter; Associated functions; One or more object ( can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions). If the histogram is made persistent, the list of associated functions is also persistent. Given a histogram h, one can retrieve an associated function with:; TF1 *myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; stat",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:136757,Availability,error,error,136757,"e the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter; Associated functions; One or more object ( can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions). If the histogram is made persistent, the list of associated functions is also persistent. Given a histogram h, one can retrieve an associated function with:; TF1 *myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; status > 0 : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus. TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error only in Minos but not in Migrad a fitStatus of 40 will be returned. Minuit2 returns 0 in case of success and different values in migrad,minos or hesse depending on the error. See in this case the documentation of Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the minos return status and Minuit2Minimizer::Hesse for the hesse return status. If other minimizers are used see their specific documentation for the status code returned. For example in the case ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:136800,Availability,error,error,136800,"c->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter; Associated functions; One or more object ( can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions). If the histogram is made persistent, the list of associated functions is also persistent. Given a histogram h, one can retrieve an associated function with:; TF1 *myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; status > 0 : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus. TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error only in Minos but not in Migrad a fitStatus of 40 will be returned. Minuit2 returns 0 in case of success and different values in migrad,minos or hesse depending on the error. See in this case the documentation of Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the minos return status and Minuit2Minimizer::Hesse for the hesse return status. If other minimizers are used see their specific documentation for the status code returned. For example in the case of Fumili, see TFumili::Minimize. Fitting in a range; In order to fit i",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:137184,Availability,error,error,137184,"added to the histogram list of functions (fFunctions). If the histogram is made persistent, the list of associated functions is also persistent. Given a histogram h, one can retrieve an associated function with:; TF1 *myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; status > 0 : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus. TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error only in Minos but not in Migrad a fitStatus of 40 will be returned. Minuit2 returns 0 in case of success and different values in migrad,minos or hesse depending on the error. See in this case the documentation of Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the minos return status and Minuit2Minimizer::Hesse for the hesse return status. If other minimizers are used see their specific documentation for the status code returned. For example in the case of Fumili, see TFumili::Minimize. Fitting in a range; In order to fit in a sub-range of the histogram you have two options:; pass to this function the lower (xxmin) and upper (xxmax) values for the fitting range;; define a specific range in the fitted function and use the fitting option ""R"". For example, if your histogram has a defined range between -4 and 4 and you want to fit a gaussian only in",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:137254,Availability,error,error,137254,"ctions is also persistent. Given a histogram h, one can retrieve an associated function with:; TF1 *myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; status > 0 : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus. TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error only in Minos but not in Migrad a fitStatus of 40 will be returned. Minuit2 returns 0 in case of success and different values in migrad,minos or hesse depending on the error. See in this case the documentation of Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the minos return status and Minuit2Minimizer::Hesse for the hesse return status. If other minimizers are used see their specific documentation for the status code returned. For example in the case of Fumili, see TFumili::Minimize. Fitting in a range; In order to fit in a sub-range of the histogram you have two options:; pass to this function the lower (xxmin) and upper (xxmax) values for the fitting range;; define a specific range in the fitted function and use the fitting option ""R"". For example, if your histogram has a defined range between -4 and 4 and you want to fit a gaussian only in the interval 1 to 3, you can do:. TF1 *f1 = new TF1(""f1"", ""gaus"", 1, 3);; histo->Fit(""f1"", ""R"");; f1TF1 * f1Definitio",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:137428,Availability,error,error,137428,"myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; status > 0 : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus. TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error only in Minos but not in Migrad a fitStatus of 40 will be returned. Minuit2 returns 0 in case of success and different values in migrad,minos or hesse depending on the error. See in this case the documentation of Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the minos return status and Minuit2Minimizer::Hesse for the hesse return status. If other minimizers are used see their specific documentation for the status code returned. For example in the case of Fumili, see TFumili::Minimize. Fitting in a range; In order to fit in a sub-range of the histogram you have two options:; pass to this function the lower (xxmin) and upper (xxmax) values for the fitting range;; define a specific range in the fitted function and use the fitting option ""R"". For example, if your histogram has a defined range between -4 and 4 and you want to fit a gaussian only in the interval 1 to 3, you can do:. TF1 *f1 = new TF1(""f1"", ""gaus"", 1, 3);; histo->Fit(""f1"", ""R"");; f1TF1 * f1Definition legend1.C:11; The fitting range is also limited by the histogram range defined using TAxis::SetRang",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:140167,Availability,error,errors,140167,"efinition TF1.cxx:3507; if parmin >= parmax, the parameter is fixed Note that you are not forced to fix the limits for all parameters. For example, if you fit a function with 6 parameters, you can do:; func->SetParameters(0, 3.1, 1.e-6, -8, 0, 100);; func->SetParLimits(3, -10, -4);; func->FixParameter(4, 0);; func->SetParLimits(5, 1, 1);; With this setup, parameters 0->2 can vary freely Parameter 3 has boundaries [-10,-4] with initial value -8 Parameter 4 is fixed to 0 Parameter 5 is fixed to 100. When the lower limit and upper limit are equal, the parameter is fixed. However to fix a parameter to 0, one must call the FixParameter function. Fit Statistics Box; The statistics box can display the result of the fit. You can change the statistics box to display the fit parameters with the TStyle::SetOptFit(mode) method. This mode has four digits. mode = pcev (default = 0111) v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degrees of freedom; p = 1; print Probability; For example: gStyle->SetOptFit(1011); prints the fit probability, parameter names/values, and errors. You can change the position of the statistics box with these lines (where g is a pointer to the TGraph): TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats"");; st->SetX1NDC(newx1); //new x start position; st->SetX2NDC(newx2); //new x end position; . Additional Notes on Fitting; Fitting a histogram of dimension N with a function of dimension N-1; It is possible to fit a TH2 with a TF1 or a TH3 with a TF2. In this case the chi-square is computed from the squared error distance between the function values and the bin centers weighted by the bin content. For correct error scaling, the obtained parameter error are corrected as in the case when the option ""W"" is used.; User defined objective functions; By default when fitting a chi square function is used for fitting. When option ""L"" is used a Poisson likelihood function is u",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:140370,Availability,error,errors,140370,"efinition TF1.cxx:3507; if parmin >= parmax, the parameter is fixed Note that you are not forced to fix the limits for all parameters. For example, if you fit a function with 6 parameters, you can do:; func->SetParameters(0, 3.1, 1.e-6, -8, 0, 100);; func->SetParLimits(3, -10, -4);; func->FixParameter(4, 0);; func->SetParLimits(5, 1, 1);; With this setup, parameters 0->2 can vary freely Parameter 3 has boundaries [-10,-4] with initial value -8 Parameter 4 is fixed to 0 Parameter 5 is fixed to 100. When the lower limit and upper limit are equal, the parameter is fixed. However to fix a parameter to 0, one must call the FixParameter function. Fit Statistics Box; The statistics box can display the result of the fit. You can change the statistics box to display the fit parameters with the TStyle::SetOptFit(mode) method. This mode has four digits. mode = pcev (default = 0111) v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degrees of freedom; p = 1; print Probability; For example: gStyle->SetOptFit(1011); prints the fit probability, parameter names/values, and errors. You can change the position of the statistics box with these lines (where g is a pointer to the TGraph): TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats"");; st->SetX1NDC(newx1); //new x start position; st->SetX2NDC(newx2); //new x end position; . Additional Notes on Fitting; Fitting a histogram of dimension N with a function of dimension N-1; It is possible to fit a TH2 with a TF1 or a TH3 with a TF2. In this case the chi-square is computed from the squared error distance between the function values and the bin centers weighted by the bin content. For correct error scaling, the obtained parameter error are corrected as in the case when the option ""W"" is used.; User defined objective functions; By default when fitting a chi square function is used for fitting. When option ""L"" is used a Poisson likelihood function is u",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:140865,Availability,error,error,140865,"t Statistics Box; The statistics box can display the result of the fit. You can change the statistics box to display the fit parameters with the TStyle::SetOptFit(mode) method. This mode has four digits. mode = pcev (default = 0111) v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degrees of freedom; p = 1; print Probability; For example: gStyle->SetOptFit(1011); prints the fit probability, parameter names/values, and errors. You can change the position of the statistics box with these lines (where g is a pointer to the TGraph): TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats"");; st->SetX1NDC(newx1); //new x start position; st->SetX2NDC(newx2); //new x end position; . Additional Notes on Fitting; Fitting a histogram of dimension N with a function of dimension N-1; It is possible to fit a TH2 with a TF1 or a TH3 with a TF2. In this case the chi-square is computed from the squared error distance between the function values and the bin centers weighted by the bin content. For correct error scaling, the obtained parameter error are corrected as in the case when the option ""W"" is used.; User defined objective functions; By default when fitting a chi square function is used for fitting. When option ""L"" is used a Poisson likelihood function is used. Using option ""MULTI"" a multinomial likelihood fit is used. Thes functions are defined in the header Fit/Chi2Func.h or Fit/PoissonLikelihoodFCN and they are implemented using the routines FitUtil::EvaluateChi2 or FitUtil::EvaluatePoissonLogL in the file math/mathcore/src/FitUtil.cxx. It is possible to specify a user defined fitting function, using option ""U"" and calling the following functions:; TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; TVirtualFitter::SetFCNvirtual void SetFCN(void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t))To set the address of the minimization objective function called by the native com",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:140969,Availability,error,error,140969,"ers with the TStyle::SetOptFit(mode) method. This mode has four digits. mode = pcev (default = 0111) v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degrees of freedom; p = 1; print Probability; For example: gStyle->SetOptFit(1011); prints the fit probability, parameter names/values, and errors. You can change the position of the statistics box with these lines (where g is a pointer to the TGraph): TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats"");; st->SetX1NDC(newx1); //new x start position; st->SetX2NDC(newx2); //new x end position; . Additional Notes on Fitting; Fitting a histogram of dimension N with a function of dimension N-1; It is possible to fit a TH2 with a TF1 or a TH3 with a TF2. In this case the chi-square is computed from the squared error distance between the function values and the bin centers weighted by the bin content. For correct error scaling, the obtained parameter error are corrected as in the case when the option ""W"" is used.; User defined objective functions; By default when fitting a chi square function is used for fitting. When option ""L"" is used a Poisson likelihood function is used. Using option ""MULTI"" a multinomial likelihood fit is used. Thes functions are defined in the header Fit/Chi2Func.h or Fit/PoissonLikelihoodFCN and they are implemented using the routines FitUtil::EvaluateChi2 or FitUtil::EvaluatePoissonLogL in the file math/mathcore/src/FitUtil.cxx. It is possible to specify a user defined fitting function, using option ""U"" and calling the following functions:; TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; TVirtualFitter::SetFCNvirtual void SetFCN(void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t))To set the address of the minimization objective function called by the native compiler (see function...Definition TVirtualFitter.cxx:267; TVirtualFitter::Fitterstatic TVirtualFitter * Fitter(TObject *obj, Int_t m",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:141007,Availability,error,error,141007,"ers with the TStyle::SetOptFit(mode) method. This mode has four digits. mode = pcev (default = 0111) v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degrees of freedom; p = 1; print Probability; For example: gStyle->SetOptFit(1011); prints the fit probability, parameter names/values, and errors. You can change the position of the statistics box with these lines (where g is a pointer to the TGraph): TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats"");; st->SetX1NDC(newx1); //new x start position; st->SetX2NDC(newx2); //new x end position; . Additional Notes on Fitting; Fitting a histogram of dimension N with a function of dimension N-1; It is possible to fit a TH2 with a TF1 or a TH3 with a TF2. In this case the chi-square is computed from the squared error distance between the function values and the bin centers weighted by the bin content. For correct error scaling, the obtained parameter error are corrected as in the case when the option ""W"" is used.; User defined objective functions; By default when fitting a chi square function is used for fitting. When option ""L"" is used a Poisson likelihood function is used. Using option ""MULTI"" a multinomial likelihood fit is used. Thes functions are defined in the header Fit/Chi2Func.h or Fit/PoissonLikelihoodFCN and they are implemented using the routines FitUtil::EvaluateChi2 or FitUtil::EvaluatePoissonLogL in the file math/mathcore/src/FitUtil.cxx. It is possible to specify a user defined fitting function, using option ""U"" and calling the following functions:; TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; TVirtualFitter::SetFCNvirtual void SetFCN(void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t))To set the address of the minimization objective function called by the native compiler (see function...Definition TVirtualFitter.cxx:267; TVirtualFitter::Fitterstatic TVirtualFitter * Fitter(TObject *obj, Int_t m",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:142336,Availability,error,error,142336,"od fit is used. Thes functions are defined in the header Fit/Chi2Func.h or Fit/PoissonLikelihoodFCN and they are implemented using the routines FitUtil::EvaluateChi2 or FitUtil::EvaluatePoissonLogL in the file math/mathcore/src/FitUtil.cxx. It is possible to specify a user defined fitting function, using option ""U"" and calling the following functions:; TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; TVirtualFitter::SetFCNvirtual void SetFCN(void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t))To set the address of the minimization objective function called by the native compiler (see function...Definition TVirtualFitter.cxx:267; TVirtualFitter::Fitterstatic TVirtualFitter * Fitter(TObject *obj, Int_t maxpar=25)Static function returning a pointer to the current fitter.Definition TVirtualFitter.cxx:159; where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; Note on treatment of empty bins; Empty bins, which have the content equal to zero AND error equal to zero, are excluded by default from the chi-square fit, but they are considered in the likelihood fit. since they affect the likelihood if the function value in these bins is not negligible. Note that if the histogram is having bins with zero content and non zero-errors they are considered as any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit. In general, one should not fit a histogram with non-empty bins and zero errors.; If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1. Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors are corrected by the obtained chi2 value using this scaling expression: errorp *= sqrt(chis",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:142614,Availability,error,errors,142614,"ng the following functions:; TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; TVirtualFitter::SetFCNvirtual void SetFCN(void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t))To set the address of the minimization objective function called by the native compiler (see function...Definition TVirtualFitter.cxx:267; TVirtualFitter::Fitterstatic TVirtualFitter * Fitter(TObject *obj, Int_t maxpar=25)Static function returning a pointer to the current fitter.Definition TVirtualFitter.cxx:159; where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; Note on treatment of empty bins; Empty bins, which have the content equal to zero AND error equal to zero, are excluded by default from the chi-square fit, but they are considered in the likelihood fit. since they affect the likelihood if the function value in these bins is not negligible. Note that if the histogram is having bins with zero content and non zero-errors they are considered as any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit. In general, one should not fit a histogram with non-empty bins and zero errors.; If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1. Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors are corrected by the obtained chi2 value using this scaling expression: errorp *= sqrt(chisquare/(ndf-1)) as it is done when fitting a TGraph with no point errors.; Excluding points; You can use TF1::RejectPoint inside your fitting function to exclude some points within a certain range from the fit. See the tutorial fit/fitExclude.C.; Warning when using the option ""0""; When selecting the option ""0"", the fitted fun",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:142694,Availability,error,error,142694,"tual void SetFCN(void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t))To set the address of the minimization objective function called by the native compiler (see function...Definition TVirtualFitter.cxx:267; TVirtualFitter::Fitterstatic TVirtualFitter * Fitter(TObject *obj, Int_t maxpar=25)Static function returning a pointer to the current fitter.Definition TVirtualFitter.cxx:159; where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; Note on treatment of empty bins; Empty bins, which have the content equal to zero AND error equal to zero, are excluded by default from the chi-square fit, but they are considered in the likelihood fit. since they affect the likelihood if the function value in these bins is not negligible. Note that if the histogram is having bins with zero content and non zero-errors they are considered as any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit. In general, one should not fit a histogram with non-empty bins and zero errors.; If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1. Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors are corrected by the obtained chi2 value using this scaling expression: errorp *= sqrt(chisquare/(ndf-1)) as it is done when fitting a TGraph with no point errors.; Excluding points; You can use TF1::RejectPoint inside your fitting function to exclude some points within a certain range from the fit. See the tutorial fit/fitExclude.C.; Warning when using the option ""0""; When selecting the option ""0"", the fitted function is added to the list of functions of the histogram, but it is not drawn when the histogram is drawn. You can",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:142841,Availability,error,errors,142841,"he address of the minimization objective function called by the native compiler (see function...Definition TVirtualFitter.cxx:267; TVirtualFitter::Fitterstatic TVirtualFitter * Fitter(TObject *obj, Int_t maxpar=25)Static function returning a pointer to the current fitter.Definition TVirtualFitter.cxx:159; where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; Note on treatment of empty bins; Empty bins, which have the content equal to zero AND error equal to zero, are excluded by default from the chi-square fit, but they are considered in the likelihood fit. since they affect the likelihood if the function value in these bins is not negligible. Note that if the histogram is having bins with zero content and non zero-errors they are considered as any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit. In general, one should not fit a histogram with non-empty bins and zero errors.; If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1. Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors are corrected by the obtained chi2 value using this scaling expression: errorp *= sqrt(chisquare/(ndf-1)) as it is done when fitting a TGraph with no point errors.; Excluding points; You can use TF1::RejectPoint inside your fitting function to exclude some points within a certain range from the fit. See the tutorial fit/fitExclude.C.; Warning when using the option ""0""; When selecting the option ""0"", the fitted function is added to the list of functions of the histogram, but it is not drawn when the histogram is drawn. You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; h.F",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:142861,Availability,error,errors,142861,"ualFitter.cxx:267; TVirtualFitter::Fitterstatic TVirtualFitter * Fitter(TObject *obj, Int_t maxpar=25)Static function returning a pointer to the current fitter.Definition TVirtualFitter.cxx:159; where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; Note on treatment of empty bins; Empty bins, which have the content equal to zero AND error equal to zero, are excluded by default from the chi-square fit, but they are considered in the likelihood fit. since they affect the likelihood if the function value in these bins is not negligible. Note that if the histogram is having bins with zero content and non zero-errors they are considered as any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit. In general, one should not fit a histogram with non-empty bins and zero errors.; If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1. Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors are corrected by the obtained chi2 value using this scaling expression: errorp *= sqrt(chisquare/(ndf-1)) as it is done when fitting a TGraph with no point errors.; Excluding points; You can use TF1::RejectPoint inside your fitting function to exclude some points within a certain range from the fit. See the tutorial fit/fitExclude.C.; Warning when using the option ""0""; When selecting the option ""0"", the fitted function is added to the list of functions of the histogram, but it is not drawn when the histogram is drawn. You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; h.Draw(); // function is not drawn; h.GetFunction(",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:143086,Availability,error,error,143086,"ng a pointer to the current fitter.Definition TVirtualFitter.cxx:159; where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; Note on treatment of empty bins; Empty bins, which have the content equal to zero AND error equal to zero, are excluded by default from the chi-square fit, but they are considered in the likelihood fit. since they affect the likelihood if the function value in these bins is not negligible. Note that if the histogram is having bins with zero content and non zero-errors they are considered as any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit. In general, one should not fit a histogram with non-empty bins and zero errors.; If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1. Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors are corrected by the obtained chi2 value using this scaling expression: errorp *= sqrt(chisquare/(ndf-1)) as it is done when fitting a TGraph with no point errors.; Excluding points; You can use TF1::RejectPoint inside your fitting function to exclude some points within a certain range from the fit. See the tutorial fit/fitExclude.C.; Warning when using the option ""0""; When selecting the option ""0"", the fitted function is added to the list of functions of the histogram, but it is not drawn when the histogram is drawn. You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; h.Draw(); // function is not drawn; h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; h.Draw(); // function is visible again; TF1::kNotDraw@ kNotDrawDefinition TF1.h:346",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:143181,Availability,error,errors,143181,"ouble_t *u, Int_t flag);; Note on treatment of empty bins; Empty bins, which have the content equal to zero AND error equal to zero, are excluded by default from the chi-square fit, but they are considered in the likelihood fit. since they affect the likelihood if the function value in these bins is not negligible. Note that if the histogram is having bins with zero content and non zero-errors they are considered as any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit. In general, one should not fit a histogram with non-empty bins and zero errors.; If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1. Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors are corrected by the obtained chi2 value using this scaling expression: errorp *= sqrt(chisquare/(ndf-1)) as it is done when fitting a TGraph with no point errors.; Excluding points; You can use TF1::RejectPoint inside your fitting function to exclude some points within a certain range from the fit. See the tutorial fit/fitExclude.C.; Warning when using the option ""0""; When selecting the option ""0"", the fitted function is added to the list of functions of the histogram, but it is not drawn when the histogram is drawn. You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; h.Draw(); // function is not drawn; h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; h.Draw(); // function is visible again; TF1::kNotDraw@ kNotDrawDefinition TF1.h:346. Definition at line 4262 of file TH1.cxx. ◆ FitOptionsMake(). Int_t TH1::FitOptionsMake ; (; Option_t * ; option, . Foption_t & ; Foption . ). static . Decode string choptin and ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:143260,Availability,error,errorp,143260,"ouble_t *u, Int_t flag);; Note on treatment of empty bins; Empty bins, which have the content equal to zero AND error equal to zero, are excluded by default from the chi-square fit, but they are considered in the likelihood fit. since they affect the likelihood if the function value in these bins is not negligible. Note that if the histogram is having bins with zero content and non zero-errors they are considered as any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit. In general, one should not fit a histogram with non-empty bins and zero errors.; If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1. Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors are corrected by the obtained chi2 value using this scaling expression: errorp *= sqrt(chisquare/(ndf-1)) as it is done when fitting a TGraph with no point errors.; Excluding points; You can use TF1::RejectPoint inside your fitting function to exclude some points within a certain range from the fit. See the tutorial fit/fitExclude.C.; Warning when using the option ""0""; When selecting the option ""0"", the fitted function is added to the list of functions of the histogram, but it is not drawn when the histogram is drawn. You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; h.Draw(); // function is not drawn; h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; h.Draw(); // function is visible again; TF1::kNotDraw@ kNotDrawDefinition TF1.h:346. Definition at line 4262 of file TH1.cxx. ◆ FitOptionsMake(). Int_t TH1::FitOptionsMake ; (; Option_t * ; option, . Foption_t & ; Foption . ). static . Decode string choptin and ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:143344,Availability,error,errors,143344,"ouble_t *u, Int_t flag);; Note on treatment of empty bins; Empty bins, which have the content equal to zero AND error equal to zero, are excluded by default from the chi-square fit, but they are considered in the likelihood fit. since they affect the likelihood if the function value in these bins is not negligible. Note that if the histogram is having bins with zero content and non zero-errors they are considered as any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit. In general, one should not fit a histogram with non-empty bins and zero errors.; If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1. Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors are corrected by the obtained chi2 value using this scaling expression: errorp *= sqrt(chisquare/(ndf-1)) as it is done when fitting a TGraph with no point errors.; Excluding points; You can use TF1::RejectPoint inside your fitting function to exclude some points within a certain range from the fit. See the tutorial fit/fitExclude.C.; Warning when using the option ""0""; When selecting the option ""0"", the fitted function is added to the list of functions of the histogram, but it is not drawn when the histogram is drawn. You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; h.Draw(); // function is not drawn; h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; h.Draw(); // function is visible again; TF1::kNotDraw@ kNotDrawDefinition TF1.h:346. Definition at line 4262 of file TH1.cxx. ◆ FitOptionsMake(). Int_t TH1::FitOptionsMake ; (; Option_t * ; option, . Foption_t & ; Foption . ). static . Decode string choptin and ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:144865,Availability,error,error,144865,"on"", ""0""); // fit, store function but do not draw; h.Draw(); // function is not drawn; h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; h.Draw(); // function is visible again; TF1::kNotDraw@ kNotDrawDefinition TF1.h:346. Definition at line 4262 of file TH1.cxx. ◆ FitOptionsMake(). Int_t TH1::FitOptionsMake ; (; Option_t * ; option, . Foption_t & ; Foption . ). static . Decode string choptin and fill fitOption structure. ; Definition at line 4652 of file TH1.cxx. ◆ FitPanel(). void TH1::FitPanel ; (; ). virtual . Display a panel with all histogram fit options. ; See class TFitPanel for example ; Definition at line 4284 of file TH1.cxx. ◆ GetAsymmetry(). TH1 * TH1::GetAsymmetry ; (; TH1 * ; h2, . Double_t ; c2 = 1, . Double_t ; dc2 = 0 . ). Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined as: ; Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this; works for 1D, 2D, etc. histograms c2 is an optional argument that gives a relative weight between the two histograms, and dc2 is the error on this weight. This is useful, for example, when forming an asymmetry between two histograms from 2 different data sets that need to be normalized to each other in some way. The function calculates the errors assuming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)).; example: assuming 'h1' and 'h2' are already filled; h3 = h1->GetAsymmetry(h2); TH1::GetAsymmetryTH1 * GetAsymmetry(TH1 *h2, Double_t c2=1, Double_t dc2=0)Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined...Definition TH1.cxx:4339; then 'h3' is created and filled with the asymmetry between 'h1' and 'h2'; h1 and h2 are left intact.; Note that it is the user's responsibility to manage the created histogram. The name of the returned histogram will be Asymmetry_nameOfh1-nameOfh2; code proposed by Jason Seely (seely.nosp@m.@mit.nosp@m..edu) and adapted by R.Brun; clone the histograms so top and bottom will have the cor",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:145074,Availability,error,errors,145074,"tionsMake(). Int_t TH1::FitOptionsMake ; (; Option_t * ; option, . Foption_t & ; Foption . ). static . Decode string choptin and fill fitOption structure. ; Definition at line 4652 of file TH1.cxx. ◆ FitPanel(). void TH1::FitPanel ; (; ). virtual . Display a panel with all histogram fit options. ; See class TFitPanel for example ; Definition at line 4284 of file TH1.cxx. ◆ GetAsymmetry(). TH1 * TH1::GetAsymmetry ; (; TH1 * ; h2, . Double_t ; c2 = 1, . Double_t ; dc2 = 0 . ). Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined as: ; Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this; works for 1D, 2D, etc. histograms c2 is an optional argument that gives a relative weight between the two histograms, and dc2 is the error on this weight. This is useful, for example, when forming an asymmetry between two histograms from 2 different data sets that need to be normalized to each other in some way. The function calculates the errors assuming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)).; example: assuming 'h1' and 'h2' are already filled; h3 = h1->GetAsymmetry(h2); TH1::GetAsymmetryTH1 * GetAsymmetry(TH1 *h2, Double_t c2=1, Double_t dc2=0)Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined...Definition TH1.cxx:4339; then 'h3' is created and filled with the asymmetry between 'h1' and 'h2'; h1 and h2 are left intact.; Note that it is the user's responsibility to manage the created histogram. The name of the returned histogram will be Asymmetry_nameOfh1-nameOfh2; code proposed by Jason Seely (seely.nosp@m.@mit.nosp@m..edu) and adapted by R.Brun; clone the histograms so top and bottom will have the correct dimensions: Sumw2 just makes sure the errors will be computed properly when we form sums and ratios below. ; Definition at line 4339 of file TH1.cxx. ◆ GetAxisColor(). Color_t TH1::GetAxisColor ; (; Option_t * ; axis = ""X""); const. virtual . Return the number of division",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:145863,Availability,error,errors,145863,"rams, and dc2 is the error on this weight. This is useful, for example, when forming an asymmetry between two histograms from 2 different data sets that need to be normalized to each other in some way. The function calculates the errors assuming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)).; example: assuming 'h1' and 'h2' are already filled; h3 = h1->GetAsymmetry(h2); TH1::GetAsymmetryTH1 * GetAsymmetry(TH1 *h2, Double_t c2=1, Double_t dc2=0)Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined...Definition TH1.cxx:4339; then 'h3' is created and filled with the asymmetry between 'h1' and 'h2'; h1 and h2 are left intact.; Note that it is the user's responsibility to manage the created histogram. The name of the returned histogram will be Asymmetry_nameOfh1-nameOfh2; code proposed by Jason Seely (seely.nosp@m.@mit.nosp@m..edu) and adapted by R.Brun; clone the histograms so top and bottom will have the correct dimensions: Sumw2 just makes sure the errors will be computed properly when we form sums and ratios below. ; Definition at line 4339 of file TH1.cxx. ◆ GetAxisColor(). Color_t TH1::GetAxisColor ; (; Option_t * ; axis = ""X""); const. virtual . Return the number of divisions for ""axis"". ; Definition at line 40 of file Haxis.cxx. ◆ GetAxisLabelStatus(). UInt_t TH1::GetAxisLabelStatus ; (; ); const. protected . Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ; can be extended and is alphanumeric ; Definition at line 6675 of file TH1.cxx. ◆ GetBarOffset(). virtual Float_t TH1::GetBarOffset ; (; ); const. inlinevirtual . Definition at line 256 of file TH1.h. ◆ GetBarWidth(). virtual Float_t TH1::GetBarWidth ; (; ); const. inlinevirtual . Definition at line 257 of file TH1.h. ◆ GetBin(). Int_t TH1::GetBin ; (; Int_t ; binx, . Int_t ; biny = 0, . Int_t ; binz = 0 . ); const. virtual . Return Global bin number corresponding to binx,y,z. ; 2-D and 3-D histograms are represented with ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:149391,Availability,error,error,149391,"m with binx,biny,binz, the function; Int_t bin = h->GetBin(binx,biny,binz);; returns a global/linearized bin number. This global bin is useful to access the bin information independently of the dimension. ; Reimplemented in TH2, TH3, TH1K, TH2Poly, TProfile, TProfile2D, TProfile2Poly, TProfile2Poly, and TProfile3D.; Definition at line 5061 of file TH1.cxx. ◆ GetBinContent() [2/3]. virtual Double_t TH1::GetBinContent ; (; Int_t ; bin, . Int_t ;  . ); const. inlinevirtual . Reimplemented in TH2, TH3, TH1K, TProfile, TH2, TProfile2D, TH2Poly, TProfile2Poly, and TProfile3D.; Definition at line 266 of file TH1.h. ◆ GetBinContent() [3/3]. virtual Double_t TH1::GetBinContent ; (; Int_t ; bin, . Int_t ; , . Int_t ;  . ); const. inlinevirtual . Reimplemented in TH2, TH3, TH1K, TProfile, TH3, TProfile3D, TH2, TProfile2D, TH2Poly, and TProfile2Poly.; Definition at line 267 of file TH1.h. ◆ GetBinError() [1/3]. Double_t TH1::GetBinError ; (; Int_t ; bin); const. virtual . Return value of error associated to bin number bin. ; if the sum of squares of weights has been defined (via Sumw2), this function returns the sqrt(sum of w2). otherwise it returns the sqrt(contents) for this bin. ; Reimplemented in TH1K, TH2Poly, TProfile, TProfile2D, TProfile2Poly, TProfile2Poly, and TProfile3D.; Definition at line 9063 of file TH1.cxx. ◆ GetBinError() [2/3]. virtual Double_t TH1::GetBinError ; (; Int_t ; binx, . Int_t ; biny . ); const. inlinevirtual . Reimplemented in TH1K, TProfile, TProfile2D, TH2Poly, TProfile2Poly, and TProfile3D.; Definition at line 269 of file TH1.h. ◆ GetBinError() [3/3]. virtual Double_t TH1::GetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz . ); const. inlinevirtual . Reimplemented in TH1K, TProfile, TProfile3D, TProfile2D, TH2Poly, and TProfile2Poly.; Definition at line 270 of file TH1.h. ◆ GetBinErrorLow(). Double_t TH1::GetBinErrorLow ; (; Int_t ; bin); const. virtual . Return lower error associated to bin number bin. ; The error will depend on the ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:150333,Availability,error,error,150333," Int_t ; bin); const. virtual . Return value of error associated to bin number bin. ; if the sum of squares of weights has been defined (via Sumw2), this function returns the sqrt(sum of w2). otherwise it returns the sqrt(contents) for this bin. ; Reimplemented in TH1K, TH2Poly, TProfile, TProfile2D, TProfile2Poly, TProfile2Poly, and TProfile3D.; Definition at line 9063 of file TH1.cxx. ◆ GetBinError() [2/3]. virtual Double_t TH1::GetBinError ; (; Int_t ; binx, . Int_t ; biny . ); const. inlinevirtual . Reimplemented in TH1K, TProfile, TProfile2D, TH2Poly, TProfile2Poly, and TProfile3D.; Definition at line 269 of file TH1.h. ◆ GetBinError() [3/3]. virtual Double_t TH1::GetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz . ); const. inlinevirtual . Reimplemented in TH1K, TProfile, TProfile3D, TProfile2D, TH2Poly, and TProfile2Poly.; Definition at line 270 of file TH1.h. ◆ GetBinErrorLow(). Double_t TH1::GetBinErrorLow ; (; Int_t ; bin); const. virtual . Return lower error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - lower interval value ; Reimplemented in TH2, and TH3.; Definition at line 9079 of file TH1.cxx. ◆ GetBinErrorOption(). virtual EBinErrorOpt TH1::GetBinErrorOption ; (; ); const. inlinevirtual . Definition at line 273 of file TH1.h. ◆ GetBinErrorSqUnchecked(). virtual Double_t TH1::GetBinErrorSqUnchecked ; (; Int_t ; bin); const. inlineprotectedvirtual . Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 449 of file TH1.h. ◆ GetBinErrorUp(). Double_t TH1::GetBinErrorUp ; (; Int_t ; bin); const. virtual . Return upper error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - upper interval value ; Reimplemented in TH2, and TH3.; Definition at line 9110 of file TH1.cxx. ◆ GetBinLowEdge(). Double_t TH1::GetBinLowEdge ; (; Int_t ; bin); const. virtual . Return bin lower edge for 1D histogram. ; Better t",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:150375,Availability,error,error,150375,"sum of squares of weights has been defined (via Sumw2), this function returns the sqrt(sum of w2). otherwise it returns the sqrt(contents) for this bin. ; Reimplemented in TH1K, TH2Poly, TProfile, TProfile2D, TProfile2Poly, TProfile2Poly, and TProfile3D.; Definition at line 9063 of file TH1.cxx. ◆ GetBinError() [2/3]. virtual Double_t TH1::GetBinError ; (; Int_t ; binx, . Int_t ; biny . ); const. inlinevirtual . Reimplemented in TH1K, TProfile, TProfile2D, TH2Poly, TProfile2Poly, and TProfile3D.; Definition at line 269 of file TH1.h. ◆ GetBinError() [3/3]. virtual Double_t TH1::GetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz . ); const. inlinevirtual . Reimplemented in TH1K, TProfile, TProfile3D, TProfile2D, TH2Poly, and TProfile2Poly.; Definition at line 270 of file TH1.h. ◆ GetBinErrorLow(). Double_t TH1::GetBinErrorLow ; (; Int_t ; bin); const. virtual . Return lower error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - lower interval value ; Reimplemented in TH2, and TH3.; Definition at line 9079 of file TH1.cxx. ◆ GetBinErrorOption(). virtual EBinErrorOpt TH1::GetBinErrorOption ; (; ); const. inlinevirtual . Definition at line 273 of file TH1.h. ◆ GetBinErrorSqUnchecked(). virtual Double_t TH1::GetBinErrorSqUnchecked ; (; Int_t ; bin); const. inlineprotectedvirtual . Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 449 of file TH1.h. ◆ GetBinErrorUp(). Double_t TH1::GetBinErrorUp ; (; Int_t ; bin); const. virtual . Return upper error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - upper interval value ; Reimplemented in TH2, and TH3.; Definition at line 9110 of file TH1.cxx. ◆ GetBinLowEdge(). Double_t TH1::GetBinLowEdge ; (; Int_t ; bin); const. virtual . Return bin lower edge for 1D histogram. ; Better to use h1.GetXaxis()->GetBinLowEdge(bin) ; Definition at line 9152 of file TH1.cxx. ◆ GetBinW",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:150997,Availability,error,error,150997,"Double_t TH1::GetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz . ); const. inlinevirtual . Reimplemented in TH1K, TProfile, TProfile3D, TProfile2D, TH2Poly, and TProfile2Poly.; Definition at line 270 of file TH1.h. ◆ GetBinErrorLow(). Double_t TH1::GetBinErrorLow ; (; Int_t ; bin); const. virtual . Return lower error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - lower interval value ; Reimplemented in TH2, and TH3.; Definition at line 9079 of file TH1.cxx. ◆ GetBinErrorOption(). virtual EBinErrorOpt TH1::GetBinErrorOption ; (; ); const. inlinevirtual . Definition at line 273 of file TH1.h. ◆ GetBinErrorSqUnchecked(). virtual Double_t TH1::GetBinErrorSqUnchecked ; (; Int_t ; bin); const. inlineprotectedvirtual . Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 449 of file TH1.h. ◆ GetBinErrorUp(). Double_t TH1::GetBinErrorUp ; (; Int_t ; bin); const. virtual . Return upper error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - upper interval value ; Reimplemented in TH2, and TH3.; Definition at line 9110 of file TH1.cxx. ◆ GetBinLowEdge(). Double_t TH1::GetBinLowEdge ; (; Int_t ; bin); const. virtual . Return bin lower edge for 1D histogram. ; Better to use h1.GetXaxis()->GetBinLowEdge(bin) ; Definition at line 9152 of file TH1.cxx. ◆ GetBinWidth(). Double_t TH1::GetBinWidth ; (; Int_t ; bin); const. virtual . Return bin width for 1D histogram. ; Better to use h1.GetXaxis()->GetBinWidth(bin) ; Definition at line 9163 of file TH1.cxx. ◆ GetBinWithContent(). Double_t TH1::GetBinWithContent ; (; Double_t ; c, . Int_t & ; binx, . Int_t ; firstx = 0, . Int_t ; lastx = 0, . Double_t ; maxdiff = 0 . ); const. virtual . Compute first binx in the range [firstx,lastx] for which diff = abs(bin_content-c) <= maxdiff. ; In case several bins in the specified range with diff=0 are found the first bin found is returned",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:151039,Availability,error,error,151039,"evirtual . Reimplemented in TH1K, TProfile, TProfile3D, TProfile2D, TH2Poly, and TProfile2Poly.; Definition at line 270 of file TH1.h. ◆ GetBinErrorLow(). Double_t TH1::GetBinErrorLow ; (; Int_t ; bin); const. virtual . Return lower error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - lower interval value ; Reimplemented in TH2, and TH3.; Definition at line 9079 of file TH1.cxx. ◆ GetBinErrorOption(). virtual EBinErrorOpt TH1::GetBinErrorOption ; (; ); const. inlinevirtual . Definition at line 273 of file TH1.h. ◆ GetBinErrorSqUnchecked(). virtual Double_t TH1::GetBinErrorSqUnchecked ; (; Int_t ; bin); const. inlineprotectedvirtual . Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 449 of file TH1.h. ◆ GetBinErrorUp(). Double_t TH1::GetBinErrorUp ; (; Int_t ; bin); const. virtual . Return upper error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - upper interval value ; Reimplemented in TH2, and TH3.; Definition at line 9110 of file TH1.cxx. ◆ GetBinLowEdge(). Double_t TH1::GetBinLowEdge ; (; Int_t ; bin); const. virtual . Return bin lower edge for 1D histogram. ; Better to use h1.GetXaxis()->GetBinLowEdge(bin) ; Definition at line 9152 of file TH1.cxx. ◆ GetBinWidth(). Double_t TH1::GetBinWidth ; (; Int_t ; bin); const. virtual . Return bin width for 1D histogram. ; Better to use h1.GetXaxis()->GetBinWidth(bin) ; Definition at line 9163 of file TH1.cxx. ◆ GetBinWithContent(). Double_t TH1::GetBinWithContent ; (; Double_t ; c, . Int_t & ; binx, . Int_t ; firstx = 0, . Int_t ; lastx = 0, . Double_t ; maxdiff = 0 . ); const. virtual . Compute first binx in the range [firstx,lastx] for which diff = abs(bin_content-c) <= maxdiff. ; In case several bins in the specified range with diff=0 are found the first bin found is returned in binx. In case several bins in the specified range satisfy diff <=maxdiff the bin with th",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:158321,Availability,error,error,158321," . Return the current number of entries. ; Definition at line 4423 of file TH1.cxx. ◆ GetFunction(). TF1 * TH1::GetFunction ; (; const char * ; name); const. virtual . Return pointer to function with name. ; Functions such as TH1::Fit store the fitted function in the list of functions of this histogram. ; Definition at line 9051 of file TH1.cxx. ◆ GetIntegral(). Double_t * TH1::GetIntegral ; (; ). virtual . Return a pointer to the array of bins integral. ; if the pointer fIntegral is null, TH1::ComputeIntegral is called The array dimension is the number of bins in the histograms including underflow and overflow (fNCells) the last value integral[fNCells] is set to the number of entries of the histogram ; Definition at line 2586 of file TH1.cxx. ◆ GetKurtosis(). Double_t TH1::GetKurtosis ; (; Int_t ; axis = 1); const. virtual . For axis =1, 2 or 3 returns kurtosis of the histogram along x, y or z axis. Kurtosis(gaussian(0, 1)) = 0.; For axis =11, 12 or 13 returns the approximate standard error of kurtosis of the histogram along x, y or z axis. Note, that since third and fourth moment are not calculated at the fill time, kurtosis and its standard error are computed bin by bin; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. See TH1::GetMean and TH1::GetStdDev. ; Definition at line 7744 of file TH1.cxx. ◆ GetLabelColor(). Color_t TH1::GetLabelColor ; (; Option_t * ; axis = ""X""); const. virtual . Return the ""axis"" label color. ; Definition at line 53 of file Haxis.cxx. ◆ GetLabelFont(). Style_t TH1::GetLabelFont ; (; Option_t * ; axis = ""X""); const. virtual . Return the ""axis"" label font. ; Definition at line 66 of file Haxis.cxx. ◆ GetLabelOffset(). Float_t TH1::GetLabelOffset ; (; Option_t * ; axis = ""X""); const. virtual . Return the ""axis"" label offset. ; Definition at line 79 of file Haxis.cxx. ◆ GetLabelSize(). Float_t TH1::GetLabelSize ; (; Option_t * ; axis = ""X""); const. virtual . Return the ""axis"" label size. ; Definiti",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:158482,Availability,error,error,158482,"turn pointer to function with name. ; Functions such as TH1::Fit store the fitted function in the list of functions of this histogram. ; Definition at line 9051 of file TH1.cxx. ◆ GetIntegral(). Double_t * TH1::GetIntegral ; (; ). virtual . Return a pointer to the array of bins integral. ; if the pointer fIntegral is null, TH1::ComputeIntegral is called The array dimension is the number of bins in the histograms including underflow and overflow (fNCells) the last value integral[fNCells] is set to the number of entries of the histogram ; Definition at line 2586 of file TH1.cxx. ◆ GetKurtosis(). Double_t TH1::GetKurtosis ; (; Int_t ; axis = 1); const. virtual . For axis =1, 2 or 3 returns kurtosis of the histogram along x, y or z axis. Kurtosis(gaussian(0, 1)) = 0.; For axis =11, 12 or 13 returns the approximate standard error of kurtosis of the histogram along x, y or z axis. Note, that since third and fourth moment are not calculated at the fill time, kurtosis and its standard error are computed bin by bin; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. See TH1::GetMean and TH1::GetStdDev. ; Definition at line 7744 of file TH1.cxx. ◆ GetLabelColor(). Color_t TH1::GetLabelColor ; (; Option_t * ; axis = ""X""); const. virtual . Return the ""axis"" label color. ; Definition at line 53 of file Haxis.cxx. ◆ GetLabelFont(). Style_t TH1::GetLabelFont ; (; Option_t * ; axis = ""X""); const. virtual . Return the ""axis"" label font. ; Definition at line 66 of file Haxis.cxx. ◆ GetLabelOffset(). Float_t TH1::GetLabelOffset ; (; Option_t * ; axis = ""X""); const. virtual . Return the ""axis"" label offset. ; Definition at line 79 of file Haxis.cxx. ◆ GetLabelSize(). Float_t TH1::GetLabelSize ; (; Option_t * ; axis = ""X""); const. virtual . Return the ""axis"" label size. ; Definition at line 92 of file Haxis.cxx. ◆ GetListOfFunctions(). TList * TH1::GetListOfFunctions ; (; ); const. inline . Definition at line 244 of file TH1.h. ◆ GetLowEdge(). voi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:161144,Availability,error,error,161144,"1::GetMaximumBin can be used to get the location of the maximum value. ; Reimplemented in TH2Poly.; Definition at line 8545 of file TH1.cxx. ◆ GetMaximumBin() [1/2]. Int_t TH1::GetMaximumBin ; (; ); const. virtual . Return location of bin with maximum value in the range. ; TH1::GetMaximum can be used to get the maximum value. ; Definition at line 8577 of file TH1.cxx. ◆ GetMaximumBin() [2/2]. Int_t TH1::GetMaximumBin ; (; Int_t & ; locmax, . Int_t & ; locmay, . Int_t & ; locmaz . ); const. virtual . Return location of bin with maximum value in the range. ; Definition at line 8586 of file TH1.cxx. ◆ GetMaximumStored(). virtual Double_t TH1::GetMaximumStored ; (; ); const. inlinevirtual . Definition at line 289 of file TH1.h. ◆ GetMean(). Double_t TH1::GetMean ; (; Int_t ; axis = 1); const. virtual . For axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis. ; For axis = 11, 12, 13 returns the standard error of the mean value of the histogram along X, Y or Z axis; Note that the mean value/StdDev is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram.; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. By default, if no range has been set, the returned mean is the (unbinned) one calculated at fill time. If a range has been set, however, the mean is calculated using the bins in range, as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned mean (and all other statistics) is always that of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats.; Return mean value of this histogram along the X axis. ; Definition at line 7535 of file",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:162321,Availability,error,error,162321,"nge includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram.; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. By default, if no range has been set, the returned mean is the (unbinned) one calculated at fill time. If a range has been set, however, the mean is calculated using the bins in range, as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned mean (and all other statistics) is always that of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats.; Return mean value of this histogram along the X axis. ; Definition at line 7535 of file TH1.cxx. ◆ GetMeanError(). Double_t TH1::GetMeanError ; (; Int_t ; axis = 1); const. virtual . Return standard error of mean of this histogram along the X axis. ; Note that the mean value/StdDev is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram.; Also note, that although the definition of standard error doesn't include the assumption of normality, many uses of this feature implicitly assume it.; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. By default, if no range has been set, the returned value is the (unbinned) one calculated at fill time. If a range has been set, however, the value is calculated using the bins in range, as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned value (and all other statist",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:162788,Availability,error,error,162788,"calculated using the bins in range, as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned mean (and all other statistics) is always that of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats.; Return mean value of this histogram along the X axis. ; Definition at line 7535 of file TH1.cxx. ◆ GetMeanError(). Double_t TH1::GetMeanError ; (; Int_t ; axis = 1); const. virtual . Return standard error of mean of this histogram along the X axis. ; Note that the mean value/StdDev is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram.; Also note, that although the definition of standard error doesn't include the assumption of normality, many uses of this feature implicitly assume it.; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. By default, if no range has been set, the returned value is the (unbinned) one calculated at fill time. If a range has been set, however, the value is calculated using the bins in range, as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned value (and all other statistics) is always that of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats. ; Definition at line 7575 of file TH1.cxx. ◆ GetMinimum(). Double_t TH1::GetMinimum ; (; Double_t ; minval = -FLT_MAX); const. virtual . Return minimum value larger than minval of bins in the range, unless the value has been overridden by TH1::SetMinimum, in which case it returns that value. ; This happens, for example, when the histogram is drawn and the y or z axi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:172757,Availability,error,error,172757,"hen when the integral was computed. NB Only valid for 1-d histograms. Use GetRandom2 or 3 otherwise. If the histogram has a bin with negative content a NaN is returned ; Definition at line 5010 of file TH1.cxx. ◆ GetRMS(). Double_t TH1::GetRMS ; (; Int_t ; axis = 1); const. inline . This function returns the Standard Deviation (Sigma) of the distribution not the Root Mean Square (RMS). ; The name ""RMS"" is been often used as a synonym for the Standard Deviation and it was introduced many years ago (Hbook/PAW times). We keep the name GetRMS for continuity as an alias to GetStdDev. GetStdDev() should be used instead. ; Definition at line 319 of file TH1.h. ◆ GetRMSError(). Double_t TH1::GetRMSError ; (; Int_t ; axis = 1); const. inline . Definition at line 320 of file TH1.h. ◆ GetSkewness(). Double_t TH1::GetSkewness ; (; Int_t ; axis = 1); const. virtual . For axis = 1, 2 or 3 returns skewness of the histogram along x, y or z axis.; For axis = 11, 12 or 13 returns the approximate standard error of skewness of the histogram along x, y or z axis. Note, that since third and fourth moment are not calculated at the fill time, skewness and its standard error are computed bin by bin; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. See TH1::GetMean and TH1::GetStdDev. ; Definition at line 7671 of file TH1.cxx. ◆ GetStatOverflows(). EStatOverflows TH1::GetStatOverflows ; (; ); const. inline . Get the behaviour adopted by the object about the statoverflows. See EStatOverflows for more information. ; Definition at line 323 of file TH1.h. ◆ GetStatOverflowsBehaviour(). Bool_t TH1::GetStatOverflowsBehaviour ; (; ); const. inlineprotected . Definition at line 152 of file TH1.h. ◆ GetStats(). void TH1::GetStats ; (; Double_t * ; stats); const. virtual . fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:172918,Availability,error,error,172918,"efinition at line 5010 of file TH1.cxx. ◆ GetRMS(). Double_t TH1::GetRMS ; (; Int_t ; axis = 1); const. inline . This function returns the Standard Deviation (Sigma) of the distribution not the Root Mean Square (RMS). ; The name ""RMS"" is been often used as a synonym for the Standard Deviation and it was introduced many years ago (Hbook/PAW times). We keep the name GetRMS for continuity as an alias to GetStdDev. GetStdDev() should be used instead. ; Definition at line 319 of file TH1.h. ◆ GetRMSError(). Double_t TH1::GetRMSError ; (; Int_t ; axis = 1); const. inline . Definition at line 320 of file TH1.h. ◆ GetSkewness(). Double_t TH1::GetSkewness ; (; Int_t ; axis = 1); const. virtual . For axis = 1, 2 or 3 returns skewness of the histogram along x, y or z axis.; For axis = 11, 12 or 13 returns the approximate standard error of skewness of the histogram along x, y or z axis. Note, that since third and fourth moment are not calculated at the fill time, skewness and its standard error are computed bin by bin; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. See TH1::GetMean and TH1::GetStdDev. ; Definition at line 7671 of file TH1.cxx. ◆ GetStatOverflows(). EStatOverflows TH1::GetStatOverflows ; (; ); const. inline . Get the behaviour adopted by the object about the statoverflows. See EStatOverflows for more information. ; Definition at line 323 of file TH1.h. ◆ GetStatOverflowsBehaviour(). Bool_t TH1::GetStatOverflowsBehaviour ; (; ); const. inlineprotected . Definition at line 152 of file TH1.h. ◆ GetStats(). void TH1::GetStats ; (; Double_t * ; stats); const. virtual . fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; If no axis-subrange is specified (via TAxis::SetRange), the array stats is simply a copy of the statistics quantities computed at filling time. If a sub-range i",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:175240,Availability,error,error,175240," unbinned by default (calling TH1::ResetStats forces them to use binned statistics). You can reset TAxis::kAxisRange using TAxis::SetRange(0, 0).; Note that the mean value/StdDev is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram. ; Reimplemented in TH2, TH2Poly, TH3, TProfile, TProfile2D, TProfile2Poly, and TProfile3D.; Definition at line 7833 of file TH1.cxx. ◆ GetStdDev(). Double_t TH1::GetStdDev ; (; Int_t ; axis = 1); const. virtual . Returns the Standard Deviation (Sigma). ; The Sigma estimate is computed as ; \[; \sqrt{\frac{1}{N}(\sum(x_i-x_{mean})^2)}; \]. For axis = 1,2 or 3 returns the Sigma value of the histogram along X, Y or Z axis For axis = 11, 12 or 13 returns the error of StdDev estimation along X, Y or Z axis for Normal distribution; Note that the mean value/sigma is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram.; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. By default, if no range has been set, the returned standard deviation is the (unbinned) one calculated at fill time. If a range has been set, however, the standard deviation is calculated using the bins in range, as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned standard deviation (and all other statistics) is always that of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats. ; Def",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:176408,Availability,error,error,176408," the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram.; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. By default, if no range has been set, the returned standard deviation is the (unbinned) one calculated at fill time. If a range has been set, however, the standard deviation is calculated using the bins in range, as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned standard deviation (and all other statistics) is always that of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats. ; Definition at line 7607 of file TH1.cxx. ◆ GetStdDevError(). Double_t TH1::GetStdDevError ; (; Int_t ; axis = 1); const. virtual . Return error of standard deviation estimation for Normal distribution. ; Note that the mean value/StdDev is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram.; Value returned is standard deviation of sample standard deviation. Note that it is an approximated value which is valid only in the case that the original data distribution is Normal. The correct one would require the 4-th momentum value, which cannot be accurately estimated from a histogram since the x-information for all entries is not kept.; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. By default, if no range has been set, the returned value is the (unbinned) one calculated at fill time. If a range has been set, however, the value is calculated",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:180608,Availability,error,error,180608,"tegral() [1/2]. Double_t TH1::Integral ; (; Int_t ; binx1, . Int_t ; binx2, . Option_t * ; option = """" . ); const. virtual . Return integral of bin contents in range [binx1,binx2]. ; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. ; Reimplemented in TH2, and TH3.; Definition at line 7953 of file TH1.cxx. ◆ Integral() [2/2]. Double_t TH1::Integral ; (; Option_t * ; option = """"); const. virtual . Return integral of bin contents. ; Only bins in the bins range are considered.; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. ; Reimplemented in TH2, TH3, TH2, TH2Poly, and TH3.; Definition at line 7941 of file TH1.cxx. ◆ IntegralAndError(). Double_t TH1::IntegralAndError ; (; Int_t ; binx1, . Int_t ; binx2, . Double_t & ; error, . Option_t * ; option = """" . ); const. virtual . Return integral of bin contents in range [binx1,binx2] and its error. ; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. the error is computed using error propagation from the bin errors assuming that all the bins are uncorrelated ; Reimplemented in TH2, and TH3.; Definition at line 7968 of file TH1.cxx. ◆ Interpolate() [1/3]. Double_t TH1::Interpolate ; (; Double_t ; x); const. virtual . Given a point x, approximates the value via linear interpolation based on the two nearest bin centers. ; Andy Mastbaum 10/21/08 ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 5115 of file TH1.cxx. ◆ Interpolate() [2/3]. Double_t TH1::Interpolate ; (; Double_t ; x, . Double_t ; y . ); const. virtual . 2d Interpolation. Not yet implemented. ; Reimplemented in TH2, TH2Poly, and TH3.; Definition a",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:180727,Availability,error,error,180727,"tion = """" . ); const. virtual . Return integral of bin contents in range [binx1,binx2]. ; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. ; Reimplemented in TH2, and TH3.; Definition at line 7953 of file TH1.cxx. ◆ Integral() [2/2]. Double_t TH1::Integral ; (; Option_t * ; option = """"); const. virtual . Return integral of bin contents. ; Only bins in the bins range are considered.; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. ; Reimplemented in TH2, TH3, TH2, TH2Poly, and TH3.; Definition at line 7941 of file TH1.cxx. ◆ IntegralAndError(). Double_t TH1::IntegralAndError ; (; Int_t ; binx1, . Int_t ; binx2, . Double_t & ; error, . Option_t * ; option = """" . ); const. virtual . Return integral of bin contents in range [binx1,binx2] and its error. ; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. the error is computed using error propagation from the bin errors assuming that all the bins are uncorrelated ; Reimplemented in TH2, and TH3.; Definition at line 7968 of file TH1.cxx. ◆ Interpolate() [1/3]. Double_t TH1::Interpolate ; (; Double_t ; x); const. virtual . Given a point x, approximates the value via linear interpolation based on the two nearest bin centers. ; Andy Mastbaum 10/21/08 ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 5115 of file TH1.cxx. ◆ Interpolate() [2/3]. Double_t TH1::Interpolate ; (; Double_t ; x, . Double_t ; y . ); const. virtual . 2d Interpolation. Not yet implemented. ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 5145 of file TH1.cxx. ◆ Interpolate() [3/3]. Double_t TH1::Interpolate ; (; Double_t ;",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:180927,Availability,error,error,180927," TH2, and TH3.; Definition at line 7953 of file TH1.cxx. ◆ Integral() [2/2]. Double_t TH1::Integral ; (; Option_t * ; option = """"); const. virtual . Return integral of bin contents. ; Only bins in the bins range are considered.; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. ; Reimplemented in TH2, TH3, TH2, TH2Poly, and TH3.; Definition at line 7941 of file TH1.cxx. ◆ IntegralAndError(). Double_t TH1::IntegralAndError ; (; Int_t ; binx1, . Int_t ; binx2, . Double_t & ; error, . Option_t * ; option = """" . ); const. virtual . Return integral of bin contents in range [binx1,binx2] and its error. ; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. the error is computed using error propagation from the bin errors assuming that all the bins are uncorrelated ; Reimplemented in TH2, and TH3.; Definition at line 7968 of file TH1.cxx. ◆ Interpolate() [1/3]. Double_t TH1::Interpolate ; (; Double_t ; x); const. virtual . Given a point x, approximates the value via linear interpolation based on the two nearest bin centers. ; Andy Mastbaum 10/21/08 ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 5115 of file TH1.cxx. ◆ Interpolate() [2/3]. Double_t TH1::Interpolate ; (; Double_t ; x, . Double_t ; y . ); const. virtual . 2d Interpolation. Not yet implemented. ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 5145 of file TH1.cxx. ◆ Interpolate() [3/3]. Double_t TH1::Interpolate ; (; Double_t ; x, . Double_t ; y, . Double_t ; z . ); const. virtual . 3d Interpolation. Not yet implemented. ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 5154 of file TH1.cxx. ◆ IsA(). TClass * TH1::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplem",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:180951,Availability,error,error,180951," TH2, and TH3.; Definition at line 7953 of file TH1.cxx. ◆ Integral() [2/2]. Double_t TH1::Integral ; (; Option_t * ; option = """"); const. virtual . Return integral of bin contents. ; Only bins in the bins range are considered.; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. ; Reimplemented in TH2, TH3, TH2, TH2Poly, and TH3.; Definition at line 7941 of file TH1.cxx. ◆ IntegralAndError(). Double_t TH1::IntegralAndError ; (; Int_t ; binx1, . Int_t ; binx2, . Double_t & ; error, . Option_t * ; option = """" . ); const. virtual . Return integral of bin contents in range [binx1,binx2] and its error. ; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. the error is computed using error propagation from the bin errors assuming that all the bins are uncorrelated ; Reimplemented in TH2, and TH3.; Definition at line 7968 of file TH1.cxx. ◆ Interpolate() [1/3]. Double_t TH1::Interpolate ; (; Double_t ; x); const. virtual . Given a point x, approximates the value via linear interpolation based on the two nearest bin centers. ; Andy Mastbaum 10/21/08 ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 5115 of file TH1.cxx. ◆ Interpolate() [2/3]. Double_t TH1::Interpolate ; (; Double_t ; x, . Double_t ; y . ); const. virtual . 2d Interpolation. Not yet implemented. ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 5145 of file TH1.cxx. ◆ Interpolate() [3/3]. Double_t TH1::Interpolate ; (; Double_t ; x, . Double_t ; y, . Double_t ; z . ); const. virtual . 3d Interpolation. Not yet implemented. ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 5154 of file TH1.cxx. ◆ IsA(). TClass * TH1::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplem",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:180982,Availability,error,errors,180982," TH2, and TH3.; Definition at line 7953 of file TH1.cxx. ◆ Integral() [2/2]. Double_t TH1::Integral ; (; Option_t * ; option = """"); const. virtual . Return integral of bin contents. ; Only bins in the bins range are considered.; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. ; Reimplemented in TH2, TH3, TH2, TH2Poly, and TH3.; Definition at line 7941 of file TH1.cxx. ◆ IntegralAndError(). Double_t TH1::IntegralAndError ; (; Int_t ; binx1, . Int_t ; binx2, . Double_t & ; error, . Option_t * ; option = """" . ); const. virtual . Return integral of bin contents in range [binx1,binx2] and its error. ; By default the integral is computed as the sum of bin contents in the range. if option ""width"" is specified, the integral is the sum of the bin contents multiplied by the bin width in x. the error is computed using error propagation from the bin errors assuming that all the bins are uncorrelated ; Reimplemented in TH2, and TH3.; Definition at line 7968 of file TH1.cxx. ◆ Interpolate() [1/3]. Double_t TH1::Interpolate ; (; Double_t ; x); const. virtual . Given a point x, approximates the value via linear interpolation based on the two nearest bin centers. ; Andy Mastbaum 10/21/08 ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 5115 of file TH1.cxx. ◆ Interpolate() [2/3]. Double_t TH1::Interpolate ; (; Double_t ; x, . Double_t ; y . ); const. virtual . 2d Interpolation. Not yet implemented. ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 5145 of file TH1.cxx. ◆ Interpolate() [3/3]. Double_t TH1::Interpolate ; (; Double_t ; x, . Double_t ; y, . Double_t ; z . ); const. virtual . 3d Interpolation. Not yet implemented. ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 5154 of file TH1.cxx. ◆ IsA(). TClass * TH1::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplem",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:188058,Availability,down,down,188058,"l . Reduce the number of bins for the axis passed in the option to the number of bins having a label. ; The method will remove only the extra bins existing after the last ""labeled"" bin. Note that if there are ""un-labeled"" bins present between ""labeled"" bins they will not be removed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5245 of file TH1.cxx. ◆ LabelsInflate(). void TH1::LabelsInflate ; (; Option_t * ; ax = ""X""). virtual . Double the number of bins for axis. ; Refill histogram. This function is called by TAxis::FindBin(const char *label) ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5315 of file TH1.cxx. ◆ LabelsOption(). void TH1::LabelsOption ; (; Option_t * ; option = ""h"", . Option_t * ; ax = ""X"" . ). virtual . Sort bins with labels or set option(s) to draw axis with labels. ; Parameters. [in]option; ""a"" sort by alphabetic order; "">"" sort by decreasing values; ""<"" sort by increasing values; ""h"" draw labels horizontal; ""v"" draw labels vertical; ""u"" draw labels up (end of label right adjusted); ""d"" draw labels down (start of label left adjusted). In case not all bins have labels sorting will work only in the case the first n consecutive bins have all labels and sorting will be performed on those label bins.; Parameters. [in]axaxis . Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5382 of file TH1.cxx. ◆ LoggedInconsistency(). int TH1::LoggedInconsistency ; (; const char * ; name, . const TH1 * ; h1, . const TH1 * ; h2, . bool ; useMerge = false . ); const. protected . Definition at line 883 of file TH1.cxx. ◆ Merge() [1/2]. virtual Long64_t TH1::Merge ; (; TCollection * ; list). inlinevirtual . Reimplemented in TH2Poly, TProfile2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 345 of file TH1.h. ◆ Merge() [2/2]. Long64_t TH1::Merge ; (; TCollection * ; li, . Option_t * ; opt . ). Add all histograms in the collection to this histogram. ; This function compute",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:189056,Availability,error,errors,189056,"p (end of label right adjusted); ""d"" draw labels down (start of label left adjusted). In case not all bins have labels sorting will work only in the case the first n consecutive bins have all labels and sorting will be performed on those label bins.; Parameters. [in]axaxis . Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5382 of file TH1.cxx. ◆ LoggedInconsistency(). int TH1::LoggedInconsistency ; (; const char * ; name, . const TH1 * ; h1, . const TH1 * ; h2, . bool ; useMerge = false . ); const. protected . Definition at line 883 of file TH1.cxx. ◆ Merge() [1/2]. virtual Long64_t TH1::Merge ; (; TCollection * ; list). inlinevirtual . Reimplemented in TH2Poly, TProfile2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 345 of file TH1.h. ◆ Merge() [2/2]. Long64_t TH1::Merge ; (; TCollection * ; li, . Option_t * ; opt . ). Add all histograms in the collection to this histogram. ; This function computes the min/max for the x axis, compute a new number of bins, if necessary, add bin contents, errors and statistics. If all histograms have bin labels, bins with identical labels will be merged, no matter what their order is. If overflows are present and limits are different the function will fail. The function returns the total number of entries in the result histogram if the merge is successful, -1 otherwise.; Possible option: -NOL : the merger will ignore the labels and merge the histograms bin by bin using bin center values to match bins -NOCHECK: the histogram will not perform a check for duplicate labels in case of axes with labels. The check (enabled by default) slows down the merging; IMPORTANT remark. The axis x may have different number of bins and different limits, BUT the largest bin width must be a multiple of the smallest bin width and the upper limit must also be a multiple of the bin width. Example:; void atest() {; TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; TH1F *h3 = new",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:189646,Availability,down,down,189646,"ollection * ; list). inlinevirtual . Reimplemented in TH2Poly, TProfile2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 345 of file TH1.h. ◆ Merge() [2/2]. Long64_t TH1::Merge ; (; TCollection * ; li, . Option_t * ; opt . ). Add all histograms in the collection to this histogram. ; This function computes the min/max for the x axis, compute a new number of bins, if necessary, add bin contents, errors and statistics. If all histograms have bin labels, bins with identical labels will be merged, no matter what their order is. If overflows are present and limits are different the function will fail. The function returns the total number of entries in the result histogram if the merge is successful, -1 otherwise.; Possible option: -NOL : the merger will ignore the labels and merge the histograms bin by bin using bin center values to match bins -NOCHECK: the histogram will not perform a check for duplicate labels in case of axes with labels. The check (enabled by default) slows down the merging; IMPORTANT remark. The axis x may have different number of bins and different limits, BUT the largest bin width must be a multiple of the smallest bin width and the upper limit must also be a multiple of the bin width. Example:; void atest() {; TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; TH1F *h3 = new TH1F(""h3"",""h3"",330,-55,55);; TRandom r;; for (Int_t i=0;i<10000;i++) {; h1->Fill(r.Gaus(-55,10));; h2->Fill(r.Gaus(55,10));; h3->Fill(r.Gaus(0,10));; }; ; TList *list = new TList;; list->Add(h1);; list->Add(h2);; list->Add(h3);; TH1F *h = (TH1F*)h1->Clone(""h"");; h->Reset();; h->Merge(list);; h->Draw();; }; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27. Defini",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:190807,Availability,error,errors,190807,"pper limit must also be a multiple of the bin width. Example:; void atest() {; TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; TH1F *h3 = new TH1F(""h3"",""h3"",330,-55,55);; TRandom r;; for (Int_t i=0;i<10000;i++) {; h1->Fill(r.Gaus(-55,10));; h2->Fill(r.Gaus(55,10));; h3->Fill(r.Gaus(0,10));; }; ; TList *list = new TList;; list->Add(h1);; list->Add(h2);; list->Add(h3);; TH1F *h = (TH1F*)h1->Clone(""h"");; h->Reset();; h->Merge(list);; h->Draw();; }; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27. Definition at line 6022 of file TH1.cxx. ◆ Multiply() [1/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1). virtual . Multiply this histogram by h1. ; this = this*h1; If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6111 of file TH1.cxx. ◆ Multiply() [2/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by multiplication of h1 by h2. ; this = (c1*h1)*(c2*h2); If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:190826,Availability,avail,available,190826,"pper limit must also be a multiple of the bin width. Example:; void atest() {; TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; TH1F *h3 = new TH1F(""h3"",""h3"",330,-55,55);; TRandom r;; for (Int_t i=0;i<10000;i++) {; h1->Fill(r.Gaus(-55,10));; h2->Fill(r.Gaus(55,10));; h3->Fill(r.Gaus(0,10));; }; ; TList *list = new TList;; list->Add(h1);; list->Add(h2);; list->Add(h3);; TH1F *h = (TH1F*)h1->Clone(""h"");; h->Reset();; h->Merge(list);; h->Draw();; }; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27. Definition at line 6022 of file TH1.cxx. ◆ Multiply() [1/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1). virtual . Multiply this histogram by h1. ; this = this*h1; If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6111 of file TH1.cxx. ◆ Multiply() [2/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by multiplication of h1 by h2. ; this = (c1*h1)*(c2*h2); If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:190850,Availability,error,errors,190850,"pper limit must also be a multiple of the bin width. Example:; void atest() {; TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; TH1F *h3 = new TH1F(""h3"",""h3"",330,-55,55);; TRandom r;; for (Int_t i=0;i<10000;i++) {; h1->Fill(r.Gaus(-55,10));; h2->Fill(r.Gaus(55,10));; h3->Fill(r.Gaus(0,10));; }; ; TList *list = new TList;; list->Add(h1);; list->Add(h2);; list->Add(h3);; TH1F *h = (TH1F*)h1->Clone(""h"");; h->Reset();; h->Merge(list);; h->Draw();; }; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27. Definition at line 6022 of file TH1.cxx. ◆ Multiply() [1/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1). virtual . Multiply this histogram by h1. ; this = this*h1; If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6111 of file TH1.cxx. ◆ Multiply() [2/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by multiplication of h1 by h2. ; this = (c1*h1)*(c2*h2); If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:191007,Availability,error,errors,191007,"30,-55,55);; TRandom r;; for (Int_t i=0;i<10000;i++) {; h1->Fill(r.Gaus(-55,10));; h2->Fill(r.Gaus(55,10));; h3->Fill(r.Gaus(0,10));; }; ; TList *list = new TList;; list->Add(h1);; list->Add(h2);; list->Add(h3);; TH1F *h = (TH1F*)h1->Clone(""h"");; h->Reset();; h->Merge(list);; h->Draw();; }; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27. Definition at line 6022 of file TH1.cxx. ◆ Multiply() [1/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1). virtual . Multiply this histogram by h1. ; this = this*h1; If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6111 of file TH1.cxx. ◆ Multiply() [2/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by multiplication of h1 by h2. ; this = (c1*h1)*(c2*h2); If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimpleme",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:191589,Availability,error,errors,191589,"rators.Definition TRandom.h:27. Definition at line 6022 of file TH1.cxx. ◆ Multiply() [1/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1). virtual . Multiply this histogram by h1. ; this = this*h1; If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6111 of file TH1.cxx. ◆ Multiply() [2/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by multiplication of h1 by h2. ; this = (c1*h1)*(c2*h2); If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6160 of file TH1.cxx. ◆ Multiply() [3/3]. Bool_t TH1::Multiply ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: ; this = this*c1*f1; If errors are defined (see TH1::Sumw2), errors are also recalculated.; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if t",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:191608,Availability,avail,available,191608,"rators.Definition TRandom.h:27. Definition at line 6022 of file TH1.cxx. ◆ Multiply() [1/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1). virtual . Multiply this histogram by h1. ; this = this*h1; If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6111 of file TH1.cxx. ◆ Multiply() [2/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by multiplication of h1 by h2. ; this = (c1*h1)*(c2*h2); If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6160 of file TH1.cxx. ◆ Multiply() [3/3]. Bool_t TH1::Multiply ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: ; this = this*c1*f1; If errors are defined (see TH1::Sumw2), errors are also recalculated.; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if t",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:191632,Availability,error,errors,191632,"rators.Definition TRandom.h:27. Definition at line 6022 of file TH1.cxx. ◆ Multiply() [1/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1). virtual . Multiply this histogram by h1. ; this = this*h1; If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6111 of file TH1.cxx. ◆ Multiply() [2/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by multiplication of h1 by h2. ; this = (c1*h1)*(c2*h2); If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6160 of file TH1.cxx. ◆ Multiply() [3/3]. Bool_t TH1::Multiply ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: ; this = this*c1*f1; If errors are defined (see TH1::Sumw2), errors are also recalculated.; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if t",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:191796,Availability,error,errors,191796,"f this are available (TH1::Sumw2), errors are recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6111 of file TH1.cxx. ◆ Multiply() [2/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by multiplication of h1 by h2. ; this = (c1*h1)*(c2*h2); If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6160 of file TH1.cxx. ◆ Multiply() [3/3]. Bool_t TH1::Multiply ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: ; this = this*c1*f1; If errors are defined (see TH1::Sumw2), errors are also recalculated.; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 6049 of file TH1.cxx. ◆ operator=(). TH1 & TH1::operator= ; (; const TH1 & ; ). privatedelete",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:192256,Availability,error,errors,192256,"2D, and TProfile3D.; Definition at line 6111 of file TH1.cxx. ◆ Multiply() [2/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by multiplication of h1 by h2. ; this = (c1*h1)*(c2*h2); If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6160 of file TH1.cxx. ◆ Multiply() [3/3]. Bool_t TH1::Multiply ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: ; this = this*c1*f1; If errors are defined (see TH1::Sumw2), errors are also recalculated.; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 6049 of file TH1.cxx. ◆ operator=(). TH1 & TH1::operator= ; (; const TH1 & ; ). privatedelete . ◆ Paint(). void TH1::Paint ; (; Option_t * ; option = """"). overridevirtual . Control routine to paint any kind of histograms. ; This function is automatically called by TCanvas::Update. (see TH1::Draw for the list of options) ; Reimplemented from TObject.; Definition at line 6206 of file TH1.cxx. ◆ Print(). void TH1::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print some global quantities for this histogram. ; Parameters. [",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:192293,Availability,error,errors,192293,"2D, and TProfile3D.; Definition at line 6111 of file TH1.cxx. ◆ Multiply() [2/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by multiplication of h1 by h2. ; this = (c1*h1)*(c2*h2); If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6160 of file TH1.cxx. ◆ Multiply() [3/3]. Bool_t TH1::Multiply ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: ; this = this*c1*f1; If errors are defined (see TH1::Sumw2), errors are also recalculated.; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 6049 of file TH1.cxx. ◆ operator=(). TH1 & TH1::operator= ; (; const TH1 & ; ). privatedelete . ◆ Paint(). void TH1::Paint ; (; Option_t * ; option = """"). overridevirtual . Control routine to paint any kind of histograms. ; This function is automatically called by TCanvas::Update. (see TH1::Draw for the list of options) ; Reimplemented from TObject.; Definition at line 6206 of file TH1.cxx. ◆ Print(). void TH1::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print some global quantities for this histogram. ; Parameters. [",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:192417,Availability,error,errors,192417,"le_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by multiplication of h1 by h2. ; this = (c1*h1)*(c2*h2); If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6160 of file TH1.cxx. ◆ Multiply() [3/3]. Bool_t TH1::Multiply ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: ; this = this*c1*f1; If errors are defined (see TH1::Sumw2), errors are also recalculated.; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 6049 of file TH1.cxx. ◆ operator=(). TH1 & TH1::operator= ; (; const TH1 & ; ). privatedelete . ◆ Paint(). void TH1::Paint ; (; Option_t * ; option = """"). overridevirtual . Control routine to paint any kind of histograms. ; This function is automatically called by TCanvas::Update. (see TH1::Draw for the list of options) ; Reimplemented from TObject.; Definition at line 6206 of file TH1.cxx. ◆ Print(). void TH1::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print some global quantities for this histogram. ; Parameters. [in]option; ""base"" is given, number of bins and ranges are also printed; ""range"" is given, bin contents and errors are also printed for all bins in the current range (defaul",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:193372,Availability,error,errors,193372,"o use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 6049 of file TH1.cxx. ◆ operator=(). TH1 & TH1::operator= ; (; const TH1 & ; ). privatedelete . ◆ Paint(). void TH1::Paint ; (; Option_t * ; option = """"). overridevirtual . Control routine to paint any kind of histograms. ; This function is automatically called by TCanvas::Update. (see TH1::Draw for the list of options) ; Reimplemented from TObject.; Definition at line 6206 of file TH1.cxx. ◆ Print(). void TH1::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print some global quantities for this histogram. ; Parameters. [in]option; ""base"" is given, number of bins and ranges are also printed; ""range"" is given, bin contents and errors are also printed for all bins in the current range (default 1-->nbins); ""all"" is given, bin contents and errors are also printed for all bins including under and overflows. . Reimplemented from TObject.; Definition at line 7009 of file TH1.cxx. ◆ PutStats(). void TH1::PutStats ; (; Double_t * ; stats). virtual . Replace current statistics with the values in array stats. ; Reimplemented in TH2, TH3, TProfile, TProfile2D, and TProfile3D.; Definition at line 7884 of file TH1.cxx. ◆ Rebin(). TH1 * TH1::Rebin ; (; Int_t ; ngroup = 2, . const char * ; newname = """", . const Double_t * ; xbins = nullptr . ). virtual . Rebin this histogram. ; case 1 xbins=0; If newname is blank (default), the current histogram is modified and a pointer to it is returned.; If newname is not blank, the current histogram is not modified, and a new histogram is returned which is a Clone of the current histogram with its name set to newname.; The parameter ngroup indicates how many bins of this have to be merged into one bin of the result.; If",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:193484,Availability,error,errors,193484,"o use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 6049 of file TH1.cxx. ◆ operator=(). TH1 & TH1::operator= ; (; const TH1 & ; ). privatedelete . ◆ Paint(). void TH1::Paint ; (; Option_t * ; option = """"). overridevirtual . Control routine to paint any kind of histograms. ; This function is automatically called by TCanvas::Update. (see TH1::Draw for the list of options) ; Reimplemented from TObject.; Definition at line 6206 of file TH1.cxx. ◆ Print(). void TH1::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print some global quantities for this histogram. ; Parameters. [in]option; ""base"" is given, number of bins and ranges are also printed; ""range"" is given, bin contents and errors are also printed for all bins in the current range (default 1-->nbins); ""all"" is given, bin contents and errors are also printed for all bins including under and overflows. . Reimplemented from TObject.; Definition at line 7009 of file TH1.cxx. ◆ PutStats(). void TH1::PutStats ; (; Double_t * ; stats). virtual . Replace current statistics with the values in array stats. ; Reimplemented in TH2, TH3, TProfile, TProfile2D, and TProfile3D.; Definition at line 7884 of file TH1.cxx. ◆ Rebin(). TH1 * TH1::Rebin ; (; Int_t ; ngroup = 2, . const char * ; newname = """", . const Double_t * ; xbins = nullptr . ). virtual . Rebin this histogram. ; case 1 xbins=0; If newname is blank (default), the current histogram is modified and a pointer to it is returned.; If newname is not blank, the current histogram is not modified, and a new histogram is returned which is a Clone of the current histogram with its name set to newname.; The parameter ngroup indicates how many bins of this have to be merged into one bin of the result.; If",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:194435,Availability,error,errors,194435,"en, bin contents and errors are also printed for all bins including under and overflows. . Reimplemented from TObject.; Definition at line 7009 of file TH1.cxx. ◆ PutStats(). void TH1::PutStats ; (; Double_t * ; stats). virtual . Replace current statistics with the values in array stats. ; Reimplemented in TH2, TH3, TProfile, TProfile2D, and TProfile3D.; Definition at line 7884 of file TH1.cxx. ◆ Rebin(). TH1 * TH1::Rebin ; (; Int_t ; ngroup = 2, . const char * ; newname = """", . const Double_t * ; xbins = nullptr . ). virtual . Rebin this histogram. ; case 1 xbins=0; If newname is blank (default), the current histogram is modified and a pointer to it is returned.; If newname is not blank, the current histogram is not modified, and a new histogram is returned which is a Clone of the current histogram with its name set to newname.; The parameter ngroup indicates how many bins of this have to be merged into one bin of the result.; If the original histogram has errors stored (via Sumw2), the resulting histograms has new errors correctly calculated.; examples: if h1 is an existing TH1F histogram with 100 bins; h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; h1->Rebin(5); //merges five bins in one in h1; TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; // merging 5 bins of h1 in one bin; TH1::Rebinvirtual TH1 * Rebin(Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr)Rebin this histogram.Definition TH1.cxx:6275; NOTE: If ngroup is not an exact divider of the number of bins, the top limit of the rebinned histogram is reduced to the upper edge of the last bin that can make a complete group. The remaining bins are added to the overflow bin. Statistics will be recomputed from the new bin contents.; case 2 xbins!=0; A new histogram is created (you should specify newname). The parameter ngroup is the number of variable size bins in the created histogram. The array xbins must contain ngroup+",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:194495,Availability,error,errors,194495,"en, bin contents and errors are also printed for all bins including under and overflows. . Reimplemented from TObject.; Definition at line 7009 of file TH1.cxx. ◆ PutStats(). void TH1::PutStats ; (; Double_t * ; stats). virtual . Replace current statistics with the values in array stats. ; Reimplemented in TH2, TH3, TProfile, TProfile2D, and TProfile3D.; Definition at line 7884 of file TH1.cxx. ◆ Rebin(). TH1 * TH1::Rebin ; (; Int_t ; ngroup = 2, . const char * ; newname = """", . const Double_t * ; xbins = nullptr . ). virtual . Rebin this histogram. ; case 1 xbins=0; If newname is blank (default), the current histogram is modified and a pointer to it is returned.; If newname is not blank, the current histogram is not modified, and a new histogram is returned which is a Clone of the current histogram with its name set to newname.; The parameter ngroup indicates how many bins of this have to be merged into one bin of the result.; If the original histogram has errors stored (via Sumw2), the resulting histograms has new errors correctly calculated.; examples: if h1 is an existing TH1F histogram with 100 bins; h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; h1->Rebin(5); //merges five bins in one in h1; TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; // merging 5 bins of h1 in one bin; TH1::Rebinvirtual TH1 * Rebin(Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr)Rebin this histogram.Definition TH1.cxx:6275; NOTE: If ngroup is not an exact divider of the number of bins, the top limit of the rebinned histogram is reduced to the upper edge of the last bin that can make a complete group. The remaining bins are added to the overflow bin. Statistics will be recomputed from the new bin contents.; case 2 xbins!=0; A new histogram is created (you should specify newname). The parameter ngroup is the number of variable size bins in the created histogram. The array xbins must contain ngroup+",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:195546,Availability,error,errors,195546,"h 100 bins; h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; h1->Rebin(5); //merges five bins in one in h1; TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; // merging 5 bins of h1 in one bin; TH1::Rebinvirtual TH1 * Rebin(Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr)Rebin this histogram.Definition TH1.cxx:6275; NOTE: If ngroup is not an exact divider of the number of bins, the top limit of the rebinned histogram is reduced to the upper edge of the last bin that can make a complete group. The remaining bins are added to the overflow bin. Statistics will be recomputed from the new bin contents.; case 2 xbins!=0; A new histogram is created (you should specify newname). The parameter ngroup is the number of variable size bins in the created histogram. The array xbins must contain ngroup+1 elements that represent the low-edges of the bins. If the original histogram has errors stored (via Sumw2), the resulting histograms has new errors correctly calculated.; NOTE: The bin edges specified in xbins should correspond to bin edges in the original histogram. If a bin edge in the new histogram is in the middle of a bin in the original histogram, all entries in the split bin in the original histogram will be transfered to the lower of the two possible bins in the new histogram. This is probably not what you want. A warning message is emitted in this case; examples: if h1 is an existing TH1F histogram with 100 bins; Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew. Reimplemented in TH2, and TProfile.; Definition at line 6275 of file TH1.cxx. ◆ RebinAxis(). virtual void TH1::RebinAxis ; (; Double_t ; x, . TAxis * ; axis . ). inlinevirtual . Definition at line 437 of file TH1.h. ◆ RebinX(). virtual TH1 * TH1::RebinX ; (; Int_t ; ngroup = 2, . const char * ; newname = """" . ). ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:195606,Availability,error,errors,195606,"h 100 bins; h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; h1->Rebin(5); //merges five bins in one in h1; TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; // merging 5 bins of h1 in one bin; TH1::Rebinvirtual TH1 * Rebin(Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr)Rebin this histogram.Definition TH1.cxx:6275; NOTE: If ngroup is not an exact divider of the number of bins, the top limit of the rebinned histogram is reduced to the upper edge of the last bin that can make a complete group. The remaining bins are added to the overflow bin. Statistics will be recomputed from the new bin contents.; case 2 xbins!=0; A new histogram is created (you should specify newname). The parameter ngroup is the number of variable size bins in the created histogram. The array xbins must contain ngroup+1 elements that represent the low-edges of the bins. If the original histogram has errors stored (via Sumw2), the resulting histograms has new errors correctly calculated.; NOTE: The bin edges specified in xbins should correspond to bin edges in the original histogram. If a bin edge in the new histogram is in the middle of a bin in the original histogram, all entries in the split bin in the original histogram will be transfered to the lower of the two possible bins in the new histogram. This is probably not what you want. A warning message is emitted in this case; examples: if h1 is an existing TH1F histogram with 100 bins; Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew. Reimplemented in TH2, and TProfile.; Definition at line 6275 of file TH1.cxx. ◆ RebinAxis(). virtual void TH1::RebinAxis ; (; Double_t ; x, . TAxis * ; axis . ). inlinevirtual . Definition at line 437 of file TH1.h. ◆ RebinX(). virtual TH1 * TH1::RebinX ; (; Int_t ; ngroup = 2, . const char * ; newname = """" . ). ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:196812,Availability,error,errors,196812,"le of a bin in the original histogram, all entries in the split bin in the original histogram will be transfered to the lower of the two possible bins in the new histogram. This is probably not what you want. A warning message is emitted in this case; examples: if h1 is an existing TH1F histogram with 100 bins; Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew. Reimplemented in TH2, and TProfile.; Definition at line 6275 of file TH1.cxx. ◆ RebinAxis(). virtual void TH1::RebinAxis ; (; Double_t ; x, . TAxis * ; axis . ). inlinevirtual . Definition at line 437 of file TH1.h. ◆ RebinX(). virtual TH1 * TH1::RebinX ; (; Int_t ; ngroup = 2, . const char * ; newname = """" . ). inlinevirtual . Reimplemented in TH2, TH3, and TProfile2D.; Definition at line 354 of file TH1.h. ◆ Rebuild(). void TH1::Rebuild ; (; Option_t * ; option = """"). virtual . Using the current bin info, recompute the arrays for contents and errors. ; Definition at line 7087 of file TH1.cxx. ◆ RecomputeAxisLimits(). Bool_t TH1::RecomputeAxisLimits ; (; TAxis & ; destAxis, . const TAxis & ; anAxis . ). staticprotected . Finds new limits for the axis for the Merge function. ; returns false if the limits are incompatible ; Definition at line 5908 of file TH1.cxx. ◆ RecursiveRemove(). void TH1::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Recursively remove object from the list of functions. ; Reimplemented from TObject.; Definition at line 6576 of file TH1.cxx. ◆ Reset(). void TH1::Reset ; (; Option_t * ; option = """"). virtual . Reset this histogram: contents, errors, etc. ; Parameters. [in]option; if ""ICE"" is specified, resets only Integral, Contents and Errors.; if ""ICES"" is specified, resets only Integral, Contents, Errors and Statistics This option is used; if ""M"" is specified, resets also Minimum and Maximum . Reimplemented in TH2Poly, TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH1K, TH",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:197452,Availability,error,errors,197452,"finition at line 437 of file TH1.h. ◆ RebinX(). virtual TH1 * TH1::RebinX ; (; Int_t ; ngroup = 2, . const char * ; newname = """" . ). inlinevirtual . Reimplemented in TH2, TH3, and TProfile2D.; Definition at line 354 of file TH1.h. ◆ Rebuild(). void TH1::Rebuild ; (; Option_t * ; option = """"). virtual . Using the current bin info, recompute the arrays for contents and errors. ; Definition at line 7087 of file TH1.cxx. ◆ RecomputeAxisLimits(). Bool_t TH1::RecomputeAxisLimits ; (; TAxis & ; destAxis, . const TAxis & ; anAxis . ). staticprotected . Finds new limits for the axis for the Merge function. ; returns false if the limits are incompatible ; Definition at line 5908 of file TH1.cxx. ◆ RecursiveRemove(). void TH1::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Recursively remove object from the list of functions. ; Reimplemented from TObject.; Definition at line 6576 of file TH1.cxx. ◆ Reset(). void TH1::Reset ; (; Option_t * ; option = """"). virtual . Reset this histogram: contents, errors, etc. ; Parameters. [in]option; if ""ICE"" is specified, resets only Integral, Contents and Errors.; if ""ICES"" is specified, resets only Integral, Contents, Errors and Statistics This option is used; if ""M"" is specified, resets also Minimum and Maximum . Reimplemented in TH2Poly, TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH1K, TH2, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, TProfile2Poly, and TProfile3D.; Definition at line 7103 of file TH1.cxx. ◆ ResetStats(). void TH1::ResetStats ; (; ). virtual . Reset the statistics including the number of entries and replace with values calculated from bin content. ; The number of entries is set to the total bin content or (in case of weighted histogram) to number of effective entries; Note that, by default, before calling this function, statistics are those computed at fill time, which are unbinned. See TH1::GetStats. ; Definition at line 7902 of file TH1.cxx. ◆ RetrieveBinContent()",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:199553,Availability,error,error,199553,"eBinContent(). Double_t TH1::RetrieveBinContent ; (; Int_t ; bin); const. protectedvirtual . Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH1K, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 9439 of file TH1.cxx. ◆ SameLimitsAndNBins(). Bool_t TH1::SameLimitsAndNBins ; (; const TAxis & ; axis1, . const TAxis & ; axis2 . ). staticprotected . Same limits and bins. ; Definition at line 5898 of file TH1.cxx. ◆ SaveAs(). void TH1::SaveAs ; (; const char * ; filename = ""hist"", . Option_t * ; option = """" . ); const. overridevirtual . Save the histogram as .csv, .tsv or .txt. ; In case of any other extension, fall back to TObject::SaveAs, which saves as a .C macro (but with the file name extension specified by the user); The Under/Overflow bins are also exported (as first and last lines) The fist 2 columns are the lower and upper edges of the bins Column 3 contains the bin contents The last column contains the error in y. If errors are not present, the column is left empty; The result can be immediately imported into Excel, gnuplot, Python or whatever, without the needing to install pyroot, etc.; Parameters. filenamethe name of the file where to store the histogram ; optionsome tuning options. The file extension defines the delimiter used:; .csv : comma; .tsv : tab; .txt : space. If option = ""title"" a title line is generated. If the y-axis has a title, this title is displayed as column 3 name, otherwise, it shows ""BinContent"" ; Reimplemented from TObject.; Definition at line 7181 of file TH1.cxx. ◆ SavePrimitive(). void TH1::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Reimplemented in TH1K, TH2Poly, TProfile, TProfile2D, and TProfile3D",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:199568,Availability,error,errors,199568," TH1S, TH1I, TH1L, TH1F, TH1D, TH1K, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 9439 of file TH1.cxx. ◆ SameLimitsAndNBins(). Bool_t TH1::SameLimitsAndNBins ; (; const TAxis & ; axis1, . const TAxis & ; axis2 . ). staticprotected . Same limits and bins. ; Definition at line 5898 of file TH1.cxx. ◆ SaveAs(). void TH1::SaveAs ; (; const char * ; filename = ""hist"", . Option_t * ; option = """" . ); const. overridevirtual . Save the histogram as .csv, .tsv or .txt. ; In case of any other extension, fall back to TObject::SaveAs, which saves as a .C macro (but with the file name extension specified by the user); The Under/Overflow bins are also exported (as first and last lines) The fist 2 columns are the lower and upper edges of the bins Column 3 contains the bin contents The last column contains the error in y. If errors are not present, the column is left empty; The result can be immediately imported into Excel, gnuplot, Python or whatever, without the needing to install pyroot, etc.; Parameters. filenamethe name of the file where to store the histogram ; optionsome tuning options. The file extension defines the delimiter used:; .csv : comma; .tsv : tab; .txt : space. If option = ""title"" a title line is generated. If the y-axis has a title, this title is displayed as column 3 name, otherwise, it shows ""BinContent"" ; Reimplemented from TObject.; Definition at line 7181 of file TH1.cxx. ◆ SavePrimitive(). void TH1::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Reimplemented in TH1K, TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 7237 of file TH1.cxx. ◆ SavePrimitiveHelp(). void TH1::SavePrimitiveHelp ; (; std::ostream & ; out, . const char * ; hname, . Option_t * ; option = """" . ). protectedvirtual . Helper function for the Sav",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:200961,Availability,error,errors,200961," title line is generated. If the y-axis has a title, this title is displayed as column 3 name, otherwise, it shows ""BinContent"" ; Reimplemented from TObject.; Definition at line 7181 of file TH1.cxx. ◆ SavePrimitive(). void TH1::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Reimplemented in TH1K, TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 7237 of file TH1.cxx. ◆ SavePrimitiveHelp(). void TH1::SavePrimitiveHelp ; (; std::ostream & ; out, . const char * ; hname, . Option_t * ; option = """" . ). protectedvirtual . Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ; Definition at line 7379 of file TH1.cxx. ◆ Scale(). void TH1::Scale ; (; Double_t ; c1 = 1, . Option_t * ; option = """" . ). virtual . Multiply this histogram by a constant c1. ; this = c1*this; Note that both contents and errors (if any) are scaled. This function uses the services of TH1::Add; IMPORTANT NOTE: Sumw2() is called automatically when scaling. If you are not interested in the histogram statistics you can call Sumw2(kFALSE) or use the option ""nosw2""; One can scale a histogram such that the bins integral is equal to the normalization parameter via TH1::Scale(Double_t norm), where norm is the desired normalization divided by the integral of the histogram.; If option contains ""width"" the bin contents and errors are divided by the bin width. ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 6604 of file TH1.cxx. ◆ SetAxisColor(). void TH1::SetAxisColor ; (; Color_t ; color = 1, . Option_t * ; axis = ""X"" . ). virtual . Set color to draw the axis line and tick marks. ; axis specifies which axis (""x"",""y"",""z""), default = ""x"" if axis=""xyz"" set all 3 axes ; Definition at line 187 of file Haxis.cxx. ◆ SetAxisRange(). void TH1::SetAxisRange ; (; Double_t ; xmi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:201460,Availability,error,errors,201460,"37 of file TH1.cxx. ◆ SavePrimitiveHelp(). void TH1::SavePrimitiveHelp ; (; std::ostream & ; out, . const char * ; hname, . Option_t * ; option = """" . ). protectedvirtual . Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ; Definition at line 7379 of file TH1.cxx. ◆ Scale(). void TH1::Scale ; (; Double_t ; c1 = 1, . Option_t * ; option = """" . ). virtual . Multiply this histogram by a constant c1. ; this = c1*this; Note that both contents and errors (if any) are scaled. This function uses the services of TH1::Add; IMPORTANT NOTE: Sumw2() is called automatically when scaling. If you are not interested in the histogram statistics you can call Sumw2(kFALSE) or use the option ""nosw2""; One can scale a histogram such that the bins integral is equal to the normalization parameter via TH1::Scale(Double_t norm), where norm is the desired normalization divided by the integral of the histogram.; If option contains ""width"" the bin contents and errors are divided by the bin width. ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 6604 of file TH1.cxx. ◆ SetAxisColor(). void TH1::SetAxisColor ; (; Color_t ; color = 1, . Option_t * ; axis = ""X"" . ). virtual . Set color to draw the axis line and tick marks. ; axis specifies which axis (""x"",""y"",""z""), default = ""x"" if axis=""xyz"" set all 3 axes ; Definition at line 187 of file Haxis.cxx. ◆ SetAxisRange(). void TH1::SetAxisRange ; (; Double_t ; xmin, . Double_t ; xmax, . Option_t * ; axis = ""X"" . ). virtual . Set the ""axis"" range. ; Definition at line 201 of file Haxis.cxx. ◆ SetBarOffset(). void TH1::SetBarOffset ; (; Float_t ; offset = 0.25). inlinevirtual . Set the bar offset as fraction of the bin width for drawing mode ""B"". ; This shifts bars to the right on the x axis, and helps to draw bars next to each other. See alsoTHistPainter, SetBarWidth() ; Definition at line 364 of file TH1.h. ◆ SetBarWidth(). void TH1::SetBarWidth ; (; Float",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:203714,Availability,error,error,203714,"ter, SetBarOffset() ; Definition at line 365 of file TH1.h. ◆ SetBinContent() [1/3]. void TH1::SetBinContent ; (; Int_t ; bin, . Double_t ; content . ). virtual . Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 9222 of file TH1.cxx. ◆ SetBinContent() [2/3]. virtual void TH1::SetBinContent ; (; Int_t ; bin, . Int_t ; , . Double_t ; content . ). inlinevirtual . Reimplemented in TH3, TH2, and TH2Poly.; Definition at line 367 of file TH1.h. ◆ SetBinContent() [3/3]. virtual void TH1::SetBinContent ; (; Int_t ; bin, . Int_t ; , . Int_t ; , . Double_t ; content . ). inlinevirtual . Reimplemented in TH3, TH2, and TH2Poly.; Definition at line 368 of file TH1.h. ◆ SetBinError() [1/3]. void TH1::SetBinError ; (; Int_t ; bin, . Double_t ; error . ). virtual . Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ; Note that in case the user sets after calling SetBinError explicitly a new bin content (e.g. using SetBinContent) he needs then to provide also the corresponding bin error (using SetBinError) since the bin error will not be recalculated after setting the content and a default error = 0 will be used for those bins.; See convention for numbering bins in TH1::GetBin ; Reimplemented in TH2Poly.; Definition at line 9206 of file TH1.cxx. ◆ SetBinError() [2/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9241 of file TH1.cxx. ◆ SetBinError() [3/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz, . Double_t ; error . ). virtual .",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:203850,Availability,error,error,203850,"(; Int_t ; bin, . Double_t ; content . ). virtual . Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 9222 of file TH1.cxx. ◆ SetBinContent() [2/3]. virtual void TH1::SetBinContent ; (; Int_t ; bin, . Int_t ; , . Double_t ; content . ). inlinevirtual . Reimplemented in TH3, TH2, and TH2Poly.; Definition at line 367 of file TH1.h. ◆ SetBinContent() [3/3]. virtual void TH1::SetBinContent ; (; Int_t ; bin, . Int_t ; , . Int_t ; , . Double_t ; content . ). inlinevirtual . Reimplemented in TH3, TH2, and TH2Poly.; Definition at line 368 of file TH1.h. ◆ SetBinError() [1/3]. void TH1::SetBinError ; (; Int_t ; bin, . Double_t ; error . ). virtual . Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ; Note that in case the user sets after calling SetBinError explicitly a new bin content (e.g. using SetBinContent) he needs then to provide also the corresponding bin error (using SetBinError) since the bin error will not be recalculated after setting the content and a default error = 0 will be used for those bins.; See convention for numbering bins in TH1::GetBin ; Reimplemented in TH2Poly.; Definition at line 9206 of file TH1.cxx. ◆ SetBinError() [2/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9241 of file TH1.cxx. ◆ SetBinError() [3/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9251 of fil",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:204079,Availability,error,error,204079," new bin. ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 9222 of file TH1.cxx. ◆ SetBinContent() [2/3]. virtual void TH1::SetBinContent ; (; Int_t ; bin, . Int_t ; , . Double_t ; content . ). inlinevirtual . Reimplemented in TH3, TH2, and TH2Poly.; Definition at line 367 of file TH1.h. ◆ SetBinContent() [3/3]. virtual void TH1::SetBinContent ; (; Int_t ; bin, . Int_t ; , . Int_t ; , . Double_t ; content . ). inlinevirtual . Reimplemented in TH3, TH2, and TH2Poly.; Definition at line 368 of file TH1.h. ◆ SetBinError() [1/3]. void TH1::SetBinError ; (; Int_t ; bin, . Double_t ; error . ). virtual . Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ; Note that in case the user sets after calling SetBinError explicitly a new bin content (e.g. using SetBinContent) he needs then to provide also the corresponding bin error (using SetBinError) since the bin error will not be recalculated after setting the content and a default error = 0 will be used for those bins.; See convention for numbering bins in TH1::GetBin ; Reimplemented in TH2Poly.; Definition at line 9206 of file TH1.cxx. ◆ SetBinError() [2/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9241 of file TH1.cxx. ◆ SetBinError() [3/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9251 of file TH1.cxx. ◆ SetBinErrorOption(). virtual void TH1::SetBinErrorOption ; (; EBinErrorOpt ; type). inlinevirtual . Definition at line 381 of file TH1.h. ◆ SetBins() [1/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins . ). virtual . Redefine x axis parameters with variable bin siz",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:204119,Availability,error,error,204119," new bin. ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 9222 of file TH1.cxx. ◆ SetBinContent() [2/3]. virtual void TH1::SetBinContent ; (; Int_t ; bin, . Int_t ; , . Double_t ; content . ). inlinevirtual . Reimplemented in TH3, TH2, and TH2Poly.; Definition at line 367 of file TH1.h. ◆ SetBinContent() [3/3]. virtual void TH1::SetBinContent ; (; Int_t ; bin, . Int_t ; , . Int_t ; , . Double_t ; content . ). inlinevirtual . Reimplemented in TH3, TH2, and TH2Poly.; Definition at line 368 of file TH1.h. ◆ SetBinError() [1/3]. void TH1::SetBinError ; (; Int_t ; bin, . Double_t ; error . ). virtual . Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ; Note that in case the user sets after calling SetBinError explicitly a new bin content (e.g. using SetBinContent) he needs then to provide also the corresponding bin error (using SetBinError) since the bin error will not be recalculated after setting the content and a default error = 0 will be used for those bins.; See convention for numbering bins in TH1::GetBin ; Reimplemented in TH2Poly.; Definition at line 9206 of file TH1.cxx. ◆ SetBinError() [2/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9241 of file TH1.cxx. ◆ SetBinError() [3/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9251 of file TH1.cxx. ◆ SetBinErrorOption(). virtual void TH1::SetBinErrorOption ; (; EBinErrorOpt ; type). inlinevirtual . Definition at line 381 of file TH1.h. ◆ SetBins() [1/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins . ). virtual . Redefine x axis parameters with variable bin siz",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:204190,Availability,error,error,204190," new bin. ; Reimplemented in TH2, TH2Poly, and TH3.; Definition at line 9222 of file TH1.cxx. ◆ SetBinContent() [2/3]. virtual void TH1::SetBinContent ; (; Int_t ; bin, . Int_t ; , . Double_t ; content . ). inlinevirtual . Reimplemented in TH3, TH2, and TH2Poly.; Definition at line 367 of file TH1.h. ◆ SetBinContent() [3/3]. virtual void TH1::SetBinContent ; (; Int_t ; bin, . Int_t ; , . Int_t ; , . Double_t ; content . ). inlinevirtual . Reimplemented in TH3, TH2, and TH2Poly.; Definition at line 368 of file TH1.h. ◆ SetBinError() [1/3]. void TH1::SetBinError ; (; Int_t ; bin, . Double_t ; error . ). virtual . Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ; Note that in case the user sets after calling SetBinError explicitly a new bin content (e.g. using SetBinContent) he needs then to provide also the corresponding bin error (using SetBinError) since the bin error will not be recalculated after setting the content and a default error = 0 will be used for those bins.; See convention for numbering bins in TH1::GetBin ; Reimplemented in TH2Poly.; Definition at line 9206 of file TH1.cxx. ◆ SetBinError() [2/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9241 of file TH1.cxx. ◆ SetBinError() [3/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9251 of file TH1.cxx. ◆ SetBinErrorOption(). virtual void TH1::SetBinErrorOption ; (; EBinErrorOpt ; type). inlinevirtual . Definition at line 381 of file TH1.h. ◆ SetBins() [1/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins . ). virtual . Redefine x axis parameters with variable bin siz",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:204442,Availability,error,error,204442,"3]. virtual void TH1::SetBinContent ; (; Int_t ; bin, . Int_t ; , . Int_t ; , . Double_t ; content . ). inlinevirtual . Reimplemented in TH3, TH2, and TH2Poly.; Definition at line 368 of file TH1.h. ◆ SetBinError() [1/3]. void TH1::SetBinError ; (; Int_t ; bin, . Double_t ; error . ). virtual . Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ; Note that in case the user sets after calling SetBinError explicitly a new bin content (e.g. using SetBinContent) he needs then to provide also the corresponding bin error (using SetBinError) since the bin error will not be recalculated after setting the content and a default error = 0 will be used for those bins.; See convention for numbering bins in TH1::GetBin ; Reimplemented in TH2Poly.; Definition at line 9206 of file TH1.cxx. ◆ SetBinError() [2/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9241 of file TH1.cxx. ◆ SetBinError() [3/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9251 of file TH1.cxx. ◆ SetBinErrorOption(). virtual void TH1::SetBinErrorOption ; (; EBinErrorOpt ; type). inlinevirtual . Definition at line 381 of file TH1.h. ◆ SetBins() [1/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins . ). virtual . Redefine x axis parameters with variable bin sizes. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1 ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at lin",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:204692,Availability,error,error,204692,"nt_t ; bin, . Double_t ; error . ). virtual . Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ; Note that in case the user sets after calling SetBinError explicitly a new bin content (e.g. using SetBinContent) he needs then to provide also the corresponding bin error (using SetBinError) since the bin error will not be recalculated after setting the content and a default error = 0 will be used for those bins.; See convention for numbering bins in TH1::GetBin ; Reimplemented in TH2Poly.; Definition at line 9206 of file TH1.cxx. ◆ SetBinError() [2/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9241 of file TH1.cxx. ◆ SetBinError() [3/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9251 of file TH1.cxx. ◆ SetBinErrorOption(). virtual void TH1::SetBinErrorOption ; (; EBinErrorOpt ; type). inlinevirtual . Definition at line 381 of file TH1.h. ◆ SetBins() [1/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins . ). virtual . Redefine x axis parameters with variable bin sizes. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1 ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8794 of file TH1.cxx. ◆ SetBins() [2/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins . ). virtual . Redefine x and y axis parameters with variable bin sizes. ; The X and Y axis parameters ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:205196,Availability,error,errors,205196,"ented in TH2Poly.; Definition at line 9206 of file TH1.cxx. ◆ SetBinError() [2/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9241 of file TH1.cxx. ◆ SetBinError() [3/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9251 of file TH1.cxx. ◆ SetBinErrorOption(). virtual void TH1::SetBinErrorOption ; (; EBinErrorOpt ; type). inlinevirtual . Definition at line 381 of file TH1.h. ◆ SetBins() [1/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins . ). virtual . Redefine x axis parameters with variable bin sizes. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1 ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8794 of file TH1.cxx. ◆ SetBins() [2/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins . ). virtual . Redefine x and y axis parameters with variable bin sizes. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1 ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8848 of file TH1.cxx. ◆ SetBins() [3/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins, . Int_t ; nz, . const Double_t * ; zBins . ). virtual . Redefine x, y and z axis parameters with variable bin sizes. ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:205215,Availability,error,errors,205215,"ented in TH2Poly.; Definition at line 9206 of file TH1.cxx. ◆ SetBinError() [2/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9241 of file TH1.cxx. ◆ SetBinError() [3/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9251 of file TH1.cxx. ◆ SetBinErrorOption(). virtual void TH1::SetBinErrorOption ; (; EBinErrorOpt ; type). inlinevirtual . Definition at line 381 of file TH1.h. ◆ SetBins() [1/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins . ). virtual . Redefine x axis parameters with variable bin sizes. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1 ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8794 of file TH1.cxx. ◆ SetBins() [2/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins . ). virtual . Redefine x and y axis parameters with variable bin sizes. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1 ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8848 of file TH1.cxx. ◆ SetBins() [3/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins, . Int_t ; nz, . const Double_t * ; zBins . ). virtual . Redefine x, y and z axis parameters with variable bin sizes. ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:205741,Availability,error,errors,205741,". virtual void TH1::SetBinErrorOption ; (; EBinErrorOpt ; type). inlinevirtual . Definition at line 381 of file TH1.h. ◆ SetBins() [1/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins . ). virtual . Redefine x axis parameters with variable bin sizes. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1 ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8794 of file TH1.cxx. ◆ SetBins() [2/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins . ). virtual . Redefine x and y axis parameters with variable bin sizes. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1 ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8848 of file TH1.cxx. ◆ SetBins() [3/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins, . Int_t ; nz, . const Double_t * ; zBins . ). virtual . Redefine x, y and z axis parameters with variable bin sizes. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1, zBins is supposed to be of length nz+1 ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8905 of file TH1.cxx. ◆ SetBins() [4/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax . ). virtual . Redefine x axis parameters.",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:205760,Availability,error,errors,205760,". virtual void TH1::SetBinErrorOption ; (; EBinErrorOpt ; type). inlinevirtual . Definition at line 381 of file TH1.h. ◆ SetBins() [1/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins . ). virtual . Redefine x axis parameters with variable bin sizes. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1 ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8794 of file TH1.cxx. ◆ SetBins() [2/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins . ). virtual . Redefine x and y axis parameters with variable bin sizes. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1 ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8848 of file TH1.cxx. ◆ SetBins() [3/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins, . Int_t ; nz, . const Double_t * ; zBins . ). virtual . Redefine x, y and z axis parameters with variable bin sizes. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1, zBins is supposed to be of length nz+1 ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8905 of file TH1.cxx. ◆ SetBins() [4/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax . ). virtual . Redefine x axis parameters.",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:206374,Availability,error,errors,206374,"nt_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins . ). virtual . Redefine x and y axis parameters with variable bin sizes. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1 ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8848 of file TH1.cxx. ◆ SetBins() [3/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins, . Int_t ; nz, . const Double_t * ; zBins . ). virtual . Redefine x, y and z axis parameters with variable bin sizes. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1, zBins is supposed to be of length nz+1 ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8905 of file TH1.cxx. ◆ SetBins() [4/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax . ). virtual . Redefine x axis parameters. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8767 of file TH1.cxx. ◆ SetBins() [5/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax . ). virtual . Redefine x and y axis parameters. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lo",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:206393,Availability,error,errors,206393,"nt_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins . ). virtual . Redefine x and y axis parameters with variable bin sizes. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1 ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8848 of file TH1.cxx. ◆ SetBins() [3/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins, . Int_t ; nz, . const Double_t * ; zBins . ). virtual . Redefine x, y and z axis parameters with variable bin sizes. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1, zBins is supposed to be of length nz+1 ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8905 of file TH1.cxx. ◆ SetBins() [4/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax . ). virtual . Redefine x axis parameters. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8767 of file TH1.cxx. ◆ SetBins() [5/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax . ). virtual . Redefine x and y axis parameters. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lo",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:206931,Availability,error,errors,206931,".; Definition at line 8848 of file TH1.cxx. ◆ SetBins() [3/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins, . Int_t ; nz, . const Double_t * ; zBins . ). virtual . Redefine x, y and z axis parameters with variable bin sizes. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1, zBins is supposed to be of length nz+1 ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8905 of file TH1.cxx. ◆ SetBins() [4/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax . ). virtual . Redefine x axis parameters. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8767 of file TH1.cxx. ◆ SetBins() [5/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax . ). virtual . Redefine x and y axis parameters. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8820 of file TH1.cxx. ◆ SetBins() [6/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax, . Int_t ; nz, . Double_t ; zmin, . Double_t ; zmax . ). virtual . Redefine x, y and z axis parameters. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:206950,Availability,error,errors,206950,".; Definition at line 8848 of file TH1.cxx. ◆ SetBins() [3/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins, . Int_t ; nz, . const Double_t * ; zBins . ). virtual . Redefine x, y and z axis parameters with variable bin sizes. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1, zBins is supposed to be of length nz+1 ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8905 of file TH1.cxx. ◆ SetBins() [4/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax . ). virtual . Redefine x axis parameters. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8767 of file TH1.cxx. ◆ SetBins() [5/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax . ). virtual . Redefine x and y axis parameters. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8820 of file TH1.cxx. ◆ SetBins() [6/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax, . Int_t ; nz, . Double_t ; zmin, . Double_t ; zmax . ). virtual . Redefine x, y and z axis parameters. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:207433,Availability,error,errors,207433,"ns is supposed to be of length nx+1, yBins is supposed to be of length ny+1, zBins is supposed to be of length nz+1 ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8905 of file TH1.cxx. ◆ SetBins() [4/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax . ). virtual . Redefine x axis parameters. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8767 of file TH1.cxx. ◆ SetBins() [5/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax . ). virtual . Redefine x and y axis parameters. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8820 of file TH1.cxx. ◆ SetBins() [6/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax, . Int_t ; nz, . Double_t ; zmin, . Double_t ; zmax . ). virtual . Redefine x, y and z axis parameters. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8875 of file TH1.cxx. ◆ SetBinsLength(). virtual void TH1::SetBinsLength ; (; Int_t ; = -1). inlinevirtual . Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 380 of file TH1",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:207452,Availability,error,errors,207452,"ns is supposed to be of length nx+1, yBins is supposed to be of length ny+1, zBins is supposed to be of length nz+1 ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8905 of file TH1.cxx. ◆ SetBins() [4/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax . ). virtual . Redefine x axis parameters. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8767 of file TH1.cxx. ◆ SetBins() [5/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax . ). virtual . Redefine x and y axis parameters. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8820 of file TH1.cxx. ◆ SetBins() [6/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax, . Int_t ; nz, . Double_t ; zmin, . Double_t ; zmax . ). virtual . Redefine x, y and z axis parameters. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8875 of file TH1.cxx. ◆ SetBinsLength(). virtual void TH1::SetBinsLength ; (; Int_t ; = -1). inlinevirtual . Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 380 of file TH1",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:207993,Availability,error,errors,207993,"plemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8767 of file TH1.cxx. ◆ SetBins() [5/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax . ). virtual . Redefine x and y axis parameters. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8820 of file TH1.cxx. ◆ SetBins() [6/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax, . Int_t ; nz, . Double_t ; zmin, . Double_t ; zmax . ). virtual . Redefine x, y and z axis parameters. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8875 of file TH1.cxx. ◆ SetBinsLength(). virtual void TH1::SetBinsLength ; (; Int_t ; = -1). inlinevirtual . Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 380 of file TH1.h. ◆ SetBuffer(). void TH1::SetBuffer ; (; Int_t ; buffersize, . Option_t * ; option = """" . ). virtual . Set the maximum number of entries to be kept in the buffer. ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8458 of file TH1.cxx. ◆ SetCanExtend(). UInt_t TH1::SetCanExtend ; (; UInt_t ; extendBitMask). virtual . Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ; Definition at line 6649 of file TH1.cxx. ◆ SetCellContent(). vir",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:208012,Availability,error,errors,208012,"plemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8767 of file TH1.cxx. ◆ SetBins() [5/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax . ). virtual . Redefine x and y axis parameters. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8820 of file TH1.cxx. ◆ SetBins() [6/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax, . Int_t ; nz, . Double_t ; zmin, . Double_t ; zmax . ). virtual . Redefine x, y and z axis parameters. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8875 of file TH1.cxx. ◆ SetBinsLength(). virtual void TH1::SetBinsLength ; (; Int_t ; = -1). inlinevirtual . Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 380 of file TH1.h. ◆ SetBuffer(). void TH1::SetBuffer ; (; Int_t ; buffersize, . Option_t * ; option = """" . ). virtual . Set the maximum number of entries to be kept in the buffer. ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8458 of file TH1.cxx. ◆ SetCanExtend(). UInt_t TH1::SetCanExtend ; (; UInt_t ; extendBitMask). virtual . Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ; Definition at line 6649 of file TH1.cxx. ◆ SetCellContent(). vir",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:208928,Availability,mask,mask,208928,"xis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8875 of file TH1.cxx. ◆ SetBinsLength(). virtual void TH1::SetBinsLength ; (; Int_t ; = -1). inlinevirtual . Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 380 of file TH1.h. ◆ SetBuffer(). void TH1::SetBuffer ; (; Int_t ; buffersize, . Option_t * ; option = """" . ). virtual . Set the maximum number of entries to be kept in the buffer. ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8458 of file TH1.cxx. ◆ SetCanExtend(). UInt_t TH1::SetCanExtend ; (; UInt_t ; extendBitMask). virtual . Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ; Definition at line 6649 of file TH1.cxx. ◆ SetCellContent(). virtual void TH1::SetCellContent ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; content . ). inlinevirtual . Definition at line 439 of file TH1.h. ◆ SetCellError(). virtual void TH1::SetCellError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; content . ). inlinevirtual . Definition at line 441 of file TH1.h. ◆ SetColors(). void TH1::SetColors ; (; Color_t ; linecolor = -1, . Color_t ; markercolor = -1, . Color_t ; fillcolor = -1 . ). virtual . Shortcut to set the three histogram colors with a single call. ; By default: linecolor = markercolor = fillcolor = -1 If a color is < 0 this method does not change the corresponding color if positive or null it set the color.; For instance: h->SetColors(kRed, kRed);; kRed@ kRedDefinition Rtypes.h:66; will set the line color and the marker color to red. ; Definition at line 4467 of file TH1.cxx. ◆ SetContent().",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:208958,Availability,mask,mask,208958,"xis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8875 of file TH1.cxx. ◆ SetBinsLength(). virtual void TH1::SetBinsLength ; (; Int_t ; = -1). inlinevirtual . Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 380 of file TH1.h. ◆ SetBuffer(). void TH1::SetBuffer ; (; Int_t ; buffersize, . Option_t * ; option = """" . ). virtual . Set the maximum number of entries to be kept in the buffer. ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8458 of file TH1.cxx. ◆ SetCanExtend(). UInt_t TH1::SetCanExtend ; (; UInt_t ; extendBitMask). virtual . Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ; Definition at line 6649 of file TH1.cxx. ◆ SetCellContent(). virtual void TH1::SetCellContent ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; content . ). inlinevirtual . Definition at line 439 of file TH1.h. ◆ SetCellError(). virtual void TH1::SetCellError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; content . ). inlinevirtual . Definition at line 441 of file TH1.h. ◆ SetColors(). void TH1::SetColors ; (; Color_t ; linecolor = -1, . Color_t ; markercolor = -1, . Color_t ; fillcolor = -1 . ). virtual . Shortcut to set the three histogram colors with a single call. ; By default: linecolor = markercolor = fillcolor = -1 If a color is < 0 this method does not change the corresponding color if positive or null it set the color.; For instance: h->SetColors(kRed, kRed);; kRed@ kRedDefinition Rtypes.h:66; will set the line color and the marker color to red. ; Definition at line 4467 of file TH1.cxx. ◆ SetContent().",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:211293,Availability,error,errors,211293,". ; By default the number of contour levels is set to 20. The contours values in the array ""levels"" should be specified in increasing order.; if argument levels = 0 or missing, equidistant contours are computed ; Definition at line 8483 of file TH1.cxx. ◆ SetContourLevel(). void TH1::SetContourLevel ; (; Int_t ; level, . Double_t ; value . ). virtual . Set value for one contour level. ; Definition at line 8522 of file TH1.cxx. ◆ SetDefaultBufferSize(). void TH1::SetDefaultBufferSize ; (; Int_t ; buffersize = 1000). static . Static function to set the default buffer size for automatic histograms. ; When a histogram is created with one of its axis lower limit greater or equal to its upper limit, the function SetBuffer is automatically called with the default buffer size. ; Definition at line 6693 of file TH1.cxx. ◆ SetDefaultSumw2(). void TH1::SetDefaultSumw2 ; (; Bool_t ; sumw2 = kTRUE). static . When this static function is called with sumw2=kTRUE, all new histograms will automatically activate the storage of the sum of squares of errors, ie TH1::Sumw2 is automatically called. ; Definition at line 6703 of file TH1.cxx. ◆ SetDirectory(). void TH1::SetDirectory ; (; TDirectory * ; dir). virtual . By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ; Remove reference to this histogram from current directory and add reference to new directory dir. dir can be 0 in which case the histogram does not belong to any directory.; Note that the directory is not a real property of the histogram and it will not be copied when the histogram is copied or cloned. If the user wants to have the copied (cloned) histogram in the same directory, he needs to set again the directory using SetDirectory to the copied histograms ; Definition at line 8937 of file TH1.cxx. ◆ SetEntries(). virtual void TH1::SetEntries ; (; Double_t ; n). inlinevirtual . Definition at line 391 of file TH1.h. ◆ SetError(). void TH1::SetError ; (; ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:212266,Availability,error,error,212266,"activate the storage of the sum of squares of errors, ie TH1::Sumw2 is automatically called. ; Definition at line 6703 of file TH1.cxx. ◆ SetDirectory(). void TH1::SetDirectory ; (; TDirectory * ; dir). virtual . By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ; Remove reference to this histogram from current directory and add reference to new directory dir. dir can be 0 in which case the histogram does not belong to any directory.; Note that the directory is not a real property of the histogram and it will not be copied when the histogram is copied or cloned. If the user wants to have the copied (cloned) histogram in the same directory, he needs to set again the directory using SetDirectory to the copied histograms ; Definition at line 8937 of file TH1.cxx. ◆ SetEntries(). virtual void TH1::SetEntries ; (; Double_t ; n). inlinevirtual . Definition at line 391 of file TH1.h. ◆ SetError(). void TH1::SetError ; (; const Double_t * ; error). virtual . Replace bin errors by values in array error. ; Definition at line 8951 of file TH1.cxx. ◆ SetHighlight(). void TH1::SetHighlight ; (; Bool_t ; set = kTRUE). virtual . Set highlight (enable/disable) mode for the histogram by default highlight mode is disable. ; Definition at line 4482 of file TH1.cxx. ◆ SetLabelColor(). void TH1::SetLabelColor ; (; Color_t ; color = 1, . Option_t * ; axis = ""X"" . ). virtual . Set axis labels color. ; axis specifies which axis (""x"",""y"",""z""), default = ""x"" if axis=""xyz"" set all 3 axes ; Definition at line 226 of file Haxis.cxx. ◆ SetLabelFont(). void TH1::SetLabelFont ; (; Style_t ; font = 62, . Option_t * ; axis = ""X"" . ). virtual . Set font number used to draw axis labels. ; font : Text font code = 10*fontnumber + precision Font numbers must be between 1 and 14 precision = 1 fast hardware fonts (steps in the size) precision = 2 scalable and rotatable hardware fonts; The default font number is 62. axis specifies which ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:212296,Availability,error,errors,212296,"H1::Sumw2 is automatically called. ; Definition at line 6703 of file TH1.cxx. ◆ SetDirectory(). void TH1::SetDirectory ; (; TDirectory * ; dir). virtual . By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ; Remove reference to this histogram from current directory and add reference to new directory dir. dir can be 0 in which case the histogram does not belong to any directory.; Note that the directory is not a real property of the histogram and it will not be copied when the histogram is copied or cloned. If the user wants to have the copied (cloned) histogram in the same directory, he needs to set again the directory using SetDirectory to the copied histograms ; Definition at line 8937 of file TH1.cxx. ◆ SetEntries(). virtual void TH1::SetEntries ; (; Double_t ; n). inlinevirtual . Definition at line 391 of file TH1.h. ◆ SetError(). void TH1::SetError ; (; const Double_t * ; error). virtual . Replace bin errors by values in array error. ; Definition at line 8951 of file TH1.cxx. ◆ SetHighlight(). void TH1::SetHighlight ; (; Bool_t ; set = kTRUE). virtual . Set highlight (enable/disable) mode for the histogram by default highlight mode is disable. ; Definition at line 4482 of file TH1.cxx. ◆ SetLabelColor(). void TH1::SetLabelColor ; (; Color_t ; color = 1, . Option_t * ; axis = ""X"" . ). virtual . Set axis labels color. ; axis specifies which axis (""x"",""y"",""z""), default = ""x"" if axis=""xyz"" set all 3 axes ; Definition at line 226 of file Haxis.cxx. ◆ SetLabelFont(). void TH1::SetLabelFont ; (; Style_t ; font = 62, . Option_t * ; axis = ""X"" . ). virtual . Set font number used to draw axis labels. ; font : Text font code = 10*fontnumber + precision Font numbers must be between 1 and 14 precision = 1 fast hardware fonts (steps in the size) precision = 2 scalable and rotatable hardware fonts; The default font number is 62. axis specifies which axis (""x"",""y"",""z""), default = ""x"" if axis=""xyz"" set all 3 ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:212322,Availability,error,error,212322,"H1::Sumw2 is automatically called. ; Definition at line 6703 of file TH1.cxx. ◆ SetDirectory(). void TH1::SetDirectory ; (; TDirectory * ; dir). virtual . By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ; Remove reference to this histogram from current directory and add reference to new directory dir. dir can be 0 in which case the histogram does not belong to any directory.; Note that the directory is not a real property of the histogram and it will not be copied when the histogram is copied or cloned. If the user wants to have the copied (cloned) histogram in the same directory, he needs to set again the directory using SetDirectory to the copied histograms ; Definition at line 8937 of file TH1.cxx. ◆ SetEntries(). virtual void TH1::SetEntries ; (; Double_t ; n). inlinevirtual . Definition at line 391 of file TH1.h. ◆ SetError(). void TH1::SetError ; (; const Double_t * ; error). virtual . Replace bin errors by values in array error. ; Definition at line 8951 of file TH1.cxx. ◆ SetHighlight(). void TH1::SetHighlight ; (; Bool_t ; set = kTRUE). virtual . Set highlight (enable/disable) mode for the histogram by default highlight mode is disable. ; Definition at line 4482 of file TH1.cxx. ◆ SetLabelColor(). void TH1::SetLabelColor ; (; Color_t ; color = 1, . Option_t * ; axis = ""X"" . ). virtual . Set axis labels color. ; axis specifies which axis (""x"",""y"",""z""), default = ""x"" if axis=""xyz"" set all 3 axes ; Definition at line 226 of file Haxis.cxx. ◆ SetLabelFont(). void TH1::SetLabelFont ; (; Style_t ; font = 62, . Option_t * ; axis = ""X"" . ). virtual . Set font number used to draw axis labels. ; font : Text font code = 10*fontnumber + precision Font numbers must be between 1 and 14 precision = 1 fast hardware fonts (steps in the size) precision = 2 scalable and rotatable hardware fonts; The default font number is 62. axis specifies which axis (""x"",""y"",""z""), default = ""x"" if axis=""xyz"" set all 3 ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:222430,Availability,error,error,222430,":StatOverflows ; (; Bool_t ; flag = kTRUE). static . if flag=kTRUE, underflows and overflows are used by the Fill functions in the computation of statistics (mean value, StdDev). ; By default, underflows or overflows are not used. ; Definition at line 6925 of file TH1.cxx. ◆ Streamer(). void TH1::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH1K, TH2, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, TProfile2Poly, and TProfile3D.; Definition at line 6933 of file TH1.cxx. ◆ StreamerNVirtual(). void TH1::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 444 of file TH1.h. ◆ Sumw2(). void TH1::Sumw2 ; (; Bool_t ; flag = kTRUE). virtual . Create structure to store sum of squares of weights. ; if histogram is already filled, the sum of squares of weights is filled with the existing bin contents; The error per bin will be computed as sqrt(sum of squares of weight) for each bin.; This function is automatically called when the histogram is created if the static function TH1::SetDefaultSumw2 has been called before. If flag = false the structure containing the sum of the square of weights is rest and it will be empty, but it is not deleted (i.e. GetSumw2()->fN = 0) ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 9020 of file TH1.cxx. ◆ TransformHisto(). TH1 * TH1::TransformHisto ; (; TVirtualFFT * ; fft, . TH1 * ; h_output, . Option_t * ; option . ). static . For a given transform (first parameter), fills the histogram (second parameter) with the transform output data, specified in the third parameter If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created and the user is responsible for deleting it. ; Available options:; ""RE"" - real part of the output; ""IM"" - imaginary part of the output; ""MAG"" - magnitude of the o",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:224576,Availability,error,errors,224576,"e_t ; content . ). protectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TH3C, TH3S, TH3I, TH3L, TH3F, and TH3D.; Definition at line 9449 of file TH1.cxx. ◆ UseCurrentStyle(). void TH1::UseCurrentStyle ; (; ). overridevirtual . Copy current attributes from/to current style. ; Reimplemented from TObject.; Definition at line 7469 of file TH1.cxx. Friends And Related Symbol Documentation. ◆ TH1Merger. friend class TH1Merger. friend . Definition at line 86 of file TH1.h. Member Data Documentation. ◆ fBarOffset. Short_t TH1::fBarOffset. protected . (1000*offset) for bar charts or legos ; Definition at line 93 of file TH1.h. ◆ fBarWidth. Short_t TH1::fBarWidth. protected . (1000*width) for bar charts or legos ; Definition at line 94 of file TH1.h. ◆ fBinStatErrOpt. EBinErrorOpt TH1::fBinStatErrOpt. protected . Option for bin statistical errors. ; Definition at line 113 of file TH1.h. ◆ fBuffer. Double_t* TH1::fBuffer. protected . [fBufferSize] entry buffer ; Definition at line 108 of file TH1.h. ◆ fBufferSize. Int_t TH1::fBufferSize. protected . fBuffer size ; Definition at line 107 of file TH1.h. ◆ fContour. TArrayD TH1::fContour. protected . Array to display contour levels. ; Definition at line 103 of file TH1.h. ◆ fDimension. Int_t TH1::fDimension. protected . ! Histogram dimension (1, 2 or 3 dim) ; Definition at line 110 of file TH1.h. ◆ fDirectory. TDirectory* TH1::fDirectory. protected . ! Pointer to directory holding this histogram ; Definition at line 109 of file TH1.h. ◆ fEntries. Double_t TH1::fEntries. protected . Number of entries. ; Definition at line 95 of file TH1.h. ◆ fFunctions. TList* TH1::fFunctions. protected . ->Pointer to list of functions (fits and user) ; Definition at line 106 of file TH1.h. ◆ fgAddDirectory. Bool_t TH1::fgAddDirectory = kTRUE. staticprotected . ! Flag to add histogr",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:17510,Deployability,update,updated,17510," of the original histogram including all associated errors and functions, e.g.: TH1F *hnew = (TH1F*)h->Clone(""hnew"");; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752. Normalizing histograms; One can scale a histogram such that the bins integral is equal to the normalization parameter via TH1::Scale(Double_t norm), where norm is the desired normalization divided by the integral of the histogram. Drawing histograms; Histograms are drawn via the THistPainter class. Each histogram has a pointer to its own painter (to be usable in a multithreaded program). Many drawing options are supported. See THistPainter::Paint() for more details.; The same histogram can be drawn with different options in different pads. When a histogram drawn in a pad is deleted, the histogram is automatically removed from the pad or pads where it was drawn. If a histogram is drawn in a pad, then filled again, the new status of the histogram will be automatically shown in the pad next time the pad is updated. One does not need to redraw the histogram. To draw the current version of a histogram in a pad, one can use h->DrawCopy();; This makes a clone (see Clone below) of the histogram. Once the clone is drawn, the original histogram may be modified or deleted without affecting the aspect of the clone.; One can use TH1::SetMaximum() and TH1::SetMinimum() to force a particular value for the maximum or the minimum scale on the plot. (For 1-D histograms this means the y-axis, while for 2-D histograms these functions affect the z-axis).; TH1::UseCurrentStyle() can be used to change all histogram graphics attributes to correspond to the current selected style. This function must be called for each histogram. In case one reads and draws many histograms from a file, one can force the histograms to inherit automatically the current graphics style by calling before gROOT->ForceStyle(). Setting Drawing histogram contour level",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:65531,Deployability,update,update,65531," within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; virtual Double_t GetBinErrorSqUnchecked (Int_t bin) const;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual Double_t RetrieveBinContent (Int_t bin) const;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ; virtual void UpdateBinContent (Int_t bin, Double_t content);  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:109004,Deployability,update,updated,109004," ; Definition at line 3473 of file TH1.cxx. ◆ DoIntegral(). Double_t TH1::DoIntegral ; (; Int_t ; ix1, . Int_t ; ix2, . Int_t ; iy1, . Int_t ; iy2, . Int_t ; iz1, . Int_t ; iz2, . Double_t & ; err, . Option_t * ; opt, . Bool_t ; doerr = kFALSE . ); const. protectedvirtual . Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ; Definition at line 7977 of file TH1.cxx. ◆ Draw(). void TH1::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this histogram with options. ; Histograms are drawn via the THistPainter class. Each histogram has a pointer to its own painter (to be usable in a multithreaded program). The same histogram can be drawn with different options in different pads. When a histogram drawn in a pad is deleted, the histogram is automatically removed from the pad or pads where it was drawn. If a histogram is drawn in a pad, then filled again, the new status of the histogram will be automatically shown in the pad next time the pad is updated. One does not need to redraw the histogram. To draw the current version of a histogram in a pad, one can use h->DrawCopy(); This makes a clone of the histogram. Once the clone is drawn, the original histogram may be modified or deleted without affecting the aspect of the clone. By default, TH1::Draw clears the current pad.; One can use TH1::SetMaximum and TH1::SetMinimum to force a particular value for the maximum or the minimum scale on the plot.; TH1::UseCurrentStyle can be used to change all histogram graphics attributes to correspond to the current selected style. This function must be called for each histogram. In case one reads and draws many histograms from a file, one can force the histograms to inherit automatically the current graphics style by calling before gROOT->ForceStyle();; See the THistPainter class for a description of all the drawing options. ; Reimplemented from TObject.; Definition at lin",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:112427,Deployability,release,released,112427,". ◆ DrawPanel(). void TH1::DrawPanel ; (; ). virtual . Display a panel with all histogram drawing options. ; See class TDrawPanelHist for example ; Definition at line 3175 of file TH1.cxx. ◆ Eval(). void TH1::Eval ; (; TF1 * ; f1, . Option_t * ; option = """" . ). virtual . Evaluate function f1 at the center of bins of this histogram. . If option ""R"" is specified, the function is evaluated only for the bins included in the function range.; If option ""A"" is specified, the value of the function is added to the existing bin contents; If option ""S"" is specified, the value of the function is used to generate a value, distributed according to the Poisson distribution, with f1 as the mean. . Definition at line 3192 of file TH1.cxx. ◆ ExecuteEvent(). void TH1::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a histogram is clicked with the locator; If Left button clicked on the bin top value, then the content of this bin is modified according to the new position of the mouse when it is released. ; Reimplemented from TObject.; Definition at line 3240 of file TH1.cxx. ◆ ExtendAxis(). void TH1::ExtendAxis ; (; Double_t ; x, . TAxis * ; axis . ). virtual . Histogram is resized along axis such that x is in the axis range. ; The new axis limits are recomputed by doubling iteratively the current axis range until the specified value x is within the limits. The algorithm makes a copy of the histogram, then loops on all bins of the old histogram to fill the extended histogram. Takes into account errors (Sumw2) if any. The algorithm works for 1-d, 2-D and 3-D histograms. The axis must be extendable before invoking this function. Ex:; h->GetXaxis()->SetCanExtend(kTRUE);; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93. Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6504 of file TH1.cxx. ◆ FFT(). TH1 * TH1::FFT ; (; TH1 * ; h_output, . Option_",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:119038,Deployability,integrat,integrated,119038,"t is not equal to 1, the storage of the sum of squares of weights is automatically triggered and the sum of the squares of weights is incremented by \( w^2 \) in the bin corresponding to x. if w is NULL each entry is assumed a weight=1 ; Reimplemented in TH2, TH2Poly, and TProfile.; Definition at line 3447 of file TH1.cxx. ◆ FillN() [2/2]. virtual void TH1::FillN ; (; Int_t ; , . const Double_t * ; , . const Double_t * ; , . const Double_t * ; , . Int_t ;  . ). inlinevirtual . Reimplemented in TH2, TH2Poly, and TProfile.; Definition at line 224 of file TH1.h. ◆ FillRandom() [1/2]. void TH1::FillRandom ; (; const char * ; fname, . Int_t ; ntimes = 5000, . TRandom * ; rng = nullptr . ). virtual . Fill histogram following distribution in function fname. ; Parameters. fname: Function name used for filling the histogram ; ntimes: number of times the histogram is filled ; rng: (optional) Random number generator used to sample. The distribution contained in the function fname (TF1) is integrated over the channel contents for the bin range of this histogram. It is normalized to 1.; Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Fill histogram channel ntimes random numbers are generated. One can also call TF1::GetRandom to get a random variate from a function. ; Reimplemented in TH2, and TH3.; Definition at line 3519 of file TH1.cxx. ◆ FillRandom() [2/2]. void TH1::FillRandom ; (; TH1 * ; h, . Int_t ; ntimes = 5000, . TRandom * ; rng = nullptr . ). virtual . Fill histogram following distribution in histogram h. ; Parameters. h: Histogram pointer used for sampling random number ; ntimes: number of times the histogram is filled ; rng: (optional) Random number generator used for sampling. The distribution contained in the histogram h (TH1) is integrated over the channel contents for the bin range of this histogram. It is normalized to 1.; Getting one random number implies:;",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:119912,Deployability,integrat,integrated,119912,"d ; rng: (optional) Random number generator used to sample. The distribution contained in the function fname (TF1) is integrated over the channel contents for the bin range of this histogram. It is normalized to 1.; Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Fill histogram channel ntimes random numbers are generated. One can also call TF1::GetRandom to get a random variate from a function. ; Reimplemented in TH2, and TH3.; Definition at line 3519 of file TH1.cxx. ◆ FillRandom() [2/2]. void TH1::FillRandom ; (; TH1 * ; h, . Int_t ; ntimes = 5000, . TRandom * ; rng = nullptr . ). virtual . Fill histogram following distribution in histogram h. ; Parameters. h: Histogram pointer used for sampling random number ; ntimes: number of times the histogram is filled ; rng: (optional) Random number generator used for sampling. The distribution contained in the histogram h (TH1) is integrated over the channel contents for the bin range of this histogram. It is normalized to 1.; Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Fill histogram channel ntimes random numbers are generated. SPECIAL CASE when the target histogram has the same binning as the source. in this case we simply use a poisson distribution where the mean value per bin = bincontent/integral. ; Reimplemented in TH2, and TH3.; Definition at line 3590 of file TH1.cxx. ◆ FindBin(). Int_t TH1::FindBin ; (; Double_t ; x, . Double_t ; y = 0, . Double_t ; z = 0 . ). virtual . Return Global bin number corresponding to x,y,z. ; 2-D and 3-D histograms are represented with a one dimensional structure. This has the advantage that all existing functions, such as GetBinContent, GetBinError, GetBinFunction work for all dimensions. This function tries to extend the axis if the given point belongs to an under-/overflow b",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:129347,Deployability,configurat,configuration,129347,"ed one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used. . ""C"" In case of linear fitting, do no calculate the chisquare (saves CPU time). . ""G"" Uses the gradient implemented in TF1::GradientPar for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function. . ""WIDTH"" Scales the histogran bin content by the bin width (useful for variable bins histograms) . ""SERIAL"" Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique . ""MULTITHREAD"" Forces usage of multi-thread execution whenever possible . The default fitting of an histogram (when no option is given) is perfomed as following:; a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; the full range of the histogram is used;; the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; for linear functions (polN, chenbyshev or formula expressions combined using operator ++) a linear minimization is used.; only the status of the fit is returned;; the fit is performed in Multithread whenever is enabled in ROOT;; only the last fitted function is saved in the histogram;; the histogram is drawn after fitting overalyed with the resulting fitting function. Minimizer Configuration; The Fit is perfomed using the default Minimizer, defined in the ROOT::Math::MinimizerOptions class. It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling TH1::Fit):; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm) for changing the minmizer and/or the corresponding algorithm. For example ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""G",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:129985,Deployability,configurat,configuration,129985,"en no option is given) is perfomed as following:; a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; the full range of the histogram is used;; the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; for linear functions (polN, chenbyshev or formula expressions combined using operator ++) a linear minimization is used.; only the status of the fit is returned;; the fit is performed in Multithread whenever is enabled in ROOT;; only the last fitted function is saved in the histogram;; the histogram is drawn after fitting overalyed with the resulting fitting function. Minimizer Configuration; The Fit is perfomed using the default Minimizer, defined in the ROOT::Math::MinimizerOptions class. It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling TH1::Fit):; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm) for changing the minmizer and/or the corresponding algorithm. For example ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS""); will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization The current defaults are (""Minuit"",""Migrad""). See the documentation of the ROOT::Math::MinimizerOptions for the available minimizers in ROOT and their corresponding algorithms.; ROOT::Math::MinimizerOptions::SetDefaultTolerance for setting a different tolerance value for the minimization.; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls for setting the maximum number of function calls.; ROOT::Math::MinimizerOptions::SetDefaultPrintLevel for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing. Other options are possible depending on the Minimizer used, see the corresponding documentation. The default minimizer can be also",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:199721,Deployability,install,install,199721," TH1S, TH1I, TH1L, TH1F, TH1D, TH1K, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 9439 of file TH1.cxx. ◆ SameLimitsAndNBins(). Bool_t TH1::SameLimitsAndNBins ; (; const TAxis & ; axis1, . const TAxis & ; axis2 . ). staticprotected . Same limits and bins. ; Definition at line 5898 of file TH1.cxx. ◆ SaveAs(). void TH1::SaveAs ; (; const char * ; filename = ""hist"", . Option_t * ; option = """" . ); const. overridevirtual . Save the histogram as .csv, .tsv or .txt. ; In case of any other extension, fall back to TObject::SaveAs, which saves as a .C macro (but with the file name extension specified by the user); The Under/Overflow bins are also exported (as first and last lines) The fist 2 columns are the lower and upper edges of the bins Column 3 contains the bin contents The last column contains the error in y. If errors are not present, the column is left empty; The result can be immediately imported into Excel, gnuplot, Python or whatever, without the needing to install pyroot, etc.; Parameters. filenamethe name of the file where to store the histogram ; optionsome tuning options. The file extension defines the delimiter used:; .csv : comma; .tsv : tab; .txt : space. If option = ""title"" a title line is generated. If the y-axis has a title, this title is displayed as column 3 name, otherwise, it shows ""BinContent"" ; Reimplemented from TObject.; Definition at line 7181 of file TH1.cxx. ◆ SavePrimitive(). void TH1::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Reimplemented in TH1K, TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 7237 of file TH1.cxx. ◆ SavePrimitiveHelp(). void TH1::SavePrimitiveHelp ; (; std::ostream & ; out, . const char * ; hname, . Option_t * ; option = """" . ). protectedvirtual . Helper function for the Sav",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:223607,Deployability,update,update,223607," = false the structure containing the sum of the square of weights is rest and it will be empty, but it is not deleted (i.e. GetSumw2()->fN = 0) ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 9020 of file TH1.cxx. ◆ TransformHisto(). TH1 * TH1::TransformHisto ; (; TVirtualFFT * ; fft, . TH1 * ; h_output, . Option_t * ; option . ). static . For a given transform (first parameter), fills the histogram (second parameter) with the transform output data, specified in the third parameter If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created and the user is responsible for deleting it. ; Available options:; ""RE"" - real part of the output; ""IM"" - imaginary part of the output; ""MAG"" - magnitude of the output; ""PH"" - phase of the output . Definition at line 9319 of file TH1.cxx. ◆ UpdateBinContent(). void TH1::UpdateBinContent ; (; Int_t ; bin, . Double_t ; content . ). protectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TH3C, TH3S, TH3I, TH3L, TH3F, and TH3D.; Definition at line 9449 of file TH1.cxx. ◆ UseCurrentStyle(). void TH1::UseCurrentStyle ; (; ). overridevirtual . Copy current attributes from/to current style. ; Reimplemented from TObject.; Definition at line 7469 of file TH1.cxx. Friends And Related Symbol Documentation. ◆ TH1Merger. friend class TH1Merger. friend . Definition at line 86 of file TH1.h. Member Data Documentation. ◆ fBarOffset. Short_t TH1::fBarOffset. protected . (1000*offset) for bar charts or legos ; Definition at line 93 of file TH1.h. ◆ fBarWidth. Short_t TH1::fBarWidth. protected . (1000*width) for bar charts or legos ; Definition at line 94 of file TH1.h. ◆ fBinStatErrOpt. EBinErrorOpt TH1::fBinStatErrOpt. protected . Option for bin statistical errors. ; Definition at line 113 of file TH1.h. ◆ fBuffer. Double_t* TH1::fBuf",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:63680,Energy Efficiency,power,power,63680,"rsion_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merg",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:65955,Energy Efficiency,power,power,65955,"empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual Double_t RetrieveBinContent (Int_t bin) const;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ; virtual void UpdateBinContent (Int_t bin, Double_t content);  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:66096,Energy Efficiency,power,power,66096,"alse) const;  ; virtual Double_t RetrieveBinContent (Int_t bin) const;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ; virtual void UpdateBinContent (Int_t bin, Double_t content);  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  S",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:81305,Energy Efficiency,power,power,81305,"; The AD 2 sample test formula are derived from the paper F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded by TH2 and TH3.; Return -1 if internal inputs are inconsistent, 0 otherwise. ; Definition at line 1343 of file TH1.cxx. ◆ AutoP2GetBins(). Int_t TH1::AutoP2GetBins ; (; Int_t ; n). inlinestaticprotected . Auxiliary function to get the next power of 2 integer value larger then n. ; Used by the autobin power of 2 algorithm ; Definition at line 1321 of file TH1.cxx. ◆ AutoP2GetPower2(). Double_t TH1::AutoP2GetPower2 ; (; Double_t ; x, . Bool_t ; next = kTRUE . ). inlinestaticprotected . Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ; next = kTRUE : next larger next = kFALSE : previous smaller; Used by the autobin power of 2 algorithm ; Definition at line 1308 of file TH1.cxx. ◆ AxisChoice(). Int_t TH1::AxisChoice ;",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:81349,Energy Efficiency,power,power,81349," Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded by TH2 and TH3.; Return -1 if internal inputs are inconsistent, 0 otherwise. ; Definition at line 1343 of file TH1.cxx. ◆ AutoP2GetBins(). Int_t TH1::AutoP2GetBins ; (; Int_t ; n). inlinestaticprotected . Auxiliary function to get the next power of 2 integer value larger then n. ; Used by the autobin power of 2 algorithm ; Definition at line 1321 of file TH1.cxx. ◆ AutoP2GetPower2(). Double_t TH1::AutoP2GetPower2 ; (; Double_t ; x, . Bool_t ; next = kTRUE . ). inlinestaticprotected . Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ; next = kTRUE : next larger next = kFALSE : previous smaller; Used by the autobin power of 2 algorithm ; Definition at line 1308 of file TH1.cxx. ◆ AxisChoice(). Int_t TH1::AxisChoice ; (; Option_t * ; axis); const. protected . Choose an axis ac",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:81765,Energy Efficiency,power,power,81765,"f ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded by TH2 and TH3.; Return -1 if internal inputs are inconsistent, 0 otherwise. ; Definition at line 1343 of file TH1.cxx. ◆ AutoP2GetBins(). Int_t TH1::AutoP2GetBins ; (; Int_t ; n). inlinestaticprotected . Auxiliary function to get the next power of 2 integer value larger then n. ; Used by the autobin power of 2 algorithm ; Definition at line 1321 of file TH1.cxx. ◆ AutoP2GetPower2(). Double_t TH1::AutoP2GetPower2 ; (; Double_t ; x, . Bool_t ; next = kTRUE . ). inlinestaticprotected . Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ; next = kTRUE : next larger next = kFALSE : previous smaller; Used by the autobin power of 2 algorithm ; Definition at line 1308 of file TH1.cxx. ◆ AxisChoice(). Int_t TH1::AxisChoice ; (; Option_t * ; axis); const. protected . Choose an axis according to ""axis"". ; Definition at line 14 of file Haxis.cxx. ◆ Browse(). void TH1::Browse ; (; TBrowser * ; b). overridevirtual . Browse the Histogram object. ; Reimplemented from TObject.; Definition at line 762 of file TH1.cxx. ◆ BufferEmpty(). Int_t TH1::BufferEmpty ; (; Int_t ; action = 0). virtual . Fill histogram with all entries in the buffer. . action = -1 histogram is reset and refilled from the buffer (ca",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:81827,Energy Efficiency,power,power,81827,"low and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded by TH2 and TH3.; Return -1 if internal inputs are inconsistent, 0 otherwise. ; Definition at line 1343 of file TH1.cxx. ◆ AutoP2GetBins(). Int_t TH1::AutoP2GetBins ; (; Int_t ; n). inlinestaticprotected . Auxiliary function to get the next power of 2 integer value larger then n. ; Used by the autobin power of 2 algorithm ; Definition at line 1321 of file TH1.cxx. ◆ AutoP2GetPower2(). Double_t TH1::AutoP2GetPower2 ; (; Double_t ; x, . Bool_t ; next = kTRUE . ). inlinestaticprotected . Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ; next = kTRUE : next larger next = kFALSE : previous smaller; Used by the autobin power of 2 algorithm ; Definition at line 1308 of file TH1.cxx. ◆ AxisChoice(). Int_t TH1::AxisChoice ; (; Option_t * ; axis); const. protected . Choose an axis according to ""axis"". ; Definition at line 14 of file Haxis.cxx. ◆ Browse(). void TH1::Browse ; (; TBrowser * ; b). overridevirtual . Browse the Histogram object. ; Reimplemented from TObject.; Definition at line 762 of file TH1.cxx. ◆ BufferEmpty(). Int_t TH1::BufferEmpty ; (; Int_t ; action = 0). virtual . Fill histogram with all entries in the buffer. . action = -1 histogram is reset and refilled from the buffer (called by THistPainter::Paint); action = 0 histogram is reset and filled from th",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:82044,Energy Efficiency,power,power,82044,"rks only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded by TH2 and TH3.; Return -1 if internal inputs are inconsistent, 0 otherwise. ; Definition at line 1343 of file TH1.cxx. ◆ AutoP2GetBins(). Int_t TH1::AutoP2GetBins ; (; Int_t ; n). inlinestaticprotected . Auxiliary function to get the next power of 2 integer value larger then n. ; Used by the autobin power of 2 algorithm ; Definition at line 1321 of file TH1.cxx. ◆ AutoP2GetPower2(). Double_t TH1::AutoP2GetPower2 ; (; Double_t ; x, . Bool_t ; next = kTRUE . ). inlinestaticprotected . Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ; next = kTRUE : next larger next = kFALSE : previous smaller; Used by the autobin power of 2 algorithm ; Definition at line 1308 of file TH1.cxx. ◆ AxisChoice(). Int_t TH1::AxisChoice ; (; Option_t * ; axis); const. protected . Choose an axis according to ""axis"". ; Definition at line 14 of file Haxis.cxx. ◆ Browse(). void TH1::Browse ; (; TBrowser * ; b). overridevirtual . Browse the Histogram object. ; Reimplemented from TObject.; Definition at line 762 of file TH1.cxx. ◆ BufferEmpty(). Int_t TH1::BufferEmpty ; (; Int_t ; action = 0). virtual . Fill histogram with all entries in the buffer. . action = -1 histogram is reset and refilled from the buffer (called by THistPainter::Paint); action = 0 histogram is reset and filled from the buffer. When the histogram is filled from the buffer the value fBuffer[0] is set to a negative number (= - number of entries) When calling with action == 0 the histogram is NOT refilled when fBuffer[0] is < 0 W",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:82185,Energy Efficiency,power,power,82185,"utoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded by TH2 and TH3.; Return -1 if internal inputs are inconsistent, 0 otherwise. ; Definition at line 1343 of file TH1.cxx. ◆ AutoP2GetBins(). Int_t TH1::AutoP2GetBins ; (; Int_t ; n). inlinestaticprotected . Auxiliary function to get the next power of 2 integer value larger then n. ; Used by the autobin power of 2 algorithm ; Definition at line 1321 of file TH1.cxx. ◆ AutoP2GetPower2(). Double_t TH1::AutoP2GetPower2 ; (; Double_t ; x, . Bool_t ; next = kTRUE . ). inlinestaticprotected . Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ; next = kTRUE : next larger next = kFALSE : previous smaller; Used by the autobin power of 2 algorithm ; Definition at line 1308 of file TH1.cxx. ◆ AxisChoice(). Int_t TH1::AxisChoice ; (; Option_t * ; axis); const. protected . Choose an axis according to ""axis"". ; Definition at line 14 of file Haxis.cxx. ◆ Browse(). void TH1::Browse ; (; TBrowser * ; b). overridevirtual . Browse the Histogram object. ; Reimplemented from TObject.; Definition at line 762 of file TH1.cxx. ◆ BufferEmpty(). Int_t TH1::BufferEmpty ; (; Int_t ; action = 0). virtual . Fill histogram with all entries in the buffer. . action = -1 histogram is reset and refilled from the buffer (called by THistPainter::Paint); action = 0 histogram is reset and filled from the buffer. When the histogram is filled from the buffer the value fBuffer[0] is set to a negative number (= - number of entries) When calling with action == 0 the histogram is NOT refilled when fBuffer[0] is < 0 While when calling with action = -1 the histogram is reset and ALWAYS refilled independently if the histogram was fil",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:88405,Energy Efficiency,power,power,88405,"\chi^{2} \) test for comparison two usual (unweighted) histograms.; Overview:; Comparison of two histograms expect hypotheses that two histograms represent identical distributions. To make a decision p-value should be calculated. The hypotheses of identity is rejected if the p-value is lower then some significance level. Traditionally significance levels 0.1, 0.05 and 0.01 are used. The comparison procedure should include an analysis of the residuals which is often helpful in identifying the bins of histograms responsible for a significant overall \( \chi^{2} \) value. Residuals are the difference between bin contents and expected bin contents. Most convenient for analysis are the normalized residuals. If hypotheses of identity are valid then normalized residuals are approximately independent and identically distributed random variables having N(0,1) distribution. Analysis of residuals expect test of above mentioned properties of residuals. Notice that indirectly the analysis of residuals increase the power of \( \chi^{2} \) test.; Methods of comparison:; \( \chi^{2} \) test for comparison two (unweighted) histograms: Let us consider two histograms with the same binning and the number of bins equal to r. Let us denote the number of events in the ith bin in the first histogram as ni and as mi in the second one. The total number of events in the first histogram is equal to: ; \[; N = \sum_{i=1}^{r} n_{i}; \]. and ; \[; M = \sum_{i=1}^{r} m_{i}; \]. in the second histogram. The hypothesis of identity (homogeneity) [3] is that the two histograms represent random values with identical distributions. It is equivalent that there exist r constants p1,...,pr, such that ; \[; \sum_{i=1}^{r} p_{i}=1; \]. and the probability of belonging to the ith bin for some measured value in both experiments is equal to pi. The number of events in the ith bin is a random variable with a distribution approximated by a Poisson probability distribution ; \[; \frac{e^{-Np_{i}}(Np_{i})^{n_{i}}}{",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:145745,Energy Efficiency,adapt,adapted,145745,"D, etc. histograms c2 is an optional argument that gives a relative weight between the two histograms, and dc2 is the error on this weight. This is useful, for example, when forming an asymmetry between two histograms from 2 different data sets that need to be normalized to each other in some way. The function calculates the errors assuming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)).; example: assuming 'h1' and 'h2' are already filled; h3 = h1->GetAsymmetry(h2); TH1::GetAsymmetryTH1 * GetAsymmetry(TH1 *h2, Double_t c2=1, Double_t dc2=0)Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined...Definition TH1.cxx:4339; then 'h3' is created and filled with the asymmetry between 'h1' and 'h2'; h1 and h2 are left intact.; Note that it is the user's responsibility to manage the created histogram. The name of the returned histogram will be Asymmetry_nameOfh1-nameOfh2; code proposed by Jason Seely (seely.nosp@m.@mit.nosp@m..edu) and adapted by R.Brun; clone the histograms so top and bottom will have the correct dimensions: Sumw2 just makes sure the errors will be computed properly when we form sums and ratios below. ; Definition at line 4339 of file TH1.cxx. ◆ GetAxisColor(). Color_t TH1::GetAxisColor ; (; Option_t * ; axis = ""X""); const. virtual . Return the number of divisions for ""axis"". ; Definition at line 40 of file Haxis.cxx. ◆ GetAxisLabelStatus(). UInt_t TH1::GetAxisLabelStatus ; (; ); const. protected . Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ; can be extended and is alphanumeric ; Definition at line 6675 of file TH1.cxx. ◆ GetBarOffset(). virtual Float_t TH1::GetBarOffset ; (; ); const. inlinevirtual . Definition at line 256 of file TH1.h. ◆ GetBarWidth(). virtual Float_t TH1::GetBarWidth ; (; ); const. inlinevirtual . Definition at line 257 of file TH1.h. ◆ GetBin(). Int_t TH1::GetBin ; (; Int_t ; binx, . Int_t ; biny = 0, . Int_t ; binz = 0 . ); const. virtual . ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:156958,Energy Efficiency,power,power,156958,"unction return the default buffer size for automatic histograms the parameter fgBufferSize may be changed via SetDefaultBufferSize. ; Definition at line 4406 of file TH1.cxx. ◆ GetDefaultSumw2(). Bool_t TH1::GetDefaultSumw2 ; (; ). static . Return kTRUE if TH1::Sumw2 must be called when creating new histograms. ; see TH1::SetDefaultSumw2. ; Definition at line 4415 of file TH1.cxx. ◆ GetDimension(). virtual Int_t TH1::GetDimension ; (; ); const. inlinevirtual . Definition at line 283 of file TH1.h. ◆ GetDirectory(). TDirectory * TH1::GetDirectory ; (; ); const. inline . Definition at line 279 of file TH1.h. ◆ GetEffectiveEntries(). Double_t TH1::GetEffectiveEntries ; (; ); const. virtual . Number of effective entries of the histogram. . \[; neff = \frac{(\sum Weights )^2}{(\sum Weight^2 )}; \]. In case of an unweighted histogram this number is equivalent to the number of entries of the histogram. For a weighted histogram, this number corresponds to the hypothetical number of unweighted entries a histogram would need to have the same statistical power as this weighted histogram. Note: The underflow/overflow are included if one has set the TH1::StatOverFlows flag and if the statistics has been computed at filling time. If a range is set in the histogram the number is computed from the given range. ; Definition at line 4448 of file TH1.cxx. ◆ GetEntries(). Double_t TH1::GetEntries ; (; ); const. virtual . Return the current number of entries. ; Definition at line 4423 of file TH1.cxx. ◆ GetFunction(). TF1 * TH1::GetFunction ; (; const char * ; name); const. virtual . Return pointer to function with name. ; Functions such as TH1::Fit store the fitted function in the list of functions of this histogram. ; Definition at line 9051 of file TH1.cxx. ◆ GetIntegral(). Double_t * TH1::GetIntegral ; (; ). virtual . Return a pointer to the array of bins integral. ; if the pointer fIntegral is null, TH1::ComputeIntegral is called The array dimension is the number of bins in the hist",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:164717,Energy Efficiency,efficient,efficient,164717,"lue. ; This happens, for example, when the histogram is drawn and the y or z axis limits are changed; To get the minimum value of bins in the histogram regardless of whether the value has been overridden (using TH1::SetMinimum), use; h->GetBinContent(h->GetMinimumBin()); TH1::GetMinimumBin can be used to get the location of the minimum value. ; Reimplemented in TH2Poly.; Definition at line 8635 of file TH1.cxx. ◆ GetMinimumAndMaximum(). void TH1::GetMinimumAndMaximum ; (; Double_t & ; min, . Double_t & ; max . ); const. virtual . Retrieve the minimum and maximum values in the histogram. ; This will not return a cached value and will always search the histogram for the min and max values. The user can condition whether or not to call this with the GetMinimumStored() and GetMaximumStored() methods. If the cache is empty, then the value will be -1111. Users can then use the SetMinimum() or SetMaximum() methods to cache the results. For example, the following recipe will make efficient use of this method and the cached minimum and maximum values. Double_t currentMin = pHist->GetMinimumStored();; Double_t currentMax = pHist->GetMaximumStored();; if ((currentMin == -1111) || (currentMax == -1111)) {; pHist->GetMinimumAndMaximum(currentMin, currentMax);; pHist->SetMinimum(currentMin);; pHist->SetMaximum(currentMax);; }; Parameters. minreference to variable that will hold found minimum value ; maxreference to variable that will hold found maximum value . Definition at line 8731 of file TH1.cxx. ◆ GetMinimumBin() [1/2]. Int_t TH1::GetMinimumBin ; (; ); const. virtual . Return location of bin with minimum value in the range. ; Definition at line 8665 of file TH1.cxx. ◆ GetMinimumBin() [2/2]. Int_t TH1::GetMinimumBin ; (; Int_t & ; locmix, . Int_t & ; locmiy, . Int_t & ; locmiz . ); const. virtual . Return location of bin with minimum value in the range. ; Definition at line 8674 of file TH1.cxx. ◆ GetMinimumStored(). virtual Double_t TH1::GetMinimumStored ; (; ); const. inlin",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:184532,Energy Efficiency,adapt,adapted,184532,"g to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure: make pseudoexperiments based on random values from the parent distribution, compare the KS distance of the pseudoexperiment to the parent distribution, and count all the KS values above the value obtained from the original data to Monte Carlo distribution. The number of pseudo-experiments nEXPT is by default 1000, and it can be changed by specifying the option as ""X=number"", for example ""X=10000"" for 10000 toys. The function returns the probability. (thanks to Ben Kilminster to submit this procedure). Note that this option ""X"" is much slower. The returned function value is the probability of test (much less than one means NOT compatible); Code adapted by Rene Brun from original HBOOK routine HDIFF; NOTE1 A good description of the Kolmogorov test can be seen at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; NOTE2 see also alternative function TH1::Chi2Test The Kolmogorov test is assumed to give better results than Chi2Test in case of histograms with low statistics.; NOTE3 (Jan Conrad, Fred James) ""The returned value PROB is calculated such that it will be; uniformly distributed between zero and one for compatible histograms,; provided the data are not binned (or the number of bins is very large; compared with the number of events). Users who have access to unbinned; data and wish exact confidence levels should therefore not put their data; into histograms, but should call directly TMath::KolmogorovTest. On; the other hand, since TH1 is a convenient way of collecting data and; saving space, this function has been provided. However, the values of; PROB for binned data will be shifted slightly higher than expected,; dependi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:195088,Energy Efficiency,reduce,reduced,195088,", the current histogram is modified and a pointer to it is returned.; If newname is not blank, the current histogram is not modified, and a new histogram is returned which is a Clone of the current histogram with its name set to newname.; The parameter ngroup indicates how many bins of this have to be merged into one bin of the result.; If the original histogram has errors stored (via Sumw2), the resulting histograms has new errors correctly calculated.; examples: if h1 is an existing TH1F histogram with 100 bins; h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; h1->Rebin(5); //merges five bins in one in h1; TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; // merging 5 bins of h1 in one bin; TH1::Rebinvirtual TH1 * Rebin(Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr)Rebin this histogram.Definition TH1.cxx:6275; NOTE: If ngroup is not an exact divider of the number of bins, the top limit of the rebinned histogram is reduced to the upper edge of the last bin that can make a complete group. The remaining bins are added to the overflow bin. Statistics will be recomputed from the new bin contents.; case 2 xbins!=0; A new histogram is created (you should specify newname). The parameter ngroup is the number of variable size bins in the created histogram. The array xbins must contain ngroup+1 elements that represent the low-edges of the bins. If the original histogram has errors stored (via Sumw2), the resulting histograms has new errors correctly calculated.; NOTE: The bin edges specified in xbins should correspond to bin edges in the original histogram. If a bin edge in the new histogram is in the middle of a bin in the original histogram, all entries in the split bin in the original histogram will be transfered to the lower of the two possible bins in the new histogram. This is probably not what you want. A warning message is emitted in this case; examples: if h1 is an existing TH",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:534,Integrability,interface,interface,534,". ROOT: TH1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TH1 Class ReferenceHistogram Library » Histogram classes. ; TH1 is the base class of all histogram classes in ROOT. ; It provides the common interface for operations such as binning, filling, drawing, which will be detailed below. Creating histograms; Labelling axes. Binning; Fix or variable bin size; Convention for numbering bins; Alphanumeric Bin Labels; Histograms with automatic bins; Rebinning. Filling histograms; Associated errors; Associated functions; Projections of histograms; Random Numbers and histograms; Making a copy of a histogram; Normalizing histograms. Drawing histograms; Setting Drawing histogram contour levels (2-D hists only); Setting histogram graphics attributes; Customising how axes are drawn. Fitting histograms; Saving/reading histograms to/from a ROOT file; Operations on histograms; Miscellaneous operations. ROOT supports the following histogram types:. 1-D histograms:; TH1C : histograms with one byte per channel. Maximum bin content = 127; TH1S : histograms with one short per channel. Maximum bin content = 32767; TH1I : histograms with one int per channel. Maximum bin content = INT_MAX (*); TH1L : histograms with one long64 per channel. Maximum bin content = LLONG_MAX (**); TH1F : histograms with one float per channel. Maximum precision 7 digits, maximum integer bin content = +/-16777216 (***); TH1D : histograms with one double per channel. Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (****). 2-D histograms:; TH2C : histograms with one byte per channel. Maximum bin content = 127; TH2S : histograms with one short per channel",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:22258,Integrability,depend,depend,22258,"s histogram.Definition TH1.cxx:6879; TH1::GetStdDevvirtual Double_t GetStdDev(Int_t axis=1) constReturns the Standard Deviation (Sigma).Definition TH1.cxx:7607; TH1::GetMeanvirtual Double_t GetMean(Int_t axis=1) constFor axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis.Definition TH1.cxx:7535; TH1::Resetvirtual void Reset(Option_t *option="""")Reset this histogram: contents, errors, etc.Definition TH1.cxx:7103; TH1::Integralvirtual Double_t Integral(Option_t *option="""") constReturn integral of bin contents.Definition TH1.cxx:7941; TH1::GetEntriesvirtual Double_t GetEntries() constReturn the current number of entries.Definition TH1.cxx:4423; TH1::KolmogorovTestvirtual Double_t KolmogorovTest(const TH1 *h2, Option_t *option="""") constStatistical test of compatibility in shape between this histogram and h2, using Kolmogorov test.Definition TH1.cxx:8178; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; IMPORTANT NOTE: The returned values for GetMean and GetStdDev depend on how the histogram statistics are calculated. By default, if no range has been set, the returned values are the (unbinned) ones calculated at fill time. If a range has been set, however, the values are calculated using the bins in range; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned values are always those of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats. ; Definition at line 59 of file TH1.h. Public Types; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type of statistics for bin errors. More..",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:26082,Integrability,rout,routine,26082,"ncrement bin content by 1. ;  ; virtual void AddBinContent (Int_t bin, Double_t w);  Increment bin content by a weight w. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:40834,Integrability,rout,routine,40834,") const;  Statistical test of compatibility in shape between this histogram and h2, using Kolmogorov test. ;  ; virtual void LabelsDeflate (Option_t *axis=""X"");  Reduce the number of bins for the axis passed in the option to the number of bins having a label. ;  ; virtual void LabelsInflate (Option_t *axis=""X"");  Double the number of bins for axis. ;  ; virtual void LabelsOption (Option_t *option=""h"", Option_t *axis=""X"");  Sort bins with labels or set option(s) to draw axis with labels. ;  ; virtual Long64_t Merge (TCollection *list);  ; Long64_t Merge (TCollection *list, Option_t *option);  Add all histograms in the collection to this histogram. ;  ; virtual Bool_t Multiply (const TH1 *h1);  Multiply this histogram by h1. ;  ; virtual Bool_t Multiply (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2. ;  ; virtual Bool_t Multiply (TF1 *f1, Double_t c1=1);  Performs the operation: ;  ; void Paint (Option_t *option="""") override;  Control routine to paint any kind of histograms. ;  ; void Print (Option_t *option="""") const override;  Print some global quantities for this histogram. ;  ; virtual void PutStats (Double_t *stats);  Replace current statistics with the values in array stats. ;  ; virtual TH1 * Rebin (Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr);  Rebin this histogram. ;  ; virtual void RebinAxis (Double_t x, TAxis *axis);  ; virtual TH1 * RebinX (Int_t ngroup=2, const char *newname="""");  ; virtual void Rebuild (Option_t *option="""");  Using the current bin info, recompute the arrays for contents and errors. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual void Reset (Option_t *option="""");  Reset this histogram: contents, errors, etc. ;  ; virtual void ResetStats ();  Reset the statistics including the number of entries and replace with values calculated from bin conten",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:51160,Integrability,message,message,51160,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method,",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:51581,Integrability,message,message,51581,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDe",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:52197,Integrability,message,message,52197,"cute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:54813,Integrability,message,message,54813,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:55004,Integrability,message,message,55004,"[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:60771,Integrability,rout,routine,60771,"s * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the default buffer size for automatic histograms the parameter fgBufferSize may be changed via SetDefaultBufferSize. ;  ; static Bool_t GetDefaultSumw2 ();  Return kTRUE if TH1::Sumw2 must be called when creating new histograms. ;  ; static void SetDefaultBufferSize (Int_t buffersize=1000);  Static function to set the default buffer size for automatic histograms. ;  ; static void SetDefaultSumw2 (Bool_t sumw2=kTRUE);  When this static function is called with sumw2=kTRUE, all new histograms will automatically activate the storage of the sum of squares of errors, ie TH1::Sumw2 is automatically called. ;  ; static void SmoothArray (Int_t NN, Double_t *XX, Int_t ntimes=1);  Smooth array xx, translation of Hbook routine hsmoof.F. ;  ; static void StatOverflows (Bool_t flag=kTRUE);  if flag=kTRUE, underflows and overflows are used by the Fill functions in the computation of statistics (mean value, StdDev). ;  ; static TH1 * TransformHisto (TVirtualFFT *fft, TH1 *h_output, Option_t *option);  For a given transform (first parameter), fills the histogram (second parameter) with the transform output data, specified in the third parameter If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created and the user is responsible for deleting it. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static con",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:75402,Integrability,depend,depending,75402,"efined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; Note also that adding histogram with labels is not supported, histogram will be added merging them by bin number independently of the labels. For adding histogram ith labels one should use TH1::Merge; SPECIAL CASE (Average/Efficiency histograms) For histograms representing averages or efficiencies, one should compute the average of the two histograms and not the sum. One can mark a histogram to be an average histogram by setting its bit kIsAverage with myhist.SetBit(TH1::kIsAverage); Note that the two histograms must have their kIsAverage bit set; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; IMPORTANT NOTE2: You should be careful about the statistics of the returned histogram, whose statistics may be binned or unbinned, depending on whether c1 is negative, whether TAxis::kAxisRange is true, and whether TH1::ResetStats has been called on either this or h1. See TH1::GetStats.; ANOTHER SPECIAL CASE : h1 = h2 and c2 < 0 do a scaling this = c1 * h1 / (bin Volume); The function returns kFALSE if the Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 1104 of file TH1.cxx. ◆ Add() [2/3]. Bool_t TH1::Add ; (; const TH1 * ; h1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set.; Note also that adding histogram with labels is not supported, histogram will be added merging them by bin number independently of the labels. For adding histogram with labels one should use TH1::Merge; SPECIAL CASE (Average/Efficiency histograms) For histograms r",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:77170,Integrability,depend,depending,77170,"Sumw2 is automatically called for this if not already set.; Note also that adding histogram with labels is not supported, histogram will be added merging them by bin number independently of the labels. For adding histogram with labels one should use TH1::Merge; SPECIAL CASE (Average/Efficiency histograms) For histograms representing averages or efficiencies, one should compute the average of the two histograms and not the sum. One can mark a histogram to be an average histogram by setting its bit kIsAverage with myhist.SetBit(TH1::kIsAverage); Note that the two histograms must have their kIsAverage bit set; IMPORTANT NOTE1: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Add; IMPORTANT NOTE2: if h1 has a normalisation factor, the normalisation factor is used , ie this = this + c1*factor*h1 Use the other TH1::Add function if you do not want this feature; IMPORTANT NOTE3: You should be careful about the statistics of the returned histogram, whose statistics may be binned or unbinned, depending on whether c1 is negative, whether TAxis::kAxisRange is true, and whether TH1::ResetStats has been called on either this or h1. See TH1::GetStats.; The function return kFALSE if the Add operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 954 of file TH1.cxx. ◆ Add() [3/3]. Bool_t TH1::Add ; (; TF1 * ; f1, . Double_t ; c1 = 1, . Option_t * ; option = """" . ). virtual . Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ; By default, the function is computed at the centre of the bin. if option ""I"" is specified (1-d histogram only), the integral of the function in each bin is used instead of the value of the function at the centre of the bin.; Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:99178,Integrability,rout,routine,99178,"omparison of weighted and unweighted histograms. Statistical Problems in Particle Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05, Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44. Gagunashvili,N., Comparison of weighted and unweighted histograms, arXiv:physics/0605123, 2006.; [3] Cramer, H., 1946. Mathematical methods of statistics. Princeton University Press, Princeton.; [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables. Biometrics 29, 205-220.; [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity test in 2xN tables. Biometrics 21, 19-33.; [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis. John Wiley & Sons Inc., New York. . Definition at line 2008 of file TH1.cxx. ◆ Chi2TestX(). Double_t TH1::Chi2TestX ; (; const TH1 * ; h2, . Double_t & ; chi2, . Int_t & ; ndf, . Int_t & ; igood, . Option_t * ; option = ""UU"", . Double_t * ; res = nullptr . ); const. virtual . The computation routine of the Chisquare test. ; For the method description, see Chi2Test() function.; Returnsp-value ; Parameters. [in]h2the second histogram ; [in]option; ""UU"" = experiment experiment comparison (unweighted-unweighted); ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first histogram should be unweighted; ""WW"" = MC MC comparison (weighted-weighted); ""NORM"" = if one or both histograms is scaled; ""OF"" = overflows included; ""UF"" = underflows included by default underflows and overflows are not included . [out]igoodtest output; igood=0 - no problems; For unweighted unweighted comparison; igood=1'There is a bin in the 1st histogram with less than 1 event'; igood=2'There is a bin in the 2nd histogram with less than 1 event'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'. For unweighted weighted comparison; igood=1'There is a bin in the 1st histogram with less then 1 event'; igood=2'There is a bin in the 2nd histogram with less then 10 effective number of e",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:102920,Integrability,rout,routine,102920," also cleared, since there is no more content in the bins. ; Definition at line 2517 of file TH1.cxx. ◆ Clone(). TObject * TH1::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a complete copy of the underlying object. ; If 'newname' is set, the copy's name will be set to that name. ; Reimplemented from TObject.; Reimplemented in TH2Poly.; Definition at line 2752 of file TH1.cxx. ◆ ComputeIntegral(). Double_t TH1::ComputeIntegral ; (; Bool_t ; onlyPositive = false). virtual . Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; This function is automatically called by GetRandom when the fIntegral array does not exist or when the number of entries in the histogram has changed since the previous call to GetRandom. The resulting integral is normalized to 1. If the routine is called with the onlyPositive flag set an error will be produced in case of negative bin content and a NaN value returned Returns1 if success, 0 if integral is zero, NAN if onlyPositive-test fails ; Reimplemented in TH2Poly.; Definition at line 2537 of file TH1.cxx. ◆ Copy(). void TH1::Copy ; (; TObject & ; obj); const. overridevirtual . Copy this histogram structure to newth1. ; Note that this function does not copy the list of associated functions. Use TObject::Clone to make a full copy of a histogram.; Note also that the histogram it will be created in gDirectory (if AddDirectoryStatus()=true) or will not be added to any directory if AddDirectoryStatus()=false independently of the current directory stored in the original histogram ; Reimplemented from TObject.; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, TProfile3D, TH2Poly, and TH1K.; Definition at line 2671 of file TH1.cxx. ◆ DeclFileName(). static const char * TH1::DeclFileName ; (; ). inlinestatic . ReturnsName of the ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:115142,Integrability,depend,depending,115142,"he imaginary part of the output; ""MAG""- returns a histogram of the magnitude of the output; ""PH"" - returns a histogram of the phase of the output. option of transform type; ""R2C"" - real to complex transforms - default; ""R2HC"" - real to halfcomplex (special format of storing output data, results the same as for R2C); ""DHT"" - discrete Hartley transform real to real transforms (sine and cosine):; ""R2R_0"", ""R2R_1"", ""R2R_2"", ""R2R_3"" - discrete cosine transforms of types I-IV; ""R2R_4"", ""R2R_5"", ""R2R_6"", ""R2R_7"" - discrete sine transforms of types I-IV To specify the type of each dimension of a 2-dimensional real to real transform, use options of form ""R2R_XX"", for example, ""R2R_02"" for a transform, which is of type ""R2R_0"" in 1st dimension and ""R2R_2"" in the 2nd. option of transform flag; ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. Default is ""ES"". Examples of valid options: ""Mag R2C M"" ""Re R2R_11"" ""Im R2C ES"" ""PH R2HC EX"" ; Reimplemented in TH2Poly.; Definition at line 3284 of file TH1.cxx. ◆ Fill() [1/3]. Int_t TH1::Fill ; (; const char * ; namex, . Double_t ; w . ). virtual . Increment bin with namex with a weight w. ; if x is less than the low-edge of the first bin, the Underflow bin is incremented if x is equal to or greater than the upper edge of last bin, the Overflow bin is incremented; If the weight is not equal to 1, the storage of the sum of squares of weights is automatically triggered and the sum of the squares of weights is incremented by \( w^2 \) in the bin corresponding to x.; The function ret",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:119038,Integrability,integrat,integrated,119038,"t is not equal to 1, the storage of the sum of squares of weights is automatically triggered and the sum of the squares of weights is incremented by \( w^2 \) in the bin corresponding to x. if w is NULL each entry is assumed a weight=1 ; Reimplemented in TH2, TH2Poly, and TProfile.; Definition at line 3447 of file TH1.cxx. ◆ FillN() [2/2]. virtual void TH1::FillN ; (; Int_t ; , . const Double_t * ; , . const Double_t * ; , . const Double_t * ; , . Int_t ;  . ). inlinevirtual . Reimplemented in TH2, TH2Poly, and TProfile.; Definition at line 224 of file TH1.h. ◆ FillRandom() [1/2]. void TH1::FillRandom ; (; const char * ; fname, . Int_t ; ntimes = 5000, . TRandom * ; rng = nullptr . ). virtual . Fill histogram following distribution in function fname. ; Parameters. fname: Function name used for filling the histogram ; ntimes: number of times the histogram is filled ; rng: (optional) Random number generator used to sample. The distribution contained in the function fname (TF1) is integrated over the channel contents for the bin range of this histogram. It is normalized to 1.; Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Fill histogram channel ntimes random numbers are generated. One can also call TF1::GetRandom to get a random variate from a function. ; Reimplemented in TH2, and TH3.; Definition at line 3519 of file TH1.cxx. ◆ FillRandom() [2/2]. void TH1::FillRandom ; (; TH1 * ; h, . Int_t ; ntimes = 5000, . TRandom * ; rng = nullptr . ). virtual . Fill histogram following distribution in histogram h. ; Parameters. h: Histogram pointer used for sampling random number ; ntimes: number of times the histogram is filled ; rng: (optional) Random number generator used for sampling. The distribution contained in the histogram h (TH1) is integrated over the channel contents for the bin range of this histogram. It is normalized to 1.; Getting one random number implies:;",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:119912,Integrability,integrat,integrated,119912,"d ; rng: (optional) Random number generator used to sample. The distribution contained in the function fname (TF1) is integrated over the channel contents for the bin range of this histogram. It is normalized to 1.; Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Fill histogram channel ntimes random numbers are generated. One can also call TF1::GetRandom to get a random variate from a function. ; Reimplemented in TH2, and TH3.; Definition at line 3519 of file TH1.cxx. ◆ FillRandom() [2/2]. void TH1::FillRandom ; (; TH1 * ; h, . Int_t ; ntimes = 5000, . TRandom * ; rng = nullptr . ). virtual . Fill histogram following distribution in histogram h. ; Parameters. h: Histogram pointer used for sampling random number ; ntimes: number of times the histogram is filled ; rng: (optional) Random number generator used for sampling. The distribution contained in the histogram h (TH1) is integrated over the channel contents for the bin range of this histogram. It is normalized to 1.; Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Fill histogram channel ntimes random numbers are generated. SPECIAL CASE when the target histogram has the same binning as the source. in this case we simply use a poisson distribution where the mean value per bin = bincontent/integral. ; Reimplemented in TH2, and TH3.; Definition at line 3590 of file TH1.cxx. ◆ FindBin(). Int_t TH1::FindBin ; (; Double_t ; x, . Double_t ; y = 0, . Double_t ; z = 0 . ). virtual . Return Global bin number corresponding to x,y,z. ; 2-D and 3-D histograms are represented with a one dimensional structure. This has the advantage that all existing functions, such as GetBinContent, GetBinError, GetBinFunction work for all dimensions. This function tries to extend the axis if the given point belongs to an under-/overflow b",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:130978,Integrability,depend,depending,130978," parameters by calling these static functions before fitting (before calling TH1::Fit):; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm) for changing the minmizer and/or the corresponding algorithm. For example ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS""); will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization The current defaults are (""Minuit"",""Migrad""). See the documentation of the ROOT::Math::MinimizerOptions for the available minimizers in ROOT and their corresponding algorithms.; ROOT::Math::MinimizerOptions::SetDefaultTolerance for setting a different tolerance value for the minimization.; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls for setting the maximum number of function calls.; ROOT::Math::MinimizerOptions::SetDefaultPrintLevel for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing. Other options are possible depending on the Minimizer used, see the corresponding documentation. The default minimizer can be also set in the resource file in etc/system.rootrc. For example; Root.Fitter: Minuit2. Chi-square Fits; By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method is used where the residual for each bin is computed using as error the observed value (the bin error) returned by TH1::GetBinError. \[; Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; \]. where y(i) is the bin content for each bin i, x(i) is the bin center and e(i) is the bin error (sqrt(y(i) for an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, f(x(i)|p), but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume. When using option P (Pearson chi2), the expected e",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:136940,Integrability,depend,depends,136940,"err0 = myfunc->GetParError(0); //error on first parameter; Associated functions; One or more object ( can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions). If the histogram is made persistent, the list of associated functions is also persistent. Given a histogram h, one can retrieve an associated function with:; TF1 *myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; status > 0 : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus. TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error only in Minos but not in Migrad a fitStatus of 40 will be returned. Minuit2 returns 0 in case of success and different values in migrad,minos or hesse depending on the error. See in this case the documentation of Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the minos return status and Minuit2Minimizer::Hesse for the hesse return status. If other minimizers are used see their specific documentation for the status code returned. For example in the case of Fumili, see TFumili::Minimize. Fitting in a range; In order to fit in a sub-range of the histogram you have two options:; pass to this function the lower (xxmin) and",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:137411,Integrability,depend,depending,137411,"myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; status > 0 : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus. TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error only in Minos but not in Migrad a fitStatus of 40 will be returned. Minuit2 returns 0 in case of success and different values in migrad,minos or hesse depending on the error. See in this case the documentation of Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the minos return status and Minuit2Minimizer::Hesse for the hesse return status. If other minimizers are used see their specific documentation for the status code returned. For example in the case of Fumili, see TFumili::Minimize. Fitting in a range; In order to fit in a sub-range of the histogram you have two options:; pass to this function the lower (xxmin) and upper (xxmax) values for the fitting range;; define a specific range in the fitted function and use the fitting option ""R"". For example, if your histogram has a defined range between -4 and 4 and you want to fit a gaussian only in the interval 1 to 3, you can do:. TF1 *f1 = new TF1(""f1"", ""gaus"", 1, 3);; histo->Fit(""f1"", ""R"");; f1TF1 * f1Definition legend1.C:11; The fitting range is also limited by the histogram range defined using TAxis::SetRang",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:141414,Integrability,rout,routines,141414," these lines (where g is a pointer to the TGraph): TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats"");; st->SetX1NDC(newx1); //new x start position; st->SetX2NDC(newx2); //new x end position; . Additional Notes on Fitting; Fitting a histogram of dimension N with a function of dimension N-1; It is possible to fit a TH2 with a TF1 or a TH3 with a TF2. In this case the chi-square is computed from the squared error distance between the function values and the bin centers weighted by the bin content. For correct error scaling, the obtained parameter error are corrected as in the case when the option ""W"" is used.; User defined objective functions; By default when fitting a chi square function is used for fitting. When option ""L"" is used a Poisson likelihood function is used. Using option ""MULTI"" a multinomial likelihood fit is used. Thes functions are defined in the header Fit/Chi2Func.h or Fit/PoissonLikelihoodFCN and they are implemented using the routines FitUtil::EvaluateChi2 or FitUtil::EvaluatePoissonLogL in the file math/mathcore/src/FitUtil.cxx. It is possible to specify a user defined fitting function, using option ""U"" and calling the following functions:; TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; TVirtualFitter::SetFCNvirtual void SetFCN(void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t))To set the address of the minimization objective function called by the native compiler (see function...Definition TVirtualFitter.cxx:267; TVirtualFitter::Fitterstatic TVirtualFitter * Fitter(TObject *obj, Int_t maxpar=25)Static function returning a pointer to the current fitter.Definition TVirtualFitter.cxx:159; where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; Note on treatment of empty bins; Empty bins, which have the content equal to zero AND error equal to zero, are excluded by default from the chi-square fit, but they are considered in",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:150386,Integrability,depend,depend,150386,"sum of squares of weights has been defined (via Sumw2), this function returns the sqrt(sum of w2). otherwise it returns the sqrt(contents) for this bin. ; Reimplemented in TH1K, TH2Poly, TProfile, TProfile2D, TProfile2Poly, TProfile2Poly, and TProfile3D.; Definition at line 9063 of file TH1.cxx. ◆ GetBinError() [2/3]. virtual Double_t TH1::GetBinError ; (; Int_t ; binx, . Int_t ; biny . ); const. inlinevirtual . Reimplemented in TH1K, TProfile, TProfile2D, TH2Poly, TProfile2Poly, and TProfile3D.; Definition at line 269 of file TH1.h. ◆ GetBinError() [3/3]. virtual Double_t TH1::GetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz . ); const. inlinevirtual . Reimplemented in TH1K, TProfile, TProfile3D, TProfile2D, TH2Poly, and TProfile2Poly.; Definition at line 270 of file TH1.h. ◆ GetBinErrorLow(). Double_t TH1::GetBinErrorLow ; (; Int_t ; bin); const. virtual . Return lower error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - lower interval value ; Reimplemented in TH2, and TH3.; Definition at line 9079 of file TH1.cxx. ◆ GetBinErrorOption(). virtual EBinErrorOpt TH1::GetBinErrorOption ; (; ); const. inlinevirtual . Definition at line 273 of file TH1.h. ◆ GetBinErrorSqUnchecked(). virtual Double_t TH1::GetBinErrorSqUnchecked ; (; Int_t ; bin); const. inlineprotectedvirtual . Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 449 of file TH1.h. ◆ GetBinErrorUp(). Double_t TH1::GetBinErrorUp ; (; Int_t ; bin); const. virtual . Return upper error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - upper interval value ; Reimplemented in TH2, and TH3.; Definition at line 9110 of file TH1.cxx. ◆ GetBinLowEdge(). Double_t TH1::GetBinLowEdge ; (; Int_t ; bin); const. virtual . Return bin lower edge for 1D histogram. ; Better to use h1.GetXaxis()->GetBinLowEdge(bin) ; Definition at line 9152 of file TH1.cxx. ◆ GetBinW",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:151050,Integrability,depend,depend,151050,"evirtual . Reimplemented in TH1K, TProfile, TProfile3D, TProfile2D, TH2Poly, and TProfile2Poly.; Definition at line 270 of file TH1.h. ◆ GetBinErrorLow(). Double_t TH1::GetBinErrorLow ; (; Int_t ; bin); const. virtual . Return lower error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - lower interval value ; Reimplemented in TH2, and TH3.; Definition at line 9079 of file TH1.cxx. ◆ GetBinErrorOption(). virtual EBinErrorOpt TH1::GetBinErrorOption ; (; ); const. inlinevirtual . Definition at line 273 of file TH1.h. ◆ GetBinErrorSqUnchecked(). virtual Double_t TH1::GetBinErrorSqUnchecked ; (; Int_t ; bin); const. inlineprotectedvirtual . Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 449 of file TH1.h. ◆ GetBinErrorUp(). Double_t TH1::GetBinErrorUp ; (; Int_t ; bin); const. virtual . Return upper error associated to bin number bin. ; The error will depend on the statistic option used will return the binContent - upper interval value ; Reimplemented in TH2, and TH3.; Definition at line 9110 of file TH1.cxx. ◆ GetBinLowEdge(). Double_t TH1::GetBinLowEdge ; (; Int_t ; bin); const. virtual . Return bin lower edge for 1D histogram. ; Better to use h1.GetXaxis()->GetBinLowEdge(bin) ; Definition at line 9152 of file TH1.cxx. ◆ GetBinWidth(). Double_t TH1::GetBinWidth ; (; Int_t ; bin); const. virtual . Return bin width for 1D histogram. ; Better to use h1.GetXaxis()->GetBinWidth(bin) ; Definition at line 9163 of file TH1.cxx. ◆ GetBinWithContent(). Double_t TH1::GetBinWithContent ; (; Double_t ; c, . Int_t & ; binx, . Int_t ; firstx = 0, . Int_t ; lastx = 0, . Double_t ; maxdiff = 0 . ); const. virtual . Compute first binx in the range [firstx,lastx] for which diff = abs(bin_content-c) <= maxdiff. ; In case several bins in the specified range with diff=0 are found the first bin found is returned in binx. In case several bins in the specified range satisfy diff <=maxdiff the bin with th",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:158548,Integrability,depend,depends,158548,"turn pointer to function with name. ; Functions such as TH1::Fit store the fitted function in the list of functions of this histogram. ; Definition at line 9051 of file TH1.cxx. ◆ GetIntegral(). Double_t * TH1::GetIntegral ; (; ). virtual . Return a pointer to the array of bins integral. ; if the pointer fIntegral is null, TH1::ComputeIntegral is called The array dimension is the number of bins in the histograms including underflow and overflow (fNCells) the last value integral[fNCells] is set to the number of entries of the histogram ; Definition at line 2586 of file TH1.cxx. ◆ GetKurtosis(). Double_t TH1::GetKurtosis ; (; Int_t ; axis = 1); const. virtual . For axis =1, 2 or 3 returns kurtosis of the histogram along x, y or z axis. Kurtosis(gaussian(0, 1)) = 0.; For axis =11, 12 or 13 returns the approximate standard error of kurtosis of the histogram along x, y or z axis. Note, that since third and fourth moment are not calculated at the fill time, kurtosis and its standard error are computed bin by bin; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. See TH1::GetMean and TH1::GetStdDev. ; Definition at line 7744 of file TH1.cxx. ◆ GetLabelColor(). Color_t TH1::GetLabelColor ; (; Option_t * ; axis = ""X""); const. virtual . Return the ""axis"" label color. ; Definition at line 53 of file Haxis.cxx. ◆ GetLabelFont(). Style_t TH1::GetLabelFont ; (; Option_t * ; axis = ""X""); const. virtual . Return the ""axis"" label font. ; Definition at line 66 of file Haxis.cxx. ◆ GetLabelOffset(). Float_t TH1::GetLabelOffset ; (; Option_t * ; axis = ""X""); const. virtual . Return the ""axis"" label offset. ; Definition at line 79 of file Haxis.cxx. ◆ GetLabelSize(). Float_t TH1::GetLabelSize ; (; Option_t * ; axis = ""X""); const. virtual . Return the ""axis"" label size. ; Definition at line 92 of file Haxis.cxx. ◆ GetListOfFunctions(). TList * TH1::GetListOfFunctions ; (; ); const. inline . Definition at line 244 of file TH1.h. ◆ GetLowEdge(). voi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:161605,Integrability,depend,depends,161605,":GetMaximumBin ; (; Int_t & ; locmax, . Int_t & ; locmay, . Int_t & ; locmaz . ); const. virtual . Return location of bin with maximum value in the range. ; Definition at line 8586 of file TH1.cxx. ◆ GetMaximumStored(). virtual Double_t TH1::GetMaximumStored ; (; ); const. inlinevirtual . Definition at line 289 of file TH1.h. ◆ GetMean(). Double_t TH1::GetMean ; (; Int_t ; axis = 1); const. virtual . For axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis. ; For axis = 11, 12, 13 returns the standard error of the mean value of the histogram along X, Y or Z axis; Note that the mean value/StdDev is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram.; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. By default, if no range has been set, the returned mean is the (unbinned) one calculated at fill time. If a range has been set, however, the mean is calculated using the bins in range, as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned mean (and all other statistics) is always that of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats.; Return mean value of this histogram along the X axis. ; Definition at line 7535 of file TH1.cxx. ◆ GetMeanError(). Double_t TH1::GetMeanError ; (; Int_t ; axis = 1); const. virtual . Return standard error of mean of this histogram along the X axis. ; Note that the mean value/StdDev is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:162923,Integrability,depend,depends,162923,"ge(0, 0) to unset the range. To ensure that the returned mean (and all other statistics) is always that of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats.; Return mean value of this histogram along the X axis. ; Definition at line 7535 of file TH1.cxx. ◆ GetMeanError(). Double_t TH1::GetMeanError ; (; Int_t ; axis = 1); const. virtual . Return standard error of mean of this histogram along the X axis. ; Note that the mean value/StdDev is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram.; Also note, that although the definition of standard error doesn't include the assumption of normality, many uses of this feature implicitly assume it.; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. By default, if no range has been set, the returned value is the (unbinned) one calculated at fill time. If a range has been set, however, the value is calculated using the bins in range, as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned value (and all other statistics) is always that of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats. ; Definition at line 7575 of file TH1.cxx. ◆ GetMinimum(). Double_t TH1::GetMinimum ; (; Double_t ; minval = -FLT_MAX); const. virtual . Return minimum value larger than minval of bins in the range, unless the value has been overridden by TH1::SetMinimum, in which case it returns that value. ; This happens, for example, when the histogram is drawn and the y or z axis limits are changed; To get the minimum value of bins in the histogram regardless of whether the value has been overridde",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:172984,Integrability,depend,depends,172984,"efinition at line 5010 of file TH1.cxx. ◆ GetRMS(). Double_t TH1::GetRMS ; (; Int_t ; axis = 1); const. inline . This function returns the Standard Deviation (Sigma) of the distribution not the Root Mean Square (RMS). ; The name ""RMS"" is been often used as a synonym for the Standard Deviation and it was introduced many years ago (Hbook/PAW times). We keep the name GetRMS for continuity as an alias to GetStdDev. GetStdDev() should be used instead. ; Definition at line 319 of file TH1.h. ◆ GetRMSError(). Double_t TH1::GetRMSError ; (; Int_t ; axis = 1); const. inline . Definition at line 320 of file TH1.h. ◆ GetSkewness(). Double_t TH1::GetSkewness ; (; Int_t ; axis = 1); const. virtual . For axis = 1, 2 or 3 returns skewness of the histogram along x, y or z axis.; For axis = 11, 12 or 13 returns the approximate standard error of skewness of the histogram along x, y or z axis. Note, that since third and fourth moment are not calculated at the fill time, skewness and its standard error are computed bin by bin; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. See TH1::GetMean and TH1::GetStdDev. ; Definition at line 7671 of file TH1.cxx. ◆ GetStatOverflows(). EStatOverflows TH1::GetStatOverflows ; (; ); const. inline . Get the behaviour adopted by the object about the statoverflows. See EStatOverflows for more information. ; Definition at line 323 of file TH1.h. ◆ GetStatOverflowsBehaviour(). Bool_t TH1::GetStatOverflowsBehaviour ; (; ); const. inlineprotected . Definition at line 152 of file TH1.h. ◆ GetStats(). void TH1::GetStats ; (; Double_t * ; stats); const. virtual . fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; If no axis-subrange is specified (via TAxis::SetRange), the array stats is simply a copy of the statistics quantities computed at filling time. If a sub-range i",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:174098,Integrability,depend,dependent,174098,"tStdDev. ; Definition at line 7671 of file TH1.cxx. ◆ GetStatOverflows(). EStatOverflows TH1::GetStatOverflows ; (; ); const. inline . Get the behaviour adopted by the object about the statoverflows. See EStatOverflows for more information. ; Definition at line 323 of file TH1.h. ◆ GetStatOverflowsBehaviour(). Bool_t TH1::GetStatOverflowsBehaviour ; (; ); const. inlineprotected . Definition at line 152 of file TH1.h. ◆ GetStats(). void TH1::GetStats ; (; Double_t * ; stats); const. virtual . fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; If no axis-subrange is specified (via TAxis::SetRange), the array stats is simply a copy of the statistics quantities computed at filling time. If a sub-range is specified, the function recomputes these quantities from the bin contents in the current axis range.; IMPORTANT NOTE: This means that the returned statistics are context-dependent. If TAxis::kAxisRange, the returned statistics are dependent on the binning; otherwise, they are a copy of the histogram statistics computed at fill time, which are unbinned by default (calling TH1::ResetStats forces them to use binned statistics). You can reset TAxis::kAxisRange using TAxis::SetRange(0, 0).; Note that the mean value/StdDev is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram. ; Reimplemented in TH2, TH2Poly, TH3, TProfile, TProfile2D, TProfile2Poly, and TProfile3D.; Definition at line 7833 of file TH1.cxx. ◆ GetStdDev(). Double_t TH1::GetStdDev ; (; Int_t ; axis = 1); const. virtual . Returns the Standard Deviation (Sigma). ; The Sigma estimate is computed a",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:174159,Integrability,depend,dependent,174159,"the object about the statoverflows. See EStatOverflows for more information. ; Definition at line 323 of file TH1.h. ◆ GetStatOverflowsBehaviour(). Bool_t TH1::GetStatOverflowsBehaviour ; (; ); const. inlineprotected . Definition at line 152 of file TH1.h. ◆ GetStats(). void TH1::GetStats ; (; Double_t * ; stats); const. virtual . fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; If no axis-subrange is specified (via TAxis::SetRange), the array stats is simply a copy of the statistics quantities computed at filling time. If a sub-range is specified, the function recomputes these quantities from the bin contents in the current axis range.; IMPORTANT NOTE: This means that the returned statistics are context-dependent. If TAxis::kAxisRange, the returned statistics are dependent on the binning; otherwise, they are a copy of the histogram statistics computed at fill time, which are unbinned by default (calling TH1::ResetStats forces them to use binned statistics). You can reset TAxis::kAxisRange using TAxis::SetRange(0, 0).; Note that the mean value/StdDev is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram. ; Reimplemented in TH2, TH2Poly, TH3, TProfile, TProfile2D, TProfile2Poly, and TProfile3D.; Definition at line 7833 of file TH1.cxx. ◆ GetStdDev(). Double_t TH1::GetStdDev ; (; Int_t ; axis = 1); const. virtual . Returns the Standard Deviation (Sigma). ; The Sigma estimate is computed as ; \[; \sqrt{\frac{1}{N}(\sum(x_i-x_{mean})^2)}; \]. For axis = 1,2 or 3 returns the Sigma value of the histogram along X, Y or Z axis For axis = 11, 12 or 13 retu",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:175710,Integrability,depend,depends,175710,"ction TH1::StatOverflows(kTRUE) before filling the histogram. ; Reimplemented in TH2, TH2Poly, TH3, TProfile, TProfile2D, TProfile2Poly, and TProfile3D.; Definition at line 7833 of file TH1.cxx. ◆ GetStdDev(). Double_t TH1::GetStdDev ; (; Int_t ; axis = 1); const. virtual . Returns the Standard Deviation (Sigma). ; The Sigma estimate is computed as ; \[; \sqrt{\frac{1}{N}(\sum(x_i-x_{mean})^2)}; \]. For axis = 1,2 or 3 returns the Sigma value of the histogram along X, Y or Z axis For axis = 11, 12 or 13 returns the error of StdDev estimation along X, Y or Z axis for Normal distribution; Note that the mean value/sigma is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram.; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. By default, if no range has been set, the returned standard deviation is the (unbinned) one calculated at fill time. If a range has been set, however, the standard deviation is calculated using the bins in range, as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned standard deviation (and all other statistics) is always that of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats. ; Definition at line 7607 of file TH1.cxx. ◆ GetStdDevError(). Double_t TH1::GetStdDevError ; (; Int_t ; axis = 1); const. virtual . Return error of standard deviation estimation for Normal distribution. ; Note that the mean value/StdDev is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and ove",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:177219,Integrability,depend,depends,177219,"all TH1::ResetStats. See TH1::GetStats. ; Definition at line 7607 of file TH1.cxx. ◆ GetStdDevError(). Double_t TH1::GetStdDevError ; (; Int_t ; axis = 1); const. virtual . Return error of standard deviation estimation for Normal distribution. ; Note that the mean value/StdDev is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram.; Value returned is standard deviation of sample standard deviation. Note that it is an approximated value which is valid only in the case that the original data distribution is Normal. The correct one would require the 4-th momentum value, which cannot be accurately estimated from a histogram since the x-information for all entries is not kept.; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. By default, if no range has been set, the returned value is the (unbinned) one calculated at fill time. If a range has been set, however, the value is calculated using the bins in range, as described above; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned value (and all other statistics) is always that of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats. ; Definition at line 7655 of file TH1.cxx. ◆ GetSumOfWeights(). Double_t TH1::GetSumOfWeights ; (; ); const. virtual . Return the sum of weights excluding under/overflows. ; Definition at line 7917 of file TH1.cxx. ◆ GetSumw2() [1/2]. virtual TArrayD * TH1::GetSumw2 ; (; ). inlinevirtual . Definition at line 313 of file TH1.h. ◆ GetSumw2() [2/2]. virtual const TArrayD * TH1::GetSumw2 ; (; ); const. inlinevirtual . Definition at line 314 of file TH1.h. ◆ GetSumw2N(). virtual Int_t TH1::",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:184573,Integrability,rout,routine,184573,"g to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure: make pseudoexperiments based on random values from the parent distribution, compare the KS distance of the pseudoexperiment to the parent distribution, and count all the KS values above the value obtained from the original data to Monte Carlo distribution. The number of pseudo-experiments nEXPT is by default 1000, and it can be changed by specifying the option as ""X=number"", for example ""X=10000"" for 10000 toys. The function returns the probability. (thanks to Ben Kilminster to submit this procedure). Note that this option ""X"" is much slower. The returned function value is the probability of test (much less than one means NOT compatible); Code adapted by Rene Brun from original HBOOK routine HDIFF; NOTE1 A good description of the Kolmogorov test can be seen at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; NOTE2 see also alternative function TH1::Chi2Test The Kolmogorov test is assumed to give better results than Chi2Test in case of histograms with low statistics.; NOTE3 (Jan Conrad, Fred James) ""The returned value PROB is calculated such that it will be; uniformly distributed between zero and one for compatible histograms,; provided the data are not binned (or the number of bins is very large; compared with the number of events). Users who have access to unbinned; data and wish exact confidence levels should therefore not put their data; into histograms, but should call directly TMath::KolmogorovTest. On; the other hand, since TH1 is a convenient way of collecting data and; saving space, this function has been provided. However, the values of; PROB for binned data will be shifted slightly higher than expected,; dependi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:185539,Integrability,depend,depending,185539,"T compatible); Code adapted by Rene Brun from original HBOOK routine HDIFF; NOTE1 A good description of the Kolmogorov test can be seen at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; NOTE2 see also alternative function TH1::Chi2Test The Kolmogorov test is assumed to give better results than Chi2Test in case of histograms with low statistics.; NOTE3 (Jan Conrad, Fred James) ""The returned value PROB is calculated such that it will be; uniformly distributed between zero and one for compatible histograms,; provided the data are not binned (or the number of bins is very large; compared with the number of events). Users who have access to unbinned; data and wish exact confidence levels should therefore not put their data; into histograms, but should call directly TMath::KolmogorovTest. On; the other hand, since TH1 is a convenient way of collecting data and; saving space, this function has been provided. However, the values of; PROB for binned data will be shifted slightly higher than expected,; depending on the effects of the binning. For example, when comparing two; uniform distributions of 500 events in 100 bins, the values of PROB,; instead of being exactly uniformly distributed between zero and one, have; a mean value of about 0.56. We can apply a useful; rule: As long as the bin width is small compared with any significant; physical effect (for example the experimental resolution) then the binning; cannot have an important effect. Therefore, we believe that for all; practical purposes, the probability value PROB is calculated correctly; provided the user is aware that:. 1. The value of PROB should not be expected to have exactly the correct; distribution for binned data.; 2. The user is responsible for seeing to it that the bin widths are; small compared with any physical phenomena of interest.; 3. The effect of binning (if any) is always to make the value of PROB; slightly too big. That is, setting an acceptance criterion of (PROB>0.05; will a",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:192904,Integrability,rout,routine,192904,"t the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6160 of file TH1.cxx. ◆ Multiply() [3/3]. Bool_t TH1::Multiply ; (; TF1 * ; f1, . Double_t ; c1 = 1 . ). virtual . Performs the operation: ; this = this*c1*f1; If errors are defined (see TH1::Sumw2), errors are also recalculated.; Only bins inside the function range are recomputed. IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TH2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 6049 of file TH1.cxx. ◆ operator=(). TH1 & TH1::operator= ; (; const TH1 & ; ). privatedelete . ◆ Paint(). void TH1::Paint ; (; Option_t * ; option = """"). overridevirtual . Control routine to paint any kind of histograms. ; This function is automatically called by TCanvas::Update. (see TH1::Draw for the list of options) ; Reimplemented from TObject.; Definition at line 6206 of file TH1.cxx. ◆ Print(). void TH1::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print some global quantities for this histogram. ; Parameters. [in]option; ""base"" is given, number of bins and ranges are also printed; ""range"" is given, bin contents and errors are also printed for all bins in the current range (default 1-->nbins); ""all"" is given, bin contents and errors are also printed for all bins including under and overflows. . Reimplemented from TObject.; Definition at line 7009 of file TH1.cxx. ◆ PutStats(). void TH1::PutStats ; (; Double_t * ; stats). virtual . Replace current statistics with the values in array stats. ; Reimplemented in TH2, TH3, TProfile, TProfile2D, and TProfile3D.; Definition at line 7884 of file TH1.cxx. ◆ Rebin(). TH1 * TH1::Rebin ; (; Int_t ; ngroup = 2, . cons",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:196001,Integrability,message,message,196001,"imit of the rebinned histogram is reduced to the upper edge of the last bin that can make a complete group. The remaining bins are added to the overflow bin. Statistics will be recomputed from the new bin contents.; case 2 xbins!=0; A new histogram is created (you should specify newname). The parameter ngroup is the number of variable size bins in the created histogram. The array xbins must contain ngroup+1 elements that represent the low-edges of the bins. If the original histogram has errors stored (via Sumw2), the resulting histograms has new errors correctly calculated.; NOTE: The bin edges specified in xbins should correspond to bin edges in the original histogram. If a bin edge in the new histogram is in the middle of a bin in the original histogram, all entries in the split bin in the original histogram will be transfered to the lower of the two possible bins in the new histogram. This is probably not what you want. A warning message is emitted in this case; examples: if h1 is an existing TH1F histogram with 100 bins; Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew. Reimplemented in TH2, and TProfile.; Definition at line 6275 of file TH1.cxx. ◆ RebinAxis(). virtual void TH1::RebinAxis ; (; Double_t ; x, . TAxis * ; axis . ). inlinevirtual . Definition at line 437 of file TH1.h. ◆ RebinX(). virtual TH1 * TH1::RebinX ; (; Int_t ; ngroup = 2, . const char * ; newname = """" . ). inlinevirtual . Reimplemented in TH2, TH3, and TProfile2D.; Definition at line 354 of file TH1.h. ◆ Rebuild(). void TH1::Rebuild ; (; Option_t * ; option = """"). virtual . Using the current bin info, recompute the arrays for contents and errors. ; Definition at line 7087 of file TH1.cxx. ◆ RecomputeAxisLimits(). Bool_t TH1::RecomputeAxisLimits ; (; TAxis & ; destAxis, . const TAxis & ; anAxis . ). staticprotected . Finds new limits for the axis for the Merge function. ; retur",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:221104,Integrability,rout,routine,221104,"ace to TSpectrum::Search. ; The function finds peaks in this histogram where the width is > sigma and the peak maximum greater than threshold*maximum bin content of this. For more details see TSpectrum::Search. Note the difference in the default value for option compared to TSpectrum::Search option="""" by default (instead of ""goff""). ; Reimplemented in TH2.; Definition at line 9301 of file TH1.cxx. ◆ Smooth(). void TH1::Smooth ; (; Int_t ; ntimes = 1, . Option_t * ; option = """" . ). virtual . Smooth bin contents of this histogram. ; if option contains ""R"" smoothing is applied only to the bins defined in the X axis range (default is to smooth all bins) Bin contents are replaced by their smooth values. Errors (if any) are not modified. the smoothing procedure is repeated ntimes (default=1) ; Reimplemented in TH2.; Definition at line 6879 of file TH1.cxx. ◆ SmoothArray(). void TH1::SmoothArray ; (; Int_t ; nn, . Double_t * ; xx, . Int_t ; ntimes = 1 . ). static . Smooth array xx, translation of Hbook routine hsmoof.F. ; Based on algorithm 353QH twice presented by J. Friedman in Proc. of the 1974 CERN School of Computing, Norway, 11-24 August, 1974. See also Section 4.2 in J. Friedman, Data Analysis Techniques for High Energy Physics. ; Definition at line 6768 of file TH1.cxx. ◆ StatOverflows(). void TH1::StatOverflows ; (; Bool_t ; flag = kTRUE). static . if flag=kTRUE, underflows and overflows are used by the Fill functions in the computation of statistics (mean value, StdDev). ; By default, underflows or overflows are not used. ; Definition at line 6925 of file TH1.cxx. ◆ Streamer(). void TH1::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH1K, TH2, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH2Poly, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, TProfile2Poly, and TProfile3D.; Definition at line 6933 of file TH1.cxx. ◆ StreamerNVirtual(). void TH1::St",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:677,Modifiability,variab,variable,677,". ROOT: TH1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TH1 Class ReferenceHistogram Library » Histogram classes. ; TH1 is the base class of all histogram classes in ROOT. ; It provides the common interface for operations such as binning, filling, drawing, which will be detailed below. Creating histograms; Labelling axes. Binning; Fix or variable bin size; Convention for numbering bins; Alphanumeric Bin Labels; Histograms with automatic bins; Rebinning. Filling histograms; Associated errors; Associated functions; Projections of histograms; Random Numbers and histograms; Making a copy of a histogram; Normalizing histograms. Drawing histograms; Setting Drawing histogram contour levels (2-D hists only); Setting histogram graphics attributes; Customising how axes are drawn. Fitting histograms; Saving/reading histograms to/from a ROOT file; Operations on histograms; Miscellaneous operations. ROOT supports the following histogram types:. 1-D histograms:; TH1C : histograms with one byte per channel. Maximum bin content = 127; TH1S : histograms with one short per channel. Maximum bin content = 32767; TH1I : histograms with one int per channel. Maximum bin content = INT_MAX (*); TH1L : histograms with one long64 per channel. Maximum bin content = LLONG_MAX (**); TH1F : histograms with one float per channel. Maximum precision 7 digits, maximum integer bin content = +/-16777216 (***); TH1D : histograms with one double per channel. Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (****). 2-D histograms:; TH2C : histograms with one byte per channel. Maximum bin content = 127; TH2S : histograms with one short per channel",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:3650,Modifiability,variab,variable,3650," with one int per channel. Maximum bin content = INT_MAX (*); TH3L : histograms with one long64 per channel. Maximum bin content = LLONG_MAX (**); TH3F : histograms with one float per channel. Maximum precision 7 digits, maximum integer bin content = +/-16777216 (***); TH3D : histograms with one double per channel. Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (****). Profile histograms: See classes TProfile, TProfile2D and TProfile3D. Profile histograms are used to display the mean value of Y and its standard deviation for each bin in X. Profile histograms are in many cases an elegant replacement of two-dimensional histograms : the inter-relation of two measured quantities X and Y can always be visualized by a two-dimensional histogram or scatter-plot; If Y is an unknown (but single-valued) approximate function of X, this function is displayed by a profile histogram with much better precision than by a scatter-plot. (*) INT_MAX = 2147483647 is the maximum value for a variable of type int.; (**) LLONG_MAX = 9223372036854775807 is the maximum value for a variable of type long64.; (***) 2^24 = 16777216 is the maximum integer that can be properly represented by a float32 with 23-bit mantissa.; (****) 2^53 = 9007199254740992 is the maximum integer that can be properly represented by a double64 with 52-bit mantissa. ; The inheritance hierarchy looks as follows:. Creating histograms; Histograms are created by invoking one of the constructors, e.g. TH1F *h1 = new TH1F(""h1"", ""h1 title"", 100, 0, 4.4);; TH2F *h2 = new TH2F(""h2"", ""h2 title"", 40, 0, 4, 30, -3, 3);; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; h1TH1F * h1Definition legend1.C:5; Histograms may also be created by:. calling the Clone() function, see below; making a projection from a 2-D or 3-D histogram, see below; reading a histogram from a file. When a",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:3737,Modifiability,variab,variable,3737,"th one long64 per channel. Maximum bin content = LLONG_MAX (**); TH3F : histograms with one float per channel. Maximum precision 7 digits, maximum integer bin content = +/-16777216 (***); TH3D : histograms with one double per channel. Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (****). Profile histograms: See classes TProfile, TProfile2D and TProfile3D. Profile histograms are used to display the mean value of Y and its standard deviation for each bin in X. Profile histograms are in many cases an elegant replacement of two-dimensional histograms : the inter-relation of two measured quantities X and Y can always be visualized by a two-dimensional histogram or scatter-plot; If Y is an unknown (but single-valued) approximate function of X, this function is displayed by a profile histogram with much better precision than by a scatter-plot. (*) INT_MAX = 2147483647 is the maximum value for a variable of type int.; (**) LLONG_MAX = 9223372036854775807 is the maximum value for a variable of type long64.; (***) 2^24 = 16777216 is the maximum integer that can be properly represented by a float32 with 23-bit mantissa.; (****) 2^53 = 9007199254740992 is the maximum integer that can be properly represented by a double64 with 52-bit mantissa. ; The inheritance hierarchy looks as follows:. Creating histograms; Histograms are created by invoking one of the constructors, e.g. TH1F *h1 = new TH1F(""h1"", ""h1 title"", 100, 0, 4.4);; TH2F *h2 = new TH2F(""h2"", ""h2 title"", 40, 0, 4, 30, -3, 3);; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; h1TH1F * h1Definition legend1.C:5; Histograms may also be created by:. calling the Clone() function, see below; making a projection from a 2-D or 3-D histogram, see below; reading a histogram from a file. When a histogram is created, a reference to it is automatically added to the list of in-",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:4006,Modifiability,inherit,inheritance,4006,"4740992 (****). Profile histograms: See classes TProfile, TProfile2D and TProfile3D. Profile histograms are used to display the mean value of Y and its standard deviation for each bin in X. Profile histograms are in many cases an elegant replacement of two-dimensional histograms : the inter-relation of two measured quantities X and Y can always be visualized by a two-dimensional histogram or scatter-plot; If Y is an unknown (but single-valued) approximate function of X, this function is displayed by a profile histogram with much better precision than by a scatter-plot. (*) INT_MAX = 2147483647 is the maximum value for a variable of type int.; (**) LLONG_MAX = 9223372036854775807 is the maximum value for a variable of type long64.; (***) 2^24 = 16777216 is the maximum integer that can be properly represented by a float32 with 23-bit mantissa.; (****) 2^53 = 9007199254740992 is the maximum integer that can be properly represented by a double64 with 52-bit mantissa. ; The inheritance hierarchy looks as follows:. Creating histograms; Histograms are created by invoking one of the constructors, e.g. TH1F *h1 = new TH1F(""h1"", ""h1 title"", 100, 0, 4.4);; TH2F *h2 = new TH2F(""h2"", ""h2 title"", 40, 0, 4, 30, -3, 3);; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; h1TH1F * h1Definition legend1.C:5; Histograms may also be created by:. calling the Clone() function, see below; making a projection from a 2-D or 3-D histogram, see below; reading a histogram from a file. When a histogram is created, a reference to it is automatically added to the list of in-memory objects for the current file or directory. Then the pointer to this histogram in the current directory can be found by its name, doing: TH1F *h1 = (TH1F*)gDirectory->FindObject(name);; gDirectory#define gDirectoryDefinition TDirectory.h:384; namechar name[80]Definition TGX11.cxx:110; TH1::FindObject",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:6505,Modifiability,variab,variable,6505,"ms in memory.Definition TH1.cxx:1294; When the histogram is deleted, the reference to it is removed from the list of objects in memory. When a file is closed, all histograms in memory associated with this file are automatically deleted. Labelling axes; Axis titles can be specified in the title argument of the constructor. They must be separated by "";"": TH1F* h=new TH1F(""h"", ""Histogram title;X Axis;Y Axis"", 100, 0, 1);; The histogram title and the axis titles can be any TLatex string, and are persisted if a histogram is written to a file.; Any title can be omitted: TH1F* h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; The method SetTitle() has the same syntax: h->SetTitle(""Histogram title;Another X title Axis"");; Alternatively, the title of each axis can be set directly: h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; For bin labels see binning. Binning. Fix or variable bin size; All histogram types support either fix or variable bin sizes. 2-D histograms may have fix size bins along X and variable size bins along Y or vice-versa. The functions to fill, manipulate, draw or access histograms are identical in both cases.; Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis. To access the axis parameters, use: TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; See class TAxis for a description of all the access functions. The axis range is always stored internally in double precision. Convention for numbering bins; For all histogram types: nbins, xlow, xup bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; In case of 2-D or 3-D histograms, a",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:6566,Modifiability,variab,variable,6566,"ms in memory.Definition TH1.cxx:1294; When the histogram is deleted, the reference to it is removed from the list of objects in memory. When a file is closed, all histograms in memory associated with this file are automatically deleted. Labelling axes; Axis titles can be specified in the title argument of the constructor. They must be separated by "";"": TH1F* h=new TH1F(""h"", ""Histogram title;X Axis;Y Axis"", 100, 0, 1);; The histogram title and the axis titles can be any TLatex string, and are persisted if a histogram is written to a file.; Any title can be omitted: TH1F* h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; The method SetTitle() has the same syntax: h->SetTitle(""Histogram title;Another X title Axis"");; Alternatively, the title of each axis can be set directly: h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; For bin labels see binning. Binning. Fix or variable bin size; All histogram types support either fix or variable bin sizes. 2-D histograms may have fix size bins along X and variable size bins along Y or vice-versa. The functions to fill, manipulate, draw or access histograms are identical in both cases.; Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis. To access the axis parameters, use: TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; See class TAxis for a description of all the access functions. The axis range is always stored internally in double precision. Convention for numbering bins; For all histogram types: nbins, xlow, xup bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; In case of 2-D or 3-D histograms, a",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:6636,Modifiability,variab,variable,6636,"s removed from the list of objects in memory. When a file is closed, all histograms in memory associated with this file are automatically deleted. Labelling axes; Axis titles can be specified in the title argument of the constructor. They must be separated by "";"": TH1F* h=new TH1F(""h"", ""Histogram title;X Axis;Y Axis"", 100, 0, 1);; The histogram title and the axis titles can be any TLatex string, and are persisted if a histogram is written to a file.; Any title can be omitted: TH1F* h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; The method SetTitle() has the same syntax: h->SetTitle(""Histogram title;Another X title Axis"");; Alternatively, the title of each axis can be set directly: h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; For bin labels see binning. Binning. Fix or variable bin size; All histogram types support either fix or variable bin sizes. 2-D histograms may have fix size bins along X and variable size bins along Y or vice-versa. The functions to fill, manipulate, draw or access histograms are identical in both cases.; Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis. To access the axis parameters, use: TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; See class TAxis for a description of all the access functions. The axis range is always stored internally in double precision. Convention for numbering bins; For all histogram types: nbins, xlow, xup bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; In case of 2-D or 3-D histograms, a ""global bin"" number is defined. For example, assuming a 3-D histogram with (binx, biny, b",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:12286,Modifiability,extend,extend,12286," bin with abscissa X by 1.Definition TH1.cxx:3344; or via one of the Fill functions accepting names described above. The Fill functions compute the bin number corresponding to the given x, y or z argument and increment this bin by the given weight. The Fill functions return the bin number for 1-D histograms or global bin number for 2-D and 3-D histograms. If TH1::Sumw2 has been called before filling, the sum of squares of weights is also stored. One can also increment directly a bin number via TH1::AddBinContent or replace the existing content via TH1::SetBinContent. Passing an out-of-range bin to TH1::AddBinContent leads to undefined behavior. To access the bin content of a given bin, do: Double_t binContent = h->GetBinContent(bin);; By default, the bin number is computed using the current axis ranges. If the automatic binning option has been set via h->SetCanExtend(TH1::kAllAxes);; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; then, the Fill Function will automatically extend the axis range to accomodate the new value specified in the Fill argument. The method used is to double the bin size until the new value fits in the range, merging bins two by two. This automatic binning options is extensively used by the TTree::Draw function when histogramming Tree variables with an unknown range. This automatic binning option is supported for 1-D, 2-D and 3-D histograms.; During filling, some statistics parameters are incremented to compute the mean value and Root Mean Square with the maximum precision.; In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S a check is made that the bin contents do not exceed the maximum positive capacity (127 or 32767). Histograms of all types may have positive or/and negative bin contents. Associated errors; By default, for each bin, the sum of weights is computed at fill time. One can also call TH1::Sumw2 to force the storage and computation of the sum of the square of weights per bin. If Sumw2 has been called, the error per bin ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:12577,Modifiability,variab,variables,12577,"n weight. The Fill functions return the bin number for 1-D histograms or global bin number for 2-D and 3-D histograms. If TH1::Sumw2 has been called before filling, the sum of squares of weights is also stored. One can also increment directly a bin number via TH1::AddBinContent or replace the existing content via TH1::SetBinContent. Passing an out-of-range bin to TH1::AddBinContent leads to undefined behavior. To access the bin content of a given bin, do: Double_t binContent = h->GetBinContent(bin);; By default, the bin number is computed using the current axis ranges. If the automatic binning option has been set via h->SetCanExtend(TH1::kAllAxes);; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; then, the Fill Function will automatically extend the axis range to accomodate the new value specified in the Fill argument. The method used is to double the bin size until the new value fits in the range, merging bins two by two. This automatic binning options is extensively used by the TTree::Draw function when histogramming Tree variables with an unknown range. This automatic binning option is supported for 1-D, 2-D and 3-D histograms.; During filling, some statistics parameters are incremented to compute the mean value and Root Mean Square with the maximum precision.; In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S a check is made that the bin contents do not exceed the maximum positive capacity (127 or 32767). Histograms of all types may have positive or/and negative bin contents. Associated errors; By default, for each bin, the sum of weights is computed at fill time. One can also call TH1::Sumw2 to force the storage and computation of the sum of the square of weights per bin. If Sumw2 has been called, the error per bin is computed as the sqrt(sum of squares of weights), otherwise the error is set equal to the sqrt(bin content). To return the error for a given bin number, do: Double_t error = h->GetBinError(bin);. Associated functions; One or more object ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:18314,Modifiability,inherit,inherit,18314,"lly removed from the pad or pads where it was drawn. If a histogram is drawn in a pad, then filled again, the new status of the histogram will be automatically shown in the pad next time the pad is updated. One does not need to redraw the histogram. To draw the current version of a histogram in a pad, one can use h->DrawCopy();; This makes a clone (see Clone below) of the histogram. Once the clone is drawn, the original histogram may be modified or deleted without affecting the aspect of the clone.; One can use TH1::SetMaximum() and TH1::SetMinimum() to force a particular value for the maximum or the minimum scale on the plot. (For 1-D histograms this means the y-axis, while for 2-D histograms these functions affect the z-axis).; TH1::UseCurrentStyle() can be used to change all histogram graphics attributes to correspond to the current selected style. This function must be called for each histogram. In case one reads and draws many histograms from a file, one can force the histograms to inherit automatically the current graphics style by calling before gROOT->ForceStyle(). Setting Drawing histogram contour levels (2-D hists only); By default contours are automatically generated at equidistant intervals. A default value of 20 levels is used. This can be modified via TH1::SetContour() or TH1::SetContourLevel(). the contours level info is used by the drawing options ""cont"", ""surf"", and ""lego"". Setting histogram graphics attributes; The histogram classes inherit from the attribute classes: TAttLine, TAttFill, and TAttMarker. See the member functions of these classes for the list of options. Customizing how axes are drawn; Use the functions of TAxis, such as histogram.GetXaxis()->SetTicks(""+"");; histogram.GetYaxis()->SetRangeUser(1., 5.);. Fitting histograms; Histograms (1-D, 2-D, 3-D and Profiles) can be fitted with a user specified function or a pre-defined function via TH1::Fit. See TH1::Fit(TF1*, Option_t *, Option_t *, Double_t, Double_t) for the fitting documentatio",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:18787,Modifiability,inherit,inherit,18787,"the aspect of the clone.; One can use TH1::SetMaximum() and TH1::SetMinimum() to force a particular value for the maximum or the minimum scale on the plot. (For 1-D histograms this means the y-axis, while for 2-D histograms these functions affect the z-axis).; TH1::UseCurrentStyle() can be used to change all histogram graphics attributes to correspond to the current selected style. This function must be called for each histogram. In case one reads and draws many histograms from a file, one can force the histograms to inherit automatically the current graphics style by calling before gROOT->ForceStyle(). Setting Drawing histogram contour levels (2-D hists only); By default contours are automatically generated at equidistant intervals. A default value of 20 levels is used. This can be modified via TH1::SetContour() or TH1::SetContourLevel(). the contours level info is used by the drawing options ""cont"", ""surf"", and ""lego"". Setting histogram graphics attributes; The histogram classes inherit from the attribute classes: TAttLine, TAttFill, and TAttMarker. See the member functions of these classes for the list of options. Customizing how axes are drawn; Use the functions of TAxis, such as histogram.GetXaxis()->SetTicks(""+"");; histogram.GetYaxis()->SetRangeUser(1., 5.);. Fitting histograms; Histograms (1-D, 2-D, 3-D and Profiles) can be fitted with a user specified function or a pre-defined function via TH1::Fit. See TH1::Fit(TF1*, Option_t *, Option_t *, Double_t, Double_t) for the fitting documentation and the possible fitting options; The FitPanel can also be used for fitting an histogram. See the FitPanel documentation. Saving/reading histograms to/from a ROOT file; The following statements create a ROOT file and store a histogram on the file. Because TH1 derives from TNamed, the key identifier on the file is the histogram name: TFile f(""histos.root"", ""new"");; TH1F h1(""hgaus"", ""histo from a gaussian"", 100, -3, 3);; h1.FillRandom(""gaus"", 10000);; h1->Write();; f#define ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:22987,Modifiability,extend,extended,22987,"rovTest(const TH1 *h2, Option_t *option="""") constStatistical test of compatibility in shape between this histogram and h2, using Kolmogorov test.Definition TH1.cxx:8178; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; IMPORTANT NOTE: The returned values for GetMean and GetStdDev depend on how the histogram statistics are calculated. By default, if no range has been set, the returned values are the (unbinned) ones calculated at fill time. If a range has been set, however, the values are calculated using the bins in range; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned values are always those of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats. ; Definition at line 59 of file TH1.h. Public Types; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type of statistics for bin errors. More...;  ; enum  EStatOverflows { kIgnore = 0; , kConsider = 1; , kNeutral = 2; };  Enumeration specifying the way to treat statoverflow. More...;  ; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kUserContour = (1ULL << ( 10 )); , kLogX = (1ULL << ( 15 )); , kIsZoomed = (1ULL << ( 16 )); , ;   kNoTitle = (1ULL << ( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:23762,Modifiability,inherit,inherited,23762,"0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type of statistics for bin errors. More...;  ; enum  EStatOverflows { kIgnore = 0; , kConsider = 1; , kNeutral = 2; };  Enumeration specifying the way to treat statoverflow. More...;  ; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kUserContour = (1ULL << ( 10 )); , kLogX = (1ULL << ( 15 )); , kIsZoomed = (1ULL << ( 16 )); , ;   kNoTitle = (1ULL << ( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:25739,Modifiability,extend,extendable,25739,"+ c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual void AddBinContent (Int_t bin);  Increment bin content by 1. ;  ; virtual void AddBinContent (Int_t bin, Double_t w);  Increment bin content by a weight w. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:36904,Modifiability,variab,variable,36904,"l Int_t GetMinimumBin () const;  Return location of bin with minimum value in the range. ;  ; virtual Int_t GetMinimumBin (Int_t &locmix, Int_t &locmiy, Int_t &locmiz) const;  Return location of bin with minimum value in the range. ;  ; virtual Double_t GetMinimumStored () const;  ; virtual Int_t GetNbinsX () const;  ; virtual Int_t GetNbinsY () const;  ; virtual Int_t GetNbinsZ () const;  ; virtual Int_t GetNcells () const;  ; virtual Int_t GetNdivisions (Option_t *axis=""X"") const;  Return the number of divisions for ""axis"". ;  ; virtual Double_t GetNormFactor () const;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; Option_t * GetOption () const override;  ; TVirtualHistPainter * GetPainter (Option_t *option="""");  Return pointer to painter. ;  ; virtual Int_t GetQuantiles (Int_t n, Double_t *xp, const Double_t *p=nullptr);  Compute Quantiles for this histogram Quantile x_p := Q(p) is defined as the value x_p such that the cumulative probability distribution Function F of variable X yields: ;  ; virtual Double_t GetRandom (TRandom *rng=nullptr) const;  Return a random number distributed according the histogram bin contents. ;  ; Double_t GetRMS (Int_t axis=1) const;  This function returns the Standard Deviation (Sigma) of the distribution not the Root Mean Square (RMS). ;  ; Double_t GetRMSError (Int_t axis=1) const;  ; virtual Double_t GetSkewness (Int_t axis=1) const;  ; EStatOverflows GetStatOverflows () const;  Get the behaviour adopted by the object about the statoverflows. See EStatOverflows for more information. ;  ; virtual void GetStats (Double_t *stats) const;  fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ;  ; virtual Double_t GetStdDev (Int_t axis=1) const;  Returns the Standard Deviation (Sigma). ;  ; virtual Double_t GetStdDevError (Int_t axis=1) const;  Return error of standard deviation estimation for Normal distribut",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:43732,Modifiability,variab,variable,43732,"_t bin, Double_t content);  Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBinsLength (Int_t=-1);  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries t",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:43885,Modifiability,variab,variable,43885,"medisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBinsLength (Int_t=-1);  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:44074,Modifiability,variab,variable,44074,"ouble_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBinsLength (Int_t=-1);  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellErr",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:44733,Modifiability,extend,extendBitMask,44733,"t Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBinsLength (Int_t=-1);  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:44774,Modifiability,extend,extendable,44774,"t Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBinsLength (Int_t=-1);  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:44791,Modifiability,extend,extendable,44791,"t Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBinsLength (Int_t=-1);  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:44884,Modifiability,extend,extendable,44884,"t Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBinsLength (Int_t=-1);  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:48532,Modifiability,inherit,inherited,48532," SetTitleSize (Float_t size=0.02, Option_t *axis=""X"");  Set the axis' title size. ;  ; virtual void SetXTitle (const char *title);  ; virtual void SetYTitle (const char *title);  ; virtual void SetZTitle (const char *title);  ; virtual TH1 * ShowBackground (Int_t niter=20, Option_t *option=""same"");  This function calculates the background spectrum in this histogram. ;  ; virtual Int_t ShowPeaks (Double_t sigma=2, Option_t *option="""", Double_t threshold=0.05);  Interface to TSpectrum::Search. ;  ; virtual void Smooth (Int_t ntimes=1, Option_t *option="""");  Smooth bin contents of this histogram. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Sumw2 (Bool_t flag=kTRUE);  Create structure to store sum of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:49997,Modifiability,inherit,inherited,49997,". ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:50790,Modifiability,inherit,inheritance,50790,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:52295,Modifiability,inherit,inherits,52295,"e method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:52412,Modifiability,inherit,inherits,52412," *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:55311,Modifiability,inherit,inherited,55311,"directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:56816,Modifiability,inherit,inherited,56816,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:58071,Modifiability,inherit,inherited,58071,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:61364,Modifiability,inherit,inherited,61364,"tivate the storage of the sum of squares of errors, ie TH1::Sumw2 is automatically called. ;  ; static void SmoothArray (Int_t NN, Double_t *XX, Int_t ntimes=1);  Smooth array xx, translation of Hbook routine hsmoof.F. ;  ; static void StatOverflows (Bool_t flag=kTRUE);  if flag=kTRUE, underflows and overflows are used by the Fill functions in the computation of statistics (mean value, StdDev). ;  ; static TH1 * TransformHisto (TVirtualFFT *fft, TH1 *h_output, Option_t *option);  For a given transform (first parameter), fills the histogram (second parameter) with the transform output data, specified in the third parameter If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created and the user is responsible for deleting it. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:61574,Modifiability,inherit,inherited,61574,"tivate the storage of the sum of squares of errors, ie TH1::Sumw2 is automatically called. ;  ; static void SmoothArray (Int_t NN, Double_t *XX, Int_t ntimes=1);  Smooth array xx, translation of Hbook routine hsmoof.F. ;  ; static void StatOverflows (Bool_t flag=kTRUE);  if flag=kTRUE, underflows and overflows are used by the Fill functions in the computation of statistics (mean value, StdDev). ;  ; static TH1 * TransformHisto (TVirtualFFT *fft, TH1 *h_output, Option_t *option);  For a given transform (first parameter), fills the histogram (second parameter) with the transform output data, specified in the third parameter If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created and the user is responsible for deleting it. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:62092,Modifiability,inherit,inherited,62092,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for f",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:62304,Modifiability,inherit,inherited,62304,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for f",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:62516,Modifiability,inherit,inherited,62516,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for f",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:63191,Modifiability,variab,variable,63191,"_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:63359,Modifiability,variab,variable,63359,"ass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values wor",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:65663,Modifiability,inherit,inherited,65663," axis is full alphanumeric, i.e. ;  ; virtual Double_t GetBinErrorSqUnchecked (Int_t bin) const;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual Double_t RetrieveBinContent (Int_t bin) const;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ; virtual void UpdateBinContent (Int_t bin, Double_t content);  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:68607,Modifiability,inherit,inherited,68607,"tions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in statistics. ;  ; TArrayD fSumw2;  Array of sum of squares of weights. ;  ; Double_t fTsumw;  Total Sum of weights. ;  ; Double_t fTsumw2;  Total Sum of squares of weights. ;  ; Double_t fTsumwx;  Total Sum of weight*X. ;  ; Double_t fTsumwx2;  Total Sum of weight*X*X. ;  ; TAxis fXaxis;  X axis descriptor. ;  ; TAxis fYaxis;  Y axis descriptor. ;  ; TAxis fZaxis;  Z axis descriptor. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Static Protected Attributes; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . Private Member Functions;  TH1 (const TH1 &)=delete;  ; void Build ();  Creates histogram basic data structure. ;  ; TH1 & ope",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:68689,Modifiability,inherit,inherited,68689,"tions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in statistics. ;  ; TArrayD fSumw2;  Array of sum of squares of weights. ;  ; Double_t fTsumw;  Total Sum of weights. ;  ; Double_t fTsumw2;  Total Sum of squares of weights. ;  ; Double_t fTsumwx;  Total Sum of weight*X. ;  ; Double_t fTsumwx2;  Total Sum of weight*X*X. ;  ; TAxis fXaxis;  X axis descriptor. ;  ; TAxis fYaxis;  Y axis descriptor. ;  ; TAxis fZaxis;  Z axis descriptor. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Static Protected Attributes; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . Private Member Functions;  TH1 (const TH1 &)=delete;  ; void Build ();  Creates histogram basic data structure. ;  ; TH1 & ope",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:68850,Modifiability,inherit,inherited,68850," value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in statistics. ;  ; TArrayD fSumw2;  Array of sum of squares of weights. ;  ; Double_t fTsumw;  Total Sum of weights. ;  ; Double_t fTsumw2;  Total Sum of squares of weights. ;  ; Double_t fTsumwx;  Total Sum of weight*X. ;  ; Double_t fTsumwx2;  Total Sum of weight*X*X. ;  ; TAxis fXaxis;  X axis descriptor. ;  ; TAxis fYaxis;  Y axis descriptor. ;  ; TAxis fZaxis;  Z axis descriptor. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Static Protected Attributes; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . Private Member Functions;  TH1 (const TH1 &)=delete;  ; void Build ();  Creates histogram basic data structure. ;  ; TH1 & operator= (const TH1 &)=delete;  . Friends; class TH1Merger;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TH1.h>. Inherit",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:68983,Modifiability,inherit,inherited,68983,"or. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in statistics. ;  ; TArrayD fSumw2;  Array of sum of squares of weights. ;  ; Double_t fTsumw;  Total Sum of weights. ;  ; Double_t fTsumw2;  Total Sum of squares of weights. ;  ; Double_t fTsumwx;  Total Sum of weight*X. ;  ; Double_t fTsumwx2;  Total Sum of weight*X*X. ;  ; TAxis fXaxis;  X axis descriptor. ;  ; TAxis fYaxis;  Y axis descriptor. ;  ; TAxis fZaxis;  Z axis descriptor. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Static Protected Attributes; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . Private Member Functions;  TH1 (const TH1 &)=delete;  ; void Build ();  Creates histogram basic data structure. ;  ; TH1 & operator= (const TH1 &)=delete;  . Friends; class TH1Merger;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TH1.h>. Inheritance diagram for TH1:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumerat",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:69771,Modifiability,inherit,inherited,69771,"e. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Static Protected Attributes; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . Private Member Functions;  TH1 (const TH1 &)=delete;  ; void Build ();  Creates histogram basic data structure. ;  ; TH1 & operator= (const TH1 &)=delete;  . Friends; class TH1Merger;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TH1.h>. Inheritance diagram for TH1:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. Enumeration specifying which axes can be extended. . EnumeratorkNoAxis NOTE: Must always be 0 !!! . kXaxis ; kYaxis ; kZaxis ; kAllAxes . Definition at line 71 of file TH1.h. ◆ anonymous enum. anonymous enum. Size of statistics data (size of array used in GetStats()/ PutStats ) . s[0] = sumw s[1] = sumw2; s[2] = sumwx s[3] = sumwx2; s[4] = sumwy s[5] = sumwy2 s[6] = sumwxy; s[7] = sumwz s[8] = sumwz2 s[9] = sumwxz s[10] = sumwyz; s[11] = sumwt s[12] = sumwt2 (11 and 12 used only by TProfile3D) . EnumeratorkNstat Size of statistics data (up to TProfile3D) . Definition at line 183 of file TH1.h. ◆ EBinErrorOpt. enum TH1::EBinErrorOpt. Enumeration specifying type of statistics for bin errors. . EnumeratorkNormal Errors wi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:70095,Modifiability,extend,extended,70095,"r size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Static Protected Attributes; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . Private Member Functions;  TH1 (const TH1 &)=delete;  ; void Build ();  Creates histogram basic data structure. ;  ; TH1 & operator= (const TH1 &)=delete;  . Friends; class TH1Merger;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TH1.h>. Inheritance diagram for TH1:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. Enumeration specifying which axes can be extended. . EnumeratorkNoAxis NOTE: Must always be 0 !!! . kXaxis ; kYaxis ; kZaxis ; kAllAxes . Definition at line 71 of file TH1.h. ◆ anonymous enum. anonymous enum. Size of statistics data (size of array used in GetStats()/ PutStats ) . s[0] = sumw s[1] = sumw2; s[2] = sumwx s[3] = sumwx2; s[4] = sumwy s[5] = sumwy2 s[6] = sumwxy; s[7] = sumwz s[8] = sumwz2 s[9] = sumwxz s[10] = sumwyz; s[11] = sumwt s[12] = sumwt2 (11 and 12 used only by TProfile3D) . EnumeratorkNstat Size of statistics data (up to TProfile3D) . Definition at line 183 of file TH1.h. ◆ EBinErrorOpt. enum TH1::EBinErrorOpt. Enumeration specifying type of statistics for bin errors. . EnumeratorkNormal Errors with Normal (Wald) approximation: errorUp=errorLow= sqrt(N) . kPoisson Errors from Poisson interval at 68.3% (1 sigma) . kPoisson2 Errors from Poisson interval at 95% CL (~ 2 sigma) . Definition at line 64 of file TH1.h. ◆ EStatOverflows. enum TH1::EStatOverflows. Enumeration specifying the way to ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:72869,Modifiability,variab,variable,72869,"tructor Documentation. ◆ TH1() [1/5]. TH1::TH1 ; (; const TH1 & ; ). privatedelete . ◆ TH1() [2/5]. TH1::TH1 ; (; ). protected . Histogram default constructor. ; Definition at line 615 of file TH1.cxx. ◆ TH1() [3/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . Double_t ; xlow, . Double_t ; xup . ). protected . Constructor for fix bin size histograms. ; Creates the main histogram structure.; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz, the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xlowlow edge of first bin ; [in]xupupper edge of last bin (not included in last bin) . Definition at line 697 of file TH1.cxx. ◆ TH1() [4/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . const Float_t * ; xbins . ). protected . Constructor for variable bin size histograms using an input array of type float. ; Creates the main histogram structure.; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type float and size nbins+1 . Definition at line 719 of file TH1.cxx. ◆ TH1() [5/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . const Double_t * ; xbins . ). protected . Constructor for variable bin size histograms using an input array of type double. ; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xbinsarray of low-edges for e",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:73525,Modifiability,variab,variable,73525,"ingy, etc. ; [in]nbinsnumber of bins ; [in]xlowlow edge of first bin ; [in]xupupper edge of last bin (not included in last bin) . Definition at line 697 of file TH1.cxx. ◆ TH1() [4/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . const Float_t * ; xbins . ). protected . Constructor for variable bin size histograms using an input array of type float. ; Creates the main histogram structure.; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type float and size nbins+1 . Definition at line 719 of file TH1.cxx. ◆ TH1() [5/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . const Double_t * ; xbins . ). protected . Constructor for variable bin size histograms using an input array of type double. ; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type double and size nbins+1 . Definition at line 741 of file TH1.cxx. ◆ ~TH1(). TH1::~TH1 ; (; ). override . Histogram default destructor. ; Definition at line 643 of file TH1.cxx. Member Function Documentation. ◆ Add() [1/3]. Bool_t TH1::Add ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1 . ). virtual . Replace contents of this histogram by the addition of h1 and h2. ; this = c1*h1 + c2*h2 if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; Note also that adding histog",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:84113,Modifiability,extend,extendable,84113,"am is reset and ALWAYS refilled independently if the histogram was filled before. This is needed when drawing the histogram; action = 1 histogram is filled and buffer is deleted The buffer is automatically deleted when filling the histogram and the entries is larger than the buffer size . Reimplemented in TH2, TH3, TProfile, TProfile2D, and TProfile3D.; Definition at line 1414 of file TH1.cxx. ◆ BufferFill(). Int_t TH1::BufferFill ; (; Double_t ; x, . Double_t ; w . ). protectedvirtual . accumulate arguments in buffer. ; When buffer is full, empty the buffer. fBuffer[0] = number of entries in buffer; fBuffer[1] = w of first entry; fBuffer[2] = x of first entry . Reimplemented in TH2, TH3, TProfile, TProfile2D, and TProfile3D.; Definition at line 1506 of file TH1.cxx. ◆ Build(). void TH1::Build ; (; ). private . Creates histogram basic data structure. ; Definition at line 771 of file TH1.cxx. ◆ CanExtendAllAxes(). Bool_t TH1::CanExtendAllAxes ; (; ); const. virtual . Returns true if all axes are extendable. ; Definition at line 6636 of file TH1.cxx. ◆ CheckAxisLimits(). bool TH1::CheckAxisLimits ; (; const TAxis * ; a1, . const TAxis * ; a2 . ). staticprotected . Check that the axis limits of the histograms are the same. ; If a first and last bin is passed the axis is compared between the given range ; Definition at line 1597 of file TH1.cxx. ◆ CheckBinLabels(). bool TH1::CheckBinLabels ; (; const TAxis * ; a1, . const TAxis * ; a2 . ). staticprotected . Check that axis have same labels. ; Definition at line 1568 of file TH1.cxx. ◆ CheckBinLimits(). bool TH1::CheckBinLimits ; (; const TAxis * ; a1, . const TAxis * ; a2 . ). staticprotected . Check bin limits. ; Definition at line 1541 of file TH1.cxx. ◆ CheckConsistency(). int TH1::CheckConsistency ; (; const TH1 * ; h1, . const TH1 * ; h2 . ). staticprotected . Check histogram compatibility. ; Definition at line 1677 of file TH1.cxx. ◆ CheckConsistentSubAxes(). bool TH1::CheckConsistentSubAxes ; (; const TAxis * ; a1",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:85368,Modifiability,variab,variable,85368,"ed the axis is compared between the given range ; Definition at line 1597 of file TH1.cxx. ◆ CheckBinLabels(). bool TH1::CheckBinLabels ; (; const TAxis * ; a1, . const TAxis * ; a2 . ). staticprotected . Check that axis have same labels. ; Definition at line 1568 of file TH1.cxx. ◆ CheckBinLimits(). bool TH1::CheckBinLimits ; (; const TAxis * ; a1, . const TAxis * ; a2 . ). staticprotected . Check bin limits. ; Definition at line 1541 of file TH1.cxx. ◆ CheckConsistency(). int TH1::CheckConsistency ; (; const TH1 * ; h1, . const TH1 * ; h2 . ). staticprotected . Check histogram compatibility. ; Definition at line 1677 of file TH1.cxx. ◆ CheckConsistentSubAxes(). bool TH1::CheckConsistentSubAxes ; (; const TAxis * ; a1, . Int_t ; firstBin1, . Int_t ; lastBin1, . const TAxis * ; a2, . Int_t ; firstBin2 = 0, . Int_t ; lastBin2 = 0 . ). staticprotected . Check that two sub axis are the same. ; The limits are defined by first bin and last bin N.B. no check is done in this case for variable bins ; Definition at line 1640 of file TH1.cxx. ◆ CheckEqualAxes(). bool TH1::CheckEqualAxes ; (; const TAxis * ; a1, . const TAxis * ; a2 . ). staticprotected . Check that the axis are the same. ; Definition at line 1611 of file TH1.cxx. ◆ Chi2Test(). Double_t TH1::Chi2Test ; (; const TH1 * ; h2, . Option_t * ; option = ""UU"", . Double_t * ; res = nullptr . ); const. virtual . \( \chi^{2} \) test for comparing weighted and unweighted histograms. ; Compares the histograms' adjusted (normalized) residuals. Function: Returns p-value. Other return values are specified by the 3rd parameter; Parameters. [in]h2the second histogram ; [in]option; ""UU"" = experiment experiment comparison (unweighted-unweighted); ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first histogram should be unweighted; ""WW"" = MC MC comparison (weighted-weighted); ""NORM"" = to be used when one or both of the histograms is scaled but the histogram originally was unweighted; by default underflows and o",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:88227,Modifiability,variab,variables,88227,"weighted) histograms. This paper describes the implementation modified \( \chi^{2} \) tests for comparison of weighted and unweighted histograms and two weighted histograms [2] as well as usual Pearson's \( \chi^{2} \) test for comparison two usual (unweighted) histograms.; Overview:; Comparison of two histograms expect hypotheses that two histograms represent identical distributions. To make a decision p-value should be calculated. The hypotheses of identity is rejected if the p-value is lower then some significance level. Traditionally significance levels 0.1, 0.05 and 0.01 are used. The comparison procedure should include an analysis of the residuals which is often helpful in identifying the bins of histograms responsible for a significant overall \( \chi^{2} \) value. Residuals are the difference between bin contents and expected bin contents. Most convenient for analysis are the normalized residuals. If hypotheses of identity are valid then normalized residuals are approximately independent and identically distributed random variables having N(0,1) distribution. Analysis of residuals expect test of above mentioned properties of residuals. Notice that indirectly the analysis of residuals increase the power of \( \chi^{2} \) test.; Methods of comparison:; \( \chi^{2} \) test for comparison two (unweighted) histograms: Let us consider two histograms with the same binning and the number of bins equal to r. Let us denote the number of events in the ith bin in the first histogram as ni and as mi in the second one. The total number of events in the first histogram is equal to: ; \[; N = \sum_{i=1}^{r} n_{i}; \]. and ; \[; M = \sum_{i=1}^{r} m_{i}; \]. in the second histogram. The hypothesis of identity (homogeneity) [3] is that the two histograms represent random values with identical distributions. It is equivalent that there exist r constants p1,...,pr, such that ; \[; \sum_{i=1}^{r} p_{i}=1; \]. and the probability of belonging to the ith bin for some measured value",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:89267,Modifiability,variab,variable,89267,"entioned properties of residuals. Notice that indirectly the analysis of residuals increase the power of \( \chi^{2} \) test.; Methods of comparison:; \( \chi^{2} \) test for comparison two (unweighted) histograms: Let us consider two histograms with the same binning and the number of bins equal to r. Let us denote the number of events in the ith bin in the first histogram as ni and as mi in the second one. The total number of events in the first histogram is equal to: ; \[; N = \sum_{i=1}^{r} n_{i}; \]. and ; \[; M = \sum_{i=1}^{r} m_{i}; \]. in the second histogram. The hypothesis of identity (homogeneity) [3] is that the two histograms represent random values with identical distributions. It is equivalent that there exist r constants p1,...,pr, such that ; \[; \sum_{i=1}^{r} p_{i}=1; \]. and the probability of belonging to the ith bin for some measured value in both experiments is equal to pi. The number of events in the ith bin is a random variable with a distribution approximated by a Poisson probability distribution ; \[; \frac{e^{-Np_{i}}(Np_{i})^{n_{i}}}{n_{i}!}; \]. for the first histogram and with distribution ; \[; \frac{e^{-Mp_{i}}(Mp_{i})^{m_{i}}}{m_{i}!}; \]. for the second histogram. If the hypothesis of homogeneity is valid, then the maximum likelihood estimator of pi, i=1,...,r, is ; \[; \hat{p}_{i}= \frac{n_{i}+m_{i}}{N+M}; \]. and then ; \[; X^{2} = \sum_{i=1}^{r}\frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r}\frac{(m_{i}-M\hat{p}_{i})^{2}}{M\hat{p}_{i}} =\frac{1}{MN} \sum_{i=1}^{r}\frac{(Mn_{i}-Nm_{i})^{2}}{n_{i}+m_{i}}; \]. has approximately a \( \chi^{2}_{(r-1)} \) distribution [3]. The comparison procedure can include an analysis of the residuals which is often helpful in identifying the bins of histograms responsible for a significant overall \( \chi^{2} \) value. Most convenient for analysis are the adjusted (normalized) residuals [4] ; \[; r_{i} = \frac{n_{i}-N\hat{p}_{i}}{\sqrt{N\hat{p}_{i}}\sqrt{(1-N/(N+M))(1-(n_{i}+m_{i})/",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:90445,Modifiability,variab,variables,90445,"or the first histogram and with distribution ; \[; \frac{e^{-Mp_{i}}(Mp_{i})^{m_{i}}}{m_{i}!}; \]. for the second histogram. If the hypothesis of homogeneity is valid, then the maximum likelihood estimator of pi, i=1,...,r, is ; \[; \hat{p}_{i}= \frac{n_{i}+m_{i}}{N+M}; \]. and then ; \[; X^{2} = \sum_{i=1}^{r}\frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r}\frac{(m_{i}-M\hat{p}_{i})^{2}}{M\hat{p}_{i}} =\frac{1}{MN} \sum_{i=1}^{r}\frac{(Mn_{i}-Nm_{i})^{2}}{n_{i}+m_{i}}; \]. has approximately a \( \chi^{2}_{(r-1)} \) distribution [3]. The comparison procedure can include an analysis of the residuals which is often helpful in identifying the bins of histograms responsible for a significant overall \( \chi^{2} \) value. Most convenient for analysis are the adjusted (normalized) residuals [4] ; \[; r_{i} = \frac{n_{i}-N\hat{p}_{i}}{\sqrt{N\hat{p}_{i}}\sqrt{(1-N/(N+M))(1-(n_{i}+m_{i})/(N+M))}}; \]. If hypotheses of homogeneity are valid then residuals ri are approximately independent and identically distributed random variables having N(0,1) distribution. The application of the \( \chi^{2} \) test has restrictions related to the value of the expected frequencies Npi, Mpi, i=1,...,r. A conservative rule formulated in [5] is that all the expectations must be 1 or greater for both histograms. In practical cases when expected frequencies are not known the estimated expected frequencies \( M\hat{p}_{i}, N\hat{p}_{i}, i=1,...,r \) can be used.; Unweighted and weighted histograms comparison:; A simple modification of the ideas described above can be used for the comparison of the usual (unweighted) and weighted histograms. Let us denote the number of events in the ith bin in the unweighted histogram as ni and the common weight of events in the ith bin of the weighted histogram as wi. The total number of events in the unweighted histogram is equal to ; \[; N = \sum_{i=1}^{r} n_{i}; \]. and the total weight of events in the weighted histogram is equal to ; \[; W = \",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:91667,Modifiability,variab,variable,91667,"s when expected frequencies are not known the estimated expected frequencies \( M\hat{p}_{i}, N\hat{p}_{i}, i=1,...,r \) can be used.; Unweighted and weighted histograms comparison:; A simple modification of the ideas described above can be used for the comparison of the usual (unweighted) and weighted histograms. Let us denote the number of events in the ith bin in the unweighted histogram as ni and the common weight of events in the ith bin of the weighted histogram as wi. The total number of events in the unweighted histogram is equal to ; \[; N = \sum_{i=1}^{r} n_{i}; \]. and the total weight of events in the weighted histogram is equal to ; \[; W = \sum_{i=1}^{r} w_{i}; \]. Let us formulate the hypothesis of identity of an unweighted histogram to a weighted histogram so that there exist r constants p1,...,pr, such that ; \[; \sum_{i=1}^{r} p_{i} = 1; \]. for the unweighted histogram. The weight wi is a random variable with a distribution approximated by the normal probability distribution \( N(Wp_{i},\sigma_{i}^{2}) \) where \( \sigma_{i}^{2} \) is the variance of the weight wi. If we replace the variance \( \sigma_{i}^{2} \) with estimate \( s_{i}^{2} \) (sum of squares of weights of events in the ith bin) and the hypothesis of identity is valid, then the maximum likelihood estimator of pi,i=1,...,r, is ; \[; \hat{p}_{i} = \frac{Ww_{i}-Ns_{i}^{2}+\sqrt{(Ww_{i}-Ns_{i}^{2})^{2}+4W^{2}s_{i}^{2}n_{i}}}{2W^{2}}; \]. We may then use the test statistic ; \[; X^{2} = \sum_{i=1}^{r} \frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r} \frac{(w_{i}-W\hat{p}_{i})^{2}}{s_{i}^{2}}; \]. and it has approximately a \( \sigma^{2}_{(r-1)} \) distribution [2]. This test, as well as the original one [3], has a restriction on the expected frequencies. The expected frequencies recommended for the weighted histogram is more than 25. The value of the minimal expected frequency can be decreased down to 10 for the case when the weights of the events are close to constant. In t",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:94374,Modifiability,variab,variables,94374,"_{i}^{2}}{4}\left(1+\frac{Ns_{i}^{2}-w_{i}W}{\sqrt{(Ns_{i}^{2}-w_{i}W)^{2}+4W^{2}s_{i}^{2}n_{i}}}\right)^{2}; \]. The residuals ; \[; r_{i} = \frac{w_{i}-W\hat{p}_{i}}{z_{i}}; \]. have approximately a normal distribution with mean equal to 0 and standard deviation equal to 1.; Two weighted histograms comparison:; Let us denote the common weight of events of the ith bin in the first histogram as w1i and as w2i in the second one. The total weight of events in the first histogram is equal to ; \[; W_{1} = \sum_{i=1}^{r} w_{1i}; \]. and ; \[; W_{2} = \sum_{i=1}^{r} w_{2i}; \]. in the second histogram. Let us formulate the hypothesis of identity of weighted histograms so that there exist r constants p1,...,pr, such that ; \[; \sum_{i=1}^{r} p_{i} = 1; \]. and also expectation value of weight w1i equal to W1pi and expectation value of weight w2i equal to W2pi. Weights in both the histograms are random variables with distributions which can be approximated by a normal probability distribution \( N(W_{1}p_{i},\sigma_{1i}^{2}) \) for the first histogram and by a distribution \( N(W_{2}p_{i},\sigma_{2i}^{2}) \) for the second. Here \( \sigma_{1i}^{2} \) and \( \sigma_{2i}^{2} \) are the variances of w1i and w2i with estimators \( s_{1i}^{2} \) and \( s_{2i}^{2} \) respectively. If the hypothesis of identity is valid, then the maximum likelihood and Least Square Method estimator of pi,i=1,...,r, is ; \[; \hat{p}_{i} = \frac{w_{1i}W_{1}/s_{1i}^{2}+w_{2i}W_{2} /s_{2i}^{2}}{W_{1}^{2}/s_{1i}^{2}+W_{2}^{2}/s_{2i}^{2}}; \]. We may then use the test statistic ; \[; X^{2} = \sum_{i=1}^{r} \frac{(w_{1i}-W_{1}\hat{p}_{i})^{2}}{s_{1i}^{2}} + \sum_{i=1}^{r} \frac{(w_{2i}-W_{2}\hat{p}_{i})^{2}}{s_{2i}^{2}} = \sum_{i=1}^{r} \frac{(W_{1}w_{2i}-W_{2}w_{1i})^{2}}{W_{1}^{2}s_{2i}^{2}+W_{2}^{2}s_{1i}^{2}}; \]. and it has approximately a \( \chi^{2}_{(r-1)} \) distribution [2]. The normalized or studentised residuals [6] ; \[; r_{i} = \frac{w_{1i}-W_{1}\hat{p}_{i}}{s_{1i}\sqrt{1 - \frac{1}{(1+W_{",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:109725,Modifiability,inherit,inherit,109725," a pad is deleted, the histogram is automatically removed from the pad or pads where it was drawn. If a histogram is drawn in a pad, then filled again, the new status of the histogram will be automatically shown in the pad next time the pad is updated. One does not need to redraw the histogram. To draw the current version of a histogram in a pad, one can use h->DrawCopy(); This makes a clone of the histogram. Once the clone is drawn, the original histogram may be modified or deleted without affecting the aspect of the clone. By default, TH1::Draw clears the current pad.; One can use TH1::SetMaximum and TH1::SetMinimum to force a particular value for the maximum or the minimum scale on the plot.; TH1::UseCurrentStyle can be used to change all histogram graphics attributes to correspond to the current selected style. This function must be called for each histogram. In case one reads and draws many histograms from a file, one can force the histograms to inherit automatically the current graphics style by calling before gROOT->ForceStyle();; See the THistPainter class for a description of all the drawing options. ; Reimplemented from TObject.; Definition at line 3066 of file TH1.cxx. ◆ DrawCopy(). TH1 * TH1::DrawCopy ; (; Option_t * ; option = """", . const char * ; name_postfix = ""_copy"" . ); const. virtual . Copy this histogram and Draw in the current pad. ; Once the histogram is drawn into the pad, any further modification using graphics input will be made on the copy of the histogram, and not to the original object. By default a postfix ""_copy"" is added to the histogram name. Pass an empty postfix in case you want to draw a histogram with the same name; See Draw for the list of options ; Definition at line 3113 of file TH1.cxx. ◆ DrawNormalized(). TH1 * TH1::DrawNormalized ; (; Option_t * ; option = """", . Double_t ; norm = 1 . ); const. virtual . Draw a normalized copy of this histogram. ; A clone of this histogram is normalized to norm and drawn with option. A pointer",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:112898,Modifiability,extend,extended,112898,"If option ""S"" is specified, the value of the function is used to generate a value, distributed according to the Poisson distribution, with f1 as the mean. . Definition at line 3192 of file TH1.cxx. ◆ ExecuteEvent(). void TH1::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a histogram is clicked with the locator; If Left button clicked on the bin top value, then the content of this bin is modified according to the new position of the mouse when it is released. ; Reimplemented from TObject.; Definition at line 3240 of file TH1.cxx. ◆ ExtendAxis(). void TH1::ExtendAxis ; (; Double_t ; x, . TAxis * ; axis . ). virtual . Histogram is resized along axis such that x is in the axis range. ; The new axis limits are recomputed by doubling iteratively the current axis range until the specified value x is within the limits. The algorithm makes a copy of the histogram, then loops on all bins of the old histogram to fill the extended histogram. Takes into account errors (Sumw2) if any. The algorithm works for 1-d, 2-D and 3-D histograms. The axis must be extendable before invoking this function. Ex:; h->GetXaxis()->SetCanExtend(kTRUE);; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93. Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6504 of file TH1.cxx. ◆ FFT(). TH1 * TH1::FFT ; (; TH1 * ; h_output, . Option_t * ; option . ). virtual . This function allows to do discrete Fourier transforms of TH1 and TH2. ; Available transform types and flags are described below.; To extract more information about the transform, use the function TVirtualFFT::GetCurrentTransform() to get a pointer to the current transform object.; Parameters. [out]h_outputhistogram for the output. If a null pointer is passed, a new histogram is created and returned, otherwise, the provided histogram is used and should be big enough ; [in]optionoption parameters consis",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:113030,Modifiability,extend,extendable,113030,"ile TH1.cxx. ◆ ExecuteEvent(). void TH1::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one event. ; This member function is called when a histogram is clicked with the locator; If Left button clicked on the bin top value, then the content of this bin is modified according to the new position of the mouse when it is released. ; Reimplemented from TObject.; Definition at line 3240 of file TH1.cxx. ◆ ExtendAxis(). void TH1::ExtendAxis ; (; Double_t ; x, . TAxis * ; axis . ). virtual . Histogram is resized along axis such that x is in the axis range. ; The new axis limits are recomputed by doubling iteratively the current axis range until the specified value x is within the limits. The algorithm makes a copy of the histogram, then loops on all bins of the old histogram to fill the extended histogram. Takes into account errors (Sumw2) if any. The algorithm works for 1-d, 2-D and 3-D histograms. The axis must be extendable before invoking this function. Ex:; h->GetXaxis()->SetCanExtend(kTRUE);; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93. Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6504 of file TH1.cxx. ◆ FFT(). TH1 * TH1::FFT ; (; TH1 * ; h_output, . Option_t * ; option . ). virtual . This function allows to do discrete Fourier transforms of TH1 and TH2. ; Available transform types and flags are described below.; To extract more information about the transform, use the function TVirtualFFT::GetCurrentTransform() to get a pointer to the current transform object.; Parameters. [out]h_outputhistogram for the output. If a null pointer is passed, a new histogram is created and returned, otherwise, the provided histogram is used and should be big enough ; [in]optionoption parameters consists of 3 parts:; option on what to return; ""RE"" - returns a histogram of the real part of the output; ""IM"" - returns a histogram of the imaginary part of the output; ""MAG""- returns a his",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:120855,Modifiability,extend,extend,120855,"togram h (TH1) is integrated over the channel contents for the bin range of this histogram. It is normalized to 1.; Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Fill histogram channel ntimes random numbers are generated. SPECIAL CASE when the target histogram has the same binning as the source. in this case we simply use a poisson distribution where the mean value per bin = bincontent/integral. ; Reimplemented in TH2, and TH3.; Definition at line 3590 of file TH1.cxx. ◆ FindBin(). Int_t TH1::FindBin ; (; Double_t ; x, . Double_t ; y = 0, . Double_t ; z = 0 . ). virtual . Return Global bin number corresponding to x,y,z. ; 2-D and 3-D histograms are represented with a one dimensional structure. This has the advantage that all existing functions, such as GetBinContent, GetBinError, GetBinFunction work for all dimensions. This function tries to extend the axis if the given point belongs to an under-/overflow bin AND if CanExtendAllAxes() is true.; See also TH1::GetBin, TAxis::FindBin and TAxis::FindFixBin ; Reimplemented in TH2Poly.; Definition at line 3672 of file TH1.cxx. ◆ FindFirstBinAbove(). Int_t TH1::FindFirstBinAbove ; (; Double_t ; threshold = 0, . Int_t ; axis = 1, . Int_t ; firstBin = 1, . Int_t ; lastBin = -1 . ); const. virtual . Find first bin with content > threshold for axis (1=x, 2=y, 3=z) if no bins with content > threshold is found the function returns -1. ; The search will occur between the specified first and last bin. Specifying the value of the last bin to search to less than zero will search until the last defined bin. ; Definition at line 3734 of file TH1.cxx. ◆ FindFixBin(). Int_t TH1::FindFixBin ; (; Double_t ; x, . Double_t ; y = 0, . Double_t ; z = 0 . ); const. virtual . Return Global bin number corresponding to x,y,z. ; 2-D and 3-D histograms are represented with a one dimensional structure. This has the advantage that all existing fu",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:122010,Modifiability,extend,extend,122010,"ented in TH2Poly.; Definition at line 3672 of file TH1.cxx. ◆ FindFirstBinAbove(). Int_t TH1::FindFirstBinAbove ; (; Double_t ; threshold = 0, . Int_t ; axis = 1, . Int_t ; firstBin = 1, . Int_t ; lastBin = -1 . ); const. virtual . Find first bin with content > threshold for axis (1=x, 2=y, 3=z) if no bins with content > threshold is found the function returns -1. ; The search will occur between the specified first and last bin. Specifying the value of the last bin to search to less than zero will search until the last defined bin. ; Definition at line 3734 of file TH1.cxx. ◆ FindFixBin(). Int_t TH1::FindFixBin ; (; Double_t ; x, . Double_t ; y = 0, . Double_t ; z = 0 . ); const. virtual . Return Global bin number corresponding to x,y,z. ; 2-D and 3-D histograms are represented with a one dimensional structure. This has the advantage that all existing functions, such as GetBinContent, GetBinError, GetBinFunction work for all dimensions. This function DOES NOT try to extend the axis if the given point belongs to an under-/overflow bin.; See also TH1::GetBin, TAxis::FindBin and TAxis::FindFixBin ; Definition at line 3705 of file TH1.cxx. ◆ FindLastBinAbove(). Int_t TH1::FindLastBinAbove ; (; Double_t ; threshold = 0, . Int_t ; axis = 1, . Int_t ; firstBin = 1, . Int_t ; lastBin = -1 . ); const. virtual . Find last bin with content > threshold for axis (1=x, 2=y, 3=z) if no bins with content > threshold is found the function returns -1. ; The search will occur between the specified first and last bin. Specifying the value of the last bin to search to less than zero will search until the last defined bin. ; Definition at line 3797 of file TH1.cxx. ◆ FindNewAxisLimits(). Bool_t TH1::FindNewAxisLimits ; (; const TAxis * ; axis, . const Double_t ; point, . Double_t & ; newMin, . Double_t & ; newMax . ). protectedvirtual . finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ; new limits are p",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:123055,Modifiability,variab,variables,123055,"n point belongs to an under-/overflow bin.; See also TH1::GetBin, TAxis::FindBin and TAxis::FindFixBin ; Definition at line 3705 of file TH1.cxx. ◆ FindLastBinAbove(). Int_t TH1::FindLastBinAbove ; (; Double_t ; threshold = 0, . Int_t ; axis = 1, . Int_t ; firstBin = 1, . Int_t ; lastBin = -1 . ); const. virtual . Find last bin with content > threshold for axis (1=x, 2=y, 3=z) if no bins with content > threshold is found the function returns -1. ; The search will occur between the specified first and last bin. Specifying the value of the last bin to search to less than zero will search until the last defined bin. ; Definition at line 3797 of file TH1.cxx. ◆ FindNewAxisLimits(). Bool_t TH1::FindNewAxisLimits ; (; const TAxis * ; axis, . const Double_t ; point, . Double_t & ; newMin, . Double_t & ; newMax . ). protectedvirtual . finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ; new limits are put into newMin and newMax variables. axis - axis whose limits are to be recomputed point - point that should fit within the new axis limits newMin - new minimum will be stored here newMax - new maximum will be stored here. false if failed (e.g. if the initial axis limits are wrong or the new range is more than \( 2^{64} \) times the old one). ; Definition at line 6460 of file TH1.cxx. ◆ FindObject() [1/2]. TObject * TH1::FindObject ; (; const char * ; name); const. overridevirtual . Search object named name in the list of functions. ; Reimplemented from TObject.; Definition at line 3857 of file TH1.cxx. ◆ FindObject() [2/2]. TObject * TH1::FindObject ; (; const TObject * ; obj); const. overridevirtual . Search object obj in the list of functions. ; Reimplemented from TObject.; Definition at line 3866 of file TH1.cxx. ◆ Fit() [1/2]. TFitResultPtr TH1::Fit ; (; const char * ; fname, . Option_t * ; option = """", . Option_t * ; goption = """", . Double_t ; xxmin = 0, . Double_t ; xxmax = 0 . ). virtua",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:128749,Modifiability,variab,variable,128749,"ed functions. By default, the previous function is deleted and only the last one is kept. . ""N"" Does not store the graphics function, does not draw the histogram with the function after fitting. . ""0"" Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions. . ""R"" Fit using a fitting range specified in the function range with TF1::SetRange. . ""B"" Use this option when you want to fix or set limits on one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used. . ""C"" In case of linear fitting, do no calculate the chisquare (saves CPU time). . ""G"" Uses the gradient implemented in TF1::GradientPar for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function. . ""WIDTH"" Scales the histogran bin content by the bin width (useful for variable bins histograms) . ""SERIAL"" Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique . ""MULTITHREAD"" Forces usage of multi-thread execution whenever possible . The default fitting of an histogram (when no option is given) is perfomed as following:; a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; the full range of the histogram is used;; the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; for linear functions (polN, chenbyshev or formula expressions combined using operator ++) a linear minimization is used.; only the status of the fit is returned;; the fit is performed in Multithread whenever is enabled in ROOT;; only the last fitted function is saved in the histogram;; the hi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:129347,Modifiability,config,configuration,129347,"ed one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used. . ""C"" In case of linear fitting, do no calculate the chisquare (saves CPU time). . ""G"" Uses the gradient implemented in TF1::GradientPar for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function. . ""WIDTH"" Scales the histogran bin content by the bin width (useful for variable bins histograms) . ""SERIAL"" Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique . ""MULTITHREAD"" Forces usage of multi-thread execution whenever possible . The default fitting of an histogram (when no option is given) is perfomed as following:; a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; the full range of the histogram is used;; the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; for linear functions (polN, chenbyshev or formula expressions combined using operator ++) a linear minimization is used.; only the status of the fit is returned;; the fit is performed in Multithread whenever is enabled in ROOT;; only the last fitted function is saved in the histogram;; the histogram is drawn after fitting overalyed with the resulting fitting function. Minimizer Configuration; The Fit is perfomed using the default Minimizer, defined in the ROOT::Math::MinimizerOptions class. It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling TH1::Fit):; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm) for changing the minmizer and/or the corresponding algorithm. For example ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""G",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:129985,Modifiability,config,configuration,129985,"en no option is given) is perfomed as following:; a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; the full range of the histogram is used;; the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; for linear functions (polN, chenbyshev or formula expressions combined using operator ++) a linear minimization is used.; only the status of the fit is returned;; the fit is performed in Multithread whenever is enabled in ROOT;; only the last fitted function is saved in the histogram;; the histogram is drawn after fitting overalyed with the resulting fitting function. Minimizer Configuration; The Fit is perfomed using the default Minimizer, defined in the ROOT::Math::MinimizerOptions class. It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling TH1::Fit):; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm) for changing the minmizer and/or the corresponding algorithm. For example ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS""); will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization The current defaults are (""Minuit"",""Migrad""). See the documentation of the ROOT::Math::MinimizerOptions for the available minimizers in ROOT and their corresponding algorithms.; ROOT::Math::MinimizerOptions::SetDefaultTolerance for setting a different tolerance value for the minimization.; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls for setting the maximum number of function calls.; ROOT::Math::MinimizerOptions::SetDefaultPrintLevel for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing. Other options are possible depending on the Minimizer used, see the corresponding documentation. The default minimizer can be also",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:145745,Modifiability,adapt,adapted,145745,"D, etc. histograms c2 is an optional argument that gives a relative weight between the two histograms, and dc2 is the error on this weight. This is useful, for example, when forming an asymmetry between two histograms from 2 different data sets that need to be normalized to each other in some way. The function calculates the errors assuming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)).; example: assuming 'h1' and 'h2' are already filled; h3 = h1->GetAsymmetry(h2); TH1::GetAsymmetryTH1 * GetAsymmetry(TH1 *h2, Double_t c2=1, Double_t dc2=0)Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined...Definition TH1.cxx:4339; then 'h3' is created and filled with the asymmetry between 'h1' and 'h2'; h1 and h2 are left intact.; Note that it is the user's responsibility to manage the created histogram. The name of the returned histogram will be Asymmetry_nameOfh1-nameOfh2; code proposed by Jason Seely (seely.nosp@m.@mit.nosp@m..edu) and adapted by R.Brun; clone the histograms so top and bottom will have the correct dimensions: Sumw2 just makes sure the errors will be computed properly when we form sums and ratios below. ; Definition at line 4339 of file TH1.cxx. ◆ GetAxisColor(). Color_t TH1::GetAxisColor ; (; Option_t * ; axis = ""X""); const. virtual . Return the number of divisions for ""axis"". ; Definition at line 40 of file Haxis.cxx. ◆ GetAxisLabelStatus(). UInt_t TH1::GetAxisLabelStatus ; (; ); const. protected . Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ; can be extended and is alphanumeric ; Definition at line 6675 of file TH1.cxx. ◆ GetBarOffset(). virtual Float_t TH1::GetBarOffset ; (; ); const. inlinevirtual . Definition at line 256 of file TH1.h. ◆ GetBarWidth(). virtual Float_t TH1::GetBarWidth ; (; ); const. inlinevirtual . Definition at line 257 of file TH1.h. ◆ GetBin(). Int_t TH1::GetBin ; (; Int_t ; binx, . Int_t ; biny = 0, . Int_t ; binz = 0 . ); const. virtual . ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:146325,Modifiability,extend,extended,146325," histogram with h2, where the asymmetry is defined...Definition TH1.cxx:4339; then 'h3' is created and filled with the asymmetry between 'h1' and 'h2'; h1 and h2 are left intact.; Note that it is the user's responsibility to manage the created histogram. The name of the returned histogram will be Asymmetry_nameOfh1-nameOfh2; code proposed by Jason Seely (seely.nosp@m.@mit.nosp@m..edu) and adapted by R.Brun; clone the histograms so top and bottom will have the correct dimensions: Sumw2 just makes sure the errors will be computed properly when we form sums and ratios below. ; Definition at line 4339 of file TH1.cxx. ◆ GetAxisColor(). Color_t TH1::GetAxisColor ; (; Option_t * ; axis = ""X""); const. virtual . Return the number of divisions for ""axis"". ; Definition at line 40 of file Haxis.cxx. ◆ GetAxisLabelStatus(). UInt_t TH1::GetAxisLabelStatus ; (; ); const. protected . Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ; can be extended and is alphanumeric ; Definition at line 6675 of file TH1.cxx. ◆ GetBarOffset(). virtual Float_t TH1::GetBarOffset ; (; ); const. inlinevirtual . Definition at line 256 of file TH1.h. ◆ GetBarWidth(). virtual Float_t TH1::GetBarWidth ; (; ); const. inlinevirtual . Definition at line 257 of file TH1.h. ◆ GetBin(). Int_t TH1::GetBin ; (; Int_t ; binx, . Int_t ; biny = 0, . Int_t ; binz = 0 . ); const. virtual . Return Global bin number corresponding to binx,y,z. ; 2-D and 3-D histograms are represented with a one dimensional structure. This has the advantage that all existing functions, such as GetBinContent, GetBinError, GetBinFunction work for all dimensions.; In case of a TH1x, returns binx directly. see TH1::GetBinXYZ for the inverse transformation.; Convention for numbering bins; For all histogram types: nbins, xlow, xup. bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin. In case of 2-D or 3-D histogra",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:165093,Modifiability,variab,variable,165093,"1.cxx. ◆ GetMinimumAndMaximum(). void TH1::GetMinimumAndMaximum ; (; Double_t & ; min, . Double_t & ; max . ); const. virtual . Retrieve the minimum and maximum values in the histogram. ; This will not return a cached value and will always search the histogram for the min and max values. The user can condition whether or not to call this with the GetMinimumStored() and GetMaximumStored() methods. If the cache is empty, then the value will be -1111. Users can then use the SetMinimum() or SetMaximum() methods to cache the results. For example, the following recipe will make efficient use of this method and the cached minimum and maximum values. Double_t currentMin = pHist->GetMinimumStored();; Double_t currentMax = pHist->GetMaximumStored();; if ((currentMin == -1111) || (currentMax == -1111)) {; pHist->GetMinimumAndMaximum(currentMin, currentMax);; pHist->SetMinimum(currentMin);; pHist->SetMaximum(currentMax);; }; Parameters. minreference to variable that will hold found minimum value ; maxreference to variable that will hold found maximum value . Definition at line 8731 of file TH1.cxx. ◆ GetMinimumBin() [1/2]. Int_t TH1::GetMinimumBin ; (; ); const. virtual . Return location of bin with minimum value in the range. ; Definition at line 8665 of file TH1.cxx. ◆ GetMinimumBin() [2/2]. Int_t TH1::GetMinimumBin ; (; Int_t & ; locmix, . Int_t & ; locmiy, . Int_t & ; locmiz . ); const. virtual . Return location of bin with minimum value in the range. ; Definition at line 8674 of file TH1.cxx. ◆ GetMinimumStored(). virtual Double_t TH1::GetMinimumStored ; (; ); const. inlinevirtual . Definition at line 293 of file TH1.h. ◆ GetNbinsX(). virtual Int_t TH1::GetNbinsX ; (; ); const. inlinevirtual . Definition at line 297 of file TH1.h. ◆ GetNbinsY(). virtual Int_t TH1::GetNbinsY ; (; ); const. inlinevirtual . Definition at line 298 of file TH1.h. ◆ GetNbinsZ(). virtual Int_t TH1::GetNbinsZ ; (; ); const. inlinevirtual . Definition at line 299 of file TH1.h. ◆ GetNcells(). virtu",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:165155,Modifiability,variab,variable,165155,"1.cxx. ◆ GetMinimumAndMaximum(). void TH1::GetMinimumAndMaximum ; (; Double_t & ; min, . Double_t & ; max . ); const. virtual . Retrieve the minimum and maximum values in the histogram. ; This will not return a cached value and will always search the histogram for the min and max values. The user can condition whether or not to call this with the GetMinimumStored() and GetMaximumStored() methods. If the cache is empty, then the value will be -1111. Users can then use the SetMinimum() or SetMaximum() methods to cache the results. For example, the following recipe will make efficient use of this method and the cached minimum and maximum values. Double_t currentMin = pHist->GetMinimumStored();; Double_t currentMax = pHist->GetMaximumStored();; if ((currentMin == -1111) || (currentMax == -1111)) {; pHist->GetMinimumAndMaximum(currentMin, currentMax);; pHist->SetMinimum(currentMin);; pHist->SetMaximum(currentMax);; }; Parameters. minreference to variable that will hold found minimum value ; maxreference to variable that will hold found maximum value . Definition at line 8731 of file TH1.cxx. ◆ GetMinimumBin() [1/2]. Int_t TH1::GetMinimumBin ; (; ); const. virtual . Return location of bin with minimum value in the range. ; Definition at line 8665 of file TH1.cxx. ◆ GetMinimumBin() [2/2]. Int_t TH1::GetMinimumBin ; (; Int_t & ; locmix, . Int_t & ; locmiy, . Int_t & ; locmiz . ); const. virtual . Return location of bin with minimum value in the range. ; Definition at line 8674 of file TH1.cxx. ◆ GetMinimumStored(). virtual Double_t TH1::GetMinimumStored ; (; ); const. inlinevirtual . Definition at line 293 of file TH1.h. ◆ GetNbinsX(). virtual Int_t TH1::GetNbinsX ; (; ); const. inlinevirtual . Definition at line 297 of file TH1.h. ◆ GetNbinsY(). virtual Int_t TH1::GetNbinsY ; (; ); const. inlinevirtual . Definition at line 298 of file TH1.h. ◆ GetNbinsZ(). virtual Int_t TH1::GetNbinsZ ; (; ); const. inlinevirtual . Definition at line 299 of file TH1.h. ◆ GetNcells(). virtu",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:167476,Modifiability,variab,variable,167476,"ual Double_t TH1::GetNormFactor ; (; ); const. inlinevirtual . Definition at line 301 of file TH1.h. ◆ GetObjectInfo(). char * TH1::GetObjectInfo ; (; Int_t ; px, . Int_t ; py . ); const. overridevirtual . Redefines TObject::GetObjectInfo. ; Displays the histogram info (bin number, contents, integral up to bin corresponding to cursor position px,py ; Reimplemented from TObject.; Definition at line 4502 of file TH1.cxx. ◆ GetOption(). Option_t * TH1::GetOption ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 303 of file TH1.h. ◆ GetPainter(). TVirtualHistPainter * TH1::GetPainter ; (; Option_t * ; option = """"). Return pointer to painter. ; If painter does not exist, it is created ; Definition at line 4511 of file TH1.cxx. ◆ GetQuantiles(). Int_t TH1::GetQuantiles ; (; Int_t ; n, . Double_t * ; xp, . const Double_t * ; p = nullptr . ). virtual . Compute Quantiles for this histogram Quantile x_p := Q(p) is defined as the value x_p such that the cumulative probability distribution Function F of variable X yields: ; F(x_p) = Pr(X <= x_p) = p with 0 <= p <= 1.; x_p = Q(p) = F_inv(p); X#define X(type, name); pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; F#define F(x, y, z); For instance the median x_0.5 of a distribution is defined as that value of the random variable X for which the distribution function equals 0.5:; F(x_0.5) = Probability(X < x_0.5) = 0.5; x_0.5 = Q(0.5); AuthorEddy Offermann code from Eddy Offermann, Renaissance; Parameters. [in]nmaximum size of array xp and size of array p (if given) ; [out]xparray to be filled with nq quantiles evaluated at (p). Memory has to be preallocated by caller. If p is null (default value), then xp is actually set to the (first n) histogram bin edges ; [in]parray of cumulative probabilities where quantiles should be evaluated.; if p is null, the CDF of the histogram will be used instead as array, and will have a size = number of bins + 1 in h. It will",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:167783,Modifiability,variab,variable,167783,"y ; Reimplemented from TObject.; Definition at line 4502 of file TH1.cxx. ◆ GetOption(). Option_t * TH1::GetOption ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 303 of file TH1.h. ◆ GetPainter(). TVirtualHistPainter * TH1::GetPainter ; (; Option_t * ; option = """"). Return pointer to painter. ; If painter does not exist, it is created ; Definition at line 4511 of file TH1.cxx. ◆ GetQuantiles(). Int_t TH1::GetQuantiles ; (; Int_t ; n, . Double_t * ; xp, . const Double_t * ; p = nullptr . ). virtual . Compute Quantiles for this histogram Quantile x_p := Q(p) is defined as the value x_p such that the cumulative probability distribution Function F of variable X yields: ; F(x_p) = Pr(X <= x_p) = p with 0 <= p <= 1.; x_p = Q(p) = F_inv(p); X#define X(type, name); pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; F#define F(x, y, z); For instance the median x_0.5 of a distribution is defined as that value of the random variable X for which the distribution function equals 0.5:; F(x_0.5) = Probability(X < x_0.5) = 0.5; x_0.5 = Q(0.5); AuthorEddy Offermann code from Eddy Offermann, Renaissance; Parameters. [in]nmaximum size of array xp and size of array p (if given) ; [out]xparray to be filled with nq quantiles evaluated at (p). Memory has to be preallocated by caller. If p is null (default value), then xp is actually set to the (first n) histogram bin edges ; [in]parray of cumulative probabilities where quantiles should be evaluated.; if p is null, the CDF of the histogram will be used instead as array, and will have a size = number of bins + 1 in h. It will correspond to the quantiles calculated at the lowest edge of the histogram (quantile=0) and all the upper edges of the bins. (nbins might be > n).; if p is not null, it is assumed to contain at least n values. . Returnsvalue nq (<=n) with the number of quantiles computed; Note that the Integral of the histogram is automatically recomputed if the ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:184532,Modifiability,adapt,adapted,184532,"g to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure: make pseudoexperiments based on random values from the parent distribution, compare the KS distance of the pseudoexperiment to the parent distribution, and count all the KS values above the value obtained from the original data to Monte Carlo distribution. The number of pseudo-experiments nEXPT is by default 1000, and it can be changed by specifying the option as ""X=number"", for example ""X=10000"" for 10000 toys. The function returns the probability. (thanks to Ben Kilminster to submit this procedure). Note that this option ""X"" is much slower. The returned function value is the probability of test (much less than one means NOT compatible); Code adapted by Rene Brun from original HBOOK routine HDIFF; NOTE1 A good description of the Kolmogorov test can be seen at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; NOTE2 see also alternative function TH1::Chi2Test The Kolmogorov test is assumed to give better results than Chi2Test in case of histograms with low statistics.; NOTE3 (Jan Conrad, Fred James) ""The returned value PROB is calculated such that it will be; uniformly distributed between zero and one for compatible histograms,; provided the data are not binned (or the number of bins is very large; compared with the number of events). Users who have access to unbinned; data and wish exact confidence levels should therefore not put their data; into histograms, but should call directly TMath::KolmogorovTest. On; the other hand, since TH1 is a convenient way of collecting data and; saving space, this function has been provided. However, the values of; PROB for binned data will be shifted slightly higher than expected,; dependi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:195382,Modifiability,variab,variable,195382," bin of the result.; If the original histogram has errors stored (via Sumw2), the resulting histograms has new errors correctly calculated.; examples: if h1 is an existing TH1F histogram with 100 bins; h1->Rebin(); //merges two bins in one in h1: previous contents of h1 are lost; h1->Rebin(5); //merges five bins in one in h1; TH1F *hnew = dynamic_cast<TH1F*>(h1->Rebin(5,""hnew"")); // creates a new histogram hnew; // merging 5 bins of h1 in one bin; TH1::Rebinvirtual TH1 * Rebin(Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr)Rebin this histogram.Definition TH1.cxx:6275; NOTE: If ngroup is not an exact divider of the number of bins, the top limit of the rebinned histogram is reduced to the upper edge of the last bin that can make a complete group. The remaining bins are added to the overflow bin. Statistics will be recomputed from the new bin contents.; case 2 xbins!=0; A new histogram is created (you should specify newname). The parameter ngroup is the number of variable size bins in the created histogram. The array xbins must contain ngroup+1 elements that represent the low-edges of the bins. If the original histogram has errors stored (via Sumw2), the resulting histograms has new errors correctly calculated.; NOTE: The bin edges specified in xbins should correspond to bin edges in the original histogram. If a bin edge in the new histogram is in the middle of a bin in the original histogram, all entries in the split bin in the original histogram will be transfered to the lower of the two possible bins in the new histogram. This is probably not what you want. A warning message is emitted in this case; examples: if h1 is an existing TH1F histogram with 100 bins; Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew. Reimplemented in TH2, and TProfile.; Definition at line 6275 of file TH1.cxx. ◆ RebinAxis(). virtual void TH1::RebinAxis ; (",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:196227,Modifiability,variab,variable,196227," to the overflow bin. Statistics will be recomputed from the new bin contents.; case 2 xbins!=0; A new histogram is created (you should specify newname). The parameter ngroup is the number of variable size bins in the created histogram. The array xbins must contain ngroup+1 elements that represent the low-edges of the bins. If the original histogram has errors stored (via Sumw2), the resulting histograms has new errors correctly calculated.; NOTE: The bin edges specified in xbins should correspond to bin edges in the original histogram. If a bin edge in the new histogram is in the middle of a bin in the original histogram, all entries in the split bin in the original histogram will be transfered to the lower of the two possible bins in the new histogram. This is probably not what you want. A warning message is emitted in this case; examples: if h1 is an existing TH1F histogram with 100 bins; Double_t xbins[25] = {...} array of low-edges (xbins[25] is the upper edge of last bin; h1->Rebin(24,""hnew"",xbins); //creates a new variable bin size histogram hnew. Reimplemented in TH2, and TProfile.; Definition at line 6275 of file TH1.cxx. ◆ RebinAxis(). virtual void TH1::RebinAxis ; (; Double_t ; x, . TAxis * ; axis . ). inlinevirtual . Definition at line 437 of file TH1.h. ◆ RebinX(). virtual TH1 * TH1::RebinX ; (; Int_t ; ngroup = 2, . const char * ; newname = """" . ). inlinevirtual . Reimplemented in TH2, TH3, and TProfile2D.; Definition at line 354 of file TH1.h. ◆ Rebuild(). void TH1::Rebuild ; (; Option_t * ; option = """"). virtual . Using the current bin info, recompute the arrays for contents and errors. ; Definition at line 7087 of file TH1.cxx. ◆ RecomputeAxisLimits(). Bool_t TH1::RecomputeAxisLimits ; (; TAxis & ; destAxis, . const TAxis & ; anAxis . ). staticprotected . Finds new limits for the axis for the Merge function. ; returns false if the limits are incompatible ; Definition at line 5908 of file TH1.cxx. ◆ RecursiveRemove(). void TH1::RecursiveRemove ; (; T",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:205101,Modifiability,variab,variable,205101,"tBinError) since the bin error will not be recalculated after setting the content and a default error = 0 will be used for those bins.; See convention for numbering bins in TH1::GetBin ; Reimplemented in TH2Poly.; Definition at line 9206 of file TH1.cxx. ◆ SetBinError() [2/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9241 of file TH1.cxx. ◆ SetBinError() [3/3]. void TH1::SetBinError ; (; Int_t ; binx, . Int_t ; biny, . Int_t ; binz, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9251 of file TH1.cxx. ◆ SetBinErrorOption(). virtual void TH1::SetBinErrorOption ; (; EBinErrorOpt ; type). inlinevirtual . Definition at line 381 of file TH1.h. ◆ SetBins() [1/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins . ). virtual . Redefine x axis parameters with variable bin sizes. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1 ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8794 of file TH1.cxx. ◆ SetBins() [2/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins . ). virtual . Redefine x and y axis parameters with variable bin sizes. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1 ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8848 of file TH1.cxx. ◆ SetBins() [3/6]. void TH1::SetBins ; (; Int",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:205640,Modifiability,variab,variable,205640,"(; Int_t ; binx, . Int_t ; biny, . Int_t ; binz, . Double_t ; error . ). virtual . See convention for numbering bins in TH1::GetBin. ; Reimplemented in TH2Poly.; Definition at line 9251 of file TH1.cxx. ◆ SetBinErrorOption(). virtual void TH1::SetBinErrorOption ; (; EBinErrorOpt ; type). inlinevirtual . Definition at line 381 of file TH1.h. ◆ SetBins() [1/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins . ). virtual . Redefine x axis parameters with variable bin sizes. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1 ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8794 of file TH1.cxx. ◆ SetBins() [2/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins . ). virtual . Redefine x and y axis parameters with variable bin sizes. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1 ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8848 of file TH1.cxx. ◆ SetBins() [3/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins, . Int_t ; nz, . const Double_t * ; zBins . ). virtual . Redefine x, y and z axis parameters with variable bin sizes. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1, zBins is supposed to be of length nz+1 ; Reimp",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:206270,Modifiability,variab,variable,206270,"ntents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1 ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8794 of file TH1.cxx. ◆ SetBins() [2/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins . ). virtual . Redefine x and y axis parameters with variable bin sizes. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1 ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8848 of file TH1.cxx. ◆ SetBins() [3/6]. void TH1::SetBins ; (; Int_t ; nx, . const Double_t * ; xBins, . Int_t ; ny, . const Double_t * ; yBins, . Int_t ; nz, . const Double_t * ; zBins . ). virtual . Redefine x, y and z axis parameters with variable bin sizes. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1, zBins is supposed to be of length nz+1 ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8905 of file TH1.cxx. ◆ SetBins() [4/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax . ). virtual . Redefine x axis parameters. ; The X axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8767 of file TH1.cxx. ◆ SetBins() [5/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:208829,Modifiability,extend,extendBitMask,208829,"nz, . Double_t ; zmin, . Double_t ; zmax . ). virtual . Redefine x, y and z axis parameters. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8875 of file TH1.cxx. ◆ SetBinsLength(). virtual void TH1::SetBinsLength ; (; Int_t ; = -1). inlinevirtual . Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 380 of file TH1.h. ◆ SetBuffer(). void TH1::SetBuffer ; (; Int_t ; buffersize, . Option_t * ; option = """" . ). virtual . Set the maximum number of entries to be kept in the buffer. ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8458 of file TH1.cxx. ◆ SetCanExtend(). UInt_t TH1::SetCanExtend ; (; UInt_t ; extendBitMask). virtual . Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ; Definition at line 6649 of file TH1.cxx. ◆ SetCellContent(). virtual void TH1::SetCellContent ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; content . ). inlinevirtual . Definition at line 439 of file TH1.h. ◆ SetCellError(). virtual void TH1::SetCellError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; content . ). inlinevirtual . Definition at line 441 of file TH1.h. ◆ SetColors(). void TH1::SetColors ; (; Color_t ; linecolor = -1, . Color_t ; markercolor = -1, . Color_t ; fillcolor = -1 . ). virtual . Shortcut to set the three histogram colors with a single call. ; By default: linecolor = markercolor = fillcolor = -1 If a color is < 0 this method does not change the corresponding color if positive or null it set the color.; For instance: h->SetColors(kRed, kRed);; kRed@ kRedDefinition Rtypes.h:66; w",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:208879,Modifiability,extend,extendable,208879,"xis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8875 of file TH1.cxx. ◆ SetBinsLength(). virtual void TH1::SetBinsLength ; (; Int_t ; = -1). inlinevirtual . Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 380 of file TH1.h. ◆ SetBuffer(). void TH1::SetBuffer ; (; Int_t ; buffersize, . Option_t * ; option = """" . ). virtual . Set the maximum number of entries to be kept in the buffer. ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8458 of file TH1.cxx. ◆ SetCanExtend(). UInt_t TH1::SetCanExtend ; (; UInt_t ; extendBitMask). virtual . Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ; Definition at line 6649 of file TH1.cxx. ◆ SetCellContent(). virtual void TH1::SetCellContent ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; content . ). inlinevirtual . Definition at line 439 of file TH1.h. ◆ SetCellError(). virtual void TH1::SetCellError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; content . ). inlinevirtual . Definition at line 441 of file TH1.h. ◆ SetColors(). void TH1::SetColors ; (; Color_t ; linecolor = -1, . Color_t ; markercolor = -1, . Color_t ; fillcolor = -1 . ). virtual . Shortcut to set the three histogram colors with a single call. ; By default: linecolor = markercolor = fillcolor = -1 If a color is < 0 this method does not change the corresponding color if positive or null it set the color.; For instance: h->SetColors(kRed, kRed);; kRed@ kRedDefinition Rtypes.h:66; will set the line color and the marker color to red. ; Definition at line 4467 of file TH1.cxx. ◆ SetContent().",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:208896,Modifiability,extend,extendable,208896,"xis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8875 of file TH1.cxx. ◆ SetBinsLength(). virtual void TH1::SetBinsLength ; (; Int_t ; = -1). inlinevirtual . Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 380 of file TH1.h. ◆ SetBuffer(). void TH1::SetBuffer ; (; Int_t ; buffersize, . Option_t * ; option = """" . ). virtual . Set the maximum number of entries to be kept in the buffer. ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8458 of file TH1.cxx. ◆ SetCanExtend(). UInt_t TH1::SetCanExtend ; (; UInt_t ; extendBitMask). virtual . Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ; Definition at line 6649 of file TH1.cxx. ◆ SetCellContent(). virtual void TH1::SetCellContent ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; content . ). inlinevirtual . Definition at line 439 of file TH1.h. ◆ SetCellError(). virtual void TH1::SetCellError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; content . ). inlinevirtual . Definition at line 441 of file TH1.h. ◆ SetColors(). void TH1::SetColors ; (; Color_t ; linecolor = -1, . Color_t ; markercolor = -1, . Color_t ; fillcolor = -1 . ). virtual . Shortcut to set the three histogram colors with a single call. ; By default: linecolor = markercolor = fillcolor = -1 If a color is < 0 this method does not change the corresponding color if positive or null it set the color.; For instance: h->SetColors(kRed, kRed);; kRed@ kRedDefinition Rtypes.h:66; will set the line color and the marker color to red. ; Definition at line 4467 of file TH1.cxx. ◆ SetContent().",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:208989,Modifiability,extend,extendable,208989,"xis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8875 of file TH1.cxx. ◆ SetBinsLength(). virtual void TH1::SetBinsLength ; (; Int_t ; = -1). inlinevirtual . Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 380 of file TH1.h. ◆ SetBuffer(). void TH1::SetBuffer ; (; Int_t ; buffersize, . Option_t * ; option = """" . ). virtual . Set the maximum number of entries to be kept in the buffer. ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8458 of file TH1.cxx. ◆ SetCanExtend(). UInt_t TH1::SetCanExtend ; (; UInt_t ; extendBitMask). virtual . Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ; Definition at line 6649 of file TH1.cxx. ◆ SetCellContent(). virtual void TH1::SetCellContent ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; content . ). inlinevirtual . Definition at line 439 of file TH1.h. ◆ SetCellError(). virtual void TH1::SetCellError ; (; Int_t ; binx, . Int_t ; biny, . Double_t ; content . ). inlinevirtual . Definition at line 441 of file TH1.h. ◆ SetColors(). void TH1::SetColors ; (; Color_t ; linecolor = -1, . Color_t ; markercolor = -1, . Color_t ; fillcolor = -1 . ). virtual . Shortcut to set the three histogram colors with a single call. ; By default: linecolor = markercolor = fillcolor = -1 If a color is < 0 this method does not change the corresponding color if positive or null it set the color.; For instance: h->SetColors(kRed, kRed);; kRed@ kRedDefinition Rtypes.h:66; will set the line color and the marker color to red. ; Definition at line 4467 of file TH1.cxx. ◆ SetContent().",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:114869,Performance,perform,performance,114869,"he imaginary part of the output; ""MAG""- returns a histogram of the magnitude of the output; ""PH"" - returns a histogram of the phase of the output. option of transform type; ""R2C"" - real to complex transforms - default; ""R2HC"" - real to halfcomplex (special format of storing output data, results the same as for R2C); ""DHT"" - discrete Hartley transform real to real transforms (sine and cosine):; ""R2R_0"", ""R2R_1"", ""R2R_2"", ""R2R_3"" - discrete cosine transforms of types I-IV; ""R2R_4"", ""R2R_5"", ""R2R_6"", ""R2R_7"" - discrete sine transforms of types I-IV To specify the type of each dimension of a 2-dimensional real to real transform, use options of form ""R2R_XX"", for example, ""R2R_02"" for a transform, which is of type ""R2R_0"" in 1st dimension and ""R2R_2"" in the 2nd. option of transform flag; ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal performance; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (from ""exhaustive"") - the most optimal way is found This option should be chosen depending on how many transforms of the same size and type are going to be done. Planning is only done once, for the first transform of this size and type. Default is ""ES"". Examples of valid options: ""Mag R2C M"" ""Re R2R_11"" ""Im R2C ES"" ""PH R2HC EX"" ; Reimplemented in TH2Poly.; Definition at line 3284 of file TH1.cxx. ◆ Fill() [1/3]. Int_t TH1::Fill ; (; const char * ; namex, . Double_t ; w . ). virtual . Increment bin with namex with a weight w. ; if x is less than the low-edge of the first bin, the Underflow bin is incremented if x is equal to or greater than the upper edge of last bin, the Overflow bin is incremented; If the weight is not equal to 1, the storage of the sum of squares of weights is automatically triggered and the sum of the squares of weights is incremented by \( w^2 \) in the bin corresponding to x.; The function ret",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:128892,Performance,multi-thread,multi-thread,128892,"am with the function after fitting. . ""0"" Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions. . ""R"" Fit using a fitting range specified in the function range with TF1::SetRange. . ""B"" Use this option when you want to fix or set limits on one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used. . ""C"" In case of linear fitting, do no calculate the chisquare (saves CPU time). . ""G"" Uses the gradient implemented in TF1::GradientPar for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function. . ""WIDTH"" Scales the histogran bin content by the bin width (useful for variable bins histograms) . ""SERIAL"" Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique . ""MULTITHREAD"" Forces usage of multi-thread execution whenever possible . The default fitting of an histogram (when no option is given) is perfomed as following:; a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; the full range of the histogram is used;; the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; for linear functions (polN, chenbyshev or formula expressions combined using operator ++) a linear minimization is used.; only the status of the fit is returned;; the fit is performed in Multithread whenever is enabled in ROOT;; only the last fitted function is saved in the histogram;; the histogram is drawn after fitting overalyed with the resulting fitting function. Minimizer Configuration; The Fit is perfomed using the default Minimizer, defined ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:128998,Performance,multi-thread,multi-thread,128998,"ontrast to option ""N"", it stores the fitted function in the histogram list of functions. . ""R"" Fit using a fitting range specified in the function range with TF1::SetRange. . ""B"" Use this option when you want to fix or set limits on one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits will be used. . ""C"" In case of linear fitting, do no calculate the chisquare (saves CPU time). . ""G"" Uses the gradient implemented in TF1::GradientPar for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function. . ""WIDTH"" Scales the histogran bin content by the bin width (useful for variable bins histograms) . ""SERIAL"" Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique . ""MULTITHREAD"" Forces usage of multi-thread execution whenever possible . The default fitting of an histogram (when no option is given) is perfomed as following:; a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; the full range of the histogram is used;; the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; for linear functions (polN, chenbyshev or formula expressions combined using operator ++) a linear minimization is used.; only the status of the fit is returned;; the fit is performed in Multithread whenever is enabled in ROOT;; only the last fitted function is saved in the histogram;; the histogram is drawn after fitting overalyed with the resulting fitting function. Minimizer Configuration; The Fit is perfomed using the default Minimizer, defined in the ROOT::Math::MinimizerOptions class. It is possible to change the default minimizer and its configuration param",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:129608,Performance,perform,performed,129608,"""WIDTH"" Scales the histogran bin content by the bin width (useful for variable bins histograms) . ""SERIAL"" Runs in serial mode. By defult if ROOT is built with MT support and MT is enables, the fit is perfomed in multi-thread - ""E"" Perform better Errors estimation using Minos technique . ""MULTITHREAD"" Forces usage of multi-thread execution whenever possible . The default fitting of an histogram (when no option is given) is perfomed as following:; a chi-square fit (see below Chi-square Fits) computed using the bin histogram errors and excluding bins with zero errors (empty bins);; the full range of the histogram is used;; the default Minimizer with its default configuration is used (see below Minimizer Configuration) except for linear function;; for linear functions (polN, chenbyshev or formula expressions combined using operator ++) a linear minimization is used.; only the status of the fit is returned;; the fit is performed in Multithread whenever is enabled in ROOT;; only the last fitted function is saved in the histogram;; the histogram is drawn after fitting overalyed with the resulting fitting function. Minimizer Configuration; The Fit is perfomed using the default Minimizer, defined in the ROOT::Math::MinimizerOptions class. It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling TH1::Fit):; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm) for changing the minmizer and/or the corresponding algorithm. For example ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS""); will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization The current defaults are (""Minuit"",""Migrad""). See the documentation of the ROOT::Math::MinimizerOptions for the available minimizers in ROOT and their corresponding algorithms.; ROOT::Math::MinimizerOptions::SetDefaultTolerance for setting a different tolerance value for the mi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:131227,Performance,perform,performed,131227,"corresponding algorithm. For example ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS""); will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization The current defaults are (""Minuit"",""Migrad""). See the documentation of the ROOT::Math::MinimizerOptions for the available minimizers in ROOT and their corresponding algorithms.; ROOT::Math::MinimizerOptions::SetDefaultTolerance for setting a different tolerance value for the minimization.; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls for setting the maximum number of function calls.; ROOT::Math::MinimizerOptions::SetDefaultPrintLevel for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing. Other options are possible depending on the Minimizer used, see the corresponding documentation. The default minimizer can be also set in the resource file in etc/system.rootrc. For example; Root.Fitter: Minuit2. Chi-square Fits; By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method is used where the residual for each bin is computed using as error the observed value (the bin error) returned by TH1::GetBinError. \[; Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; \]. where y(i) is the bin content for each bin i, x(i) is the bin center and e(i) is the bin error (sqrt(y(i) for an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, f(x(i)|p), but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume. When using option P (Pearson chi2), the expected error computed as e(i) = sqrt(f(x(i)|p)) is used. In this case empty bins are considered in the fit. Both chi-square methods should not be used when the bin content represent counts, especially in case of low bi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:133730,Performance,perform,perform,133730,"ikelihood described in this paper: S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,” Nucl. Instrum. Meth. 221 (1984) 437. \[; NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; \]. By using this formulation, 2*NLL can be interpreted as the chi-square resulting from the fit.; This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ). The likelihood method has the advantage of treating correctly bins with low statistics. In case of high statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit give the same result.; The likelihood method, although a bit slower, it is therefore the recommended method, when the histogram represent counts (Poisson statistics), where the chi-square methods may give incorrect results, especially in case of low statistics. In case of a weighted histogram, it is possible to perform also a likelihood fit by using the option ""WL"". Note a weighted histogram is a histogram which has been filled with weights and it has the information on the sum of the weight square for each bin ( TH1::Sumw2() has been called). The bin error for a weighted histogram is the square root of the sum of the weight square. Fit Result; The function returns a TFitResultPtr which can hold a pointer to a TFitResult object. By default the TFitResultPtr contains only the status of the fit which is return by an automatic conversion of the TFitResultPtr to an integer. One can write in this case directly:; Int_t fitStatus = h->Fit(myFunc);; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; If the option ""S"" is instead used, TFitResultPtr behaves as a smart pointer to the TFitResult object. This is useful for retrieving the full result information from the fit, such as the covariance matrix, as shown in this example code:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCova",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:136726,Performance,perform,performed,136726,"fitted function myfunc, one can retrieve the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter; Associated functions; One or more object ( can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to the histogram list of functions (fFunctions). If the histogram is made persistent, the list of associated functions is also persistent. Given a histogram h, one can retrieve an associated function with:; TF1 *myfunc = h->GetFunction(""myfunc"");; or by quering directly the list obtained by calling TH1::GetListOfFunctions. Fit status; The status of the fit is obtained converting the TFitResultPtr to an integer independently if the fit option ""S"" is used or not:; TFitResultPtr r = h->Fit(myFunc,opt);; Int_t fitStatus = r;. status = 0 : the fit has been performed successfully (i.e no error occurred).; status < 0 : there is an error not connected with the minimization procedure, for example when a wrong function is used.; status > 0 : return status from Minimizer, depends on used Minimizer. For example for TMinuit and Minuit2 we have:; status = migradStatus + 10*minosStatus + 100*hesseStatus + 1000*improveStatus. TMinuit returns 0 (for migrad, minos, hesse or improve) in case of success and 4 in case of error (see the documentation of TMinuit::mnexcm). For example, for an error only in Minos but not in Migrad a fitStatus of 40 will be returned. Minuit2 returns 0 in case of success and different values in migrad,minos or hesse depending on the error. See in this case the documentation of Minuit2Minimizer::Minimize for the migrad return status, Minuit2Minimizer::GetMinosError for the minos return status and Minuit2Minimizer::Hesse for the hesse return status. If other minimizers are used see their specific documentation for the status ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:164349,Performance,cache,cached,164349,"a stored in the histogram, call TH1::ResetStats. See TH1::GetStats. ; Definition at line 7575 of file TH1.cxx. ◆ GetMinimum(). Double_t TH1::GetMinimum ; (; Double_t ; minval = -FLT_MAX); const. virtual . Return minimum value larger than minval of bins in the range, unless the value has been overridden by TH1::SetMinimum, in which case it returns that value. ; This happens, for example, when the histogram is drawn and the y or z axis limits are changed; To get the minimum value of bins in the histogram regardless of whether the value has been overridden (using TH1::SetMinimum), use; h->GetBinContent(h->GetMinimumBin()); TH1::GetMinimumBin can be used to get the location of the minimum value. ; Reimplemented in TH2Poly.; Definition at line 8635 of file TH1.cxx. ◆ GetMinimumAndMaximum(). void TH1::GetMinimumAndMaximum ; (; Double_t & ; min, . Double_t & ; max . ); const. virtual . Retrieve the minimum and maximum values in the histogram. ; This will not return a cached value and will always search the histogram for the min and max values. The user can condition whether or not to call this with the GetMinimumStored() and GetMaximumStored() methods. If the cache is empty, then the value will be -1111. Users can then use the SetMinimum() or SetMaximum() methods to cache the results. For example, the following recipe will make efficient use of this method and the cached minimum and maximum values. Double_t currentMin = pHist->GetMinimumStored();; Double_t currentMax = pHist->GetMaximumStored();; if ((currentMin == -1111) || (currentMax == -1111)) {; pHist->GetMinimumAndMaximum(currentMin, currentMax);; pHist->SetMinimum(currentMin);; pHist->SetMaximum(currentMax);; }; Parameters. minreference to variable that will hold found minimum value ; maxreference to variable that will hold found maximum value . Definition at line 8731 of file TH1.cxx. ◆ GetMinimumBin() [1/2]. Int_t TH1::GetMinimumBin ; (; ); const. virtual . Return location of bin with minimum value in the range. ; ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:164545,Performance,cache,cache,164545,"onst. virtual . Return minimum value larger than minval of bins in the range, unless the value has been overridden by TH1::SetMinimum, in which case it returns that value. ; This happens, for example, when the histogram is drawn and the y or z axis limits are changed; To get the minimum value of bins in the histogram regardless of whether the value has been overridden (using TH1::SetMinimum), use; h->GetBinContent(h->GetMinimumBin()); TH1::GetMinimumBin can be used to get the location of the minimum value. ; Reimplemented in TH2Poly.; Definition at line 8635 of file TH1.cxx. ◆ GetMinimumAndMaximum(). void TH1::GetMinimumAndMaximum ; (; Double_t & ; min, . Double_t & ; max . ); const. virtual . Retrieve the minimum and maximum values in the histogram. ; This will not return a cached value and will always search the histogram for the min and max values. The user can condition whether or not to call this with the GetMinimumStored() and GetMaximumStored() methods. If the cache is empty, then the value will be -1111. Users can then use the SetMinimum() or SetMaximum() methods to cache the results. For example, the following recipe will make efficient use of this method and the cached minimum and maximum values. Double_t currentMin = pHist->GetMinimumStored();; Double_t currentMax = pHist->GetMaximumStored();; if ((currentMin == -1111) || (currentMax == -1111)) {; pHist->GetMinimumAndMaximum(currentMin, currentMax);; pHist->SetMinimum(currentMin);; pHist->SetMaximum(currentMax);; }; Parameters. minreference to variable that will hold found minimum value ; maxreference to variable that will hold found maximum value . Definition at line 8731 of file TH1.cxx. ◆ GetMinimumBin() [1/2]. Int_t TH1::GetMinimumBin ; (; ); const. virtual . Return location of bin with minimum value in the range. ; Definition at line 8665 of file TH1.cxx. ◆ GetMinimumBin() [2/2]. Int_t TH1::GetMinimumBin ; (; Int_t & ; locmix, . Int_t & ; locmiy, . Int_t & ; locmiz . ); const. virtual . Return locatio",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:164654,Performance,cache,cache,164654,"he range, unless the value has been overridden by TH1::SetMinimum, in which case it returns that value. ; This happens, for example, when the histogram is drawn and the y or z axis limits are changed; To get the minimum value of bins in the histogram regardless of whether the value has been overridden (using TH1::SetMinimum), use; h->GetBinContent(h->GetMinimumBin()); TH1::GetMinimumBin can be used to get the location of the minimum value. ; Reimplemented in TH2Poly.; Definition at line 8635 of file TH1.cxx. ◆ GetMinimumAndMaximum(). void TH1::GetMinimumAndMaximum ; (; Double_t & ; min, . Double_t & ; max . ); const. virtual . Retrieve the minimum and maximum values in the histogram. ; This will not return a cached value and will always search the histogram for the min and max values. The user can condition whether or not to call this with the GetMinimumStored() and GetMaximumStored() methods. If the cache is empty, then the value will be -1111. Users can then use the SetMinimum() or SetMaximum() methods to cache the results. For example, the following recipe will make efficient use of this method and the cached minimum and maximum values. Double_t currentMin = pHist->GetMinimumStored();; Double_t currentMax = pHist->GetMaximumStored();; if ((currentMin == -1111) || (currentMax == -1111)) {; pHist->GetMinimumAndMaximum(currentMin, currentMax);; pHist->SetMinimum(currentMin);; pHist->SetMaximum(currentMax);; }; Parameters. minreference to variable that will hold found minimum value ; maxreference to variable that will hold found maximum value . Definition at line 8731 of file TH1.cxx. ◆ GetMinimumBin() [1/2]. Int_t TH1::GetMinimumBin ; (; ); const. virtual . Return location of bin with minimum value in the range. ; Definition at line 8665 of file TH1.cxx. ◆ GetMinimumBin() [2/2]. Int_t TH1::GetMinimumBin ; (; Int_t & ; locmix, . Int_t & ; locmiy, . Int_t & ; locmiz . ); const. virtual . Return location of bin with minimum value in the range. ; Definition at line 8674",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:164754,Performance,cache,cached,164754,"lue. ; This happens, for example, when the histogram is drawn and the y or z axis limits are changed; To get the minimum value of bins in the histogram regardless of whether the value has been overridden (using TH1::SetMinimum), use; h->GetBinContent(h->GetMinimumBin()); TH1::GetMinimumBin can be used to get the location of the minimum value. ; Reimplemented in TH2Poly.; Definition at line 8635 of file TH1.cxx. ◆ GetMinimumAndMaximum(). void TH1::GetMinimumAndMaximum ; (; Double_t & ; min, . Double_t & ; max . ); const. virtual . Retrieve the minimum and maximum values in the histogram. ; This will not return a cached value and will always search the histogram for the min and max values. The user can condition whether or not to call this with the GetMinimumStored() and GetMaximumStored() methods. If the cache is empty, then the value will be -1111. Users can then use the SetMinimum() or SetMaximum() methods to cache the results. For example, the following recipe will make efficient use of this method and the cached minimum and maximum values. Double_t currentMin = pHist->GetMinimumStored();; Double_t currentMax = pHist->GetMaximumStored();; if ((currentMin == -1111) || (currentMax == -1111)) {; pHist->GetMinimumAndMaximum(currentMin, currentMax);; pHist->SetMinimum(currentMin);; pHist->SetMaximum(currentMax);; }; Parameters. minreference to variable that will hold found minimum value ; maxreference to variable that will hold found maximum value . Definition at line 8731 of file TH1.cxx. ◆ GetMinimumBin() [1/2]. Int_t TH1::GetMinimumBin ; (; ); const. virtual . Return location of bin with minimum value in the range. ; Definition at line 8665 of file TH1.cxx. ◆ GetMinimumBin() [2/2]. Int_t TH1::GetMinimumBin ; (; Int_t & ; locmix, . Int_t & ; locmiy, . Int_t & ; locmiz . ); const. virtual . Return location of bin with minimum value in the range. ; Definition at line 8674 of file TH1.cxx. ◆ GetMinimumStored(). virtual Double_t TH1::GetMinimumStored ; (; ); const. inlin",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:188228,Performance,perform,performed,188228,"labeled"" bins present between ""labeled"" bins they will not be removed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5245 of file TH1.cxx. ◆ LabelsInflate(). void TH1::LabelsInflate ; (; Option_t * ; ax = ""X""). virtual . Double the number of bins for axis. ; Refill histogram. This function is called by TAxis::FindBin(const char *label) ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5315 of file TH1.cxx. ◆ LabelsOption(). void TH1::LabelsOption ; (; Option_t * ; option = ""h"", . Option_t * ; ax = ""X"" . ). virtual . Sort bins with labels or set option(s) to draw axis with labels. ; Parameters. [in]option; ""a"" sort by alphabetic order; "">"" sort by decreasing values; ""<"" sort by increasing values; ""h"" draw labels horizontal; ""v"" draw labels vertical; ""u"" draw labels up (end of label right adjusted); ""d"" draw labels down (start of label left adjusted). In case not all bins have labels sorting will work only in the case the first n consecutive bins have all labels and sorting will be performed on those label bins.; Parameters. [in]axaxis . Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5382 of file TH1.cxx. ◆ LoggedInconsistency(). int TH1::LoggedInconsistency ; (; const char * ; name, . const TH1 * ; h1, . const TH1 * ; h2, . bool ; useMerge = false . ); const. protected . Definition at line 883 of file TH1.cxx. ◆ Merge() [1/2]. virtual Long64_t TH1::Merge ; (; TCollection * ; list). inlinevirtual . Reimplemented in TH2Poly, TProfile2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 345 of file TH1.h. ◆ Merge() [2/2]. Long64_t TH1::Merge ; (; TCollection * ; li, . Option_t * ; opt . ). Add all histograms in the collection to this histogram. ; This function computes the min/max for the x axis, compute a new number of bins, if necessary, add bin contents, errors and statistics. If all histograms have bin labels, bins with identical labels will be merged, no matter what thei",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:189543,Performance,perform,perform,189543,"1 * ; h2, . bool ; useMerge = false . ); const. protected . Definition at line 883 of file TH1.cxx. ◆ Merge() [1/2]. virtual Long64_t TH1::Merge ; (; TCollection * ; list). inlinevirtual . Reimplemented in TH2Poly, TProfile2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 345 of file TH1.h. ◆ Merge() [2/2]. Long64_t TH1::Merge ; (; TCollection * ; li, . Option_t * ; opt . ). Add all histograms in the collection to this histogram. ; This function computes the min/max for the x axis, compute a new number of bins, if necessary, add bin contents, errors and statistics. If all histograms have bin labels, bins with identical labels will be merged, no matter what their order is. If overflows are present and limits are different the function will fail. The function returns the total number of entries in the result histogram if the merge is successful, -1 otherwise.; Possible option: -NOL : the merger will ignore the labels and merge the histograms bin by bin using bin center values to match bins -NOCHECK: the histogram will not perform a check for duplicate labels in case of axes with labels. The check (enabled by default) slows down the merging; IMPORTANT remark. The axis x may have different number of bins and different limits, BUT the largest bin width must be a multiple of the smallest bin width and the upper limit must also be a multiple of the bin width. Example:; void atest() {; TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; TH1F *h3 = new TH1F(""h3"",""h3"",330,-55,55);; TRandom r;; for (Int_t i=0;i<10000;i++) {; h1->Fill(r.Gaus(-55,10));; h2->Fill(r.Gaus(55,10));; h3->Fill(r.Gaus(0,10));; }; ; TList *list = new TList;; list->Add(h1);; list->Add(h2);; list->Add(h3);; TH1F *h = (TH1F*)h1->Clone(""h"");; h->Reset();; h->Merge(list);; h->Draw();; }; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TObject::Drawvirtual void Draw(Option_t *option="""")Default Dr",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:213157,Performance,scalab,scalable,213157,"l void TH1::SetEntries ; (; Double_t ; n). inlinevirtual . Definition at line 391 of file TH1.h. ◆ SetError(). void TH1::SetError ; (; const Double_t * ; error). virtual . Replace bin errors by values in array error. ; Definition at line 8951 of file TH1.cxx. ◆ SetHighlight(). void TH1::SetHighlight ; (; Bool_t ; set = kTRUE). virtual . Set highlight (enable/disable) mode for the histogram by default highlight mode is disable. ; Definition at line 4482 of file TH1.cxx. ◆ SetLabelColor(). void TH1::SetLabelColor ; (; Color_t ; color = 1, . Option_t * ; axis = ""X"" . ). virtual . Set axis labels color. ; axis specifies which axis (""x"",""y"",""z""), default = ""x"" if axis=""xyz"" set all 3 axes ; Definition at line 226 of file Haxis.cxx. ◆ SetLabelFont(). void TH1::SetLabelFont ; (; Style_t ; font = 62, . Option_t * ; axis = ""X"" . ). virtual . Set font number used to draw axis labels. ; font : Text font code = 10*fontnumber + precision Font numbers must be between 1 and 14 precision = 1 fast hardware fonts (steps in the size) precision = 2 scalable and rotatable hardware fonts; The default font number is 62. axis specifies which axis (""x"",""y"",""z""), default = ""x"" if axis=""xyz"" set all 3 axes ; Definition at line 249 of file Haxis.cxx. ◆ SetLabelOffset(). void TH1::SetLabelOffset ; (; Float_t ; offset = 0.005, . Option_t * ; axis = ""X"" . ). virtual . Set offset between axis and axis' labels. ; The offset is expressed as a percent of the pad height. axis specifies which axis (""x"",""y"",""z""), default = ""x"" if axis=""xyz"" set all 3 axes ; Definition at line 267 of file Haxis.cxx. ◆ SetLabelSize(). void TH1::SetLabelSize ; (; Float_t ; size = 0.02, . Option_t * ; axis = ""X"" . ). virtual . Set size of axis' labels. ; The size is expressed as a percent of the pad height. axis specifies which axis (""x"",""y"",""z""), default = ""x"" if axis=""xyz"" set all 3 axes ; Definition at line 285 of file Haxis.cxx. ◆ SetMaximum(). virtual void TH1::SetMaximum ; (; Double_t ; maximum = -1111). inlinevirtual",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:72359,Safety,avoid,avoid,72359,"orkNoStats Don't draw stats box. . kUserContour User specified contour levels. . kLogX X-axis in log scale. . kIsZoomed Bit set when zooming on Y axis. . kNoTitle Don't draw the histogram title. . kIsAverage Bin contents are average (used by Add) . kIsNotW Histogram is forced to be not weighted even when the histogram is filled with weighted. . kAutoBinPTwo different than 1. ; Use Power(2)-based algorithm for autobinning . kIsHighlight bit set if histo is highlight . Definition at line 164 of file TH1.h. Constructor & Destructor Documentation. ◆ TH1() [1/5]. TH1::TH1 ; (; const TH1 & ; ). privatedelete . ◆ TH1() [2/5]. TH1::TH1 ; (; ). protected . Histogram default constructor. ; Definition at line 615 of file TH1.cxx. ◆ TH1() [3/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . Double_t ; xlow, . Double_t ; xup . ). protected . Constructor for fix bin size histograms. ; Creates the main histogram structure.; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz, the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xlowlow edge of first bin ; [in]xupupper edge of last bin (not included in last bin) . Definition at line 697 of file TH1.cxx. ◆ TH1() [4/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . const Float_t * ; xbins . ). protected . Constructor for variable bin size histograms using an input array of type float. ; Creates the main histogram structure.; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type float and size nbins+1 . Definition at line 719 of file T",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:73014,Safety,avoid,avoid,73014," Histogram default constructor. ; Definition at line 615 of file TH1.cxx. ◆ TH1() [3/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . Double_t ; xlow, . Double_t ; xup . ). protected . Constructor for fix bin size histograms. ; Creates the main histogram structure.; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz, the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xlowlow edge of first bin ; [in]xupupper edge of last bin (not included in last bin) . Definition at line 697 of file TH1.cxx. ◆ TH1() [4/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . const Float_t * ; xbins . ). protected . Constructor for variable bin size histograms using an input array of type float. ; Creates the main histogram structure.; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type float and size nbins+1 . Definition at line 719 of file TH1.cxx. ◆ TH1() [5/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . const Double_t * ; xbins . ). protected . Constructor for variable bin size histograms using an input array of type double. ; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type double and size nbins+1 . Definition at line 741 of file TH1.cxx. ◆ ~TH1(). TH1::~TH1 ; (; ). ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:73632,Safety,avoid,avoid,73632,"of last bin (not included in last bin) . Definition at line 697 of file TH1.cxx. ◆ TH1() [4/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . const Float_t * ; xbins . ). protected . Constructor for variable bin size histograms using an input array of type float. ; Creates the main histogram structure.; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type float and size nbins+1 . Definition at line 719 of file TH1.cxx. ◆ TH1() [5/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . const Double_t * ; xbins . ). protected . Constructor for variable bin size histograms using an input array of type double. ; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type double and size nbins+1 . Definition at line 741 of file TH1.cxx. ◆ ~TH1(). TH1::~TH1 ; (; ). override . Histogram default destructor. ; Definition at line 643 of file TH1.cxx. Member Function Documentation. ◆ Add() [1/3]. Bool_t TH1::Add ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1 . ). virtual . Replace contents of this histogram by the addition of h1 and h2. ; this = c1*h1 + c2*h2 if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; Note also that adding histogram with labels is not supported, histogram will be added merging them by bin number indep",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:6721,Security,access,access,6721,"ry associated with this file are automatically deleted. Labelling axes; Axis titles can be specified in the title argument of the constructor. They must be separated by "";"": TH1F* h=new TH1F(""h"", ""Histogram title;X Axis;Y Axis"", 100, 0, 1);; The histogram title and the axis titles can be any TLatex string, and are persisted if a histogram is written to a file.; Any title can be omitted: TH1F* h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; The method SetTitle() has the same syntax: h->SetTitle(""Histogram title;Another X title Axis"");; Alternatively, the title of each axis can be set directly: h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; For bin labels see binning. Binning. Fix or variable bin size; All histogram types support either fix or variable bin sizes. 2-D histograms may have fix size bins along X and variable size bins along Y or vice-versa. The functions to fill, manipulate, draw or access histograms are identical in both cases.; Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis. To access the axis parameters, use: TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; See class TAxis for a description of all the access functions. The axis range is always stored internally in double precision. Convention for numbering bins; For all histogram types: nbins, xlow, xup bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; In case of 2-D or 3-D histograms, a ""global bin"" number is defined. For example, assuming a 3-D histogram with (binx, biny, binz), the function Int_t gbin = h->GetBin(binx, biny, binz);; int; returns a global/lineari",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:6860,Security,access,access,6860,""";"": TH1F* h=new TH1F(""h"", ""Histogram title;X Axis;Y Axis"", 100, 0, 1);; The histogram title and the axis titles can be any TLatex string, and are persisted if a histogram is written to a file.; Any title can be omitted: TH1F* h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; The method SetTitle() has the same syntax: h->SetTitle(""Histogram title;Another X title Axis"");; Alternatively, the title of each axis can be set directly: h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; For bin labels see binning. Binning. Fix or variable bin size; All histogram types support either fix or variable bin sizes. 2-D histograms may have fix size bins along X and variable size bins along Y or vice-versa. The functions to fill, manipulate, draw or access histograms are identical in both cases.; Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis. To access the axis parameters, use: TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; See class TAxis for a description of all the access functions. The axis range is always stored internally in double precision. Convention for numbering bins; For all histogram types: nbins, xlow, xup bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; In case of 2-D or 3-D histograms, a ""global bin"" number is defined. For example, assuming a 3-D histogram with (binx, biny, binz), the function Int_t gbin = h->GetBin(binx, biny, binz);; int; returns a global/linearized gbin number. This global gbin is useful to access the bin content/error information independently of the dimension. Note that to access the information other than bin",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:7198,Security,access,access,7198," h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; The method SetTitle() has the same syntax: h->SetTitle(""Histogram title;Another X title Axis"");; Alternatively, the title of each axis can be set directly: h->GetXaxis()->SetTitle(""X axis title"");; h->GetYaxis()->SetTitle(""Y axis title"");; For bin labels see binning. Binning. Fix or variable bin size; All histogram types support either fix or variable bin sizes. 2-D histograms may have fix size bins along X and variable size bins along Y or vice-versa. The functions to fill, manipulate, draw or access histograms are identical in both cases.; Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis. To access the axis parameters, use: TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; See class TAxis for a description of all the access functions. The axis range is always stored internally in double precision. Convention for numbering bins; For all histogram types: nbins, xlow, xup bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; In case of 2-D or 3-D histograms, a ""global bin"" number is defined. For example, assuming a 3-D histogram with (binx, biny, binz), the function Int_t gbin = h->GetBin(binx, biny, binz);; int; returns a global/linearized gbin number. This global gbin is useful to access the bin content/error information independently of the dimension. Note that to access the information other than bin content and errors one should use the TAxis object directly with e.g.: Double_t xcenter = h3->GetZaxis()->GetBinCenter(27);; double; returns the center along z of bin number 27 (not the global bin) in the 3-D histogram h3. Alphanumeric Bin Labels; By default, a histogram axis is drawn w",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:7769,Security,access,access,7769,"s contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis. To access the axis parameters, use: TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; See class TAxis for a description of all the access functions. The axis range is always stored internally in double precision. Convention for numbering bins; For all histogram types: nbins, xlow, xup bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; In case of 2-D or 3-D histograms, a ""global bin"" number is defined. For example, assuming a 3-D histogram with (binx, biny, binz), the function Int_t gbin = h->GetBin(binx, biny, binz);; int; returns a global/linearized gbin number. This global gbin is useful to access the bin content/error information independently of the dimension. Note that to access the information other than bin content and errors one should use the TAxis object directly with e.g.: Double_t xcenter = h3->GetZaxis()->GetBinCenter(27);; double; returns the center along z of bin number 27 (not the global bin) in the 3-D histogram h3. Alphanumeric Bin Labels; By default, a histogram axis is drawn with its numeric bin labels. One can specify alphanumeric labels instead with:. call TAxis::SetBinLabel(bin, label); This can always be done before or after filling. When the histogram is drawn, bin labels will be automatically drawn. See examples labels1.C and labels2.C; call to a Fill function with one of the arguments being a string, e.g. hist1->Fill(somename, weight);; hist2->Fill(x, somename, weight);; hist2->Fill(somename, y, weight);; hist2->Fill(somenamex, somenamey, weight);; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; See examples hlabels1.C and hlabels2.C; via",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:7855,Security,access,access,7855,"xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc.; TAxisClass to manage histogram axis.Definition TAxis.h:31; TAxis::GetBinCentervirtual Double_t GetBinCenter(Int_t bin) constReturn center of bin.Definition TAxis.cxx:478; See class TAxis for a description of all the access functions. The axis range is always stored internally in double precision. Convention for numbering bins; For all histogram types: nbins, xlow, xup bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin; In case of 2-D or 3-D histograms, a ""global bin"" number is defined. For example, assuming a 3-D histogram with (binx, biny, binz), the function Int_t gbin = h->GetBin(binx, biny, binz);; int; returns a global/linearized gbin number. This global gbin is useful to access the bin content/error information independently of the dimension. Note that to access the information other than bin content and errors one should use the TAxis object directly with e.g.: Double_t xcenter = h3->GetZaxis()->GetBinCenter(27);; double; returns the center along z of bin number 27 (not the global bin) in the 3-D histogram h3. Alphanumeric Bin Labels; By default, a histogram axis is drawn with its numeric bin labels. One can specify alphanumeric labels instead with:. call TAxis::SetBinLabel(bin, label); This can always be done before or after filling. When the histogram is drawn, bin labels will be automatically drawn. See examples labels1.C and labels2.C; call to a Fill function with one of the arguments being a string, e.g. hist1->Fill(somename, weight);; hist2->Fill(x, somename, weight);; hist2->Fill(somename, y, weight);; hist2->Fill(somenamex, somenamey, weight);; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; See examples hlabels1.C and hlabels2.C; via TTree::Draw. see for example cernstaff.C tree.Draw(""Nation::Division"");; where ""Nation"" and ""Division"" are two",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:11958,Security,access,access,11958,"m is typically filled with statements like: h1->Fill(x);; h1->Fill(x, w); //fill with weight; h2->Fill(x, y); h2->Fill(x, y, w); h3->Fill(x, y, z); h3->Fill(x, y, z, w); wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; or via one of the Fill functions accepting names described above. The Fill functions compute the bin number corresponding to the given x, y or z argument and increment this bin by the given weight. The Fill functions return the bin number for 1-D histograms or global bin number for 2-D and 3-D histograms. If TH1::Sumw2 has been called before filling, the sum of squares of weights is also stored. One can also increment directly a bin number via TH1::AddBinContent or replace the existing content via TH1::SetBinContent. Passing an out-of-range bin to TH1::AddBinContent leads to undefined behavior. To access the bin content of a given bin, do: Double_t binContent = h->GetBinContent(bin);; By default, the bin number is computed using the current axis ranges. If the automatic binning option has been set via h->SetCanExtend(TH1::kAllAxes);; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; then, the Fill Function will automatically extend the axis range to accomodate the new value specified in the Fill argument. The method used is to double the bin size until the new value fits in the range, merging bins two by two. This automatic binning options is extensively used by the TTree::Draw function when histogramming Tree variables with an unknown range. This automatic binning option is supported for 1-D, 2-D and 3-D histograms.; During filling, some statistics parameters are incremented to compute the mean value and Root Mean Square with the maximum precision.; In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S a check is made that the bin contents do not exceed the maximum positive capacity (127 or 32767). Histograms of all types may have positive or/and n",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:49400,Security,hash,hash,49400,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:134754,Security,access,access,134754,"Sumw2() has been called). The bin error for a weighted histogram is the square root of the sum of the weight square. Fit Result; The function returns a TFitResultPtr which can hold a pointer to a TFitResult object. By default the TFitResultPtr contains only the status of the fit which is return by an automatic conversion of the TFitResultPtr to an integer. One can write in this case directly:; Int_t fitStatus = h->Fit(myFunc);; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; If the option ""S"" is instead used, TFitResultPtr behaves as a smart pointer to the TFitResult object. This is useful for retrieving the full result information from the fit, such as the covariance matrix, as shown in this example code:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TMatrixTSym< Double_t >; The fit parameters, error and chi-square (but not covariance matrix) can be retrieved also directly from the fitted function that is passed to this call. Given a pointer to an associated fitted function myfunc, one can retrieve the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfun",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:147574,Security,access,access,147574,"evirtual . Definition at line 257 of file TH1.h. ◆ GetBin(). Int_t TH1::GetBin ; (; Int_t ; binx, . Int_t ; biny = 0, . Int_t ; binz = 0 . ); const. virtual . Return Global bin number corresponding to binx,y,z. ; 2-D and 3-D histograms are represented with a one dimensional structure. This has the advantage that all existing functions, such as GetBinContent, GetBinError, GetBinFunction work for all dimensions.; In case of a TH1x, returns binx directly. see TH1::GetBinXYZ for the inverse transformation.; Convention for numbering bins; For all histogram types: nbins, xlow, xup. bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin. In case of 2-D or 3-D histograms, a ""global bin"" number is defined. For example, assuming a 3-D histogram with binx,biny,binz, the function; Int_t bin = h->GetBin(binx,biny,binz);; returns a global/linearized bin number. This global bin is useful to access the bin information independently of the dimension. ; Reimplemented in TH3, and TH2.; Definition at line 4961 of file TH1.cxx. ◆ GetBinCenter(). Double_t TH1::GetBinCenter ; (; Int_t ; bin); const. virtual . Return bin center for 1D histogram. ; Better to use h1.GetXaxis()->GetBinCenter(bin) ; Definition at line 9141 of file TH1.cxx. ◆ GetBinContent() [1/3]. Double_t TH1::GetBinContent ; (; Int_t ; bin); const. virtual . Return content of bin number bin. ; Implemented in TH1C,S,F,D; Convention for numbering bins; For all histogram types: nbins, xlow, xup. bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin. In case of 2-D or 3-D histograms, a ""global bin"" number is defined. For example, assuming a 3-D histogram with binx,biny,binz, the function; Int_t bin = h->GetBin(binx,biny,binz);; returns a global/linearized bin number. This global bin is useful to access the bin information independently o",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:148546,Security,access,access,148546," is useful to access the bin information independently of the dimension. ; Reimplemented in TH3, and TH2.; Definition at line 4961 of file TH1.cxx. ◆ GetBinCenter(). Double_t TH1::GetBinCenter ; (; Int_t ; bin); const. virtual . Return bin center for 1D histogram. ; Better to use h1.GetXaxis()->GetBinCenter(bin) ; Definition at line 9141 of file TH1.cxx. ◆ GetBinContent() [1/3]. Double_t TH1::GetBinContent ; (; Int_t ; bin); const. virtual . Return content of bin number bin. ; Implemented in TH1C,S,F,D; Convention for numbering bins; For all histogram types: nbins, xlow, xup. bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin. In case of 2-D or 3-D histograms, a ""global bin"" number is defined. For example, assuming a 3-D histogram with binx,biny,binz, the function; Int_t bin = h->GetBin(binx,biny,binz);; returns a global/linearized bin number. This global bin is useful to access the bin information independently of the dimension. ; Reimplemented in TH2, TH3, TH1K, TH2Poly, TProfile, TProfile2D, TProfile2Poly, TProfile2Poly, and TProfile3D.; Definition at line 5061 of file TH1.cxx. ◆ GetBinContent() [2/3]. virtual Double_t TH1::GetBinContent ; (; Int_t ; bin, . Int_t ;  . ); const. inlinevirtual . Reimplemented in TH2, TH3, TH1K, TProfile, TH2, TProfile2D, TH2Poly, TProfile2Poly, and TProfile3D.; Definition at line 266 of file TH1.h. ◆ GetBinContent() [3/3]. virtual Double_t TH1::GetBinContent ; (; Int_t ; bin, . Int_t ; , . Int_t ;  . ); const. inlinevirtual . Reimplemented in TH2, TH3, TH1K, TProfile, TH3, TProfile3D, TH2, TProfile2D, TH2Poly, and TProfile2Poly.; Definition at line 267 of file TH1.h. ◆ GetBinError() [1/3]. Double_t TH1::GetBinError ; (; Int_t ; bin); const. virtual . Return value of error associated to bin number bin. ; if the sum of squares of weights has been defined (via Sumw2), this function returns the sqrt(sum of w2). otherwise it returns the ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:185165,Security,access,access,185165,"option as ""X=number"", for example ""X=10000"" for 10000 toys. The function returns the probability. (thanks to Ben Kilminster to submit this procedure). Note that this option ""X"" is much slower. The returned function value is the probability of test (much less than one means NOT compatible); Code adapted by Rene Brun from original HBOOK routine HDIFF; NOTE1 A good description of the Kolmogorov test can be seen at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; NOTE2 see also alternative function TH1::Chi2Test The Kolmogorov test is assumed to give better results than Chi2Test in case of histograms with low statistics.; NOTE3 (Jan Conrad, Fred James) ""The returned value PROB is calculated such that it will be; uniformly distributed between zero and one for compatible histograms,; provided the data are not binned (or the number of bins is very large; compared with the number of events). Users who have access to unbinned; data and wish exact confidence levels should therefore not put their data; into histograms, but should call directly TMath::KolmogorovTest. On; the other hand, since TH1 is a convenient way of collecting data and; saving space, this function has been provided. However, the values of; PROB for binned data will be shifted slightly higher than expected,; depending on the effects of the binning. For example, when comparing two; uniform distributions of 500 events in 100 bins, the values of PROB,; instead of being exactly uniformly distributed between zero and one, have; a mean value of about 0.56. We can apply a useful; rule: As long as the bin width is small compared with any significant; physical effect (for example the experimental resolution) then the binning; cannot have an important effect. Therefore, we believe that for all; practical purposes, the probability value PROB is calculated correctly; provided the user is aware that:. 1. The value of PROB should not be expected to have exactly the correct; distribution for binned data.; 2.",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:20361,Testability,test,test,20361,"e. Because TH1 derives from TNamed, the key identifier on the file is the histogram name: TFile f(""histos.root"", ""new"");; TH1F h1(""hgaus"", ""histo from a gaussian"", 100, -3, 3);; h1.FillRandom(""gaus"", 10000);; h1->Write();; f#define f(i)Definition RSha256.hxx:104; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; To read this histogram in another Root session, do: TFile f(""histos.root"");; TH1F *h = (TH1F*)f.Get(""hgaus"");; One can save all histograms in memory to the file by: file->Write();. Miscellaneous operations; TH1::KolmogorovTest(): statistical test of compatibility in shape; between two histograms; TH1::Smooth() smooths the bin contents of a 1-d histogram; TH1::Integral() returns the integral of bin contents in a given bin range; TH1::GetMean(int axis) returns the mean value along axis; TH1::GetStdDev(int axis) returns the sigma distribution along axis; TH1::GetEntries() returns the number of entries; TH1::Reset() resets the bin contents and errors of a histogram; d#define d(i)Definition RSha256.hxx:102; a#define a(i)Definition RSha256.hxx:99; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Smoothvirtual void Smooth(Int_t ntimes=1, Option_t *option="""")Smooth bin contents of this histogram.Definition TH1.cxx:6879; TH1::GetStdDevvirtual Double_t GetStdDev(Int_t axis=1) constReturns the Standard Deviation (Sigma).Definition TH1.cxx:7607; TH1::GetMeanvirtual Double_t GetMean(Int_t axis=1) constFor axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis.Definition TH",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:22029,Testability,test,test,22029,"r GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Smoothvirtual void Smooth(Int_t ntimes=1, Option_t *option="""")Smooth bin contents of this histogram.Definition TH1.cxx:6879; TH1::GetStdDevvirtual Double_t GetStdDev(Int_t axis=1) constReturns the Standard Deviation (Sigma).Definition TH1.cxx:7607; TH1::GetMeanvirtual Double_t GetMean(Int_t axis=1) constFor axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis.Definition TH1.cxx:7535; TH1::Resetvirtual void Reset(Option_t *option="""")Reset this histogram: contents, errors, etc.Definition TH1.cxx:7103; TH1::Integralvirtual Double_t Integral(Option_t *option="""") constReturn integral of bin contents.Definition TH1.cxx:7941; TH1::GetEntriesvirtual Double_t GetEntries() constReturn the current number of entries.Definition TH1.cxx:4423; TH1::KolmogorovTestvirtual Double_t KolmogorovTest(const TH1 *h2, Option_t *option="""") constStatistical test of compatibility in shape between this histogram and h2, using Kolmogorov test.Definition TH1.cxx:8178; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; IMPORTANT NOTE: The returned values for GetMean and GetStdDev depend on how the histogram statistics are calculated. By default, if no range has been set, the returned values are the (unbinned) ones calculated at fill time. If a range has been set, however, the values are calculated using the bins in range; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned values are always those of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats. ; Definition at line 59 of file TH1.h. Public Types; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:22108,Testability,test,test,22108,"r GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Smoothvirtual void Smooth(Int_t ntimes=1, Option_t *option="""")Smooth bin contents of this histogram.Definition TH1.cxx:6879; TH1::GetStdDevvirtual Double_t GetStdDev(Int_t axis=1) constReturns the Standard Deviation (Sigma).Definition TH1.cxx:7607; TH1::GetMeanvirtual Double_t GetMean(Int_t axis=1) constFor axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis.Definition TH1.cxx:7535; TH1::Resetvirtual void Reset(Option_t *option="""")Reset this histogram: contents, errors, etc.Definition TH1.cxx:7103; TH1::Integralvirtual Double_t Integral(Option_t *option="""") constReturn integral of bin contents.Definition TH1.cxx:7941; TH1::GetEntriesvirtual Double_t GetEntries() constReturn the current number of entries.Definition TH1.cxx:4423; TH1::KolmogorovTestvirtual Double_t KolmogorovTest(const TH1 *h2, Option_t *option="""") constStatistical test of compatibility in shape between this histogram and h2, using Kolmogorov test.Definition TH1.cxx:8178; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; IMPORTANT NOTE: The returned values for GetMean and GetStdDev depend on how the histogram statistics are calculated. By default, if no range has been set, the returned values are the (unbinned) ones calculated at fill time. If a range has been set, however, the values are calculated using the bins in range; THIS IS TRUE EVEN IF THE RANGE INCLUDES ALL BINS–use TAxis::SetRange(0, 0) to unset the range. To ensure that the returned values are always those of the binned data stored in the histogram, call TH1::ResetStats. See TH1::GetStats. ; Definition at line 59 of file TH1.h. Public Types; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:25269,Testability,test,test,25269,"erenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual void AddBinContent (Int_t bin);  Increment bin content by 1. ;  ; virtual void AddBinContent (Int_t bin, Double_t w);  Increment bin content by a weight w. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisqua",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:25390,Testability,test,test,25390,"c Member Functions;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual void AddBinContent (Int_t bin);  Increment bin content by 1. ;  ; virtual void AddBinContent (Int_t bin, Double_t w);  Increment bin content by a weight w. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:25488,Testability,test,test,25488,"c Member Functions;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual void AddBinContent (Int_t bin);  Increment bin content by 1. ;  ; virtual void AddBinContent (Int_t bin, Double_t w);  Increment bin content by a weight w. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:25867,Testability,test,test,25867,"ion_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual void AddBinContent (Int_t bin);  Increment bin content by 1. ;  ; virtual void AddBinContent (Int_t bin, Double_t w);  Increment bin content by a weight w. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeInte",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:26107,Testability,test,test,26107,"ncrement bin content by 1. ;  ; virtual void AddBinContent (Int_t bin, Double_t w);  Increment bin content by a weight w. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:39807,Testability,test,test,39807,"inx2]. ;  ; virtual Double_t Integral (Option_t *option="""") const;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2] and its error. ;  ; virtual Double_t Interpolate (Double_t x) const;  Given a point x, approximates the value via linear interpolation based on the two nearest bin centers. ;  ; virtual Double_t Interpolate (Double_t x, Double_t y) const;  2d Interpolation. Not yet implemented. ;  ; virtual Double_t Interpolate (Double_t x, Double_t y, Double_t z) const;  3d Interpolation. Not yet implemented. ;  ; TClass * IsA () const override;  ; Bool_t IsBinOverflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is overflow. ;  ; Bool_t IsBinUnderflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is underflow. ;  ; virtual Bool_t IsHighlight () const;  ; virtual Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using Kolmogorov test. ;  ; virtual void LabelsDeflate (Option_t *axis=""X"");  Reduce the number of bins for the axis passed in the option to the number of bins having a label. ;  ; virtual void LabelsInflate (Option_t *axis=""X"");  Double the number of bins for axis. ;  ; virtual void LabelsOption (Option_t *option=""h"", Option_t *axis=""X"");  Sort bins with labels or set option(s) to draw axis with labels. ;  ; virtual Long64_t Merge (TCollection *list);  ; Long64_t Merge (TCollection *list, Option_t *option);  Add all histograms in the collection to this histogram. ;  ; virtual Bool_t Multiply (const TH1 *h1);  Multiply this histogram by h1. ;  ; virtual Bool_t Multiply (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2. ;  ; virtual Bool_t Multiply (TF1 *f1, Double_t c1=1);  Performs the operation: ;  ; ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:39886,Testability,test,test,39886,"inx2]. ;  ; virtual Double_t Integral (Option_t *option="""") const;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2] and its error. ;  ; virtual Double_t Interpolate (Double_t x) const;  Given a point x, approximates the value via linear interpolation based on the two nearest bin centers. ;  ; virtual Double_t Interpolate (Double_t x, Double_t y) const;  2d Interpolation. Not yet implemented. ;  ; virtual Double_t Interpolate (Double_t x, Double_t y, Double_t z) const;  3d Interpolation. Not yet implemented. ;  ; TClass * IsA () const override;  ; Bool_t IsBinOverflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is overflow. ;  ; Bool_t IsBinUnderflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is underflow. ;  ; virtual Bool_t IsHighlight () const;  ; virtual Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using Kolmogorov test. ;  ; virtual void LabelsDeflate (Option_t *axis=""X"");  Reduce the number of bins for the axis passed in the option to the number of bins having a label. ;  ; virtual void LabelsInflate (Option_t *axis=""X"");  Double the number of bins for axis. ;  ; virtual void LabelsOption (Option_t *option=""h"", Option_t *axis=""X"");  Sort bins with labels or set option(s) to draw axis with labels. ;  ; virtual Long64_t Merge (TCollection *list);  ; Long64_t Merge (TCollection *list, Option_t *option);  Add all histograms in the collection to this histogram. ;  ; virtual Bool_t Multiply (const TH1 *h1);  Multiply this histogram by h1. ;  ; virtual Bool_t Multiply (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2. ;  ; virtual Bool_t Multiply (TF1 *f1, Double_t c1=1);  Performs the operation: ;  ; ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:71462,Testability,log,log,71462,"s[9] = sumwxz s[10] = sumwyz; s[11] = sumwt s[12] = sumwt2 (11 and 12 used only by TProfile3D) . EnumeratorkNstat Size of statistics data (up to TProfile3D) . Definition at line 183 of file TH1.h. ◆ EBinErrorOpt. enum TH1::EBinErrorOpt. Enumeration specifying type of statistics for bin errors. . EnumeratorkNormal Errors with Normal (Wald) approximation: errorUp=errorLow= sqrt(N) . kPoisson Errors from Poisson interval at 68.3% (1 sigma) . kPoisson2 Errors from Poisson interval at 95% CL (~ 2 sigma) . Definition at line 64 of file TH1.h. ◆ EStatOverflows. enum TH1::EStatOverflows. Enumeration specifying the way to treat statoverflow. . EnumeratorkIgnore Override global flag ignoring the overflows. . kConsider Override global flag considering the overflows. . kNeutral Adapt to the global flag. . Definition at line 80 of file TH1.h. ◆ EStatusBits. enum TH1::EStatusBits. TH1 status bits. . EnumeratorkNoStats Don't draw stats box. . kUserContour User specified contour levels. . kLogX X-axis in log scale. . kIsZoomed Bit set when zooming on Y axis. . kNoTitle Don't draw the histogram title. . kIsAverage Bin contents are average (used by Add) . kIsNotW Histogram is forced to be not weighted even when the histogram is filled with weighted. . kAutoBinPTwo different than 1. ; Use Power(2)-based algorithm for autobinning . kIsHighlight bit set if histo is highlight . Definition at line 164 of file TH1.h. Constructor & Destructor Documentation. ◆ TH1() [1/5]. TH1::TH1 ; (; const TH1 & ; ). privatedelete . ◆ TH1() [2/5]. TH1::TH1 ; (; ). protected . Histogram default constructor. ; Definition at line 615 of file TH1.cxx. ◆ TH1() [3/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . Double_t ; xlow, . Double_t ; xup . ). protected . Constructor for fix bin size histograms. ; Creates the main histogram structure.; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz, t",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:79969,Testability,test,test,79969,", TH2S, TH2I, TH2L, TH2F, TH2D, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, and TH3D.; Definition at line 1277 of file TH1.cxx. ◆ AddDirectory(). void TH1::AddDirectory ; (; Bool_t ; add = kTRUE). static . Sets the flag controlling the automatic add of histograms in memory. ; By default (fAddDirectory = kTRUE), histograms are automatically added to the list of objects in memory. Note that one histogram can be removed from its support directory by calling h->SetDirectory(nullptr) or h->SetDirectory(dir) to add it to the list of objects in the directory dir.; NOTE that this is a static function. To call it, use; TH1::AddDirectory ; Definition at line 1294 of file TH1.cxx. ◆ AddDirectoryStatus(). Bool_t TH1::AddDirectoryStatus ; (; ). static . Static function: cannot be inlined on Windows/NT. ; Definition at line 754 of file TH1.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Double_t & ; advalue . ); const. virtual . Same function as above but returning also the test statistic value. ; Definition at line 8080 of file TH1.cxx. ◆ AndersonDarlingTest() [2/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ; The AD 2 sample test formula are derived from the paper F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. rep",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:80183,Testability,test,test,80183,"efault (fAddDirectory = kTRUE), histograms are automatically added to the list of objects in memory. Note that one histogram can be removed from its support directory by calling h->SetDirectory(nullptr) or h->SetDirectory(dir) to add it to the list of objects in the directory dir.; NOTE that this is a static function. To call it, use; TH1::AddDirectory ; Definition at line 1294 of file TH1.cxx. ◆ AddDirectoryStatus(). Bool_t TH1::AddDirectoryStatus ; (; ). static . Static function: cannot be inlined on Windows/NT. ; Definition at line 754 of file TH1.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Double_t & ; advalue . ); const. virtual . Same function as above but returning also the test statistic value. ; Definition at line 8080 of file TH1.cxx. ◆ AndersonDarlingTest() [2/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ; The AD 2 sample test formula are derived from the paper F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:80281,Testability,test,test,80281,"efault (fAddDirectory = kTRUE), histograms are automatically added to the list of objects in memory. Note that one histogram can be removed from its support directory by calling h->SetDirectory(nullptr) or h->SetDirectory(dir) to add it to the list of objects in the directory dir.; NOTE that this is a static function. To call it, use; TH1::AddDirectory ; Definition at line 1294 of file TH1.cxx. ◆ AddDirectoryStatus(). Bool_t TH1::AddDirectoryStatus ; (; ). static . Static function: cannot be inlined on Windows/NT. ; Definition at line 754 of file TH1.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Double_t & ; advalue . ); const. virtual . Same function as above but returning also the test statistic value. ; Definition at line 8080 of file TH1.cxx. ◆ AndersonDarlingTest() [2/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ; The AD 2 sample test formula are derived from the paper F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:80305,Testability,test,test,80305,"s in memory. Note that one histogram can be removed from its support directory by calling h->SetDirectory(nullptr) or h->SetDirectory(dir) to add it to the list of objects in the directory dir.; NOTE that this is a static function. To call it, use; TH1::AddDirectory ; Definition at line 1294 of file TH1.cxx. ◆ AddDirectoryStatus(). Bool_t TH1::AddDirectoryStatus ; (; ). static . Static function: cannot be inlined on Windows/NT. ; Definition at line 754 of file TH1.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Double_t & ; advalue . ); const. virtual . Same function as above but returning also the test statistic value. ; Definition at line 8080 of file TH1.cxx. ◆ AndersonDarlingTest() [2/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ; The AD 2 sample test formula are derived from the paper F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 a",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:80410,Testability,test,test,80410,"is a static function. To call it, use; TH1::AddDirectory ; Definition at line 1294 of file TH1.cxx. ◆ AddDirectoryStatus(). Bool_t TH1::AddDirectoryStatus ; (; ). static . Static function: cannot be inlined on Windows/NT. ; Definition at line 754 of file TH1.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Double_t & ; advalue . ); const. virtual . Same function as above but returning also the test statistic value. ; Definition at line 8080 of file TH1.cxx. ◆ AndersonDarlingTest() [2/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ; The AD 2 sample test formula are derived from the paper F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded b",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:80816,Testability,test,test,80816,". ; Definition at line 754 of file TH1.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Double_t & ; advalue . ); const. virtual . Same function as above but returning also the test statistic value. ; Definition at line 8080 of file TH1.cxx. ◆ AndersonDarlingTest() [2/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ; The AD 2 sample test formula are derived from the paper F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded by TH2 and TH3.; Return -1 if internal inputs are inconsistent, 0 otherwise. ; Definition at line 1343 of file TH1.cxx. ◆ AutoP2GetBins(). Int_t TH1::AutoP2GetBins ; (; Int_t ; n). inlinestaticprotected . Auxiliary functi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:80888,Testability,test,test,80888," ; advalue . ); const. virtual . Same function as above but returning also the test statistic value. ; Definition at line 8080 of file TH1.cxx. ◆ AndersonDarlingTest() [2/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ; The AD 2 sample test formula are derived from the paper F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded by TH2 and TH3.; Return -1 if internal inputs are inconsistent, 0 otherwise. ; Definition at line 1343 of file TH1.cxx. ◆ AutoP2GetBins(). Int_t TH1::AutoP2GetBins ; (; Int_t ; n). inlinestaticprotected . Auxiliary function to get the next power of 2 integer value larger then n. ; Used by the autobin power of 2 algorithm ; Definition at line 1321 of file TH1.cxx. ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:80905,Testability,test,test,80905," ; advalue . ); const. virtual . Same function as above but returning also the test statistic value. ; Definition at line 8080 of file TH1.cxx. ◆ AndersonDarlingTest() [2/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ; The AD 2 sample test formula are derived from the paper F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded by TH2 and TH3.; Return -1 if internal inputs are inconsistent, 0 otherwise. ; Definition at line 1343 of file TH1.cxx. ◆ AutoP2GetBins(). Int_t TH1::AutoP2GetBins ; (; Int_t ; n). inlinestaticprotected . Auxiliary function to get the next power of 2 integer value larger then n. ; Used by the autobin power of 2 algorithm ; Definition at line 1321 of file TH1.cxx. ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:81050,Testability,test,test,81050," TH1.cxx. ◆ AndersonDarlingTest() [2/2]. Double_t TH1::AndersonDarlingTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ; The AD 2 sample test formula are derived from the paper F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class It is the same formula ( (6) in the paper), and also shown in this preprint; Binned data are considered as un-binned data with identical observation happening in the bin center.; Parameters. [in]h2Pointer to 1D histogram ; [in]optionis a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded by TH2 and TH3.; Return -1 if internal inputs are inconsistent, 0 otherwise. ; Definition at line 1343 of file TH1.cxx. ◆ AutoP2GetBins(). Int_t TH1::AutoP2GetBins ; (; Int_t ; n). inlinestaticprotected . Auxiliary function to get the next power of 2 integer value larger then n. ; Used by the autobin power of 2 algorithm ; Definition at line 1321 of file TH1.cxx. ◆ AutoP2GetPower2(). Double_t TH1::AutoP2GetPower2 ; (; Double_t ; x, . Bool_t ; next = kTRUE . ). inlinestaticprotected . Auxiliary ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:85772,Testability,test,test,85772," Definition at line 1541 of file TH1.cxx. ◆ CheckConsistency(). int TH1::CheckConsistency ; (; const TH1 * ; h1, . const TH1 * ; h2 . ). staticprotected . Check histogram compatibility. ; Definition at line 1677 of file TH1.cxx. ◆ CheckConsistentSubAxes(). bool TH1::CheckConsistentSubAxes ; (; const TAxis * ; a1, . Int_t ; firstBin1, . Int_t ; lastBin1, . const TAxis * ; a2, . Int_t ; firstBin2 = 0, . Int_t ; lastBin2 = 0 . ). staticprotected . Check that two sub axis are the same. ; The limits are defined by first bin and last bin N.B. no check is done in this case for variable bins ; Definition at line 1640 of file TH1.cxx. ◆ CheckEqualAxes(). bool TH1::CheckEqualAxes ; (; const TAxis * ; a1, . const TAxis * ; a2 . ). staticprotected . Check that the axis are the same. ; Definition at line 1611 of file TH1.cxx. ◆ Chi2Test(). Double_t TH1::Chi2Test ; (; const TH1 * ; h2, . Option_t * ; option = ""UU"", . Double_t * ; res = nullptr . ); const. virtual . \( \chi^{2} \) test for comparing weighted and unweighted histograms. ; Compares the histograms' adjusted (normalized) residuals. Function: Returns p-value. Other return values are specified by the 3rd parameter; Parameters. [in]h2the second histogram ; [in]option; ""UU"" = experiment experiment comparison (unweighted-unweighted); ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first histogram should be unweighted; ""WW"" = MC MC comparison (weighted-weighted); ""NORM"" = to be used when one or both of the histograms is scaled but the histogram originally was unweighted; by default underflows and overflows are not included:; ""OF"" = overflows included; ""UF"" = underflows included. ""P"" = print chi2, ndf, p_value, igood; ""CHI2"" = returns chi2 instead of p-value; ""CHI2/NDF"" = returns \( \chi^{2} \)/ndf . [in]resnot empty - computes normalized residuals and returns them in this array. The current implementation is based on the papers \( \chi^{2} \) test for comparison of weighted and unweighted histograms"" in ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:86729,Testability,test,test,86729," comparing weighted and unweighted histograms. ; Compares the histograms' adjusted (normalized) residuals. Function: Returns p-value. Other return values are specified by the 3rd parameter; Parameters. [in]h2the second histogram ; [in]option; ""UU"" = experiment experiment comparison (unweighted-unweighted); ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first histogram should be unweighted; ""WW"" = MC MC comparison (weighted-weighted); ""NORM"" = to be used when one or both of the histograms is scaled but the histogram originally was unweighted; by default underflows and overflows are not included:; ""OF"" = overflows included; ""UF"" = underflows included. ""P"" = print chi2, ndf, p_value, igood; ""CHI2"" = returns chi2 instead of p-value; ""CHI2/NDF"" = returns \( \chi^{2} \)/ndf . [in]resnot empty - computes normalized residuals and returns them in this array. The current implementation is based on the papers \( \chi^{2} \) test for comparison of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123 by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006.; Introduction:; A frequently used technique in data analysis is the comparison of histograms. First suggested by Pearson [1] the \( \chi^{2} \) test of homogeneity is used widely for comparing usual (unweighted) histograms. This paper describes the implementation modified \( \chi^{2} \) tests for comparison of weighted and unweighted histograms and two weighted histograms [2] as well as usual Pearson's \( \chi^{2} \) test for comparison two usual (unweighted) histograms.; Overview:; Comparison of two histograms expect hypotheses that two histograms represent identical distributions. To make a decision p-value should be calculated. The hypotheses of identity is rejected if the p-value is lower then some significance level. Traditionally significance levels 0.1, 0.05 and 0.01 are used. The co",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:87123,Testability,test,test,87123,"ted). Note that the first histogram should be unweighted; ""WW"" = MC MC comparison (weighted-weighted); ""NORM"" = to be used when one or both of the histograms is scaled but the histogram originally was unweighted; by default underflows and overflows are not included:; ""OF"" = overflows included; ""UF"" = underflows included. ""P"" = print chi2, ndf, p_value, igood; ""CHI2"" = returns chi2 instead of p-value; ""CHI2/NDF"" = returns \( \chi^{2} \)/ndf . [in]resnot empty - computes normalized residuals and returns them in this array. The current implementation is based on the papers \( \chi^{2} \) test for comparison of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123 by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006.; Introduction:; A frequently used technique in data analysis is the comparison of histograms. First suggested by Pearson [1] the \( \chi^{2} \) test of homogeneity is used widely for comparing usual (unweighted) histograms. This paper describes the implementation modified \( \chi^{2} \) tests for comparison of weighted and unweighted histograms and two weighted histograms [2] as well as usual Pearson's \( \chi^{2} \) test for comparison two usual (unweighted) histograms.; Overview:; Comparison of two histograms expect hypotheses that two histograms represent identical distributions. To make a decision p-value should be calculated. The hypotheses of identity is rejected if the p-value is lower then some significance level. Traditionally significance levels 0.1, 0.05 and 0.01 are used. The comparison procedure should include an analysis of the residuals which is often helpful in identifying the bins of histograms responsible for a significant overall \( \chi^{2} \) value. Residuals are the difference between bin contents and expected bin contents. Most convenient for analysis are the normalized residuals. If hypotheses of identity are valid t",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:87267,Testability,test,tests,87267,"nally was unweighted; by default underflows and overflows are not included:; ""OF"" = overflows included; ""UF"" = underflows included. ""P"" = print chi2, ndf, p_value, igood; ""CHI2"" = returns chi2 instead of p-value; ""CHI2/NDF"" = returns \( \chi^{2} \)/ndf . [in]resnot empty - computes normalized residuals and returns them in this array. The current implementation is based on the papers \( \chi^{2} \) test for comparison of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123 by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006.; Introduction:; A frequently used technique in data analysis is the comparison of histograms. First suggested by Pearson [1] the \( \chi^{2} \) test of homogeneity is used widely for comparing usual (unweighted) histograms. This paper describes the implementation modified \( \chi^{2} \) tests for comparison of weighted and unweighted histograms and two weighted histograms [2] as well as usual Pearson's \( \chi^{2} \) test for comparison two usual (unweighted) histograms.; Overview:; Comparison of two histograms expect hypotheses that two histograms represent identical distributions. To make a decision p-value should be calculated. The hypotheses of identity is rejected if the p-value is lower then some significance level. Traditionally significance levels 0.1, 0.05 and 0.01 are used. The comparison procedure should include an analysis of the residuals which is often helpful in identifying the bins of histograms responsible for a significant overall \( \chi^{2} \) value. Residuals are the difference between bin contents and expected bin contents. Most convenient for analysis are the normalized residuals. If hypotheses of identity are valid then normalized residuals are approximately independent and identically distributed random variables having N(0,1) distribution. Analysis of residuals expect test of above mentioned properties",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:87400,Testability,test,test,87400,"nally was unweighted; by default underflows and overflows are not included:; ""OF"" = overflows included; ""UF"" = underflows included. ""P"" = print chi2, ndf, p_value, igood; ""CHI2"" = returns chi2 instead of p-value; ""CHI2/NDF"" = returns \( \chi^{2} \)/ndf . [in]resnot empty - computes normalized residuals and returns them in this array. The current implementation is based on the papers \( \chi^{2} \) test for comparison of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123 by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006.; Introduction:; A frequently used technique in data analysis is the comparison of histograms. First suggested by Pearson [1] the \( \chi^{2} \) test of homogeneity is used widely for comparing usual (unweighted) histograms. This paper describes the implementation modified \( \chi^{2} \) tests for comparison of weighted and unweighted histograms and two weighted histograms [2] as well as usual Pearson's \( \chi^{2} \) test for comparison two usual (unweighted) histograms.; Overview:; Comparison of two histograms expect hypotheses that two histograms represent identical distributions. To make a decision p-value should be calculated. The hypotheses of identity is rejected if the p-value is lower then some significance level. Traditionally significance levels 0.1, 0.05 and 0.01 are used. The comparison procedure should include an analysis of the residuals which is often helpful in identifying the bins of histograms responsible for a significant overall \( \chi^{2} \) value. Residuals are the difference between bin contents and expected bin contents. Most convenient for analysis are the normalized residuals. If hypotheses of identity are valid then normalized residuals are approximately independent and identically distributed random variables having N(0,1) distribution. Analysis of residuals expect test of above mentioned properties",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:88294,Testability,test,test,88294," unweighted histograms and two weighted histograms [2] as well as usual Pearson's \( \chi^{2} \) test for comparison two usual (unweighted) histograms.; Overview:; Comparison of two histograms expect hypotheses that two histograms represent identical distributions. To make a decision p-value should be calculated. The hypotheses of identity is rejected if the p-value is lower then some significance level. Traditionally significance levels 0.1, 0.05 and 0.01 are used. The comparison procedure should include an analysis of the residuals which is often helpful in identifying the bins of histograms responsible for a significant overall \( \chi^{2} \) value. Residuals are the difference between bin contents and expected bin contents. Most convenient for analysis are the normalized residuals. If hypotheses of identity are valid then normalized residuals are approximately independent and identically distributed random variables having N(0,1) distribution. Analysis of residuals expect test of above mentioned properties of residuals. Notice that indirectly the analysis of residuals increase the power of \( \chi^{2} \) test.; Methods of comparison:; \( \chi^{2} \) test for comparison two (unweighted) histograms: Let us consider two histograms with the same binning and the number of bins equal to r. Let us denote the number of events in the ith bin in the first histogram as ni and as mi in the second one. The total number of events in the first histogram is equal to: ; \[; N = \sum_{i=1}^{r} n_{i}; \]. and ; \[; M = \sum_{i=1}^{r} m_{i}; \]. in the second histogram. The hypothesis of identity (homogeneity) [3] is that the two histograms represent random values with identical distributions. It is equivalent that there exist r constants p1,...,pr, such that ; \[; \sum_{i=1}^{r} p_{i}=1; \]. and the probability of belonging to the ith bin for some measured value in both experiments is equal to pi. The number of events in the ith bin is a random variable with a distribution approxi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:88429,Testability,test,test,88429,"\chi^{2} \) test for comparison two usual (unweighted) histograms.; Overview:; Comparison of two histograms expect hypotheses that two histograms represent identical distributions. To make a decision p-value should be calculated. The hypotheses of identity is rejected if the p-value is lower then some significance level. Traditionally significance levels 0.1, 0.05 and 0.01 are used. The comparison procedure should include an analysis of the residuals which is often helpful in identifying the bins of histograms responsible for a significant overall \( \chi^{2} \) value. Residuals are the difference between bin contents and expected bin contents. Most convenient for analysis are the normalized residuals. If hypotheses of identity are valid then normalized residuals are approximately independent and identically distributed random variables having N(0,1) distribution. Analysis of residuals expect test of above mentioned properties of residuals. Notice that indirectly the analysis of residuals increase the power of \( \chi^{2} \) test.; Methods of comparison:; \( \chi^{2} \) test for comparison two (unweighted) histograms: Let us consider two histograms with the same binning and the number of bins equal to r. Let us denote the number of events in the ith bin in the first histogram as ni and as mi in the second one. The total number of events in the first histogram is equal to: ; \[; N = \sum_{i=1}^{r} n_{i}; \]. and ; \[; M = \sum_{i=1}^{r} m_{i}; \]. in the second histogram. The hypothesis of identity (homogeneity) [3] is that the two histograms represent random values with identical distributions. It is equivalent that there exist r constants p1,...,pr, such that ; \[; \sum_{i=1}^{r} p_{i}=1; \]. and the probability of belonging to the ith bin for some measured value in both experiments is equal to pi. The number of events in the ith bin is a random variable with a distribution approximated by a Poisson probability distribution ; \[; \frac{e^{-Np_{i}}(Np_{i})^{n_{i}}}{",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:88475,Testability,test,test,88475," histograms represent identical distributions. To make a decision p-value should be calculated. The hypotheses of identity is rejected if the p-value is lower then some significance level. Traditionally significance levels 0.1, 0.05 and 0.01 are used. The comparison procedure should include an analysis of the residuals which is often helpful in identifying the bins of histograms responsible for a significant overall \( \chi^{2} \) value. Residuals are the difference between bin contents and expected bin contents. Most convenient for analysis are the normalized residuals. If hypotheses of identity are valid then normalized residuals are approximately independent and identically distributed random variables having N(0,1) distribution. Analysis of residuals expect test of above mentioned properties of residuals. Notice that indirectly the analysis of residuals increase the power of \( \chi^{2} \) test.; Methods of comparison:; \( \chi^{2} \) test for comparison two (unweighted) histograms: Let us consider two histograms with the same binning and the number of bins equal to r. Let us denote the number of events in the ith bin in the first histogram as ni and as mi in the second one. The total number of events in the first histogram is equal to: ; \[; N = \sum_{i=1}^{r} n_{i}; \]. and ; \[; M = \sum_{i=1}^{r} m_{i}; \]. in the second histogram. The hypothesis of identity (homogeneity) [3] is that the two histograms represent random values with identical distributions. It is equivalent that there exist r constants p1,...,pr, such that ; \[; \sum_{i=1}^{r} p_{i}=1; \]. and the probability of belonging to the ith bin for some measured value in both experiments is equal to pi. The number of events in the ith bin is a random variable with a distribution approximated by a Poisson probability distribution ; \[; \frac{e^{-Np_{i}}(Np_{i})^{n_{i}}}{n_{i}!}; \]. for the first histogram and with distribution ; \[; \frac{e^{-Mp_{i}}(Mp_{i})^{m_{i}}}{m_{i}!}; \]. for the second histogr",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:90521,Testability,test,test,90521," of homogeneity is valid, then the maximum likelihood estimator of pi, i=1,...,r, is ; \[; \hat{p}_{i}= \frac{n_{i}+m_{i}}{N+M}; \]. and then ; \[; X^{2} = \sum_{i=1}^{r}\frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r}\frac{(m_{i}-M\hat{p}_{i})^{2}}{M\hat{p}_{i}} =\frac{1}{MN} \sum_{i=1}^{r}\frac{(Mn_{i}-Nm_{i})^{2}}{n_{i}+m_{i}}; \]. has approximately a \( \chi^{2}_{(r-1)} \) distribution [3]. The comparison procedure can include an analysis of the residuals which is often helpful in identifying the bins of histograms responsible for a significant overall \( \chi^{2} \) value. Most convenient for analysis are the adjusted (normalized) residuals [4] ; \[; r_{i} = \frac{n_{i}-N\hat{p}_{i}}{\sqrt{N\hat{p}_{i}}\sqrt{(1-N/(N+M))(1-(n_{i}+m_{i})/(N+M))}}; \]. If hypotheses of homogeneity are valid then residuals ri are approximately independent and identically distributed random variables having N(0,1) distribution. The application of the \( \chi^{2} \) test has restrictions related to the value of the expected frequencies Npi, Mpi, i=1,...,r. A conservative rule formulated in [5] is that all the expectations must be 1 or greater for both histograms. In practical cases when expected frequencies are not known the estimated expected frequencies \( M\hat{p}_{i}, N\hat{p}_{i}, i=1,...,r \) can be used.; Unweighted and weighted histograms comparison:; A simple modification of the ideas described above can be used for the comparison of the usual (unweighted) and weighted histograms. Let us denote the number of events in the ith bin in the unweighted histogram as ni and the common weight of events in the ith bin of the weighted histogram as wi. The total number of events in the unweighted histogram is equal to ; \[; N = \sum_{i=1}^{r} n_{i}; \]. and the total weight of events in the weighted histogram is equal to ; \[; W = \sum_{i=1}^{r} w_{i}; \]. Let us formulate the hypothesis of identity of an unweighted histogram to a weighted histogram so that there exist r c",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:92200,Testability,test,test,92200,"stogram is equal to ; \[; N = \sum_{i=1}^{r} n_{i}; \]. and the total weight of events in the weighted histogram is equal to ; \[; W = \sum_{i=1}^{r} w_{i}; \]. Let us formulate the hypothesis of identity of an unweighted histogram to a weighted histogram so that there exist r constants p1,...,pr, such that ; \[; \sum_{i=1}^{r} p_{i} = 1; \]. for the unweighted histogram. The weight wi is a random variable with a distribution approximated by the normal probability distribution \( N(Wp_{i},\sigma_{i}^{2}) \) where \( \sigma_{i}^{2} \) is the variance of the weight wi. If we replace the variance \( \sigma_{i}^{2} \) with estimate \( s_{i}^{2} \) (sum of squares of weights of events in the ith bin) and the hypothesis of identity is valid, then the maximum likelihood estimator of pi,i=1,...,r, is ; \[; \hat{p}_{i} = \frac{Ww_{i}-Ns_{i}^{2}+\sqrt{(Ww_{i}-Ns_{i}^{2})^{2}+4W^{2}s_{i}^{2}n_{i}}}{2W^{2}}; \]. We may then use the test statistic ; \[; X^{2} = \sum_{i=1}^{r} \frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r} \frac{(w_{i}-W\hat{p}_{i})^{2}}{s_{i}^{2}}; \]. and it has approximately a \( \sigma^{2}_{(r-1)} \) distribution [2]. This test, as well as the original one [3], has a restriction on the expected frequencies. The expected frequencies recommended for the weighted histogram is more than 25. The value of the minimal expected frequency can be decreased down to 10 for the case when the weights of the events are close to constant. In the case of a weighted histogram if the number of events is unknown, then we can apply this recommendation for the equivalent number of events as ; \[; n_{i}^{equiv} = \frac{ w_{i}^{2} }{ s_{i}^{2} }; \]. The minimal expected frequency for an unweighted histogram must be 1. Notice that any usual (unweighted) histogram can be considered as a weighted histogram with events that have constant weights equal to 1. The variance \( z_{i}^{2} \) of the difference between the weight wi and the estimated expectation value of the wei",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:92430,Testability,test,test,92430,"y of an unweighted histogram to a weighted histogram so that there exist r constants p1,...,pr, such that ; \[; \sum_{i=1}^{r} p_{i} = 1; \]. for the unweighted histogram. The weight wi is a random variable with a distribution approximated by the normal probability distribution \( N(Wp_{i},\sigma_{i}^{2}) \) where \( \sigma_{i}^{2} \) is the variance of the weight wi. If we replace the variance \( \sigma_{i}^{2} \) with estimate \( s_{i}^{2} \) (sum of squares of weights of events in the ith bin) and the hypothesis of identity is valid, then the maximum likelihood estimator of pi,i=1,...,r, is ; \[; \hat{p}_{i} = \frac{Ww_{i}-Ns_{i}^{2}+\sqrt{(Ww_{i}-Ns_{i}^{2})^{2}+4W^{2}s_{i}^{2}n_{i}}}{2W^{2}}; \]. We may then use the test statistic ; \[; X^{2} = \sum_{i=1}^{r} \frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r} \frac{(w_{i}-W\hat{p}_{i})^{2}}{s_{i}^{2}}; \]. and it has approximately a \( \sigma^{2}_{(r-1)} \) distribution [2]. This test, as well as the original one [3], has a restriction on the expected frequencies. The expected frequencies recommended for the weighted histogram is more than 25. The value of the minimal expected frequency can be decreased down to 10 for the case when the weights of the events are close to constant. In the case of a weighted histogram if the number of events is unknown, then we can apply this recommendation for the equivalent number of events as ; \[; n_{i}^{equiv} = \frac{ w_{i}^{2} }{ s_{i}^{2} }; \]. The minimal expected frequency for an unweighted histogram must be 1. Notice that any usual (unweighted) histogram can be considered as a weighted histogram with events that have constant weights equal to 1. The variance \( z_{i}^{2} \) of the difference between the weight wi and the estimated expectation value of the weight is approximately equal to: ; \[; z_{i}^{2} = Var(w_{i}-W\hat{p}_{i}) = N\hat{p}_{i}(1-N\hat{p}_{i})\left(\frac{Ws_{i}^{2}}{\sqrt{(Ns_{i}^{2}-w_{i}W)^{2}+4W^{2}s_{i}^{2}n_{i}}}\right)^{2}+\frac{s_{i}^",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:95018,Testability,test,test,95018," so that there exist r constants p1,...,pr, such that ; \[; \sum_{i=1}^{r} p_{i} = 1; \]. and also expectation value of weight w1i equal to W1pi and expectation value of weight w2i equal to W2pi. Weights in both the histograms are random variables with distributions which can be approximated by a normal probability distribution \( N(W_{1}p_{i},\sigma_{1i}^{2}) \) for the first histogram and by a distribution \( N(W_{2}p_{i},\sigma_{2i}^{2}) \) for the second. Here \( \sigma_{1i}^{2} \) and \( \sigma_{2i}^{2} \) are the variances of w1i and w2i with estimators \( s_{1i}^{2} \) and \( s_{2i}^{2} \) respectively. If the hypothesis of identity is valid, then the maximum likelihood and Least Square Method estimator of pi,i=1,...,r, is ; \[; \hat{p}_{i} = \frac{w_{1i}W_{1}/s_{1i}^{2}+w_{2i}W_{2} /s_{2i}^{2}}{W_{1}^{2}/s_{1i}^{2}+W_{2}^{2}/s_{2i}^{2}}; \]. We may then use the test statistic ; \[; X^{2} = \sum_{i=1}^{r} \frac{(w_{1i}-W_{1}\hat{p}_{i})^{2}}{s_{1i}^{2}} + \sum_{i=1}^{r} \frac{(w_{2i}-W_{2}\hat{p}_{i})^{2}}{s_{2i}^{2}} = \sum_{i=1}^{r} \frac{(W_{1}w_{2i}-W_{2}w_{1i})^{2}}{W_{1}^{2}s_{2i}^{2}+W_{2}^{2}s_{1i}^{2}}; \]. and it has approximately a \( \chi^{2}_{(r-1)} \) distribution [2]. The normalized or studentised residuals [6] ; \[; r_{i} = \frac{w_{1i}-W_{1}\hat{p}_{i}}{s_{1i}\sqrt{1 - \frac{1}{(1+W_{2}^{2}s_{1i}^{2}/W_{1}^{2}s_{2i}^{2})}}}; \]. have approximately a normal distribution with mean equal to 0 and standard deviation 1. A recommended minimal expected frequency is equal to 10 for the proposed test.; Numerical examples:; The method described herein is now illustrated with an example. We take a distribution ; \[; \phi(x) = \frac{2}{(x-10)^{2}+1} + \frac{1}{(x-14)^{2}+1} (1); \]. defined on the interval [4,16]. Events distributed according to the formula (1) are simulated to create the unweighted histogram. Uniformly distributed events are simulated for the weighted histogram with weights calculated by formula (1). Each histogram has the same number of",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:95672,Testability,test,test,95672,"gma_{2i}^{2} \) are the variances of w1i and w2i with estimators \( s_{1i}^{2} \) and \( s_{2i}^{2} \) respectively. If the hypothesis of identity is valid, then the maximum likelihood and Least Square Method estimator of pi,i=1,...,r, is ; \[; \hat{p}_{i} = \frac{w_{1i}W_{1}/s_{1i}^{2}+w_{2i}W_{2} /s_{2i}^{2}}{W_{1}^{2}/s_{1i}^{2}+W_{2}^{2}/s_{2i}^{2}}; \]. We may then use the test statistic ; \[; X^{2} = \sum_{i=1}^{r} \frac{(w_{1i}-W_{1}\hat{p}_{i})^{2}}{s_{1i}^{2}} + \sum_{i=1}^{r} \frac{(w_{2i}-W_{2}\hat{p}_{i})^{2}}{s_{2i}^{2}} = \sum_{i=1}^{r} \frac{(W_{1}w_{2i}-W_{2}w_{1i})^{2}}{W_{1}^{2}s_{2i}^{2}+W_{2}^{2}s_{1i}^{2}}; \]. and it has approximately a \( \chi^{2}_{(r-1)} \) distribution [2]. The normalized or studentised residuals [6] ; \[; r_{i} = \frac{w_{1i}-W_{1}\hat{p}_{i}}{s_{1i}\sqrt{1 - \frac{1}{(1+W_{2}^{2}s_{1i}^{2}/W_{1}^{2}s_{2i}^{2})}}}; \]. have approximately a normal distribution with mean equal to 0 and standard deviation 1. A recommended minimal expected frequency is equal to 10 for the proposed test.; Numerical examples:; The method described herein is now illustrated with an example. We take a distribution ; \[; \phi(x) = \frac{2}{(x-10)^{2}+1} + \frac{1}{(x-14)^{2}+1} (1); \]. defined on the interval [4,16]. Events distributed according to the formula (1) are simulated to create the unweighted histogram. Uniformly distributed events are simulated for the weighted histogram with weights calculated by formula (1). Each histogram has the same number of bins: 20. Fig.1 shows the result of comparison of the unweighted histogram with 200 events (minimal expected frequency equal to one) and the weighted histogram with 500 events (minimal expected frequency equal to 25); ///. Fig 1. An example of comparison of the unweighted histogram with 200 events and the weighted histogram with 500 events:; unweighted histogram;; weighted histogram;; normalized residuals plot;; normal Q-Q plot of residuals. The value of the test statistic \( \chi^{2} \) is equa",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:96601,Testability,test,test,96601,"inimal expected frequency is equal to 10 for the proposed test.; Numerical examples:; The method described herein is now illustrated with an example. We take a distribution ; \[; \phi(x) = \frac{2}{(x-10)^{2}+1} + \frac{1}{(x-14)^{2}+1} (1); \]. defined on the interval [4,16]. Events distributed according to the formula (1) are simulated to create the unweighted histogram. Uniformly distributed events are simulated for the weighted histogram with weights calculated by formula (1). Each histogram has the same number of bins: 20. Fig.1 shows the result of comparison of the unweighted histogram with 200 events (minimal expected frequency equal to one) and the weighted histogram with 500 events (minimal expected frequency equal to 25); ///. Fig 1. An example of comparison of the unweighted histogram with 200 events and the weighted histogram with 500 events:; unweighted histogram;; weighted histogram;; normalized residuals plot;; normal Q-Q plot of residuals. The value of the test statistic \( \chi^{2} \) is equal to 21.09 with p-value equal to 0.33, therefore the hypothesis of identity of the two histograms can be accepted for 0.05 significant level. The behavior of the normalized residuals plot (see Fig. 1c) and the normal Q-Q plot (see Fig. 1d) of residuals are regular and we cannot identify the outliers or bins with a big influence on \( \chi^{2} \).; The second example presents the same two histograms but 17 events was added to content of bin number 15 in unweighted histogram. Fig.2 shows the result of comparison of the unweighted histogram with 217 events (minimal expected frequency equal to one) and the weighted histogram with 500 events (minimal expected frequency equal to 25); ///. Fig 2. An example of comparison of the unweighted histogram with 217 events and the weighted histogram with 500 events:; unweighted histogram;; weighted histogram;; normalized residuals plot;; normal Q-Q plot of residuals. The value of the test statistic \( \chi^{2} \) is equal to 32.",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:97570,Testability,test,test,97570," The value of the test statistic \( \chi^{2} \) is equal to 21.09 with p-value equal to 0.33, therefore the hypothesis of identity of the two histograms can be accepted for 0.05 significant level. The behavior of the normalized residuals plot (see Fig. 1c) and the normal Q-Q plot (see Fig. 1d) of residuals are regular and we cannot identify the outliers or bins with a big influence on \( \chi^{2} \).; The second example presents the same two histograms but 17 events was added to content of bin number 15 in unweighted histogram. Fig.2 shows the result of comparison of the unweighted histogram with 217 events (minimal expected frequency equal to one) and the weighted histogram with 500 events (minimal expected frequency equal to 25); ///. Fig 2. An example of comparison of the unweighted histogram with 217 events and the weighted histogram with 500 events:; unweighted histogram;; weighted histogram;; normalized residuals plot;; normal Q-Q plot of residuals. The value of the test statistic \( \chi^{2} \) is equal to 32.33 with p-value equal to 0.029, therefore the hypothesis of identity of the two histograms is rejected for 0.05 significant level. The behavior of the normalized residuals plot (see Fig. 2c) and the normal Q-Q plot (see Fig. 2d) of residuals are not regular and we can identify the outlier or bin with a big influence on \( \chi^{2} \).; References:. [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to Association and Normal Correlation. Drapers' Co. Memoirs, Biometric Series No. 1, London.; [2] Gagunashvili, N., 2006. \( \sigma^{2} \) test for comparison of weighted and unweighted histograms. Statistical Problems in Particle Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05, Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44. Gagunashvili,N., Comparison of weighted and unweighted histograms, arXiv:physics/0605123, 2006.; [3] Cramer, H., 1946. Mathematical methods of statistics. Princeton University Press,",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:98174,Testability,test,test,98174,"nts (minimal expected frequency equal to one) and the weighted histogram with 500 events (minimal expected frequency equal to 25); ///. Fig 2. An example of comparison of the unweighted histogram with 217 events and the weighted histogram with 500 events:; unweighted histogram;; weighted histogram;; normalized residuals plot;; normal Q-Q plot of residuals. The value of the test statistic \( \chi^{2} \) is equal to 32.33 with p-value equal to 0.029, therefore the hypothesis of identity of the two histograms is rejected for 0.05 significant level. The behavior of the normalized residuals plot (see Fig. 2c) and the normal Q-Q plot (see Fig. 2d) of residuals are not regular and we can identify the outlier or bin with a big influence on \( \chi^{2} \).; References:. [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to Association and Normal Correlation. Drapers' Co. Memoirs, Biometric Series No. 1, London.; [2] Gagunashvili, N., 2006. \( \sigma^{2} \) test for comparison of weighted and unweighted histograms. Statistical Problems in Particle Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05, Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44. Gagunashvili,N., Comparison of weighted and unweighted histograms, arXiv:physics/0605123, 2006.; [3] Cramer, H., 1946. Mathematical methods of statistics. Princeton University Press, Princeton.; [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables. Biometrics 29, 205-220.; [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity test in 2xN tables. Biometrics 21, 19-33.; [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis. John Wiley & Sons Inc., New York. . Definition at line 2008 of file TH1.cxx. ◆ Chi2TestX(). Double_t TH1::Chi2TestX ; (; const TH1 * ; h2, . Double_t & ; chi2, . Int_t & ; ndf, . Int_t & ; igood, . Option_t * ; option = ""UU"", . Double_t * ; res = nullptr . ); const. virtual . The computation routine of the C",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:98778,Testability,test,test,98778,"ized residuals plot (see Fig. 2c) and the normal Q-Q plot (see Fig. 2d) of residuals are not regular and we can identify the outlier or bin with a big influence on \( \chi^{2} \).; References:. [1] Pearson, K., 1904. On the Theory of Contingency and Its Relation to Association and Normal Correlation. Drapers' Co. Memoirs, Biometric Series No. 1, London.; [2] Gagunashvili, N., 2006. \( \sigma^{2} \) test for comparison of weighted and unweighted histograms. Statistical Problems in Particle Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05, Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44. Gagunashvili,N., Comparison of weighted and unweighted histograms, arXiv:physics/0605123, 2006.; [3] Cramer, H., 1946. Mathematical methods of statistics. Princeton University Press, Princeton.; [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables. Biometrics 29, 205-220.; [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity test in 2xN tables. Biometrics 21, 19-33.; [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis. John Wiley & Sons Inc., New York. . Definition at line 2008 of file TH1.cxx. ◆ Chi2TestX(). Double_t TH1::Chi2TestX ; (; const TH1 * ; h2, . Double_t & ; chi2, . Int_t & ; ndf, . Int_t & ; igood, . Option_t * ; option = ""UU"", . Double_t * ; res = nullptr . ); const. virtual . The computation routine of the Chisquare test. ; For the method description, see Chi2Test() function.; Returnsp-value ; Parameters. [in]h2the second histogram ; [in]option; ""UU"" = experiment experiment comparison (unweighted-unweighted); ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first histogram should be unweighted; ""WW"" = MC MC comparison (weighted-weighted); ""NORM"" = if one or both histograms is scaled; ""OF"" = overflows included; ""UF"" = underflows included by default underflows and overflows are not included . [out]igoodtest output; igood=0 - no problems; For unweighted unwe",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:99203,Testability,test,test,99203,"omparison of weighted and unweighted histograms. Statistical Problems in Particle Physics, Astrophysics and Cosmology, Proceedings of PHYSTAT05, Oxford, UK, 12-15 September 2005, Imperial College Press, London, 43-44. Gagunashvili,N., Comparison of weighted and unweighted histograms, arXiv:physics/0605123, 2006.; [3] Cramer, H., 1946. Mathematical methods of statistics. Princeton University Press, Princeton.; [4] Haberman, S.J., 1973. The analysis of residuals in cross-classified tables. Biometrics 29, 205-220.; [5] Lewontin, R.C. and Felsenstein, J., 1965. The robustness of homogeneity test in 2xN tables. Biometrics 21, 19-33.; [6] Seber, G.A.F., Lee, A.J., 2003, Linear Regression Analysis. John Wiley & Sons Inc., New York. . Definition at line 2008 of file TH1.cxx. ◆ Chi2TestX(). Double_t TH1::Chi2TestX ; (; const TH1 * ; h2, . Double_t & ; chi2, . Int_t & ; ndf, . Int_t & ; igood, . Option_t * ; option = ""UU"", . Double_t * ; res = nullptr . ); const. virtual . The computation routine of the Chisquare test. ; For the method description, see Chi2Test() function.; Returnsp-value ; Parameters. [in]h2the second histogram ; [in]option; ""UU"" = experiment experiment comparison (unweighted-unweighted); ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first histogram should be unweighted; ""WW"" = MC MC comparison (weighted-weighted); ""NORM"" = if one or both histograms is scaled; ""OF"" = overflows included; ""UF"" = underflows included by default underflows and overflows are not included . [out]igoodtest output; igood=0 - no problems; For unweighted unweighted comparison; igood=1'There is a bin in the 1st histogram with less than 1 event'; igood=2'There is a bin in the 2nd histogram with less than 1 event'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'. For unweighted weighted comparison; igood=1'There is a bin in the 1st histogram with less then 1 event'; igood=2'There is a bin in the 2nd histogram with less then 10 effective number of e",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:100572,Testability,test,test,100572,"rflows included by default underflows and overflows are not included . [out]igoodtest output; igood=0 - no problems; For unweighted unweighted comparison; igood=1'There is a bin in the 1st histogram with less than 1 event'; igood=2'There is a bin in the 2nd histogram with less than 1 event'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'. For unweighted weighted comparison; igood=1'There is a bin in the 1st histogram with less then 1 event'; igood=2'There is a bin in the 2nd histogram with less then 10 effective number of events'; igood=3'when the conditions for igood=1 and igood=2 are satisfied'. For weighted weighted comparison; igood=1'There is a bin in the 1st histogram with less then 10 effective number of events'; igood=2'There is a bin in the 2nd histogram with less then 10 effective number of events'; igood=3'when the conditions for igood=1 and igood=2 are satisfied' . [out]chi2chisquare of the test ; [out]ndfnumber of degrees of freedom (important, when both histograms have the same empty bins) ; [out]resnormalized residuals for further analysis . Definition at line 2067 of file TH1.cxx. ◆ Chisquare(). Double_t TH1::Chisquare ; (; TF1 * ; func, . Option_t * ; option = """" . ); const. virtual . Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ; Use option ""R"" for restricting the chisquare calculation to the given range of the function Use option ""L"" for using the chisquare based on the poisson likelihood (Baker-Cousins Chisquare) Use option ""P"" for using the Pearson chisquare based on the expected bin errors ; Definition at line 2496 of file TH1.cxx. ◆ Class(). static TClass * TH1::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TH1::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TH1",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:103116,Testability,test,test,103116," also cleared, since there is no more content in the bins. ; Definition at line 2517 of file TH1.cxx. ◆ Clone(). TObject * TH1::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a complete copy of the underlying object. ; If 'newname' is set, the copy's name will be set to that name. ; Reimplemented from TObject.; Reimplemented in TH2Poly.; Definition at line 2752 of file TH1.cxx. ◆ ComputeIntegral(). Double_t TH1::ComputeIntegral ; (; Bool_t ; onlyPositive = false). virtual . Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; This function is automatically called by GetRandom when the fIntegral array does not exist or when the number of entries in the histogram has changed since the previous call to GetRandom. The resulting integral is normalized to 1. If the routine is called with the onlyPositive flag set an error will be produced in case of negative bin content and a NaN value returned Returns1 if success, 0 if integral is zero, NAN if onlyPositive-test fails ; Reimplemented in TH2Poly.; Definition at line 2537 of file TH1.cxx. ◆ Copy(). void TH1::Copy ; (; TObject & ; obj); const. overridevirtual . Copy this histogram structure to newth1. ; Note that this function does not copy the list of associated functions. Use TObject::Clone to make a full copy of a histogram.; Note also that the histogram it will be created in gDirectory (if AddDirectoryStatus()=true) or will not be added to any directory if AddDirectoryStatus()=false independently of the current directory stored in the original histogram ; Reimplemented from TObject.; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, TProfile3D, TH2Poly, and TH1K.; Definition at line 2671 of file TH1.cxx. ◆ DeclFileName(). static const char * TH1::DeclFileName ; (; ). inlinestatic . ReturnsName of the ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:125986,Testability,log,log,125986,"ame and calls TH1::Fit(TF1 *, Option_t *, Option_t *,; Double_t, Double_t). See there for the fitting options and the details about fitting histograms ; Definition at line 3898 of file TH1.cxx. ◆ Fit() [2/2]. TFitResultPtr TH1::Fit ; (; TF1 * ; f1, . Option_t * ; option = """", . Option_t * ; goption = """", . Double_t ; xxmin = 0, . Double_t ; xxmax = 0 . ). virtual . Fit histogram with the function pointer f1. ; Parameters. [in]f1pointer to the function object ; [in]optionstring defining the fit options (see table below). ; [in]goptionspecify a list of graphics options. See TH1::Draw for a complete list of these options. ; [in]xxminlower fitting range ; [in]xxmaxupper fitting range . ReturnsA smart pointer to the TFitResult class. Histogram Fitting Options; Here is the full list of fit options that can be given in the parameter option. Several options can be used together by concatanating the strings without the need of any delimiters. option description . ""L"" Uses a log likelihood method (default is chi-square method). To be used when the histogram represents counts. . ""WL"" Weighted log likelihood method. To be used when the histogram has been filled with weights different than 1. This is needed for getting correct parameter uncertainties for weighted fits. . ""P"" Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value. . ""MULTI"" Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape. . ""W"" Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins. . ""WW"" Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins. . ""I"" Uses the integral of function in the bin instead of the default bin center value. . ""F"" Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) inst",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:126105,Testability,log,log,126105,"options and the details about fitting histograms ; Definition at line 3898 of file TH1.cxx. ◆ Fit() [2/2]. TFitResultPtr TH1::Fit ; (; TF1 * ; f1, . Option_t * ; option = """", . Option_t * ; goption = """", . Double_t ; xxmin = 0, . Double_t ; xxmax = 0 . ). virtual . Fit histogram with the function pointer f1. ; Parameters. [in]f1pointer to the function object ; [in]optionstring defining the fit options (see table below). ; [in]goptionspecify a list of graphics options. See TH1::Draw for a complete list of these options. ; [in]xxminlower fitting range ; [in]xxmaxupper fitting range . ReturnsA smart pointer to the TFitResult class. Histogram Fitting Options; Here is the full list of fit options that can be given in the parameter option. Several options can be used together by concatanating the strings without the need of any delimiters. option description . ""L"" Uses a log likelihood method (default is chi-square method). To be used when the histogram represents counts. . ""WL"" Weighted log likelihood method. To be used when the histogram has been filled with weights different than 1. This is needed for getting correct parameter uncertainties for weighted fits. . ""P"" Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value. . ""MULTI"" Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape. . ""W"" Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins. . ""WW"" Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins. . ""I"" Uses the integral of function in the bin instead of the default bin center value. . ""F"" Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter. . ""U"" Uses a user specified objective function (e.g. user providedlikelihood",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:132468,Testability,log,log-likelihood,132468," p )}{e(i)} \right)^2 }; \]. where y(i) is the bin content for each bin i, x(i) is the bin center and e(i) is the bin error (sqrt(y(i) for an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, f(x(i)|p), but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume. When using option P (Pearson chi2), the expected error computed as e(i) = sqrt(f(x(i)|p)) is used. In this case empty bins are considered in the fit. Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of the default chi-square fit. The likelihood is built assuming a Poisson probability density function for each bin. The negative log-likelihood to be minimized is. \[; NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; \]. where P(y|f) is the Poisson distribution of observing a count y(i) in the bin when the expected count is f(x(i)|p). The exact likelihood used is the Poisson likelihood described in this paper: S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,” Nucl. Instrum. Meth. 221 (1984) 437. \[; NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; \]. By using this formulation, 2*NLL can be interpreted as the chi-square resulting from the fit.; This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ). The likelihood method has the advantage of treating correctly bins with low statistics. In case of high statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit give the same result.; The likelihood method, although a bit ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:132526,Testability,log,log,132526,"for each bin i, x(i) is the bin center and e(i) is the bin error (sqrt(y(i) for an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, f(x(i)|p), but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume. When using option P (Pearson chi2), the expected error computed as e(i) = sqrt(f(x(i)|p)) is used. In this case empty bins are considered in the fit. Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of the default chi-square fit. The likelihood is built assuming a Poisson probability density function for each bin. The negative log-likelihood to be minimized is. \[; NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; \]. where P(y|f) is the Poisson distribution of observing a count y(i) in the bin when the expected count is f(x(i)|p). The exact likelihood used is the Poisson likelihood described in this paper: S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,” Nucl. Instrum. Meth. 221 (1984) 437. \[; NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; \]. By using this formulation, 2*NLL can be interpreted as the chi-square resulting from the fit.; This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ). The likelihood method has the advantage of treating correctly bins with low statistics. In case of high statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit give the same result.; The likelihood method, although a bit slower, it is therefore the recommended method, when the hi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:132961,Testability,log,log,132961," option P (Pearson chi2), the expected error computed as e(i) = sqrt(f(x(i)|p)) is used. In this case empty bins are considered in the fit. Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of the default chi-square fit. The likelihood is built assuming a Poisson probability density function for each bin. The negative log-likelihood to be minimized is. \[; NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; \]. where P(y|f) is the Poisson distribution of observing a count y(i) in the bin when the expected count is f(x(i)|p). The exact likelihood used is the Poisson likelihood described in this paper: S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,” Nucl. Instrum. Meth. 221 (1984) 437. \[; NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; \]. By using this formulation, 2*NLL can be interpreted as the chi-square resulting from the fit.; This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ). The likelihood method has the advantage of treating correctly bins with low statistics. In case of high statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit give the same result.; The likelihood method, although a bit slower, it is therefore the recommended method, when the histogram represent counts (Poisson statistics), where the chi-square methods may give incorrect results, especially in case of low statistics. In case of a weighted histogram, it is possible to perform also a likelihood fit by using the option ""WL"". Note a weighted histogram is a histogram which has been filled with weights and it has the information on the sum of the weight square for each bin ( TH1::Sumw2() has been c",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:154333,Testability,log,log,154333," inlinevirtual . Definition at line 435 of file TH1.h. ◆ GetCenter(). void TH1::GetCenter ; (; Double_t * ; center); const. virtual . Fill array with center of bins for 1D histogram Better to use h1.GetXaxis()->GetCenter(center) ; Definition at line 9174 of file TH1.cxx. ◆ GetContour(). Int_t TH1::GetContour ; (; Double_t * ; levels = nullptr). virtual . Return contour values into array levels if pointer levels is non zero. ; The function returns the number of contour levels. see GetContourLevel to return one contour only ; Definition at line 8411 of file TH1.cxx. ◆ GetContourLevel(). Double_t TH1::GetContourLevel ; (; Int_t ; level); const. virtual . Return value of contour number level. ; Use GetContour to return the array of all contour levels ; Definition at line 8430 of file TH1.cxx. ◆ GetContourLevelPad(). Double_t TH1::GetContourLevelPad ; (; Int_t ; level); const. virtual . Return the value of contour number ""level"" in Pad coordinates. ; ie: if the Pad is in log scale along Z it returns le log of the contour level value. See GetContour to return the array of all contour levels ; Definition at line 8440 of file TH1.cxx. ◆ GetCumulative(). TH1 * TH1::GetCumulative ; (; Bool_t ; forward = kTRUE, . const char * ; suffix = ""_cumulative"" . ); const. Return a pointer to a histogram containing the cumulative content. ; The cumulative can be computed both in the forward (default) or backward direction; the name of the new histogram is constructed from the name of this histogram with the suffix ""suffix"" appended provided by the user. If not provided a default suffix=""_cumulative"" is used.; The cumulative distribution is formed by filling each bin of the resulting histogram with the sum of that bin and all previous (forward == kTRUE) or following (forward = kFALSE) bins.; Note: while cumulative distributions make sense in one dimension, you may not be getting what you expect in more than 1D because the concept of a cumulative distribution is much trickier to define; mak",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:154365,Testability,log,log,154365," inlinevirtual . Definition at line 435 of file TH1.h. ◆ GetCenter(). void TH1::GetCenter ; (; Double_t * ; center); const. virtual . Fill array with center of bins for 1D histogram Better to use h1.GetXaxis()->GetCenter(center) ; Definition at line 9174 of file TH1.cxx. ◆ GetContour(). Int_t TH1::GetContour ; (; Double_t * ; levels = nullptr). virtual . Return contour values into array levels if pointer levels is non zero. ; The function returns the number of contour levels. see GetContourLevel to return one contour only ; Definition at line 8411 of file TH1.cxx. ◆ GetContourLevel(). Double_t TH1::GetContourLevel ; (; Int_t ; level); const. virtual . Return value of contour number level. ; Use GetContour to return the array of all contour levels ; Definition at line 8430 of file TH1.cxx. ◆ GetContourLevelPad(). Double_t TH1::GetContourLevelPad ; (; Int_t ; level); const. virtual . Return the value of contour number ""level"" in Pad coordinates. ; ie: if the Pad is in log scale along Z it returns le log of the contour level value. See GetContour to return the array of all contour levels ; Definition at line 8440 of file TH1.cxx. ◆ GetCumulative(). TH1 * TH1::GetCumulative ; (; Bool_t ; forward = kTRUE, . const char * ; suffix = ""_cumulative"" . ); const. Return a pointer to a histogram containing the cumulative content. ; The cumulative can be computed both in the forward (default) or backward direction; the name of the new histogram is constructed from the name of this histogram with the suffix ""suffix"" appended provided by the user. If not provided a default suffix=""_cumulative"" is used.; The cumulative distribution is formed by filling each bin of the resulting histogram with the sum of that bin and all previous (forward == kTRUE) or following (forward = kFALSE) bins.; Note: while cumulative distributions make sense in one dimension, you may not be getting what you expect in more than 1D because the concept of a cumulative distribution is much trickier to define; mak",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:183123,Testability,test,test,183123," TH3D, TProfile, TProfile2D, TProfile2Poly, and TProfile3D.; Definition at line 444 of file TH1.h. ◆ IsBinOverflow(). Bool_t TH1::IsBinOverflow ; (; Int_t ; bin, . Int_t ; axis = 0 . ); const. Return true if the bin is overflow. ; Definition at line 5182 of file TH1.cxx. ◆ IsBinUnderflow(). Bool_t TH1::IsBinUnderflow ; (; Int_t ; bin, . Int_t ; iaxis = 0 . ); const. Return true if the bin is underflow. ; If iaxis = 0 make OR with all axes otherwise check only for the given axis ; Definition at line 5214 of file TH1.cxx. ◆ IsEmpty(). Bool_t TH1::IsEmpty ; (; ); const. protected . Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ; Definition at line 5164 of file TH1.cxx. ◆ IsHighlight(). virtual Bool_t TH1::IsHighlight ; (; ); const. inlinevirtual . Definition at line 338 of file TH1.h. ◆ KolmogorovTest(). Double_t TH1::KolmogorovTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using Kolmogorov test. ; Note that the KolmogorovTest (KS) test should in theory be used only for unbinned data and not for binned data as in the case of the histogram (see NOTE 3 below). So, before using this method blindly, read the NOTE 3.; Default: Ignore under- and overflow bins in comparison; Parameters. [in]h2histogram ; [in]optionis a character string to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure: make pseudoexperiments based on random values from the parent distribution, compare the KS distance of the pseudoexperiment to the parent distribution, and count all the KS values above the value obtained from the original data to Monte Carlo distribution. The number of pseudo-e",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:183202,Testability,test,test,183202," TH3D, TProfile, TProfile2D, TProfile2Poly, and TProfile3D.; Definition at line 444 of file TH1.h. ◆ IsBinOverflow(). Bool_t TH1::IsBinOverflow ; (; Int_t ; bin, . Int_t ; axis = 0 . ); const. Return true if the bin is overflow. ; Definition at line 5182 of file TH1.cxx. ◆ IsBinUnderflow(). Bool_t TH1::IsBinUnderflow ; (; Int_t ; bin, . Int_t ; iaxis = 0 . ); const. Return true if the bin is underflow. ; If iaxis = 0 make OR with all axes otherwise check only for the given axis ; Definition at line 5214 of file TH1.cxx. ◆ IsEmpty(). Bool_t TH1::IsEmpty ; (; ); const. protected . Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ; Definition at line 5164 of file TH1.cxx. ◆ IsHighlight(). virtual Bool_t TH1::IsHighlight ; (; ); const. inlinevirtual . Definition at line 338 of file TH1.h. ◆ KolmogorovTest(). Double_t TH1::KolmogorovTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using Kolmogorov test. ; Note that the KolmogorovTest (KS) test should in theory be used only for unbinned data and not for binned data as in the case of the histogram (see NOTE 3 below). So, before using this method blindly, read the NOTE 3.; Default: Ignore under- and overflow bins in comparison; Parameters. [in]h2histogram ; [in]optionis a character string to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure: make pseudoexperiments based on random values from the parent distribution, compare the KS distance of the pseudoexperiment to the parent distribution, and count all the KS values above the value obtained from the original data to Monte Carlo distribution. The number of pseudo-e",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:183244,Testability,test,test,183244,"sBinOverflow ; (; Int_t ; bin, . Int_t ; axis = 0 . ); const. Return true if the bin is overflow. ; Definition at line 5182 of file TH1.cxx. ◆ IsBinUnderflow(). Bool_t TH1::IsBinUnderflow ; (; Int_t ; bin, . Int_t ; iaxis = 0 . ); const. Return true if the bin is underflow. ; If iaxis = 0 make OR with all axes otherwise check only for the given axis ; Definition at line 5214 of file TH1.cxx. ◆ IsEmpty(). Bool_t TH1::IsEmpty ; (; ); const. protected . Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ; Definition at line 5164 of file TH1.cxx. ◆ IsHighlight(). virtual Bool_t TH1::IsHighlight ; (; ); const. inlinevirtual . Definition at line 338 of file TH1.h. ◆ KolmogorovTest(). Double_t TH1::KolmogorovTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using Kolmogorov test. ; Note that the KolmogorovTest (KS) test should in theory be used only for unbinned data and not for binned data as in the case of the histogram (see NOTE 3 below). So, before using this method blindly, read the NOTE 3.; Default: Ignore under- and overflow bins in comparison; Parameters. [in]h2histogram ; [in]optionis a character string to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure: make pseudoexperiments based on random values from the parent distribution, compare the KS distance of the pseudoexperiment to the parent distribution, and count all the KS values above the value obtained from the original data to Monte Carlo distribution. The number of pseudo-experiments nEXPT is by default 1000, and it can be changed by specifying the option as ""X=number"", for example ""X=10000"" for 10000 ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:183593,Testability,test,test,183593," TH1Merger ) ; Definition at line 5164 of file TH1.cxx. ◆ IsHighlight(). virtual Bool_t TH1::IsHighlight ; (; ); const. inlinevirtual . Definition at line 338 of file TH1.h. ◆ KolmogorovTest(). Double_t TH1::KolmogorovTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. virtual . Statistical test of compatibility in shape between this histogram and h2, using Kolmogorov test. ; Note that the KolmogorovTest (KS) test should in theory be used only for unbinned data and not for binned data as in the case of the histogram (see NOTE 3 below). So, before using this method blindly, read the NOTE 3.; Default: Ignore under- and overflow bins in comparison; Parameters. [in]h2histogram ; [in]optionis a character string to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure: make pseudoexperiments based on random values from the parent distribution, compare the KS distance of the pseudoexperiment to the parent distribution, and count all the KS values above the value obtained from the original data to Monte Carlo distribution. The number of pseudo-experiments nEXPT is by default 1000, and it can be changed by specifying the option as ""X=number"", for example ""X=10000"" for 10000 toys. The function returns the probability. (thanks to Ben Kilminster to submit this procedure). Note that this option ""X"" is much slower. The returned function value is the probability of test (much less than one means NOT compatible); Code adapted by Rene Brun from original HBOOK routine HDIFF; NOTE1 A good description of the Kolmogorov test can be seen at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; NOTE2 see also alternative function TH1::Chi2Test The Kolmogorov test is assumed to give better res",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:184479,Testability,test,test,184479,"g to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure: make pseudoexperiments based on random values from the parent distribution, compare the KS distance of the pseudoexperiment to the parent distribution, and count all the KS values above the value obtained from the original data to Monte Carlo distribution. The number of pseudo-experiments nEXPT is by default 1000, and it can be changed by specifying the option as ""X=number"", for example ""X=10000"" for 10000 toys. The function returns the probability. (thanks to Ben Kilminster to submit this procedure). Note that this option ""X"" is much slower. The returned function value is the probability of test (much less than one means NOT compatible); Code adapted by Rene Brun from original HBOOK routine HDIFF; NOTE1 A good description of the Kolmogorov test can be seen at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; NOTE2 see also alternative function TH1::Chi2Test The Kolmogorov test is assumed to give better results than Chi2Test in case of histograms with low statistics.; NOTE3 (Jan Conrad, Fred James) ""The returned value PROB is calculated such that it will be; uniformly distributed between zero and one for compatible histograms,; provided the data are not binned (or the number of bins is very large; compared with the number of events). Users who have access to unbinned; data and wish exact confidence levels should therefore not put their data; into histograms, but should call directly TMath::KolmogorovTest. On; the other hand, since TH1 is a convenient way of collecting data and; saving space, this function has been provided. However, the values of; PROB for binned data will be shifted slightly higher than expected,; dependi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:184631,Testability,test,test,184631,"g to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure: make pseudoexperiments based on random values from the parent distribution, compare the KS distance of the pseudoexperiment to the parent distribution, and count all the KS values above the value obtained from the original data to Monte Carlo distribution. The number of pseudo-experiments nEXPT is by default 1000, and it can be changed by specifying the option as ""X=number"", for example ""X=10000"" for 10000 toys. The function returns the probability. (thanks to Ben Kilminster to submit this procedure). Note that this option ""X"" is much slower. The returned function value is the probability of test (much less than one means NOT compatible); Code adapted by Rene Brun from original HBOOK routine HDIFF; NOTE1 A good description of the Kolmogorov test can be seen at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; NOTE2 see also alternative function TH1::Chi2Test The Kolmogorov test is assumed to give better results than Chi2Test in case of histograms with low statistics.; NOTE3 (Jan Conrad, Fred James) ""The returned value PROB is calculated such that it will be; uniformly distributed between zero and one for compatible histograms,; provided the data are not binned (or the number of bins is very large; compared with the number of events). Users who have access to unbinned; data and wish exact confidence levels should therefore not put their data; into histograms, but should call directly TMath::KolmogorovTest. On; the other hand, since TH1 is a convenient way of collecting data and; saving space, this function has been provided. However, the values of; PROB for binned data will be shifted slightly higher than expected,; dependi",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:184782,Testability,test,test,184782," of prob; ""X"" Run the pseudo experiments post-processor with the following procedure: make pseudoexperiments based on random values from the parent distribution, compare the KS distance of the pseudoexperiment to the parent distribution, and count all the KS values above the value obtained from the original data to Monte Carlo distribution. The number of pseudo-experiments nEXPT is by default 1000, and it can be changed by specifying the option as ""X=number"", for example ""X=10000"" for 10000 toys. The function returns the probability. (thanks to Ben Kilminster to submit this procedure). Note that this option ""X"" is much slower. The returned function value is the probability of test (much less than one means NOT compatible); Code adapted by Rene Brun from original HBOOK routine HDIFF; NOTE1 A good description of the Kolmogorov test can be seen at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; NOTE2 see also alternative function TH1::Chi2Test The Kolmogorov test is assumed to give better results than Chi2Test in case of histograms with low statistics.; NOTE3 (Jan Conrad, Fred James) ""The returned value PROB is calculated such that it will be; uniformly distributed between zero and one for compatible histograms,; provided the data are not binned (or the number of bins is very large; compared with the number of events). Users who have access to unbinned; data and wish exact confidence levels should therefore not put their data; into histograms, but should call directly TMath::KolmogorovTest. On; the other hand, since TH1 is a convenient way of collecting data and; saving space, this function has been provided. However, the values of; PROB for binned data will be shifted slightly higher than expected,; depending on the effects of the binning. For example, when comparing two; uniform distributions of 500 events in 100 bins, the values of PROB,; instead of being exactly uniformly distributed between zero and one, have; a mean value of about 0.56. We can ap",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:186632,Testability,test,test,186632,"0 bins, the values of PROB,; instead of being exactly uniformly distributed between zero and one, have; a mean value of about 0.56. We can apply a useful; rule: As long as the bin width is small compared with any significant; physical effect (for example the experimental resolution) then the binning; cannot have an important effect. Therefore, we believe that for all; practical purposes, the probability value PROB is calculated correctly; provided the user is aware that:. 1. The value of PROB should not be expected to have exactly the correct; distribution for binned data.; 2. The user is responsible for seeing to it that the bin widths are; small compared with any physical phenomena of interest.; 3. The effect of binning (if any) is always to make the value of PROB; slightly too big. That is, setting an acceptance criterion of (PROB>0.05; will assure that at most 5% of truly compatible histograms are rejected,; and usually somewhat less.""; Note also that for GoF test of unbinned data ROOT provides also the class ROOT::Math::GoFTest. The class has also method for doing one sample tests (i.e. comparing the data with a given distribution). ; Reimplemented in TH2, and TH3.; Definition at line 8178 of file TH1.cxx. ◆ LabelsDeflate(). void TH1::LabelsDeflate ; (; Option_t * ; ax = ""X""). virtual . Reduce the number of bins for the axis passed in the option to the number of bins having a label. ; The method will remove only the extra bins existing after the last ""labeled"" bin. Note that if there are ""un-labeled"" bins present between ""labeled"" bins they will not be removed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5245 of file TH1.cxx. ◆ LabelsInflate(). void TH1::LabelsInflate ; (; Option_t * ; ax = ""X""). virtual . Double the number of bins for axis. ; Refill histogram. This function is called by TAxis::FindBin(const char *label) ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5315 of file TH1.cxx. ◆ LabelsOpti",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:186751,Testability,test,tests,186751,"etween zero and one, have; a mean value of about 0.56. We can apply a useful; rule: As long as the bin width is small compared with any significant; physical effect (for example the experimental resolution) then the binning; cannot have an important effect. Therefore, we believe that for all; practical purposes, the probability value PROB is calculated correctly; provided the user is aware that:. 1. The value of PROB should not be expected to have exactly the correct; distribution for binned data.; 2. The user is responsible for seeing to it that the bin widths are; small compared with any physical phenomena of interest.; 3. The effect of binning (if any) is always to make the value of PROB; slightly too big. That is, setting an acceptance criterion of (PROB>0.05; will assure that at most 5% of truly compatible histograms are rejected,; and usually somewhat less.""; Note also that for GoF test of unbinned data ROOT provides also the class ROOT::Math::GoFTest. The class has also method for doing one sample tests (i.e. comparing the data with a given distribution). ; Reimplemented in TH2, and TH3.; Definition at line 8178 of file TH1.cxx. ◆ LabelsDeflate(). void TH1::LabelsDeflate ; (; Option_t * ; ax = ""X""). virtual . Reduce the number of bins for the axis passed in the option to the number of bins having a label. ; The method will remove only the extra bins existing after the last ""labeled"" bin. Note that if there are ""un-labeled"" bins present between ""labeled"" bins they will not be removed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5245 of file TH1.cxx. ◆ LabelsInflate(). void TH1::LabelsInflate ; (; Option_t * ; ax = ""X""). virtual . Double the number of bins for axis. ; Refill histogram. This function is called by TAxis::FindBin(const char *label) ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5315 of file TH1.cxx. ◆ LabelsOption(). void TH1::LabelsOption ; (; Option_t * ; option = ""h"", . Option_t * ; a",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:17050,Usability,usab,usable,17050,"illRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::GetRandom can be used to return a random number distributed according to the contents of a histogram. Making a copy of a histogram; Like for any other ROOT object derived from TObject, one can use the Clone() function. This makes an identical copy of the original histogram including all associated errors and functions, e.g.: TH1F *hnew = (TH1F*)h->Clone(""hnew"");; TH1::CloneTObject * Clone(const char *newname="""") const overrideMake a complete copy of the underlying object.Definition TH1.cxx:2752. Normalizing histograms; One can scale a histogram such that the bins integral is equal to the normalization parameter via TH1::Scale(Double_t norm), where norm is the desired normalization divided by the integral of the histogram. Drawing histograms; Histograms are drawn via the THistPainter class. Each histogram has a pointer to its own painter (to be usable in a multithreaded program). Many drawing options are supported. See THistPainter::Paint() for more details.; The same histogram can be drawn with different options in different pads. When a histogram drawn in a pad is deleted, the histogram is automatically removed from the pad or pads where it was drawn. If a histogram is drawn in a pad, then filled again, the new status of the histogram will be automatically shown in the pad next time the pad is updated. One does not need to redraw the histogram. To draw the current version of a histogram in a pad, one can use h->DrawCopy();; This makes a clone (see Clone below) of the histogram. Once the clone is drawn, the original histogram may be modified or deleted without affecting the aspect of the clone.; One can use TH1::SetMaximum() and TH1::SetMinimum() to force a particular value for the maximum or the minimum scale on the plot. (For 1-D histograms this means the y-axis, while for 2-D histograms these functions affect th",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:26640,Usability,clear,cleared,26640,"ffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; void Copy (TObject &hnew) const override;  Copy this histogram structure to newth1. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the oper",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:90924,Usability,simpl,simple,90924,"parison procedure can include an analysis of the residuals which is often helpful in identifying the bins of histograms responsible for a significant overall \( \chi^{2} \) value. Most convenient for analysis are the adjusted (normalized) residuals [4] ; \[; r_{i} = \frac{n_{i}-N\hat{p}_{i}}{\sqrt{N\hat{p}_{i}}\sqrt{(1-N/(N+M))(1-(n_{i}+m_{i})/(N+M))}}; \]. If hypotheses of homogeneity are valid then residuals ri are approximately independent and identically distributed random variables having N(0,1) distribution. The application of the \( \chi^{2} \) test has restrictions related to the value of the expected frequencies Npi, Mpi, i=1,...,r. A conservative rule formulated in [5] is that all the expectations must be 1 or greater for both histograms. In practical cases when expected frequencies are not known the estimated expected frequencies \( M\hat{p}_{i}, N\hat{p}_{i}, i=1,...,r \) can be used.; Unweighted and weighted histograms comparison:; A simple modification of the ideas described above can be used for the comparison of the usual (unweighted) and weighted histograms. Let us denote the number of events in the ith bin in the unweighted histogram as ni and the common weight of events in the ith bin of the weighted histogram as wi. The total number of events in the unweighted histogram is equal to ; \[; N = \sum_{i=1}^{r} n_{i}; \]. and the total weight of events in the weighted histogram is equal to ; \[; W = \sum_{i=1}^{r} w_{i}; \]. Let us formulate the hypothesis of identity of an unweighted histogram to a weighted histogram so that there exist r constants p1,...,pr, such that ; \[; \sum_{i=1}^{r} p_{i} = 1; \]. for the unweighted histogram. The weight wi is a random variable with a distribution approximated by the normal probability distribution \( N(Wp_{i},\sigma_{i}^{2}) \) where \( \sigma_{i}^{2} \) is the variance of the weight wi. If we replace the variance \( \sigma_{i}^{2} \) with estimate \( s_{i}^{2} \) (sum of squares of weights of events in the i",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:102039,Usability,clear,cleared,102039,"ge of the histogram is used. ; Use option ""R"" for restricting the chisquare calculation to the given range of the function Use option ""L"" for using the chisquare based on the poisson likelihood (Baker-Cousins Chisquare) Use option ""P"" for using the Pearson chisquare based on the expected bin errors ; Definition at line 2496 of file TH1.cxx. ◆ Class(). static TClass * TH1::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TH1::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TH1::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 444 of file TH1.h. ◆ ClearUnderflowAndOverflow(). void TH1::ClearUnderflowAndOverflow ; (; ). virtual . Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ; Definition at line 2517 of file TH1.cxx. ◆ Clone(). TObject * TH1::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a complete copy of the underlying object. ; If 'newname' is set, the copy's name will be set to that name. ; Reimplemented from TObject.; Reimplemented in TH2Poly.; Definition at line 2752 of file TH1.cxx. ◆ ComputeIntegral(). Double_t TH1::ComputeIntegral ; (; Bool_t ; onlyPositive = false). virtual . Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; This function is automatically called by GetRandom when the fIntegral array does not exist or when the number of entries in the histogram has changed since the previous call to GetRandom. The resulting integral is normalized to 1. If the routine is called with the onlyPositive flag set an error will be produced in case of negative bin content and a NaN value returned Ret",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:104781,Usability,simpl,simple,104781,"3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, TProfile3D, TH2Poly, and TH1K.; Definition at line 2671 of file TH1.cxx. ◆ DeclFileName(). static const char * TH1::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 444 of file TH1.h. ◆ DirectoryAutoAdd(). void TH1::DirectoryAutoAdd ; (; TDirectory * ; dir). virtual . Perform the automatic addition of the histogram to the given directory. ; Note this function is called in place when the semantic requires this object to be added to a directory (I.e. when being read from a TKey or being Cloned) ; Definition at line 2801 of file TH1.cxx. ◆ DistancetoPrimitive(). Int_t TH1::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a line. ; Compute the closest distance of approach from point px,py to elements of a histogram. The distance is computed in pixels units.; Algorithm:; Currently, this simple model computes the distance from the mouse to the histogram contour only. ; Reimplemented from TObject.; Definition at line 2823 of file TH1.cxx. ◆ Divide() [1/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1). virtual . Divide this histogram by h1. ; this = this/h1 if errors are defined (see TH1::Sumw2), errors are also recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. See the other TH1::Divide that gives the possibility to optionally compute binomial errors.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Scale; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2908 of file TH1.cxx. ◆ Divide() [2/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1, . const TH1 * ; h",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:108625,Usability,usab,usable,108625,"ly, TProfile, TProfile2D, and TProfile3D.; Definition at line 2840 of file TH1.cxx. ◆ DoFillN(). void TH1::DoFillN ; (; Int_t ; ntimes, . const Double_t * ; x, . const Double_t * ; w, . Int_t ; stride = 1 . ). protectedvirtual . Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ; Definition at line 3473 of file TH1.cxx. ◆ DoIntegral(). Double_t TH1::DoIntegral ; (; Int_t ; ix1, . Int_t ; ix2, . Int_t ; iy1, . Int_t ; iy2, . Int_t ; iz1, . Int_t ; iz2, . Double_t & ; err, . Option_t * ; opt, . Bool_t ; doerr = kFALSE . ); const. protectedvirtual . Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ; Definition at line 7977 of file TH1.cxx. ◆ Draw(). void TH1::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this histogram with options. ; Histograms are drawn via the THistPainter class. Each histogram has a pointer to its own painter (to be usable in a multithreaded program). The same histogram can be drawn with different options in different pads. When a histogram drawn in a pad is deleted, the histogram is automatically removed from the pad or pads where it was drawn. If a histogram is drawn in a pad, then filled again, the new status of the histogram will be automatically shown in the pad next time the pad is updated. One does not need to redraw the histogram. To draw the current version of a histogram in a pad, one can use h->DrawCopy(); This makes a clone of the histogram. Once the clone is drawn, the original histogram may be modified or deleted without affecting the aspect of the clone. By default, TH1::Draw clears the current pad.; One can use TH1::SetMaximum and TH1::SetMinimum to force a particular value for the maximum or the minimum scale on the plot.; TH1::UseCurrentStyle can be used to change all histogram graphics attributes to correspond to the current selected style. This function must be called",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:109313,Usability,clear,clears,109313,"ber values working for all histograms (1D, 2D and 3D) ; Definition at line 7977 of file TH1.cxx. ◆ Draw(). void TH1::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this histogram with options. ; Histograms are drawn via the THistPainter class. Each histogram has a pointer to its own painter (to be usable in a multithreaded program). The same histogram can be drawn with different options in different pads. When a histogram drawn in a pad is deleted, the histogram is automatically removed from the pad or pads where it was drawn. If a histogram is drawn in a pad, then filled again, the new status of the histogram will be automatically shown in the pad next time the pad is updated. One does not need to redraw the histogram. To draw the current version of a histogram in a pad, one can use h->DrawCopy(); This makes a clone of the histogram. Once the clone is drawn, the original histogram may be modified or deleted without affecting the aspect of the clone. By default, TH1::Draw clears the current pad.; One can use TH1::SetMaximum and TH1::SetMinimum to force a particular value for the maximum or the minimum scale on the plot.; TH1::UseCurrentStyle can be used to change all histogram graphics attributes to correspond to the current selected style. This function must be called for each histogram. In case one reads and draws many histograms from a file, one can force the histograms to inherit automatically the current graphics style by calling before gROOT->ForceStyle();; See the THistPainter class for a description of all the drawing options. ; Reimplemented from TObject.; Definition at line 3066 of file TH1.cxx. ◆ DrawCopy(). TH1 * TH1::DrawCopy ; (; Option_t * ; option = """", . const char * ; name_postfix = ""_copy"" . ); const. virtual . Copy this histogram and Draw in the current pad. ; Once the histogram is drawn into the pad, any further modification using graphics input will be made on the copy of the histogram, and not to the original object. By default a ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:111192,Usability,clear,cleared,111192,"on using graphics input will be made on the copy of the histogram, and not to the original object. By default a postfix ""_copy"" is added to the histogram name. Pass an empty postfix in case you want to draw a histogram with the same name; See Draw for the list of options ; Definition at line 3113 of file TH1.cxx. ◆ DrawNormalized(). TH1 * TH1::DrawNormalized ; (; Option_t * ; option = """", . Double_t ; norm = 1 . ); const. virtual . Draw a normalized copy of this histogram. ; A clone of this histogram is normalized to norm and drawn with option. A pointer to the normalized histogram is returned. The contents of the histogram copy are scaled such that the new sum of weights (excluding under and overflow) is equal to norm. Note that the returned normalized histogram is not added to the list of histograms in the current directory in memory. It is the user's responsibility to delete this histogram. The kCanDelete bit is set for the returned object. If a pad containing this copy is cleared, the histogram will be automatically deleted.; See Draw for the list of options ; Definition at line 3144 of file TH1.cxx. ◆ DrawPanel(). void TH1::DrawPanel ; (; ). virtual . Display a panel with all histogram drawing options. ; See class TDrawPanelHist for example ; Definition at line 3175 of file TH1.cxx. ◆ Eval(). void TH1::Eval ; (; TF1 * ; f1, . Option_t * ; option = """" . ). virtual . Evaluate function f1 at the center of bins of this histogram. . If option ""R"" is specified, the function is evaluated only for the bins included in the function range.; If option ""A"" is specified, the value of the function is added to the existing bin contents; If option ""S"" is specified, the value of the function is used to generate a value, distributed according to the Poisson distribution, with f1 as the mean. . Definition at line 3192 of file TH1.cxx. ◆ ExecuteEvent(). void TH1::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Execute action corresponding to one e",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:120314,Usability,simpl,simply,120314," One can also call TF1::GetRandom to get a random variate from a function. ; Reimplemented in TH2, and TH3.; Definition at line 3519 of file TH1.cxx. ◆ FillRandom() [2/2]. void TH1::FillRandom ; (; TH1 * ; h, . Int_t ; ntimes = 5000, . TRandom * ; rng = nullptr . ). virtual . Fill histogram following distribution in histogram h. ; Parameters. h: Histogram pointer used for sampling random number ; ntimes: number of times the histogram is filled ; rng: (optional) Random number generator used for sampling. The distribution contained in the histogram h (TH1) is integrated over the channel contents for the bin range of this histogram. It is normalized to 1.; Getting one random number implies:; Generating a random number between 0 and 1 (say r1); Look in which bin in the normalized integral r1 corresponds to; Fill histogram channel ntimes random numbers are generated. SPECIAL CASE when the target histogram has the same binning as the source. in this case we simply use a poisson distribution where the mean value per bin = bincontent/integral. ; Reimplemented in TH2, and TH3.; Definition at line 3590 of file TH1.cxx. ◆ FindBin(). Int_t TH1::FindBin ; (; Double_t ; x, . Double_t ; y = 0, . Double_t ; z = 0 . ). virtual . Return Global bin number corresponding to x,y,z. ; 2-D and 3-D histograms are represented with a one dimensional structure. This has the advantage that all existing functions, such as GetBinContent, GetBinError, GetBinFunction work for all dimensions. This function tries to extend the axis if the given point belongs to an under-/overflow bin AND if CanExtendAllAxes() is true.; See also TH1::GetBin, TAxis::FindBin and TAxis::FindFixBin ; Reimplemented in TH2Poly.; Definition at line 3672 of file TH1.cxx. ◆ FindFirstBinAbove(). Int_t TH1::FindFirstBinAbove ; (; Double_t ; threshold = 0, . Int_t ; axis = 1, . Int_t ; firstBin = 1, . Int_t ; lastBin = -1 . ); const. virtual . Find first bin with content > threshold for axis (1=x, 2=y, 3=z) if no bins with conten",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:143720,Usability,undo,undo,143720,"ared fit. In general, one should not fit a histogram with non-empty bins and zero errors.; If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1. Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors are corrected by the obtained chi2 value using this scaling expression: errorp *= sqrt(chisquare/(ndf-1)) as it is done when fitting a TGraph with no point errors.; Excluding points; You can use TF1::RejectPoint inside your fitting function to exclude some points within a certain range from the fit. See the tutorial fit/fitExclude.C.; Warning when using the option ""0""; When selecting the option ""0"", the fitted function is added to the list of functions of the histogram, but it is not drawn when the histogram is drawn. You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; h.Draw(); // function is not drawn; h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; h.Draw(); // function is visible again; TF1::kNotDraw@ kNotDrawDefinition TF1.h:346. Definition at line 4262 of file TH1.cxx. ◆ FitOptionsMake(). Int_t TH1::FitOptionsMake ; (; Option_t * ; option, . Foption_t & ; Foption . ). static . Decode string choptin and fill fitOption structure. ; Definition at line 4652 of file TH1.cxx. ◆ FitPanel(). void TH1::FitPanel ; (; ). virtual . Display a panel with all histogram fit options. ; See class TFitPanel for example ; Definition at line 4284 of file TH1.cxx. ◆ GetAsymmetry(). TH1 * TH1::GetAsymmetry ; (; TH1 * ; h2, . Double_t ; c2 = 1, . Double_t ; dc2 = 0 . ). Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined as: ; Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this; works for 1D, 2D, etc. hist",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1.html:173841,Usability,simpl,simply,173841," y or z axis. Note, that since third and fourth moment are not calculated at the fill time, skewness and its standard error are computed bin by bin; IMPORTANT NOTE: The returned value depends on how the histogram statistics are calculated. See TH1::GetMean and TH1::GetStdDev. ; Definition at line 7671 of file TH1.cxx. ◆ GetStatOverflows(). EStatOverflows TH1::GetStatOverflows ; (; ); const. inline . Get the behaviour adopted by the object about the statoverflows. See EStatOverflows for more information. ; Definition at line 323 of file TH1.h. ◆ GetStatOverflowsBehaviour(). Bool_t TH1::GetStatOverflowsBehaviour ; (; ); const. inlineprotected . Definition at line 152 of file TH1.h. ◆ GetStats(). void TH1::GetStats ; (; Double_t * ; stats); const. virtual . fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; If no axis-subrange is specified (via TAxis::SetRange), the array stats is simply a copy of the statistics quantities computed at filling time. If a sub-range is specified, the function recomputes these quantities from the bin contents in the current axis range.; IMPORTANT NOTE: This means that the returned statistics are context-dependent. If TAxis::kAxisRange, the returned statistics are dependent on the binning; otherwise, they are a copy of the histogram statistics computed at fill time, which are unbinned by default (calling TH1::ResetStats forces them to use binned statistics). You can reset TAxis::kAxisRange using TAxis::SetRange(0, 0).; Note that the mean value/StdDev is computed using the bins in the currently defined range (see TAxis::SetRange). By default the range includes all bins from 1 to nbins included, excluding underflows and overflows. To force the underflows and overflows in the computation, one must call the static function TH1::StatOverflows(kTRUE) before filling the histogram. ; Reimplemented in ",MatchSource.WIKI,doc/master/classTH1.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1.html
https://root.cern/doc/master/classTH1C.html:2185,Availability,error,errors,2185,"TH1C () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1C & operator= (const TH1C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \)",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:2222,Availability,error,errors,2222,"TH1C () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1C & operator= (const TH1C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \)",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:2371,Availability,error,errors,2371,"content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1C & operator= (const TH1C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:2408,Availability,error,errors,2408,"content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1C & operator= (const TH1C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:3633,Availability,error,error,3633,"eturning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ;",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:4897,Availability,error,errors,4897,"ow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; void Draw (Option_t *option="""") override;  Draw this histogram with options. ;  ; virtual TH1 * DrawCopy (Option_t *option="""", const char *name_postfix=""_copy"") const;  Copy this histogram and Draw in the current pad. ;  ; virtual TH1 * DrawNormalized (Option_t *option="""", Double_t norm=1) const;  Draw a normalized copy of this histogram. ;  ; virtual void DrawPanel ();  Display a panel with all histogram drawing options. ;  ; virtual void Eval (TF1 *f1, Option_t *option="""");  Evaluate function f1 at the center of bins of this histogram. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void ExtendAxis (Double_t x, TAxis *axis);  Histogram is resized along axis such that x is in the axis range. ;  ; virtual TH1 * FFT (TH1 *h_output, Option_t *option);  This function allows to do discrete Fourier transforms of TH1 and TH2. ; ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:4934,Availability,error,errors,4934,"ow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; void Draw (Option_t *option="""") override;  Draw this histogram with options. ;  ; virtual TH1 * DrawCopy (Option_t *option="""", const char *name_postfix=""_copy"") const;  Copy this histogram and Draw in the current pad. ;  ; virtual TH1 * DrawNormalized (Option_t *option="""", Double_t norm=1) const;  Draw a normalized copy of this histogram. ;  ; virtual void DrawPanel ();  Display a panel with all histogram drawing options. ;  ; virtual void Eval (TF1 *f1, Option_t *option="""");  Evaluate function f1 at the center of bins of this histogram. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void ExtendAxis (Double_t x, TAxis *axis);  Histogram is resized along axis such that x is in the axis range. ;  ; virtual TH1 * FFT (TH1 *h_output, Option_t *option);  This function allows to do discrete Fourier transforms of TH1 and TH2. ; ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:8921,Availability,error,error,8921,"t (TF1 *f1, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0);  Fit histogram with the function pointer f1. ;  ; virtual void FitPanel ();  Display a panel with all histogram fit options. ;  ; TH1 * GetAsymmetry (TH1 *h2, Double_t c2=1, Double_t dc2=0);  Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined as: ;  ; virtual Color_t GetAxisColor (Option_t *axis=""X"") const;  Return the number of divisions for ""axis"". ;  ; virtual Float_t GetBarOffset () const;  ; virtual Float_t GetBarWidth () const;  ; virtual Int_t GetBin (Int_t binx, Int_t biny=0, Int_t binz=0) const;  Return Global bin number corresponding to binx,y,z. ;  ; virtual Double_t GetBinCenter (Int_t bin) const;  Return bin center for 1D histogram. ;  ; virtual Double_t GetBinContent (Int_t bin) const;  Return content of bin number bin. ;  ; virtual Double_t GetBinContent (Int_t bin, Int_t) const;  ; virtual Double_t GetBinContent (Int_t bin, Int_t, Int_t) const;  ; virtual Double_t GetBinError (Int_t bin) const;  Return value of error associated to bin number bin. ;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny) const;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny, Int_t binz) const;  ; virtual Double_t GetBinErrorLow (Int_t bin) const;  Return lower error associated to bin number bin. ;  ; virtual EBinErrorOpt GetBinErrorOption () const;  ; virtual Double_t GetBinErrorUp (Int_t bin) const;  Return upper error associated to bin number bin. ;  ; virtual Double_t GetBinLowEdge (Int_t bin) const;  Return bin lower edge for 1D histogram. ;  ; virtual Double_t GetBinWidth (Int_t bin) const;  Return bin width for 1D histogram. ;  ; virtual Double_t GetBinWithContent (Double_t c, Int_t &binx, Int_t firstx=0, Int_t lastx=0, Double_t maxdiff=0) const;  Compute first binx in the range [firstx,lastx] for which diff = abs(bin_content-c) <= maxdiff. ;  ; virtual void GetBinXYZ (Int_t binglobal, Int_t &binx, Int_t &biny, Int",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:9167,Availability,error,error,9167,"TH1 *h2, Double_t c2=1, Double_t dc2=0);  Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined as: ;  ; virtual Color_t GetAxisColor (Option_t *axis=""X"") const;  Return the number of divisions for ""axis"". ;  ; virtual Float_t GetBarOffset () const;  ; virtual Float_t GetBarWidth () const;  ; virtual Int_t GetBin (Int_t binx, Int_t biny=0, Int_t binz=0) const;  Return Global bin number corresponding to binx,y,z. ;  ; virtual Double_t GetBinCenter (Int_t bin) const;  Return bin center for 1D histogram. ;  ; virtual Double_t GetBinContent (Int_t bin) const;  Return content of bin number bin. ;  ; virtual Double_t GetBinContent (Int_t bin, Int_t) const;  ; virtual Double_t GetBinContent (Int_t bin, Int_t, Int_t) const;  ; virtual Double_t GetBinError (Int_t bin) const;  Return value of error associated to bin number bin. ;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny) const;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny, Int_t binz) const;  ; virtual Double_t GetBinErrorLow (Int_t bin) const;  Return lower error associated to bin number bin. ;  ; virtual EBinErrorOpt GetBinErrorOption () const;  ; virtual Double_t GetBinErrorUp (Int_t bin) const;  Return upper error associated to bin number bin. ;  ; virtual Double_t GetBinLowEdge (Int_t bin) const;  Return bin lower edge for 1D histogram. ;  ; virtual Double_t GetBinWidth (Int_t bin) const;  Return bin width for 1D histogram. ;  ; virtual Double_t GetBinWithContent (Double_t c, Int_t &binx, Int_t firstx=0, Int_t lastx=0, Double_t maxdiff=0) const;  Compute first binx in the range [firstx,lastx] for which diff = abs(bin_content-c) <= maxdiff. ;  ; virtual void GetBinXYZ (Int_t binglobal, Int_t &binx, Int_t &biny, Int_t &binz) const;  Return binx, biny, binz corresponding to the global bin number globalbin see TH1::GetBin function above. ;  ; const Double_t * GetBuffer () const;  ; Int_t GetBufferLength () const;  ; Int_t GetBufferSize () const;  ; vir",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:9324,Availability,error,error,9324,") const;  Return the number of divisions for ""axis"". ;  ; virtual Float_t GetBarOffset () const;  ; virtual Float_t GetBarWidth () const;  ; virtual Int_t GetBin (Int_t binx, Int_t biny=0, Int_t binz=0) const;  Return Global bin number corresponding to binx,y,z. ;  ; virtual Double_t GetBinCenter (Int_t bin) const;  Return bin center for 1D histogram. ;  ; virtual Double_t GetBinContent (Int_t bin) const;  Return content of bin number bin. ;  ; virtual Double_t GetBinContent (Int_t bin, Int_t) const;  ; virtual Double_t GetBinContent (Int_t bin, Int_t, Int_t) const;  ; virtual Double_t GetBinError (Int_t bin) const;  Return value of error associated to bin number bin. ;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny) const;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny, Int_t binz) const;  ; virtual Double_t GetBinErrorLow (Int_t bin) const;  Return lower error associated to bin number bin. ;  ; virtual EBinErrorOpt GetBinErrorOption () const;  ; virtual Double_t GetBinErrorUp (Int_t bin) const;  Return upper error associated to bin number bin. ;  ; virtual Double_t GetBinLowEdge (Int_t bin) const;  Return bin lower edge for 1D histogram. ;  ; virtual Double_t GetBinWidth (Int_t bin) const;  Return bin width for 1D histogram. ;  ; virtual Double_t GetBinWithContent (Double_t c, Int_t &binx, Int_t firstx=0, Int_t lastx=0, Double_t maxdiff=0) const;  Compute first binx in the range [firstx,lastx] for which diff = abs(bin_content-c) <= maxdiff. ;  ; virtual void GetBinXYZ (Int_t binglobal, Int_t &binx, Int_t &biny, Int_t &binz) const;  Return binx, biny, binz corresponding to the global bin number globalbin see TH1::GetBin function above. ;  ; const Double_t * GetBuffer () const;  ; Int_t GetBufferLength () const;  ; Int_t GetBufferSize () const;  ; virtual Double_t GetCellContent (Int_t binx, Int_t biny) const;  ; virtual Double_t GetCellError (Int_t binx, Int_t biny) const;  ; virtual void GetCenter (Double_t *center) const;  Fill array with center ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:12653,Availability,error,error,12653,"offset. ;  ; virtual Float_t GetLabelSize (Option_t *axis=""X"") const;  Return the ""axis"" label size. ;  ; TList * GetListOfFunctions () const;  ; virtual void GetLowEdge (Double_t *edge) const;  Fill array with low edge of bins for 1D histogram Better to use h1.GetXaxis()->GetLowEdge(edge) ;  ; virtual Double_t GetMaximum (Double_t maxval=FLT_MAX) const;  Return maximum value smaller than maxval of bins in the range, unless the value has been overridden by TH1::SetMaximum, in which case it returns that value. ;  ; virtual Int_t GetMaximumBin () const;  Return location of bin with maximum value in the range. ;  ; virtual Int_t GetMaximumBin (Int_t &locmax, Int_t &locmay, Int_t &locmaz) const;  Return location of bin with maximum value in the range. ;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMean (Int_t axis=1) const;  For axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis. ;  ; virtual Double_t GetMeanError (Int_t axis=1) const;  Return standard error of mean of this histogram along the X axis. ;  ; virtual Double_t GetMinimum (Double_t minval=-FLT_MAX) const;  Return minimum value larger than minval of bins in the range, unless the value has been overridden by TH1::SetMinimum, in which case it returns that value. ;  ; virtual void GetMinimumAndMaximum (Double_t &min, Double_t &max) const;  Retrieve the minimum and maximum values in the histogram. ;  ; virtual Int_t GetMinimumBin () const;  Return location of bin with minimum value in the range. ;  ; virtual Int_t GetMinimumBin (Int_t &locmix, Int_t &locmiy, Int_t &locmiz) const;  Return location of bin with minimum value in the range. ;  ; virtual Double_t GetMinimumStored () const;  ; virtual Int_t GetNbinsX () const;  ; virtual Int_t GetNbinsY () const;  ; virtual Int_t GetNbinsZ () const;  ; virtual Int_t GetNcells () const;  ; virtual Int_t GetNdivisions (Option_t *axis=""X"") const;  Return the number of divisions for ""axis"". ;  ; virtual Double_t GetNormFacto",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:15015,Availability,error,error,15015,"_p := Q(p) is defined as the value x_p such that the cumulative probability distribution Function F of variable X yields: ;  ; virtual Double_t GetRandom (TRandom *rng=nullptr) const;  Return a random number distributed according the histogram bin contents. ;  ; Double_t GetRMS (Int_t axis=1) const;  This function returns the Standard Deviation (Sigma) of the distribution not the Root Mean Square (RMS). ;  ; Double_t GetRMSError (Int_t axis=1) const;  ; virtual Double_t GetSkewness (Int_t axis=1) const;  ; EStatOverflows GetStatOverflows () const;  Get the behaviour adopted by the object about the statoverflows. See EStatOverflows for more information. ;  ; virtual void GetStats (Double_t *stats) const;  fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ;  ; virtual Double_t GetStdDev (Int_t axis=1) const;  Returns the Standard Deviation (Sigma). ;  ; virtual Double_t GetStdDevError (Int_t axis=1) const;  Return error of standard deviation estimation for Normal distribution. ;  ; virtual Double_t GetSumOfWeights () const;  Return the sum of weights excluding under/overflows. ;  ; virtual TArrayD * GetSumw2 ();  ; virtual const TArrayD * GetSumw2 () const;  ; virtual Int_t GetSumw2N () const;  ; virtual Float_t GetTickLength (Option_t *axis=""X"") const;  Return the ""axis"" tick length. ;  ; virtual Style_t GetTitleFont (Option_t *axis=""X"") const;  Return the ""axis"" title font. ;  ; virtual Float_t GetTitleOffset (Option_t *axis=""X"") const;  Return the ""axis"" title offset. ;  ; virtual Float_t GetTitleSize (Option_t *axis=""X"") const;  Return the ""axis"" title size. ;  ; TAxis * GetXaxis ();  ; const TAxis * GetXaxis () const;  ; TAxis * GetYaxis ();  ; const TAxis * GetYaxis () const;  ; TAxis * GetZaxis ();  ; const TAxis * GetZaxis () const;  ; virtual Double_t Integral (Int_t binx1, Int_t binx2, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2]. ;  ; virtual D",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:16266,Availability,error,error,16266,"  ; virtual TArrayD * GetSumw2 ();  ; virtual const TArrayD * GetSumw2 () const;  ; virtual Int_t GetSumw2N () const;  ; virtual Float_t GetTickLength (Option_t *axis=""X"") const;  Return the ""axis"" tick length. ;  ; virtual Style_t GetTitleFont (Option_t *axis=""X"") const;  Return the ""axis"" title font. ;  ; virtual Float_t GetTitleOffset (Option_t *axis=""X"") const;  Return the ""axis"" title offset. ;  ; virtual Float_t GetTitleSize (Option_t *axis=""X"") const;  Return the ""axis"" title size. ;  ; TAxis * GetXaxis ();  ; const TAxis * GetXaxis () const;  ; TAxis * GetYaxis ();  ; const TAxis * GetYaxis () const;  ; TAxis * GetZaxis ();  ; const TAxis * GetZaxis () const;  ; virtual Double_t Integral (Int_t binx1, Int_t binx2, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2]. ;  ; virtual Double_t Integral (Option_t *option="""") const;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2] and its error. ;  ; virtual Double_t Interpolate (Double_t x) const;  Given a point x, approximates the value via linear interpolation based on the two nearest bin centers. ;  ; virtual Double_t Interpolate (Double_t x, Double_t y) const;  2d Interpolation. Not yet implemented. ;  ; virtual Double_t Interpolate (Double_t x, Double_t y, Double_t z) const;  3d Interpolation. Not yet implemented. ;  ; Bool_t IsBinOverflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is overflow. ;  ; Bool_t IsBinUnderflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is underflow. ;  ; virtual Bool_t IsHighlight () const;  ; virtual Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using Kolmogorov test. ;  ; virtual void LabelsDeflate (Option_t *axis=""X"");  Reduce the number of bins for the axis passed in the option",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:18617,Availability,error,errors,18617," ; Long64_t Merge (TCollection *list, Option_t *option);  Add all histograms in the collection to this histogram. ;  ; virtual Bool_t Multiply (const TH1 *h1);  Multiply this histogram by h1. ;  ; virtual Bool_t Multiply (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2. ;  ; virtual Bool_t Multiply (TF1 *f1, Double_t c1=1);  Performs the operation: ;  ; void Paint (Option_t *option="""") override;  Control routine to paint any kind of histograms. ;  ; void Print (Option_t *option="""") const override;  Print some global quantities for this histogram. ;  ; virtual void PutStats (Double_t *stats);  Replace current statistics with the values in array stats. ;  ; virtual TH1 * Rebin (Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr);  Rebin this histogram. ;  ; virtual void RebinAxis (Double_t x, TAxis *axis);  ; virtual TH1 * RebinX (Int_t ngroup=2, const char *newname="""");  ; virtual void Rebuild (Option_t *option="""");  Using the current bin info, recompute the arrays for contents and errors. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual void ResetStats ();  Reset the statistics including the number of entries and replace with values calculated from bin content. ;  ; void SaveAs (const char *filename=""hist"", Option_t *option="""") const override;  Save the histogram as .csv, .tsv or .txt. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void Scale (Double_t c1=1, Option_t *option="""");  Multiply this histogram by a constant c1. ;  ; virtual void SetAxisColor (Color_t color=1, Option_t *axis=""X"");  Set color to draw the axis line and tick marks. ;  ; virtual void SetAxisRange (Double_t xmin, Double_t xmax, Option_t *axis=""X"");  Set the ""axis"" range. ;  ; virtual void SetBarOffset (Float_t ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:20223,Availability,error,error,20223,"am by a constant c1. ;  ; virtual void SetAxisColor (Color_t color=1, Option_t *axis=""X"");  Set color to draw the axis line and tick marks. ;  ; virtual void SetAxisRange (Double_t xmin, Double_t xmax, Option_t *axis=""X"");  Set the ""axis"" range. ;  ; virtual void SetBarOffset (Float_t offset=0.25);  Set the bar offset as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinContent (Int_t bin, Double_t content);  Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Doub",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:20347,Availability,error,error,20347,"am by a constant c1. ;  ; virtual void SetAxisColor (Color_t color=1, Option_t *axis=""X"");  Set color to draw the axis line and tick marks. ;  ; virtual void SetAxisRange (Double_t xmin, Double_t xmax, Option_t *axis=""X"");  Set the ""axis"" range. ;  ; virtual void SetBarOffset (Float_t offset=0.25);  Set the bar offset as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinContent (Int_t bin, Double_t content);  Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Doub",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:20472,Availability,error,error,20472,"virtual void SetBarOffset (Float_t offset=0.25);  Set the bar offset as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinContent (Int_t bin, Double_t content);  Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:20607,Availability,error,error,20607,"ual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinContent (Int_t bin, Double_t content);  Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis paramet",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:21864,Availability,mask,mask,21864," ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:21894,Availability,mask,mask,21894," ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:22840,Availability,error,error,22840,"le / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Double_t *error);  Replace bin errors by values in array error. ;  ; virtual void SetHighlight (Bool_t set=kTRUE);  Set highlight (enable/disable) mode for the histogram by default highlight mode is disable. ;  ; virtual void SetLabelColor (Color_t color=1, Option_t *axis=""X"");  Set axis labels color. ;  ; virtual void SetLabelFont (Style_t font=62, Option_t *axis=""X"");  Set font number used to draw axis labels. ;  ; virtual void SetLabelOffset (Float_t offset=0.005, Option_t *axis=""X"");  Set offset between axis and axis' labels. ;  ; virtual void SetLabelSize (Float_t size=0.02, Option_t *axis=""X"");  Set size of axis' labels. ;  ; virtual void SetMaximum (Double_t maximum=-1111);  ; virtual void SetMinimum (Double_t minimum=-1111);  ; void SetName (const char *name) override;  Change the name of this histogram. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the name and title of this histogram. ;  ; virtual void SetNdivisions (Int_t n=510, Option_",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:22861,Availability,error,errors,22861,"le / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Double_t *error);  Replace bin errors by values in array error. ;  ; virtual void SetHighlight (Bool_t set=kTRUE);  Set highlight (enable/disable) mode for the histogram by default highlight mode is disable. ;  ; virtual void SetLabelColor (Color_t color=1, Option_t *axis=""X"");  Set axis labels color. ;  ; virtual void SetLabelFont (Style_t font=62, Option_t *axis=""X"");  Set font number used to draw axis labels. ;  ; virtual void SetLabelOffset (Float_t offset=0.005, Option_t *axis=""X"");  Set offset between axis and axis' labels. ;  ; virtual void SetLabelSize (Float_t size=0.02, Option_t *axis=""X"");  Set size of axis' labels. ;  ; virtual void SetMaximum (Double_t maximum=-1111);  ; virtual void SetMinimum (Double_t minimum=-1111);  ; void SetName (const char *name) override;  Change the name of this histogram. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the name and title of this histogram. ;  ; virtual void SetNdivisions (Int_t n=510, Option_",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:22887,Availability,error,error,22887,"le / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Double_t *error);  Replace bin errors by values in array error. ;  ; virtual void SetHighlight (Bool_t set=kTRUE);  Set highlight (enable/disable) mode for the histogram by default highlight mode is disable. ;  ; virtual void SetLabelColor (Color_t color=1, Option_t *axis=""X"");  Set axis labels color. ;  ; virtual void SetLabelFont (Style_t font=62, Option_t *axis=""X"");  Set font number used to draw axis labels. ;  ; virtual void SetLabelOffset (Float_t offset=0.005, Option_t *axis=""X"");  Set offset between axis and axis' labels. ;  ; virtual void SetLabelSize (Float_t size=0.02, Option_t *axis=""X"");  Set size of axis' labels. ;  ; virtual void SetMaximum (Double_t maximum=-1111);  ; virtual void SetMinimum (Double_t minimum=-1111);  ; void SetName (const char *name) override;  Change the name of this histogram. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the name and title of this histogram. ;  ; virtual void SetNdivisions (Int_t n=510, Option_",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:28130,Availability,error,error,28130,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method,",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:28219,Availability,error,error,28219,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const c",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:28374,Availability,error,error,28374,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if o",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:28551,Availability,error,error,28551,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDe",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:31783,Availability,error,error,31783,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:39285,Availability,error,errors,39285,"E);  Sets the flag controlling the automatic add of histograms in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: cannot be inlined on Windows/NT. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the default buffer size for automatic histograms the parameter fgBufferSize may be changed via SetDefaultBufferSize. ;  ; static Bool_t GetDefaultSumw2 ();  Return kTRUE if TH1::Sumw2 must be called when creating new histograms. ;  ; static void SetDefaultBufferSize (Int_t buffersize=1000);  Static function to set the default buffer size for automatic histograms. ;  ; static void SetDefaultSumw2 (Bool_t sumw2=kTRUE);  When this static function is called with sumw2=kTRUE, all new histograms will automatically activate the storage of the sum of squares of errors, ie TH1::Sumw2 is automatically called. ;  ; static void SmoothArray (Int_t NN, Double_t *XX, Int_t ntimes=1);  Smooth array xx, translation of Hbook routine hsmoof.F. ;  ; static void StatOverflows (Bool_t flag=kTRUE);  if flag=kTRUE, underflows and overflows are used by the Fill functions in the computation of statistics (mean value, StdDev). ;  ; static TH1 * TransformHisto (TVirtualFFT *fft, TH1 *h_output, Option_t *option);  For a given transform (first parameter), fills the histogram (second parameter) with the transform output data, specified in the third parameter If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created and the user is responsible for deleting it. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:43946,Availability,error,error,43946,"tructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; virtual Double_t GetBinErrorSqUnchecked (Int_t bin) const;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:45372,Availability,error,error,45372,"th the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; virtual Double_t GetBinErrorSqUnchecked (Int_t bin) const;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Friends; TH1C operator* (const TH1C &h1, const TH1C &h2);  Operator *. ;  ; TH1C operator* (const TH1C &h1, Double_t c1);  ; TH1C operator* (Double_t c1, const TH1C &h1);  Operator *. ;  ; TH1C operator+ (const TH1C &h1, const TH1C &h2);  Operator +. ;  ; TH1C operator- (const TH1C &h1, const TH1C &h2);  Operator -. ;  ; TH1C operator/ (const TH1C &h1, const TH1C &h2);  Operator /. ;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumera",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:46307,Availability,error,errors,46307,"onst char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Friends; TH1C operator* (const TH1C &h1, const TH1C &h2);  Operator *. ;  ; TH1C operator* (const TH1C &h1, Double_t c1);  ; TH1C operator* (Double_t c1, const TH1C &h1);  Operator *. ;  ; TH1C operator+ (const TH1C &h1, const TH1C &h2);  Operator +. ;  ; TH1C operator- (const TH1C &h1, const TH1C &h2);  Operator -. ;  ; TH1C operator/ (const TH1C &h1, const TH1C &h2);  Operator /. ;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type of statistics for bin errors. More...;  ; enum  EStatOverflows { kIgnore = 0; , kConsider = 1; , kNeutral = 2; };  Enumeration specifying the way to treat statoverflow. More...;  ; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kUserContour = (1ULL << ( 10 )); , kLogX = (1ULL << ( 15 )); , kIsZoomed = (1ULL << ( 16 )); , ;   kNoTitle = (1ULL << ( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMust",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:49161,Availability,error,errors,49161,"xis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  Same limits and bins. ;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ! Histogram dimension (1, 2 or 3 dim) ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this histogram ;  ; Double_t fEntries;  Number of entries. ;  ; TList * fFunctions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:42564,Deployability,update,update,42564," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayC; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t n",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:55503,Deployability,update,update,55503,"ition at line 9567 of file TH1.cxx. ◆ RetrieveBinContent(). Double_t TH1C::RetrieveBinContent ; (; Int_t ; bin); const. inlineoverrideprotectedvirtual . Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 485 of file TH1.h. ◆ SetBinsLength(). void TH1C::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow Reallocate bin contents array. ; Reimplemented from TH1.; Definition at line 9577 of file TH1.cxx. ◆ Streamer(). void TH1C::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TH1. ◆ StreamerNVirtual(). void TH1C::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 475 of file TH1.h. ◆ UpdateBinContent(). void TH1C::UpdateBinContent ; (; Int_t ; bin, . Double_t ; content . ). inlineoverrideprotectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 486 of file TH1.h. Friends And Related Symbol Documentation. ◆ operator* [1/3]. TH1C operator* ; (; const TH1C & ; h1, . const TH1C & ; h2 . ). friend . Operator *. ; Definition at line 9630 of file TH1.cxx. ◆ operator* [2/3]. TH1C operator* ; (; const TH1C & ; h1, . Double_t ; c1 . ). friend . Definition at line 491 of file TH1.h. ◆ operator* [3/3]. TH1C operator* ; (; Double_t ; c1, . const TH1C & ; h1 . ). friend . Operator *. ; Definition at line 9597 of file TH1.cxx. ◆ operator+. TH1C operator+ ; (; const TH1C & ; h1, . const TH1C & ; h2 . ). friend . Operator +. ; Definition at line 9608 of file TH1.cxx. ◆ operator-. TH1C operator- ; (; const TH1C & ; h1, . const TH1C & ; h2 . ). friend . Operator -. ; Definition at line 9619 of file TH1.cxx. ◆ operator/. TH1C operator/ ; (; const TH1C & ; h1, . const TH1C & ; h2 . ). friend . Operator /. ; Definition at line 9641 of file TH1.cxx. Li",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:43349,Energy Efficiency,power,power,43349," . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merg",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:47791,Energy Efficiency,power,power,47791,"( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayC; Char_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1,",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:47932,Energy Efficiency,power,power,47932,"x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayC; Char_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  S",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:3382,Integrability,rout,routine,3382,"n="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:18010,Integrability,rout,routine,18010,") const;  Statistical test of compatibility in shape between this histogram and h2, using Kolmogorov test. ;  ; virtual void LabelsDeflate (Option_t *axis=""X"");  Reduce the number of bins for the axis passed in the option to the number of bins having a label. ;  ; virtual void LabelsInflate (Option_t *axis=""X"");  Double the number of bins for axis. ;  ; virtual void LabelsOption (Option_t *option=""h"", Option_t *axis=""X"");  Sort bins with labels or set option(s) to draw axis with labels. ;  ; virtual Long64_t Merge (TCollection *list);  ; Long64_t Merge (TCollection *list, Option_t *option);  Add all histograms in the collection to this histogram. ;  ; virtual Bool_t Multiply (const TH1 *h1);  Multiply this histogram by h1. ;  ; virtual Bool_t Multiply (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2. ;  ; virtual Bool_t Multiply (TF1 *f1, Double_t c1=1);  Performs the operation: ;  ; void Paint (Option_t *option="""") override;  Control routine to paint any kind of histograms. ;  ; void Print (Option_t *option="""") const override;  Print some global quantities for this histogram. ;  ; virtual void PutStats (Double_t *stats);  Replace current statistics with the values in array stats. ;  ; virtual TH1 * Rebin (Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr);  Rebin this histogram. ;  ; virtual void RebinAxis (Double_t x, TAxis *axis);  ; virtual TH1 * RebinX (Int_t ngroup=2, const char *newname="""");  ; virtual void Rebuild (Option_t *option="""");  Using the current bin info, recompute the arrays for contents and errors. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual void ResetStats ();  Reset the statistics including the number of entries and replace with values calculated from bin content. ;  ; void SaveAs (const char *filename=""hist"", Option_t *option="""") const override;  Save ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:28136,Integrability,message,message,28136,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method,",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:28557,Integrability,message,message,28557,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDe",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:29173,Integrability,message,message,29173,"cute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:31789,Integrability,message,message,31789,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:31980,Integrability,message,message,31980,"[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:39442,Integrability,rout,routine,39442,"s * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the default buffer size for automatic histograms the parameter fgBufferSize may be changed via SetDefaultBufferSize. ;  ; static Bool_t GetDefaultSumw2 ();  Return kTRUE if TH1::Sumw2 must be called when creating new histograms. ;  ; static void SetDefaultBufferSize (Int_t buffersize=1000);  Static function to set the default buffer size for automatic histograms. ;  ; static void SetDefaultSumw2 (Bool_t sumw2=kTRUE);  When this static function is called with sumw2=kTRUE, all new histograms will automatically activate the storage of the sum of squares of errors, ie TH1::Sumw2 is automatically called. ;  ; static void SmoothArray (Int_t NN, Double_t *XX, Int_t ntimes=1);  Smooth array xx, translation of Hbook routine hsmoof.F. ;  ; static void StatOverflows (Bool_t flag=kTRUE);  if flag=kTRUE, underflows and overflows are used by the Fill functions in the computation of statistics (mean value, StdDev). ;  ; static TH1 * TransformHisto (TVirtualFFT *fft, TH1 *h_output, Option_t *option);  For a given transform (first parameter), fills the histogram (second parameter) with the transform output data, specified in the third parameter If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created and the user is responsible for deleting it. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static con",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:588,Modifiability,variab,variable,588,". ROOT: TH1C Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1C Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with a byte per channel (see TH1 documentation) ; Definition at line 458 of file TH1.h. Public Member Functions;  TH1C ();  Constructor. ;  ;  TH1C (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ;  ;  TH1C (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ;  ;  TH1C (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ;  ;  TH1C (const TH1C &h1c);  Copy constructor. ;  ;  ~TH1C () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1C & operator= (const TH1C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Do",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:800,Modifiability,variab,variable,800,". ROOT: TH1C Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1C Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with a byte per channel (see TH1 documentation) ; Definition at line 458 of file TH1.h. Public Member Functions;  TH1C ();  Constructor. ;  ;  TH1C (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ;  ;  TH1C (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ;  ;  TH1C (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ;  ;  TH1C (const TH1C &h1c);  Copy constructor. ;  ;  ~TH1C () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1C & operator= (const TH1C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Do",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:1860,Modifiability,inherit,inherited,1860,"el) (see TH1::TH1 for explanation of parameters) ;  ;  TH1C (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ;  ;  TH1C (const TH1C &h1c);  Copy constructor. ;  ;  ~TH1C () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1C & operator= (const TH1C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:3039,Modifiability,extend,extendable,3039,"_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:14115,Modifiability,variab,variable,14115,"l Int_t GetMinimumBin () const;  Return location of bin with minimum value in the range. ;  ; virtual Int_t GetMinimumBin (Int_t &locmix, Int_t &locmiy, Int_t &locmiz) const;  Return location of bin with minimum value in the range. ;  ; virtual Double_t GetMinimumStored () const;  ; virtual Int_t GetNbinsX () const;  ; virtual Int_t GetNbinsY () const;  ; virtual Int_t GetNbinsZ () const;  ; virtual Int_t GetNcells () const;  ; virtual Int_t GetNdivisions (Option_t *axis=""X"") const;  Return the number of divisions for ""axis"". ;  ; virtual Double_t GetNormFactor () const;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; Option_t * GetOption () const override;  ; TVirtualHistPainter * GetPainter (Option_t *option="""");  Return pointer to painter. ;  ; virtual Int_t GetQuantiles (Int_t n, Double_t *xp, const Double_t *p=nullptr);  Compute Quantiles for this histogram Quantile x_p := Q(p) is defined as the value x_p such that the cumulative probability distribution Function F of variable X yields: ;  ; virtual Double_t GetRandom (TRandom *rng=nullptr) const;  Return a random number distributed according the histogram bin contents. ;  ; Double_t GetRMS (Int_t axis=1) const;  This function returns the Standard Deviation (Sigma) of the distribution not the Root Mean Square (RMS). ;  ; Double_t GetRMSError (Int_t axis=1) const;  ; virtual Double_t GetSkewness (Int_t axis=1) const;  ; EStatOverflows GetStatOverflows () const;  Get the behaviour adopted by the object about the statoverflows. See EStatOverflows for more information. ;  ; virtual void GetStats (Double_t *stats) const;  fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ;  ; virtual Double_t GetStdDev (Int_t axis=1) const;  Returns the Standard Deviation (Sigma). ;  ; virtual Double_t GetStdDevError (Int_t axis=1) const;  Return error of standard deviation estimation for Normal distribut",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:20815,Modifiability,variab,variable,20815,"_t bin, Double_t content);  Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:20968,Modifiability,variab,variable,20968,"medisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying w",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:21157,Modifiability,variab,variable,21157,"ouble_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t conte",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:21774,Modifiability,extend,extendBitMask,21774," ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:21815,Modifiability,extend,extendable,21815," ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:21832,Modifiability,extend,extendable,21832," ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:21925,Modifiability,extend,extendable,21925," ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:25508,Modifiability,inherit,inherited,25508," distance between the axis and the axis' title. ;  ; virtual void SetTitleSize (Float_t size=0.02, Option_t *axis=""X"");  Set the axis' title size. ;  ; virtual void SetXTitle (const char *title);  ; virtual void SetYTitle (const char *title);  ; virtual void SetZTitle (const char *title);  ; virtual TH1 * ShowBackground (Int_t niter=20, Option_t *option=""same"");  This function calculates the background spectrum in this histogram. ;  ; virtual Int_t ShowPeaks (Double_t sigma=2, Option_t *option="""", Double_t threshold=0.05);  Interface to TSpectrum::Search. ;  ; virtual void Smooth (Int_t ntimes=1, Option_t *option="""");  Smooth bin contents of this histogram. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Sumw2 (Bool_t flag=kTRUE);  Create structure to store sum of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:26973,Modifiability,inherit,inherited,26973,". ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:27766,Modifiability,inherit,inheritance,27766,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:29271,Modifiability,inherit,inherits,29271,"e method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:29388,Modifiability,inherit,inherits,29388," *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:32287,Modifiability,inherit,inherited,32287,"directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:33792,Modifiability,inherit,inherited,33792,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:35047,Modifiability,inherit,inherited,35047,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:36467,Modifiability,inherit,inherited,36467,"ual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArrayC;  TArrayC ();  Default TArrayC ctor. ;  ;  TArrayC (const TArrayC &array);  Copy constructor. ;  ;  TArrayC (Int_t n);  Create TArrayC object and set array size to n chars. ;  ;  TArrayC (Int_t n, const Char_t *array);  Create TArrayC object and initialize it with values of array. ;  ; virtual ~TArrayC ();  Delete TArrayC object. ;  ; void AddAt (Char_t c, Int_t i);  Add char c at position i. Check for out of bounds. ;  ; void Adopt (Int_t n, Char_t *array);  Adopt array arr into TArrayC, i.e. ;  ; Char_t At (Int_t i) const;  ; void Copy (TArrayC &array) const;  ; Char_t * GetArray ();  ; const Char_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TArrayC & operator= (const TArrayC &rhs);  TArrayC assignment operator. ;  ; Char_t & operator[] (Int_t i);  ; Char_t operator[] (Int_t i) const;  ; void Reset (Char_t val=0);  ; void Set (Int_t n) override;  Set size of this array to n chars. ;  ; void S",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:37682,Modifiability,inherit,inherited,37682,"d initialize it with values of array. ;  ; virtual ~TArrayC ();  Delete TArrayC object. ;  ; void AddAt (Char_t c, Int_t i);  Add char c at position i. Check for out of bounds. ;  ; void Adopt (Int_t n, Char_t *array);  Adopt array arr into TArrayC, i.e. ;  ; Char_t At (Int_t i) const;  ; void Copy (TArrayC &array) const;  ; Char_t * GetArray ();  ; const Char_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TArrayC & operator= (const TArrayC &rhs);  TArrayC assignment operator. ;  ; Char_t & operator[] (Int_t i);  ; Char_t operator[] (Int_t i) const;  ; void Reset (Char_t val=0);  ; void Set (Int_t n) override;  Set size of this array to n chars. ;  ; void Set (Int_t n, const Char_t *array);  Set size of this array to n chars and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH1; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add of histograms in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: cannot be inlined on Windows/NT. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the defaul",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:38149,Modifiability,inherit,inherited,38149,"ray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TArrayC & operator= (const TArrayC &rhs);  TArrayC assignment operator. ;  ; Char_t & operator[] (Int_t i);  ; Char_t operator[] (Int_t i) const;  ; void Reset (Char_t val=0);  ; void Set (Int_t n) override;  Set size of this array to n chars. ;  ; void Set (Int_t n, const Char_t *array);  Set size of this array to n chars and set the contents. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH1; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add of histograms in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: cannot be inlined on Windows/NT. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the default buffer size for automatic histograms the parameter fgBufferSize may be changed via SetDefaultBufferSize. ;  ; static Bool_t GetDefaultSumw2 ();  Return kTRUE if TH1::Sumw2 must be called when creating new histograms. ;  ; static void SetDefaultBufferSize (Int_t buffersize=1000);  Static function to set the default buffer size for automatic histograms. ;  ; static voi",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:40035,Modifiability,inherit,inherited,40035,"tivate the storage of the sum of squares of errors, ie TH1::Sumw2 is automatically called. ;  ; static void SmoothArray (Int_t NN, Double_t *XX, Int_t ntimes=1);  Smooth array xx, translation of Hbook routine hsmoof.F. ;  ; static void StatOverflows (Bool_t flag=kTRUE);  if flag=kTRUE, underflows and overflows are used by the Fill functions in the computation of statistics (mean value, StdDev). ;  ; static TH1 * TransformHisto (TVirtualFFT *fft, TH1 *h_output, Option_t *option);  For a given transform (first parameter), fills the histogram (second parameter) with the transform output data, specified in the third parameter If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created and the user is responsible for deleting it. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:40245,Modifiability,inherit,inherited,40245,"tivate the storage of the sum of squares of errors, ie TH1::Sumw2 is automatically called. ;  ; static void SmoothArray (Int_t NN, Double_t *XX, Int_t ntimes=1);  Smooth array xx, translation of Hbook routine hsmoof.F. ;  ; static void StatOverflows (Bool_t flag=kTRUE);  if flag=kTRUE, underflows and overflows are used by the Fill functions in the computation of statistics (mean value, StdDev). ;  ; static TH1 * TransformHisto (TVirtualFFT *fft, TH1 *h_output, Option_t *option);  For a given transform (first parameter), fills the histogram (second parameter) with the transform output data, specified in the third parameter If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created and the user is responsible for deleting it. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:40763,Modifiability,inherit,inherited,40763,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayC; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:40975,Modifiability,inherit,inherited,40975,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayC; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:41187,Modifiability,inherit,inherited,41187,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayC; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:41722,Modifiability,inherit,inherited,41722,"Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayC; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const c",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:41933,Modifiability,inherit,inherited,41933,"Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayC; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const c",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:42696,Modifiability,inherit,inherited,42696,"er Functions inherited from TArrayC; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called direct",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:42860,Modifiability,variab,variable,42860,"Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:43028,Modifiability,variab,variable,43028,"ss_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values wor",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:44995,Modifiability,inherit,inherited,44995,"irtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; virtual Double_t GetBinErrorSqUnchecked (Int_t bin) const;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Friends; TH1C operator* (const TH1C &h1, const TH1C &h2);  Operator *. ;  ; TH1C operator* (const TH1C &h1, Double_t c1);  ; TH1C operator* (Double_t c1, const TH1C &h1);  Operator *. ;  ; TH1C operator+ (const TH1C &h1, const TH1C &h2);  Operator +. ;  ; TH1C operator- (const TH1C &h1, const TH1C &h2);  Operator -. ;  ; TH1C operator/ (const TH1C &h1, const TH1C &h2);  Operator /. ;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can b",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:45206,Modifiability,inherit,inherited,45206,"th the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; virtual Double_t GetBinErrorSqUnchecked (Int_t bin) const;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Friends; TH1C operator* (const TH1C &h1, const TH1C &h2);  Operator *. ;  ; TH1C operator* (const TH1C &h1, Double_t c1);  ; TH1C operator* (Double_t c1, const TH1C &h1);  Operator *. ;  ; TH1C operator+ (const TH1C &h1, const TH1C &h2);  Operator +. ;  ; TH1C operator- (const TH1C &h1, const TH1C &h2);  Operator -. ;  ; TH1C operator/ (const TH1C &h1, const TH1C &h2);  Operator /. ;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumera",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:45840,Modifiability,inherit,inherited,45840," TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Friends; TH1C operator* (const TH1C &h1, const TH1C &h2);  Operator *. ;  ; TH1C operator* (const TH1C &h1, Double_t c1);  ; TH1C operator* (Double_t c1, const TH1C &h1);  Operator *. ;  ; TH1C operator+ (const TH1C &h1, const TH1C &h2);  Operator +. ;  ; TH1C operator- (const TH1C &h1, const TH1C &h2);  Operator -. ;  ; TH1C operator/ (const TH1C &h1, const TH1C &h2);  Operator /. ;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type of statistics for bin errors. More...;  ; enum  EStatOverflows { kIgnore = 0; , kConsider = 1; , kNeutral = 2; };  Enumeration specifying the way to treat statoverflow. More...;  ; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kUserContour = (1ULL << ( 10 )); , kLogX = (1ULL << ( 15 )); , kIsZoomed = (1ULL << ( 16 )); , ;   kNoTitle = (1ULL << ( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDelet",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:46057,Modifiability,extend,extended,46057,"r (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Friends; TH1C operator* (const TH1C &h1, const TH1C &h2);  Operator *. ;  ; TH1C operator* (const TH1C &h1, Double_t c1);  ; TH1C operator* (Double_t c1, const TH1C &h1);  Operator *. ;  ; TH1C operator+ (const TH1C &h1, const TH1C &h2);  Operator +. ;  ; TH1C operator- (const TH1C &h1, const TH1C &h2);  Operator -. ;  ; TH1C operator/ (const TH1C &h1, const TH1C &h2);  Operator /. ;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type of statistics for bin errors. More...;  ; enum  EStatOverflows { kIgnore = 0; , kConsider = 1; , kNeutral = 2; };  Enumeration specifying the way to treat statoverflow. More...;  ; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kUserContour = (1ULL << ( 10 )); , kLogX = (1ULL << ( 15 )); , kIsZoomed = (1ULL << ( 16 )); , ;   kNoTitle = (1ULL << ( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:46832,Modifiability,inherit,inherited,46832,"0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type of statistics for bin errors. More...;  ; enum  EStatOverflows { kIgnore = 0; , kConsider = 1; , kNeutral = 2; };  Enumeration specifying the way to treat statoverflow. More...;  ; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kUserContour = (1ULL << ( 10 )); , kLogX = (1ULL << ( 15 )); , kIsZoomed = (1ULL << ( 16 )); , ;   kNoTitle = (1ULL << ( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayC; Char_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxili",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:47475,Modifiability,inherit,inherited,47475,"( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayC; Char_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1,",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:47538,Modifiability,inherit,inherited,47538,"( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayC; Char_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1,",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:47591,Modifiability,inherit,inherited,47591,"( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayC; Char_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1,",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:47697,Modifiability,inherit,inherited,47697,"( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayC; Char_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1,",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:48958,Modifiability,inherit,inherited,48958,"xis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  Same limits and bins. ;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ! Histogram dimension (1, 2 or 3 dim) ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this histogram ;  ; Double_t fEntries;  Number of entries. ;  ; TList * fFunctions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:50463,Modifiability,inherit,inherited,50463,"tions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in statistics. ;  ; TArrayD fSumw2;  Array of sum of squares of weights. ;  ; Double_t fTsumw;  Total Sum of weights. ;  ; Double_t fTsumw2;  Total Sum of squares of weights. ;  ; Double_t fTsumwx;  Total Sum of weight*X. ;  ; Double_t fTsumwx2;  Total Sum of weight*X*X. ;  ; TAxis fXaxis;  X axis descriptor. ;  ; TAxis fYaxis;  Y axis descriptor. ;  ; TAxis fZaxis;  Z axis descriptor. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Static Protected Attributes inherited from TH1; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . #include <TH1.h>. Inheritance diagram for TH1C:. This browser is not able to show SVG: try Firefox, Chrome",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:50545,Modifiability,inherit,inherited,50545,"tions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in statistics. ;  ; TArrayD fSumw2;  Array of sum of squares of weights. ;  ; Double_t fTsumw;  Total Sum of weights. ;  ; Double_t fTsumw2;  Total Sum of squares of weights. ;  ; Double_t fTsumwx;  Total Sum of weight*X. ;  ; Double_t fTsumwx2;  Total Sum of weight*X*X. ;  ; TAxis fXaxis;  X axis descriptor. ;  ; TAxis fYaxis;  Y axis descriptor. ;  ; TAxis fZaxis;  Z axis descriptor. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Static Protected Attributes inherited from TH1; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . #include <TH1.h>. Inheritance diagram for TH1C:. This browser is not able to show SVG: try Firefox, Chrome",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:50706,Modifiability,inherit,inherited,50706," value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in statistics. ;  ; TArrayD fSumw2;  Array of sum of squares of weights. ;  ; Double_t fTsumw;  Total Sum of weights. ;  ; Double_t fTsumw2;  Total Sum of squares of weights. ;  ; Double_t fTsumwx;  Total Sum of weight*X. ;  ; Double_t fTsumwx2;  Total Sum of weight*X*X. ;  ; TAxis fXaxis;  X axis descriptor. ;  ; TAxis fYaxis;  Y axis descriptor. ;  ; TAxis fZaxis;  Z axis descriptor. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Static Protected Attributes inherited from TH1; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . #include <TH1.h>. Inheritance diagram for TH1C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TH1C() [1/5]. TH1C::TH1C ; (; ). Constructor. ; Definition at line 9473 of file TH1.cxx. ◆ TH1C() [2/5]. TH1C::TH1C ; (; co",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:50839,Modifiability,inherit,inherited,50839,"or. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in statistics. ;  ; TArrayD fSumw2;  Array of sum of squares of weights. ;  ; Double_t fTsumw;  Total Sum of weights. ;  ; Double_t fTsumw2;  Total Sum of squares of weights. ;  ; Double_t fTsumwx;  Total Sum of weight*X. ;  ; Double_t fTsumwx2;  Total Sum of weight*X*X. ;  ; TAxis fXaxis;  X axis descriptor. ;  ; TAxis fYaxis;  Y axis descriptor. ;  ; TAxis fZaxis;  Z axis descriptor. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Static Protected Attributes inherited from TH1; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . #include <TH1.h>. Inheritance diagram for TH1C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TH1C() [1/5]. TH1C::TH1C ; (; ). Constructor. ; Definition at line 9473 of file TH1.cxx. ◆ TH1C() [2/5]. TH1C::TH1C ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . Double_t ; xlow, . Double_t ; xup . ). Create a 1-Dim histogram with fi",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:51018,Modifiability,inherit,inherited,51018,"m of squares of weights. ;  ; Double_t fTsumwx;  Total Sum of weight*X. ;  ; Double_t fTsumwx2;  Total Sum of weight*X*X. ;  ; TAxis fXaxis;  X axis descriptor. ;  ; TAxis fYaxis;  Y axis descriptor. ;  ; TAxis fZaxis;  Z axis descriptor. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Static Protected Attributes inherited from TH1; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . #include <TH1.h>. Inheritance diagram for TH1C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TH1C() [1/5]. TH1C::TH1C ; (; ). Constructor. ; Definition at line 9473 of file TH1.cxx. ◆ TH1C() [2/5]. TH1C::TH1C ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . Double_t ; xlow, . Double_t ; xup . ). Create a 1-Dim histogram with fix bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ; Definition at line 9484 of file TH1.cxx. ◆ TH1C() [3/5]. TH1C::TH1C ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Float_t * ; xbins . ). Create a 1-Dim histogram with variable bins of type char (one byte per channel) (see",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:52144,Modifiability,variab,variable,52144,"histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . #include <TH1.h>. Inheritance diagram for TH1C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TH1C() [1/5]. TH1C::TH1C ; (; ). Constructor. ; Definition at line 9473 of file TH1.cxx. ◆ TH1C() [2/5]. TH1C::TH1C ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . Double_t ; xlow, . Double_t ; xup . ). Create a 1-Dim histogram with fix bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ; Definition at line 9484 of file TH1.cxx. ◆ TH1C() [3/5]. TH1C::TH1C ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Float_t * ; xbins . ). Create a 1-Dim histogram with variable bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ; Definition at line 9498 of file TH1.cxx. ◆ TH1C() [4/5]. TH1C::TH1C ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Double_t * ; xbins . ). Create a 1-Dim histogram with variable bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ; Definition at line 9510 of file TH1.cxx. ◆ TH1C() [5/5]. TH1C::TH1C ; (; const TH1C & ; h1c). Copy constructor. ; The list of functions is not copied. (Use Clone() if needed) ; Definition at line 9529 of file TH1.cxx. ◆ ~TH1C(). TH1C::~TH1C ; (; ). override . Destructor. ; Definition at line 9521 of file TH1.cxx. Member Function Documentation. ◆ AddBinContent() [1/2]. void TH1C::AddBinContent ; (; Int_t ; bin). overridevirtual . Increment bin content by 1. ; Passing an out-of-range bin leads to undefined behavior ; Reimplemented from TH1.; Definition at line 9538 of file TH1.cxx. ◆ AddBinContent() [2/2]. void TH1C::AddBinContent ; (; Int_t ; bin, . Do",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:52439,Modifiability,variab,variable,52439,"show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TH1C() [1/5]. TH1C::TH1C ; (; ). Constructor. ; Definition at line 9473 of file TH1.cxx. ◆ TH1C() [2/5]. TH1C::TH1C ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . Double_t ; xlow, . Double_t ; xup . ). Create a 1-Dim histogram with fix bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ; Definition at line 9484 of file TH1.cxx. ◆ TH1C() [3/5]. TH1C::TH1C ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Float_t * ; xbins . ). Create a 1-Dim histogram with variable bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ; Definition at line 9498 of file TH1.cxx. ◆ TH1C() [4/5]. TH1C::TH1C ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Double_t * ; xbins . ). Create a 1-Dim histogram with variable bins of type char (one byte per channel) (see TH1::TH1 for explanation of parameters) ; Definition at line 9510 of file TH1.cxx. ◆ TH1C() [5/5]. TH1C::TH1C ; (; const TH1C & ; h1c). Copy constructor. ; The list of functions is not copied. (Use Clone() if needed) ; Definition at line 9529 of file TH1.cxx. ◆ ~TH1C(). TH1C::~TH1C ; (; ). override . Destructor. ; Definition at line 9521 of file TH1.cxx. Member Function Documentation. ◆ AddBinContent() [1/2]. void TH1C::AddBinContent ; (; Int_t ; bin). overridevirtual . Increment bin content by 1. ; Passing an out-of-range bin leads to undefined behavior ; Reimplemented from TH1.; Definition at line 9538 of file TH1.cxx. ◆ AddBinContent() [2/2]. void TH1C::AddBinContent ; (; Int_t ; bin, . Double_t ; w . ). overridevirtual . Increment bin content by w. ; WarningThe value of w is cast to Int_t before being added. Passing an out-of-range bin leads to undefined behavior ; Reimplemented from TH1.; Definition at line 9548 of file TH1.cxx. ◆ Class(). static TClass * TH1C::Class ; (; ). s",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:26376,Security,hash,hash,26376,"m of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to c",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:2569,Testability,test,test,2569,". ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisqua",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:2690,Testability,test,test,2690,"s array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:2788,Testability,test,test,2788,"s array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:3167,Testability,test,test,3167,";  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeInte",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:3407,Testability,test,test,3407,"n="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:16983,Testability,test,test,16983,"l of bin contents in range [binx1,binx2]. ;  ; virtual Double_t Integral (Option_t *option="""") const;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2] and its error. ;  ; virtual Double_t Interpolate (Double_t x) const;  Given a point x, approximates the value via linear interpolation based on the two nearest bin centers. ;  ; virtual Double_t Interpolate (Double_t x, Double_t y) const;  2d Interpolation. Not yet implemented. ;  ; virtual Double_t Interpolate (Double_t x, Double_t y, Double_t z) const;  3d Interpolation. Not yet implemented. ;  ; Bool_t IsBinOverflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is overflow. ;  ; Bool_t IsBinUnderflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is underflow. ;  ; virtual Bool_t IsHighlight () const;  ; virtual Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using Kolmogorov test. ;  ; virtual void LabelsDeflate (Option_t *axis=""X"");  Reduce the number of bins for the axis passed in the option to the number of bins having a label. ;  ; virtual void LabelsInflate (Option_t *axis=""X"");  Double the number of bins for axis. ;  ; virtual void LabelsOption (Option_t *option=""h"", Option_t *axis=""X"");  Sort bins with labels or set option(s) to draw axis with labels. ;  ; virtual Long64_t Merge (TCollection *list);  ; Long64_t Merge (TCollection *list, Option_t *option);  Add all histograms in the collection to this histogram. ;  ; virtual Bool_t Multiply (const TH1 *h1);  Multiply this histogram by h1. ;  ; virtual Bool_t Multiply (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2. ;  ; virtual Bool_t Multiply (TF1 *f1, Double_t c1=1);  Performs the operation: ;  ; ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:17062,Testability,test,test,17062,"l of bin contents in range [binx1,binx2]. ;  ; virtual Double_t Integral (Option_t *option="""") const;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2] and its error. ;  ; virtual Double_t Interpolate (Double_t x) const;  Given a point x, approximates the value via linear interpolation based on the two nearest bin centers. ;  ; virtual Double_t Interpolate (Double_t x, Double_t y) const;  2d Interpolation. Not yet implemented. ;  ; virtual Double_t Interpolate (Double_t x, Double_t y, Double_t z) const;  3d Interpolation. Not yet implemented. ;  ; Bool_t IsBinOverflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is overflow. ;  ; Bool_t IsBinUnderflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is underflow. ;  ; virtual Bool_t IsHighlight () const;  ; virtual Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using Kolmogorov test. ;  ; virtual void LabelsDeflate (Option_t *axis=""X"");  Reduce the number of bins for the axis passed in the option to the number of bins having a label. ;  ; virtual void LabelsInflate (Option_t *axis=""X"");  Double the number of bins for axis. ;  ; virtual void LabelsOption (Option_t *option=""h"", Option_t *axis=""X"");  Sort bins with labels or set option(s) to draw axis with labels. ;  ; virtual Long64_t Merge (TCollection *list);  ; Long64_t Merge (TCollection *list, Option_t *option);  Add all histograms in the collection to this histogram. ;  ; virtual Bool_t Multiply (const TH1 *h1);  Multiply this histogram by h1. ;  ; virtual Bool_t Multiply (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2. ;  ; virtual Bool_t Multiply (TF1 *f1, Double_t c1=1);  Performs the operation: ;  ; ",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1C.html:3940,Usability,clear,cleared,3940,"ffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalc",MatchSource.WIKI,doc/master/classTH1C.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1C.html
https://root.cern/doc/master/classTH1D.html:2312,Availability,error,errors,2312,") override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1D & operator= (const TH1D &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \)",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:2349,Availability,error,errors,2349,") override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1D & operator= (const TH1D &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \)",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:2498,Availability,error,errors,2498,"ned behavior. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1D & operator= (const TH1D &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:2535,Availability,error,errors,2535,"ned behavior. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1D & operator= (const TH1D &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:3760,Availability,error,error,3760,"eturning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ;",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:5024,Availability,error,errors,5024,"ow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; void Draw (Option_t *option="""") override;  Draw this histogram with options. ;  ; virtual TH1 * DrawCopy (Option_t *option="""", const char *name_postfix=""_copy"") const;  Copy this histogram and Draw in the current pad. ;  ; virtual TH1 * DrawNormalized (Option_t *option="""", Double_t norm=1) const;  Draw a normalized copy of this histogram. ;  ; virtual void DrawPanel ();  Display a panel with all histogram drawing options. ;  ; virtual void Eval (TF1 *f1, Option_t *option="""");  Evaluate function f1 at the center of bins of this histogram. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void ExtendAxis (Double_t x, TAxis *axis);  Histogram is resized along axis such that x is in the axis range. ;  ; virtual TH1 * FFT (TH1 *h_output, Option_t *option);  This function allows to do discrete Fourier transforms of TH1 and TH2. ; ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:5061,Availability,error,errors,5061,"ow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; void Draw (Option_t *option="""") override;  Draw this histogram with options. ;  ; virtual TH1 * DrawCopy (Option_t *option="""", const char *name_postfix=""_copy"") const;  Copy this histogram and Draw in the current pad. ;  ; virtual TH1 * DrawNormalized (Option_t *option="""", Double_t norm=1) const;  Draw a normalized copy of this histogram. ;  ; virtual void DrawPanel ();  Display a panel with all histogram drawing options. ;  ; virtual void Eval (TF1 *f1, Option_t *option="""");  Evaluate function f1 at the center of bins of this histogram. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void ExtendAxis (Double_t x, TAxis *axis);  Histogram is resized along axis such that x is in the axis range. ;  ; virtual TH1 * FFT (TH1 *h_output, Option_t *option);  This function allows to do discrete Fourier transforms of TH1 and TH2. ; ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:9048,Availability,error,error,9048,"t (TF1 *f1, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0);  Fit histogram with the function pointer f1. ;  ; virtual void FitPanel ();  Display a panel with all histogram fit options. ;  ; TH1 * GetAsymmetry (TH1 *h2, Double_t c2=1, Double_t dc2=0);  Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined as: ;  ; virtual Color_t GetAxisColor (Option_t *axis=""X"") const;  Return the number of divisions for ""axis"". ;  ; virtual Float_t GetBarOffset () const;  ; virtual Float_t GetBarWidth () const;  ; virtual Int_t GetBin (Int_t binx, Int_t biny=0, Int_t binz=0) const;  Return Global bin number corresponding to binx,y,z. ;  ; virtual Double_t GetBinCenter (Int_t bin) const;  Return bin center for 1D histogram. ;  ; virtual Double_t GetBinContent (Int_t bin) const;  Return content of bin number bin. ;  ; virtual Double_t GetBinContent (Int_t bin, Int_t) const;  ; virtual Double_t GetBinContent (Int_t bin, Int_t, Int_t) const;  ; virtual Double_t GetBinError (Int_t bin) const;  Return value of error associated to bin number bin. ;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny) const;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny, Int_t binz) const;  ; virtual Double_t GetBinErrorLow (Int_t bin) const;  Return lower error associated to bin number bin. ;  ; virtual EBinErrorOpt GetBinErrorOption () const;  ; virtual Double_t GetBinErrorUp (Int_t bin) const;  Return upper error associated to bin number bin. ;  ; virtual Double_t GetBinLowEdge (Int_t bin) const;  Return bin lower edge for 1D histogram. ;  ; virtual Double_t GetBinWidth (Int_t bin) const;  Return bin width for 1D histogram. ;  ; virtual Double_t GetBinWithContent (Double_t c, Int_t &binx, Int_t firstx=0, Int_t lastx=0, Double_t maxdiff=0) const;  Compute first binx in the range [firstx,lastx] for which diff = abs(bin_content-c) <= maxdiff. ;  ; virtual void GetBinXYZ (Int_t binglobal, Int_t &binx, Int_t &biny, Int",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:9294,Availability,error,error,9294,"TH1 *h2, Double_t c2=1, Double_t dc2=0);  Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined as: ;  ; virtual Color_t GetAxisColor (Option_t *axis=""X"") const;  Return the number of divisions for ""axis"". ;  ; virtual Float_t GetBarOffset () const;  ; virtual Float_t GetBarWidth () const;  ; virtual Int_t GetBin (Int_t binx, Int_t biny=0, Int_t binz=0) const;  Return Global bin number corresponding to binx,y,z. ;  ; virtual Double_t GetBinCenter (Int_t bin) const;  Return bin center for 1D histogram. ;  ; virtual Double_t GetBinContent (Int_t bin) const;  Return content of bin number bin. ;  ; virtual Double_t GetBinContent (Int_t bin, Int_t) const;  ; virtual Double_t GetBinContent (Int_t bin, Int_t, Int_t) const;  ; virtual Double_t GetBinError (Int_t bin) const;  Return value of error associated to bin number bin. ;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny) const;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny, Int_t binz) const;  ; virtual Double_t GetBinErrorLow (Int_t bin) const;  Return lower error associated to bin number bin. ;  ; virtual EBinErrorOpt GetBinErrorOption () const;  ; virtual Double_t GetBinErrorUp (Int_t bin) const;  Return upper error associated to bin number bin. ;  ; virtual Double_t GetBinLowEdge (Int_t bin) const;  Return bin lower edge for 1D histogram. ;  ; virtual Double_t GetBinWidth (Int_t bin) const;  Return bin width for 1D histogram. ;  ; virtual Double_t GetBinWithContent (Double_t c, Int_t &binx, Int_t firstx=0, Int_t lastx=0, Double_t maxdiff=0) const;  Compute first binx in the range [firstx,lastx] for which diff = abs(bin_content-c) <= maxdiff. ;  ; virtual void GetBinXYZ (Int_t binglobal, Int_t &binx, Int_t &biny, Int_t &binz) const;  Return binx, biny, binz corresponding to the global bin number globalbin see TH1::GetBin function above. ;  ; const Double_t * GetBuffer () const;  ; Int_t GetBufferLength () const;  ; Int_t GetBufferSize () const;  ; vir",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:9451,Availability,error,error,9451,") const;  Return the number of divisions for ""axis"". ;  ; virtual Float_t GetBarOffset () const;  ; virtual Float_t GetBarWidth () const;  ; virtual Int_t GetBin (Int_t binx, Int_t biny=0, Int_t binz=0) const;  Return Global bin number corresponding to binx,y,z. ;  ; virtual Double_t GetBinCenter (Int_t bin) const;  Return bin center for 1D histogram. ;  ; virtual Double_t GetBinContent (Int_t bin) const;  Return content of bin number bin. ;  ; virtual Double_t GetBinContent (Int_t bin, Int_t) const;  ; virtual Double_t GetBinContent (Int_t bin, Int_t, Int_t) const;  ; virtual Double_t GetBinError (Int_t bin) const;  Return value of error associated to bin number bin. ;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny) const;  ; virtual Double_t GetBinError (Int_t binx, Int_t biny, Int_t binz) const;  ; virtual Double_t GetBinErrorLow (Int_t bin) const;  Return lower error associated to bin number bin. ;  ; virtual EBinErrorOpt GetBinErrorOption () const;  ; virtual Double_t GetBinErrorUp (Int_t bin) const;  Return upper error associated to bin number bin. ;  ; virtual Double_t GetBinLowEdge (Int_t bin) const;  Return bin lower edge for 1D histogram. ;  ; virtual Double_t GetBinWidth (Int_t bin) const;  Return bin width for 1D histogram. ;  ; virtual Double_t GetBinWithContent (Double_t c, Int_t &binx, Int_t firstx=0, Int_t lastx=0, Double_t maxdiff=0) const;  Compute first binx in the range [firstx,lastx] for which diff = abs(bin_content-c) <= maxdiff. ;  ; virtual void GetBinXYZ (Int_t binglobal, Int_t &binx, Int_t &biny, Int_t &binz) const;  Return binx, biny, binz corresponding to the global bin number globalbin see TH1::GetBin function above. ;  ; const Double_t * GetBuffer () const;  ; Int_t GetBufferLength () const;  ; Int_t GetBufferSize () const;  ; virtual Double_t GetCellContent (Int_t binx, Int_t biny) const;  ; virtual Double_t GetCellError (Int_t binx, Int_t biny) const;  ; virtual void GetCenter (Double_t *center) const;  Fill array with center ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:12780,Availability,error,error,12780,"offset. ;  ; virtual Float_t GetLabelSize (Option_t *axis=""X"") const;  Return the ""axis"" label size. ;  ; TList * GetListOfFunctions () const;  ; virtual void GetLowEdge (Double_t *edge) const;  Fill array with low edge of bins for 1D histogram Better to use h1.GetXaxis()->GetLowEdge(edge) ;  ; virtual Double_t GetMaximum (Double_t maxval=FLT_MAX) const;  Return maximum value smaller than maxval of bins in the range, unless the value has been overridden by TH1::SetMaximum, in which case it returns that value. ;  ; virtual Int_t GetMaximumBin () const;  Return location of bin with maximum value in the range. ;  ; virtual Int_t GetMaximumBin (Int_t &locmax, Int_t &locmay, Int_t &locmaz) const;  Return location of bin with maximum value in the range. ;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMean (Int_t axis=1) const;  For axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis. ;  ; virtual Double_t GetMeanError (Int_t axis=1) const;  Return standard error of mean of this histogram along the X axis. ;  ; virtual Double_t GetMinimum (Double_t minval=-FLT_MAX) const;  Return minimum value larger than minval of bins in the range, unless the value has been overridden by TH1::SetMinimum, in which case it returns that value. ;  ; virtual void GetMinimumAndMaximum (Double_t &min, Double_t &max) const;  Retrieve the minimum and maximum values in the histogram. ;  ; virtual Int_t GetMinimumBin () const;  Return location of bin with minimum value in the range. ;  ; virtual Int_t GetMinimumBin (Int_t &locmix, Int_t &locmiy, Int_t &locmiz) const;  Return location of bin with minimum value in the range. ;  ; virtual Double_t GetMinimumStored () const;  ; virtual Int_t GetNbinsX () const;  ; virtual Int_t GetNbinsY () const;  ; virtual Int_t GetNbinsZ () const;  ; virtual Int_t GetNcells () const;  ; virtual Int_t GetNdivisions (Option_t *axis=""X"") const;  Return the number of divisions for ""axis"". ;  ; virtual Double_t GetNormFacto",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:15142,Availability,error,error,15142,"_p := Q(p) is defined as the value x_p such that the cumulative probability distribution Function F of variable X yields: ;  ; virtual Double_t GetRandom (TRandom *rng=nullptr) const;  Return a random number distributed according the histogram bin contents. ;  ; Double_t GetRMS (Int_t axis=1) const;  This function returns the Standard Deviation (Sigma) of the distribution not the Root Mean Square (RMS). ;  ; Double_t GetRMSError (Int_t axis=1) const;  ; virtual Double_t GetSkewness (Int_t axis=1) const;  ; EStatOverflows GetStatOverflows () const;  Get the behaviour adopted by the object about the statoverflows. See EStatOverflows for more information. ;  ; virtual void GetStats (Double_t *stats) const;  fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ;  ; virtual Double_t GetStdDev (Int_t axis=1) const;  Returns the Standard Deviation (Sigma). ;  ; virtual Double_t GetStdDevError (Int_t axis=1) const;  Return error of standard deviation estimation for Normal distribution. ;  ; virtual Double_t GetSumOfWeights () const;  Return the sum of weights excluding under/overflows. ;  ; virtual TArrayD * GetSumw2 ();  ; virtual const TArrayD * GetSumw2 () const;  ; virtual Int_t GetSumw2N () const;  ; virtual Float_t GetTickLength (Option_t *axis=""X"") const;  Return the ""axis"" tick length. ;  ; virtual Style_t GetTitleFont (Option_t *axis=""X"") const;  Return the ""axis"" title font. ;  ; virtual Float_t GetTitleOffset (Option_t *axis=""X"") const;  Return the ""axis"" title offset. ;  ; virtual Float_t GetTitleSize (Option_t *axis=""X"") const;  Return the ""axis"" title size. ;  ; TAxis * GetXaxis ();  ; const TAxis * GetXaxis () const;  ; TAxis * GetYaxis ();  ; const TAxis * GetYaxis () const;  ; TAxis * GetZaxis ();  ; const TAxis * GetZaxis () const;  ; virtual Double_t Integral (Int_t binx1, Int_t binx2, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2]. ;  ; virtual D",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:16393,Availability,error,error,16393,"  ; virtual TArrayD * GetSumw2 ();  ; virtual const TArrayD * GetSumw2 () const;  ; virtual Int_t GetSumw2N () const;  ; virtual Float_t GetTickLength (Option_t *axis=""X"") const;  Return the ""axis"" tick length. ;  ; virtual Style_t GetTitleFont (Option_t *axis=""X"") const;  Return the ""axis"" title font. ;  ; virtual Float_t GetTitleOffset (Option_t *axis=""X"") const;  Return the ""axis"" title offset. ;  ; virtual Float_t GetTitleSize (Option_t *axis=""X"") const;  Return the ""axis"" title size. ;  ; TAxis * GetXaxis ();  ; const TAxis * GetXaxis () const;  ; TAxis * GetYaxis ();  ; const TAxis * GetYaxis () const;  ; TAxis * GetZaxis ();  ; const TAxis * GetZaxis () const;  ; virtual Double_t Integral (Int_t binx1, Int_t binx2, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2]. ;  ; virtual Double_t Integral (Option_t *option="""") const;  Return integral of bin contents. ;  ; virtual Double_t IntegralAndError (Int_t binx1, Int_t binx2, Double_t &err, Option_t *option="""") const;  Return integral of bin contents in range [binx1,binx2] and its error. ;  ; virtual Double_t Interpolate (Double_t x) const;  Given a point x, approximates the value via linear interpolation based on the two nearest bin centers. ;  ; virtual Double_t Interpolate (Double_t x, Double_t y) const;  2d Interpolation. Not yet implemented. ;  ; virtual Double_t Interpolate (Double_t x, Double_t y, Double_t z) const;  3d Interpolation. Not yet implemented. ;  ; Bool_t IsBinOverflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is overflow. ;  ; Bool_t IsBinUnderflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is underflow. ;  ; virtual Bool_t IsHighlight () const;  ; virtual Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using Kolmogorov test. ;  ; virtual void LabelsDeflate (Option_t *axis=""X"");  Reduce the number of bins for the axis passed in the option",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:18744,Availability,error,errors,18744," ; Long64_t Merge (TCollection *list, Option_t *option);  Add all histograms in the collection to this histogram. ;  ; virtual Bool_t Multiply (const TH1 *h1);  Multiply this histogram by h1. ;  ; virtual Bool_t Multiply (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2. ;  ; virtual Bool_t Multiply (TF1 *f1, Double_t c1=1);  Performs the operation: ;  ; void Paint (Option_t *option="""") override;  Control routine to paint any kind of histograms. ;  ; void Print (Option_t *option="""") const override;  Print some global quantities for this histogram. ;  ; virtual void PutStats (Double_t *stats);  Replace current statistics with the values in array stats. ;  ; virtual TH1 * Rebin (Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr);  Rebin this histogram. ;  ; virtual void RebinAxis (Double_t x, TAxis *axis);  ; virtual TH1 * RebinX (Int_t ngroup=2, const char *newname="""");  ; virtual void Rebuild (Option_t *option="""");  Using the current bin info, recompute the arrays for contents and errors. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual void ResetStats ();  Reset the statistics including the number of entries and replace with values calculated from bin content. ;  ; void SaveAs (const char *filename=""hist"", Option_t *option="""") const override;  Save the histogram as .csv, .tsv or .txt. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void Scale (Double_t c1=1, Option_t *option="""");  Multiply this histogram by a constant c1. ;  ; virtual void SetAxisColor (Color_t color=1, Option_t *axis=""X"");  Set color to draw the axis line and tick marks. ;  ; virtual void SetAxisRange (Double_t xmin, Double_t xmax, Option_t *axis=""X"");  Set the ""axis"" range. ;  ; virtual void SetBarOffset (Float_t ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:20350,Availability,error,error,20350,"am by a constant c1. ;  ; virtual void SetAxisColor (Color_t color=1, Option_t *axis=""X"");  Set color to draw the axis line and tick marks. ;  ; virtual void SetAxisRange (Double_t xmin, Double_t xmax, Option_t *axis=""X"");  Set the ""axis"" range. ;  ; virtual void SetBarOffset (Float_t offset=0.25);  Set the bar offset as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinContent (Int_t bin, Double_t content);  Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Doub",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:20474,Availability,error,error,20474,"am by a constant c1. ;  ; virtual void SetAxisColor (Color_t color=1, Option_t *axis=""X"");  Set color to draw the axis line and tick marks. ;  ; virtual void SetAxisRange (Double_t xmin, Double_t xmax, Option_t *axis=""X"");  Set the ""axis"" range. ;  ; virtual void SetBarOffset (Float_t offset=0.25);  Set the bar offset as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinContent (Int_t bin, Double_t content);  Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Doub",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:20599,Availability,error,error,20599,"virtual void SetBarOffset (Float_t offset=0.25);  Set the bar offset as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinContent (Int_t bin, Double_t content);  Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:20734,Availability,error,error,20734,"ual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinContent (Int_t bin, Double_t content);  Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis paramet",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:21991,Availability,mask,mask,21991," ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:22021,Availability,mask,mask,22021," ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:22967,Availability,error,error,22967,"le / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Double_t *error);  Replace bin errors by values in array error. ;  ; virtual void SetHighlight (Bool_t set=kTRUE);  Set highlight (enable/disable) mode for the histogram by default highlight mode is disable. ;  ; virtual void SetLabelColor (Color_t color=1, Option_t *axis=""X"");  Set axis labels color. ;  ; virtual void SetLabelFont (Style_t font=62, Option_t *axis=""X"");  Set font number used to draw axis labels. ;  ; virtual void SetLabelOffset (Float_t offset=0.005, Option_t *axis=""X"");  Set offset between axis and axis' labels. ;  ; virtual void SetLabelSize (Float_t size=0.02, Option_t *axis=""X"");  Set size of axis' labels. ;  ; virtual void SetMaximum (Double_t maximum=-1111);  ; virtual void SetMinimum (Double_t minimum=-1111);  ; void SetName (const char *name) override;  Change the name of this histogram. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the name and title of this histogram. ;  ; virtual void SetNdivisions (Int_t n=510, Option_",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:22988,Availability,error,errors,22988,"le / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Double_t *error);  Replace bin errors by values in array error. ;  ; virtual void SetHighlight (Bool_t set=kTRUE);  Set highlight (enable/disable) mode for the histogram by default highlight mode is disable. ;  ; virtual void SetLabelColor (Color_t color=1, Option_t *axis=""X"");  Set axis labels color. ;  ; virtual void SetLabelFont (Style_t font=62, Option_t *axis=""X"");  Set font number used to draw axis labels. ;  ; virtual void SetLabelOffset (Float_t offset=0.005, Option_t *axis=""X"");  Set offset between axis and axis' labels. ;  ; virtual void SetLabelSize (Float_t size=0.02, Option_t *axis=""X"");  Set size of axis' labels. ;  ; virtual void SetMaximum (Double_t maximum=-1111);  ; virtual void SetMinimum (Double_t minimum=-1111);  ; void SetName (const char *name) override;  Change the name of this histogram. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the name and title of this histogram. ;  ; virtual void SetNdivisions (Int_t n=510, Option_",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:23014,Availability,error,error,23014,"le / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Double_t *error);  Replace bin errors by values in array error. ;  ; virtual void SetHighlight (Bool_t set=kTRUE);  Set highlight (enable/disable) mode for the histogram by default highlight mode is disable. ;  ; virtual void SetLabelColor (Color_t color=1, Option_t *axis=""X"");  Set axis labels color. ;  ; virtual void SetLabelFont (Style_t font=62, Option_t *axis=""X"");  Set font number used to draw axis labels. ;  ; virtual void SetLabelOffset (Float_t offset=0.005, Option_t *axis=""X"");  Set offset between axis and axis' labels. ;  ; virtual void SetLabelSize (Float_t size=0.02, Option_t *axis=""X"");  Set size of axis' labels. ;  ; virtual void SetMaximum (Double_t maximum=-1111);  ; virtual void SetMinimum (Double_t minimum=-1111);  ; void SetName (const char *name) override;  Change the name of this histogram. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the name and title of this histogram. ;  ; virtual void SetNdivisions (Int_t n=510, Option_",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:28257,Availability,error,error,28257,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method,",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:28346,Availability,error,error,28346,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const c",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:28501,Availability,error,error,28501,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if o",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:28678,Availability,error,error,28678,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDe",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:31910,Availability,error,error,31910,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:39525,Availability,error,errors,39525,"E);  Sets the flag controlling the automatic add of histograms in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: cannot be inlined on Windows/NT. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the default buffer size for automatic histograms the parameter fgBufferSize may be changed via SetDefaultBufferSize. ;  ; static Bool_t GetDefaultSumw2 ();  Return kTRUE if TH1::Sumw2 must be called when creating new histograms. ;  ; static void SetDefaultBufferSize (Int_t buffersize=1000);  Static function to set the default buffer size for automatic histograms. ;  ; static void SetDefaultSumw2 (Bool_t sumw2=kTRUE);  When this static function is called with sumw2=kTRUE, all new histograms will automatically activate the storage of the sum of squares of errors, ie TH1::Sumw2 is automatically called. ;  ; static void SmoothArray (Int_t NN, Double_t *XX, Int_t ntimes=1);  Smooth array xx, translation of Hbook routine hsmoof.F. ;  ; static void StatOverflows (Bool_t flag=kTRUE);  if flag=kTRUE, underflows and overflows are used by the Fill functions in the computation of statistics (mean value, StdDev). ;  ; static TH1 * TransformHisto (TVirtualFFT *fft, TH1 *h_output, Option_t *option);  For a given transform (first parameter), fills the histogram (second parameter) with the transform output data, specified in the third parameter If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created and the user is responsible for deleting it. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:44186,Availability,error,error,44186,"tructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; virtual Double_t GetBinErrorSqUnchecked (Int_t bin) const;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:45612,Availability,error,error,45612,"th the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; virtual Double_t GetBinErrorSqUnchecked (Int_t bin) const;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Friends; TH1D operator* (const TH1D &h1, const TH1D &h2);  Operator *. ;  ; TH1D operator* (const TH1D &h1, Double_t c1);  ; TH1D operator* (Double_t c1, const TH1D &h1);  Operator *. ;  ; TH1D operator+ (const TH1D &h1, const TH1D &h2);  Operator +. ;  ; TH1D operator- (const TH1D &h1, const TH1D &h2);  Operator -. ;  ; TH1D operator/ (const TH1D &h1, const TH1D &h2);  Operator /. ;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumera",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:46547,Availability,error,errors,46547,"onst char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Friends; TH1D operator* (const TH1D &h1, const TH1D &h2);  Operator *. ;  ; TH1D operator* (const TH1D &h1, Double_t c1);  ; TH1D operator* (Double_t c1, const TH1D &h1);  Operator *. ;  ; TH1D operator+ (const TH1D &h1, const TH1D &h2);  Operator +. ;  ; TH1D operator- (const TH1D &h1, const TH1D &h2);  Operator -. ;  ; TH1D operator/ (const TH1D &h1, const TH1D &h2);  Operator /. ;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type of statistics for bin errors. More...;  ; enum  EStatOverflows { kIgnore = 0; , kConsider = 1; , kNeutral = 2; };  Enumeration specifying the way to treat statoverflow. More...;  ; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kUserContour = (1ULL << ( 10 )); , kLogX = (1ULL << ( 15 )); , kIsZoomed = (1ULL << ( 16 )); , ;   kNoTitle = (1ULL << ( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMust",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:49403,Availability,error,errors,49403,"xis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  Same limits and bins. ;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ! Histogram dimension (1, 2 or 3 dim) ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this histogram ;  ; Double_t fEntries;  Number of entries. ;  ; TList * fFunctions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:42804,Deployability,update,update,42804," Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayD; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t n",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:55951,Deployability,update,update,55951,"nContent ; (; Int_t ; bin); const. inlineoverrideprotectedvirtual . Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Reimplemented in TProfile.; Definition at line 703 of file TH1.h. ◆ SetBinsLength(). void TH1D::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow Reallocate bin contents array. ; Reimplemented from TH1.; Reimplemented in TProfile.; Definition at line 10501 of file TH1.cxx. ◆ Streamer(). void TH1D::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TH1.; Reimplemented in TProfile. ◆ StreamerNVirtual(). void TH1D::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 693 of file TH1.h. ◆ UpdateBinContent(). void TH1D::UpdateBinContent ; (; Int_t ; bin, . Double_t ; content . ). inlineoverrideprotectedvirtual . Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ; Reimplemented from TH1.; Definition at line 704 of file TH1.h. Friends And Related Symbol Documentation. ◆ operator* [1/3]. TH1D operator* ; (; const TH1D & ; h1, . const TH1D & ; h2 . ). friend . Operator *. ; Definition at line 10555 of file TH1.cxx. ◆ operator* [2/3]. TH1D operator* ; (; const TH1D & ; h1, . Double_t ; c1 . ). friend . Definition at line 709 of file TH1.h. ◆ operator* [3/3]. TH1D operator* ; (; Double_t ; c1, . const TH1D & ; h1 . ). friend . Operator *. ; Definition at line 10522 of file TH1.cxx. ◆ operator+. TH1D operator+ ; (; const TH1D & ; h1, . const TH1D & ; h2 . ). friend . Operator +. ; Definition at line 10533 of file TH1.cxx. ◆ operator-. TH1D operator- ; (; const TH1D & ; h1, . const TH1D & ; h2 . ). friend . Operator -. ; Definition at line 10544 of file TH1.cxx. ◆ operator/. TH1D operator/ ; (; const TH1D & ; h1, . const TH1D & ; h2 . ). friend . Operator /. ; Definition at line 10566 of file TH1.cx",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:43589,Energy Efficiency,power,power,43589," . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values working for all histograms (1D, 2D and 3D) ;  ; virtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merg",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:48033,Energy Efficiency,power,power,48033," 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayD; Double_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:48174,Energy Efficiency,power,power,48174,"2000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayD; Double_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  S",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:3509,Integrability,rout,routine,3509,"n="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:18137,Integrability,rout,routine,18137,") const;  Statistical test of compatibility in shape between this histogram and h2, using Kolmogorov test. ;  ; virtual void LabelsDeflate (Option_t *axis=""X"");  Reduce the number of bins for the axis passed in the option to the number of bins having a label. ;  ; virtual void LabelsInflate (Option_t *axis=""X"");  Double the number of bins for axis. ;  ; virtual void LabelsOption (Option_t *option=""h"", Option_t *axis=""X"");  Sort bins with labels or set option(s) to draw axis with labels. ;  ; virtual Long64_t Merge (TCollection *list);  ; Long64_t Merge (TCollection *list, Option_t *option);  Add all histograms in the collection to this histogram. ;  ; virtual Bool_t Multiply (const TH1 *h1);  Multiply this histogram by h1. ;  ; virtual Bool_t Multiply (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2. ;  ; virtual Bool_t Multiply (TF1 *f1, Double_t c1=1);  Performs the operation: ;  ; void Paint (Option_t *option="""") override;  Control routine to paint any kind of histograms. ;  ; void Print (Option_t *option="""") const override;  Print some global quantities for this histogram. ;  ; virtual void PutStats (Double_t *stats);  Replace current statistics with the values in array stats. ;  ; virtual TH1 * Rebin (Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr);  Rebin this histogram. ;  ; virtual void RebinAxis (Double_t x, TAxis *axis);  ; virtual TH1 * RebinX (Int_t ngroup=2, const char *newname="""");  ; virtual void Rebuild (Option_t *option="""");  Using the current bin info, recompute the arrays for contents and errors. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual void ResetStats ();  Reset the statistics including the number of entries and replace with values calculated from bin content. ;  ; void SaveAs (const char *filename=""hist"", Option_t *option="""") const override;  Save ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:28263,Integrability,message,message,28263,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method,",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:28684,Integrability,message,message,28684,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDe",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:29300,Integrability,message,message,29300,"cute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:31916,Integrability,message,message,31916,"te[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:32107,Integrability,message,message,32107,"[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:39682,Integrability,rout,routine,39682,"s * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the default buffer size for automatic histograms the parameter fgBufferSize may be changed via SetDefaultBufferSize. ;  ; static Bool_t GetDefaultSumw2 ();  Return kTRUE if TH1::Sumw2 must be called when creating new histograms. ;  ; static void SetDefaultBufferSize (Int_t buffersize=1000);  Static function to set the default buffer size for automatic histograms. ;  ; static void SetDefaultSumw2 (Bool_t sumw2=kTRUE);  When this static function is called with sumw2=kTRUE, all new histograms will automatically activate the storage of the sum of squares of errors, ie TH1::Sumw2 is automatically called. ;  ; static void SmoothArray (Int_t NN, Double_t *XX, Int_t ntimes=1);  Smooth array xx, translation of Hbook routine hsmoof.F. ;  ; static void StatOverflows (Bool_t flag=kTRUE);  if flag=kTRUE, underflows and overflows are used by the Fill functions in the computation of statistics (mean value, StdDev). ;  ; static TH1 * TransformHisto (TVirtualFFT *fft, TH1 *h_output, Option_t *option);  For a given transform (first parameter), fills the histogram (second parameter) with the transform output data, specified in the third parameter If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created and the user is responsible for deleting it. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static con",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:590,Modifiability,variab,variable,590,". ROOT: TH1D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1D Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with a double per channel (see TH1 documentation) ; Definition at line 670 of file TH1.h. Public Member Functions;  TH1D ();  Constructor. ;  ;  TH1D (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const TH1D &h1d);  Constructor. ;  ;  TH1D (const TVectorD &v);  Create a histogram from a TVectorD by default the histogram name is ""TVectorD"" and title = """". ;  ;  ~TH1D () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1D & operator= (const TH1D &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:781,Modifiability,variab,variable,781,". ROOT: TH1D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH1D Class ReferenceHistogram Library » Histogram classes. ; 1-D histogram with a double per channel (see TH1 documentation) ; Definition at line 670 of file TH1.h. Public Member Functions;  TH1D ();  Constructor. ;  ;  TH1D (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const TH1D &h1d);  Constructor. ;  ;  TH1D (const TVectorD &v);  Create a histogram from a TVectorD by default the histogram name is ""TVectorD"" and title = """". ;  ;  ~TH1D () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1D & operator= (const TH1D &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:1987,Modifiability,inherit,inherited,1987," with fix bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const TH1D &h1d);  Constructor. ;  ;  TH1D (const TVectorD &v);  Create a histogram from a TVectorD by default the histogram name is ""TVectorD"" and title = """". ;  ;  ~TH1D () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void Copy (TObject &hnew) const override;  Copy this to newth1. ;  ; TClass * IsA () const override;  ; TH1D & operator= (const TH1D &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:3166,Modifiability,extend,extendable,3166,"_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Int_t BufferEmpty (Int_t action=0);  Fill histogram with all entries in the buffer. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histogram point by the bin error By default the full range of the histogram is used. ;  ; virtual void ClearUnderflowAndOverflow ();  Remove all the content from the underflow and overflow bins, without changing the number of entries After calling this method, every undeflow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:14242,Modifiability,variab,variable,14242,"l Int_t GetMinimumBin () const;  Return location of bin with minimum value in the range. ;  ; virtual Int_t GetMinimumBin (Int_t &locmix, Int_t &locmiy, Int_t &locmiz) const;  Return location of bin with minimum value in the range. ;  ; virtual Double_t GetMinimumStored () const;  ; virtual Int_t GetNbinsX () const;  ; virtual Int_t GetNbinsY () const;  ; virtual Int_t GetNbinsZ () const;  ; virtual Int_t GetNcells () const;  ; virtual Int_t GetNdivisions (Option_t *axis=""X"") const;  Return the number of divisions for ""axis"". ;  ; virtual Double_t GetNormFactor () const;  ; char * GetObjectInfo (Int_t px, Int_t py) const override;  Redefines TObject::GetObjectInfo. ;  ; Option_t * GetOption () const override;  ; TVirtualHistPainter * GetPainter (Option_t *option="""");  Return pointer to painter. ;  ; virtual Int_t GetQuantiles (Int_t n, Double_t *xp, const Double_t *p=nullptr);  Compute Quantiles for this histogram Quantile x_p := Q(p) is defined as the value x_p such that the cumulative probability distribution Function F of variable X yields: ;  ; virtual Double_t GetRandom (TRandom *rng=nullptr) const;  Return a random number distributed according the histogram bin contents. ;  ; Double_t GetRMS (Int_t axis=1) const;  This function returns the Standard Deviation (Sigma) of the distribution not the Root Mean Square (RMS). ;  ; Double_t GetRMSError (Int_t axis=1) const;  ; virtual Double_t GetSkewness (Int_t axis=1) const;  ; EStatOverflows GetStatOverflows () const;  Get the behaviour adopted by the object about the statoverflows. See EStatOverflows for more information. ;  ; virtual void GetStats (Double_t *stats) const;  fill the array stats from the contents of this histogram The array stats must be correctly dimensioned in the calling program. ;  ; virtual Double_t GetStdDev (Int_t axis=1) const;  Returns the Standard Deviation (Sigma). ;  ; virtual Double_t GetStdDevError (Int_t axis=1) const;  Return error of standard deviation estimation for Normal distribut",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:20942,Modifiability,variab,variable,20942,"_t bin, Double_t content);  Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater than the number of bins and the timedisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:21095,Modifiability,variab,variable,21095,"medisplay option is set or CanExtendAllAxes(), the number of bins is automatically doubled to accommodate the new bin. ;  ; virtual void SetBinContent (Int_t bin, Int_t, Double_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying w",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:21284,Modifiability,variab,variable,21284,"ouble_t content);  ; virtual void SetBinContent (Int_t bin, Int_t, Int_t, Double_t content);  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual void SetBins (Int_t nx, const Double_t *xBins);  Redefine x axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t conte",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:21901,Modifiability,extend,extendBitMask,21901," ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:21942,Modifiability,extend,extendable,21942," ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:21959,Modifiability,extend,extendable,21959," ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:22052,Modifiability,extend,extendable,22052," ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins);  Redefine x and y axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins);  Redefine x, y and z axis parameters with variable bin sizes. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax);  Redefine x axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax);  Redefine x and y axis parameters. ;  ; virtual void SetBins (Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax);  Redefine x, y and z axis parameters. ;  ; virtual void SetBuffer (Int_t buffersize, Option_t *option="""");  Set the maximum number of entries to be kept in the buffer. ;  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirectory (TDirectory *dir);  By default, when a histogram is created, it is added to the list of histogram objects in the current directory in memory. ;  ; virtual void SetEntries (Double_t n);  ; virtual void SetError (const Doub",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:25635,Modifiability,inherit,inherited,25635," distance between the axis and the axis' title. ;  ; virtual void SetTitleSize (Float_t size=0.02, Option_t *axis=""X"");  Set the axis' title size. ;  ; virtual void SetXTitle (const char *title);  ; virtual void SetYTitle (const char *title);  ; virtual void SetZTitle (const char *title);  ; virtual TH1 * ShowBackground (Int_t niter=20, Option_t *option=""same"");  This function calculates the background spectrum in this histogram. ;  ; virtual Int_t ShowPeaks (Double_t sigma=2, Option_t *option="""", Double_t threshold=0.05);  Interface to TSpectrum::Search. ;  ; virtual void Smooth (Int_t ntimes=1, Option_t *option="""");  Smooth bin contents of this histogram. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Sumw2 (Bool_t flag=kTRUE);  Create structure to store sum of squares of weights. ;  ; void UseCurrentStyle () override;  Copy current attributes from/to current style. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:27100,Modifiability,inherit,inherited,27100,". ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:27893,Modifiability,inherit,inheritance,27893,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:29398,Modifiability,inherit,inherits,29398,"e method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:29515,Modifiability,inherit,inherits,29515," *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:32414,Modifiability,inherit,inherited,32414,"directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:33919,Modifiability,inherit,inherited,33919,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:35174,Modifiability,inherit,inherited,35174,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:36594,Modifiability,inherit,inherited,36594,"ual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArrayD;  TArrayD ();  Default TArrayD ctor. ;  ;  TArrayD (const TArrayD &array);  Copy constructor. ;  ;  TArrayD (Int_t n);  Create TArrayD object and set array size to n doubles. ;  ;  TArrayD (Int_t n, const Double_t *array);  Create TArrayD object and initialize it with values of array. ;  ; virtual ~TArrayD ();  Delete TArrayD object. ;  ; void AddAt (Double_t c, Int_t i);  Set the double c value at position i in the array. ;  ; void Adopt (Int_t n, Double_t *array);  Adopt array arr into TArrayD, i.e. ;  ; Double_t At (Int_t i) const;  ; void Copy (TArrayD &array) const;  ; Double_t * GetArray ();  ; const Double_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TArrayD & operator= (const TArrayD &rhs);  TArrayD assignment operator. ;  ; Double_t & operator[] (Int_t i);  ; Double_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Double_t val);  ; void Set (Int_t n) override;  Set size o",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:37922,Modifiability,inherit,inherited,37922,"le_t c, Int_t i);  Set the double c value at position i in the array. ;  ; void Adopt (Int_t n, Double_t *array);  Adopt array arr into TArrayD, i.e. ;  ; Double_t At (Int_t i) const;  ; void Copy (TArrayD &array) const;  ; Double_t * GetArray ();  ; const Double_t * GetArray () const;  ; Double_t GetAt (Int_t i) const override;  ; Stat_t GetSum () const;  ; TArrayD & operator= (const TArrayD &rhs);  TArrayD assignment operator. ;  ; Double_t & operator[] (Int_t i);  ; Double_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Double_t val);  ; void Set (Int_t n) override;  Set size of this array to n doubles. ;  ; void Set (Int_t n, const Double_t *array);  Set size of this array to n doubles and set the contents This function should not be called if the array was declared via Adopt. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH1; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add of histograms in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: cannot be inlined on Windows/NT. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the defaul",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:38389,Modifiability,inherit,inherited,38389,"perator= (const TArrayD &rhs);  TArrayD assignment operator. ;  ; Double_t & operator[] (Int_t i);  ; Double_t operator[] (Int_t i) const;  ; void Reset ();  ; void Reset (Double_t val);  ; void Set (Int_t n) override;  Set size of this array to n doubles. ;  ; void Set (Int_t n, const Double_t *array);  Set size of this array to n doubles and set the contents This function should not be called if the array was declared via Adopt. ;  ; void SetAt (Double_t v, Int_t i) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArray;  TArray ();  ;  TArray (const TArray &a);  ;  TArray (Int_t n);  ; virtual ~TArray ();  ; Int_t GetSize () const;  ; TArray & operator= (const TArray &rhs);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TH1; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add of histograms in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: cannot be inlined on Windows/NT. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FitOptionsMake (Option_t *option, Foption_t &Foption);  Decode string choptin and fill fitOption structure. ;  ; static Int_t GetDefaultBufferSize ();  Static function return the default buffer size for automatic histograms the parameter fgBufferSize may be changed via SetDefaultBufferSize. ;  ; static Bool_t GetDefaultSumw2 ();  Return kTRUE if TH1::Sumw2 must be called when creating new histograms. ;  ; static void SetDefaultBufferSize (Int_t buffersize=1000);  Static function to set the default buffer size for automatic histograms. ;  ; static voi",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:40275,Modifiability,inherit,inherited,40275,"tivate the storage of the sum of squares of errors, ie TH1::Sumw2 is automatically called. ;  ; static void SmoothArray (Int_t NN, Double_t *XX, Int_t ntimes=1);  Smooth array xx, translation of Hbook routine hsmoof.F. ;  ; static void StatOverflows (Bool_t flag=kTRUE);  if flag=kTRUE, underflows and overflows are used by the Fill functions in the computation of statistics (mean value, StdDev). ;  ; static TH1 * TransformHisto (TVirtualFFT *fft, TH1 *h_output, Option_t *option);  For a given transform (first parameter), fills the histogram (second parameter) with the transform output data, specified in the third parameter If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created and the user is responsible for deleting it. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:40485,Modifiability,inherit,inherited,40485,"tivate the storage of the sum of squares of errors, ie TH1::Sumw2 is automatically called. ;  ; static void SmoothArray (Int_t NN, Double_t *XX, Int_t ntimes=1);  Smooth array xx, translation of Hbook routine hsmoof.F. ;  ; static void StatOverflows (Bool_t flag=kTRUE);  if flag=kTRUE, underflows and overflows are used by the Fill functions in the computation of statistics (mean value, StdDev). ;  ; static TH1 * TransformHisto (TVirtualFFT *fft, TH1 *h_output, Option_t *option);  For a given transform (first parameter), fills the histogram (second parameter) with the transform output data, specified in the third parameter If the 2nd parameter h_output is empty, a new histogram (TH1D or TH2D) is created and the user is responsible for deleting it. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:41003,Modifiability,inherit,inherited,41003,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayD; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:41215,Modifiability,inherit,inherited,41215,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayD; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:41427,Modifiability,inherit,inherited,41427,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayD; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:41962,Modifiability,inherit,inherited,41962,"Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayD; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const c",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:42173,Modifiability,inherit,inherited,42173,"Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  ;  Static Public Member Functions inherited from TArrayD; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const c",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:42936,Modifiability,inherit,inherited,42936,"er Functions inherited from TArrayD; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called direct",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:43100,Modifiability,variab,variable,43100,"Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TArray; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:43268,Modifiability,variab,variable,43268,"ss_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TArray * ReadArray (TBuffer &b, const TClass *clReq);  Read TArray object from buffer. ;  ; static void WriteArray (TBuffer &b, const TArray *a);  Write TArray object to buffer. ;  . Protected Member Functions; Double_t RetrieveBinContent (Int_t bin) const override;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; void UpdateBinContent (Int_t bin, Double_t content) override;  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TH1;  TH1 ();  Histogram default constructor. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Constructor for variable bin size histograms using an input array of type double. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Constructor for variable bin size histograms using an input array of type float. ;  ;  TH1 (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Constructor for fix bin size histograms. ;  ; virtual Int_t AutoP2FindLimits (Double_t min, Double_t max);  Buffer-based estimate of the histogram range using the power of 2 algorithm. ;  ; Int_t AxisChoice (Option_t *axis) const;  Choose an axis according to ""axis"". ;  ; virtual Int_t BufferFill (Double_t x, Double_t w);  accumulate arguments in buffer. ;  ; virtual void DoFillN (Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1);  Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty. ;  ; virtual Double_t DoIntegral (Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t &err, Option_t *opt, Bool_t doerr=kFALSE) const;  Internal function compute integral and optionally the error between the limits specified by the bin number values wor",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:45235,Modifiability,inherit,inherited,45235,"irtual Bool_t FindNewAxisLimits (const TAxis *axis, const Double_t point, Double_t &newMin, Double_t &newMax);  finds new limits for the axis so that point is within the range and the limits are compatible with the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; virtual Double_t GetBinErrorSqUnchecked (Int_t bin) const;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Friends; TH1D operator* (const TH1D &h1, const TH1D &h2);  Operator *. ;  ; TH1D operator* (const TH1D &h1, Double_t c1);  ; TH1D operator* (Double_t c1, const TH1D &h1);  Operator *. ;  ; TH1D operator+ (const TH1D &h1, const TH1D &h2);  Operator +. ;  ; TH1D operator- (const TH1D &h1, const TH1D &h2);  Operator -. ;  ; TH1D operator/ (const TH1D &h1, const TH1D &h2);  Operator /. ;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can b",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:45446,Modifiability,inherit,inherited,45446,"th the previous ones (see TH1::Merge). ;  ; UInt_t GetAxisLabelStatus () const;  Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ;  ; virtual Double_t GetBinErrorSqUnchecked (Int_t bin) const;  ; Bool_t GetStatOverflowsBehaviour () const;  ; Bool_t IsEmpty () const;  Check if a histogram is empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Friends; TH1D operator* (const TH1D &h1, const TH1D &h2);  Operator *. ;  ; TH1D operator* (const TH1D &h1, Double_t c1);  ; TH1D operator* (Double_t c1, const TH1D &h1);  Operator *. ;  ; TH1D operator+ (const TH1D &h1, const TH1D &h2);  Operator +. ;  ; TH1D operator- (const TH1D &h1, const TH1D &h2);  Operator -. ;  ; TH1D operator/ (const TH1D &h1, const TH1D &h2);  Operator /. ;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumera",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:46080,Modifiability,inherit,inherited,46080," TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Friends; TH1D operator* (const TH1D &h1, const TH1D &h2);  Operator *. ;  ; TH1D operator* (const TH1D &h1, Double_t c1);  ; TH1D operator* (Double_t c1, const TH1D &h1);  Operator *. ;  ; TH1D operator+ (const TH1D &h1, const TH1D &h2);  Operator +. ;  ; TH1D operator- (const TH1D &h1, const TH1D &h2);  Operator -. ;  ; TH1D operator/ (const TH1D &h1, const TH1D &h2);  Operator /. ;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type of statistics for bin errors. More...;  ; enum  EStatOverflows { kIgnore = 0; , kConsider = 1; , kNeutral = 2; };  Enumeration specifying the way to treat statoverflow. More...;  ; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kUserContour = (1ULL << ( 10 )); , kLogX = (1ULL << ( 15 )); , kIsZoomed = (1ULL << ( 16 )); , ;   kNoTitle = (1ULL << ( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDelet",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:46297,Modifiability,extend,extended,46297,"r (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TArray; Bool_t BoundsOk (const char *where, Int_t at) const;  ; Bool_t OutOfBoundsError (const char *where, Int_t i) const;  Generate an out-of-bounds error. Always returns false. ;  . Friends; TH1D operator* (const TH1D &h1, const TH1D &h2);  Operator *. ;  ; TH1D operator* (const TH1D &h1, Double_t c1);  ; TH1D operator* (Double_t c1, const TH1D &h1);  Operator *. ;  ; TH1D operator+ (const TH1D &h1, const TH1D &h2);  Operator +. ;  ; TH1D operator- (const TH1D &h1, const TH1D &h2);  Operator -. ;  ; TH1D operator/ (const TH1D &h1, const TH1D &h2);  Operator /. ;  . Additional Inherited Members;  Public Types inherited from TH1; enum  { ;   kNoAxis = 0; , kXaxis = (1ULL << ( 0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type of statistics for bin errors. More...;  ; enum  EStatOverflows { kIgnore = 0; , kConsider = 1; , kNeutral = 2; };  Enumeration specifying the way to treat statoverflow. More...;  ; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kUserContour = (1ULL << ( 10 )); , kLogX = (1ULL << ( 15 )); , kIsZoomed = (1ULL << ( 16 )); , ;   kNoTitle = (1ULL << ( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:47072,Modifiability,inherit,inherited,47072,"0 )); , kYaxis = (1ULL << ( 1 )); , kZaxis = (1ULL << ( 2 )); , ;   kAllAxes = kXaxis | kYaxis | kZaxis. };  Enumeration specifying which axes can be extended. More...;  ; enum  { kNstat = 13; };  Size of statistics data (size of array used in GetStats()/ PutStats ) More...;  ; enum  EBinErrorOpt { kNormal = 0; , kPoisson = 1; , kPoisson2 = 2; };  Enumeration specifying type of statistics for bin errors. More...;  ; enum  EStatOverflows { kIgnore = 0; , kConsider = 1; , kNeutral = 2; };  Enumeration specifying the way to treat statoverflow. More...;  ; enum  EStatusBits { ;   kNoStats = (1ULL << ( 9 )); , kUserContour = (1ULL << ( 10 )); , kLogX = (1ULL << ( 15 )); , kIsZoomed = (1ULL << ( 16 )); , ;   kNoTitle = (1ULL << ( 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayD; Double_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxi",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:47715,Modifiability,inherit,inherited,47715," 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayD; Double_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:47780,Modifiability,inherit,inherited,47780," 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayD; Double_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:47833,Modifiability,inherit,inherited,47833," 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayD; Double_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:47939,Modifiability,inherit,inherited,47939," 17 )); , kIsAverage = (1ULL << ( 18 )); , kIsNotW = (1ULL << ( 19 )); , kAutoBinPTwo = (1ULL << ( 20 )); , ;   kIsHighlight = (1ULL << ( 21 )). };  TH1 status bits. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayD; Double_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:49200,Modifiability,inherit,inherited,49200,"xis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const TAxis &anAxis);  Finds new limits for the axis for the Merge function. ;  ; static Bool_t SameLimitsAndNBins (const TAxis &axis1, const TAxis &axis2);  Same limits and bins. ;  ;  Protected Attributes inherited from TH1; Short_t fBarOffset;  (1000*offset) for bar charts or legos ;  ; Short_t fBarWidth;  (1000*width) for bar charts or legos ;  ; EBinErrorOpt fBinStatErrOpt;  Option for bin statistical errors. ;  ; Double_t * fBuffer;  [fBufferSize] entry buffer ;  ; Int_t fBufferSize;  fBuffer size ;  ; TArrayD fContour;  Array to display contour levels. ;  ; Int_t fDimension;  ! Histogram dimension (1, 2 or 3 dim) ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this histogram ;  ; Double_t fEntries;  Number of entries. ;  ; TList * fFunctions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:50705,Modifiability,inherit,inherited,50705,"tions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in statistics. ;  ; TArrayD fSumw2;  Array of sum of squares of weights. ;  ; Double_t fTsumw;  Total Sum of weights. ;  ; Double_t fTsumw2;  Total Sum of squares of weights. ;  ; Double_t fTsumwx;  Total Sum of weight*X. ;  ; Double_t fTsumwx2;  Total Sum of weight*X*X. ;  ; TAxis fXaxis;  X axis descriptor. ;  ; TAxis fYaxis;  Y axis descriptor. ;  ; TAxis fZaxis;  Z axis descriptor. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Static Protected Attributes inherited from TH1; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . #include <TH1.h>. Inheritance diagram for TH1D:. This browser is not able to show SVG: try Firefox, Chrome",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:50787,Modifiability,inherit,inherited,50787,"tions;  ->Pointer to list of functions (fits and user) ;  ; Double_t * fIntegral;  ! Integral of bins used by GetRandom ;  ; Double_t fMaximum;  Maximum value for plotting. ;  ; Double_t fMinimum;  Minimum value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in statistics. ;  ; TArrayD fSumw2;  Array of sum of squares of weights. ;  ; Double_t fTsumw;  Total Sum of weights. ;  ; Double_t fTsumw2;  Total Sum of squares of weights. ;  ; Double_t fTsumwx;  Total Sum of weight*X. ;  ; Double_t fTsumwx2;  Total Sum of weight*X*X. ;  ; TAxis fXaxis;  X axis descriptor. ;  ; TAxis fYaxis;  Y axis descriptor. ;  ; TAxis fZaxis;  Z axis descriptor. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Static Protected Attributes inherited from TH1; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . #include <TH1.h>. Inheritance diagram for TH1D:. This browser is not able to show SVG: try Firefox, Chrome",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:50948,Modifiability,inherit,inherited,50948," value for plotting. ;  ; Int_t fNcells;  Number of bins(1D), cells (2D) +U/Overflows. ;  ; Double_t fNormFactor;  Normalization factor. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in statistics. ;  ; TArrayD fSumw2;  Array of sum of squares of weights. ;  ; Double_t fTsumw;  Total Sum of weights. ;  ; Double_t fTsumw2;  Total Sum of squares of weights. ;  ; Double_t fTsumwx;  Total Sum of weight*X. ;  ; Double_t fTsumwx2;  Total Sum of weight*X*X. ;  ; TAxis fXaxis;  X axis descriptor. ;  ; TAxis fYaxis;  Y axis descriptor. ;  ; TAxis fZaxis;  Z axis descriptor. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Static Protected Attributes inherited from TH1; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . #include <TH1.h>. Inheritance diagram for TH1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TH1D() [1/6]. TH1D::TH1D ; (; ). Constructor. ; Definition at line 10402 of file TH1.cxx. ◆ TH1D() [2/6]. TH1D::TH1D ; (; c",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:51081,Modifiability,inherit,inherited,51081,"or. ;  ; TString fOption;  Histogram options. ;  ; TVirtualHistPainter * fPainter;  ! Pointer to histogram painter ;  ; EStatOverflows fStatOverflows;  Per object flag to use under/overflows in statistics. ;  ; TArrayD fSumw2;  Array of sum of squares of weights. ;  ; Double_t fTsumw;  Total Sum of weights. ;  ; Double_t fTsumw2;  Total Sum of squares of weights. ;  ; Double_t fTsumwx;  Total Sum of weight*X. ;  ; Double_t fTsumwx2;  Total Sum of weight*X*X. ;  ; TAxis fXaxis;  X axis descriptor. ;  ; TAxis fYaxis;  Y axis descriptor. ;  ; TAxis fZaxis;  Z axis descriptor. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Static Protected Attributes inherited from TH1; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . #include <TH1.h>. Inheritance diagram for TH1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TH1D() [1/6]. TH1D::TH1D ; (; ). Constructor. ; Definition at line 10402 of file TH1.cxx. ◆ TH1D() [2/6]. TH1D::TH1D ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . Double_t ; xlow, . Double_t ; xup . ). Create a 1-Dim histogram with f",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:51260,Modifiability,inherit,inherited,51260,"m of squares of weights. ;  ; Double_t fTsumwx;  Total Sum of weight*X. ;  ; Double_t fTsumwx2;  Total Sum of weight*X*X. ;  ; TAxis fXaxis;  X axis descriptor. ;  ; TAxis fYaxis;  Y axis descriptor. ;  ; TAxis fZaxis;  Z axis descriptor. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  ;  Static Protected Attributes inherited from TH1; static Bool_t fgAddDirectory = kTRUE;  ! Flag to add histograms to the directory ;  ; static Int_t fgBufferSize = 1000;  ! Default buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . #include <TH1.h>. Inheritance diagram for TH1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TH1D() [1/6]. TH1D::TH1D ; (; ). Constructor. ; Definition at line 10402 of file TH1.cxx. ◆ TH1D() [2/6]. TH1D::TH1D ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . Double_t ; xlow, . Double_t ; xup . ). Create a 1-Dim histogram with fix bins of type double (see TH1::TH1 for explanation of parameters) ; Definition at line 10413 of file TH1.cxx. ◆ TH1D() [3/6]. TH1D::TH1D ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Float_t * ; xbins . ). Create a 1-Dim histogram with variable bins of type double (see TH1::TH1 for explanation of parameters)",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
https://root.cern/doc/master/classTH1D.html:52367,Modifiability,variab,variable,52367,"lt buffer size for automatic histograms ;  ; static Bool_t fgDefaultSumw2 = kFALSE;  ! Flag to call TH1::Sumw2 automatically at histogram creation time ;  ; static Bool_t fgStatOverflows = kFALSE;  ! Flag to use under/overflows in statistics ;  . #include <TH1.h>. Inheritance diagram for TH1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TH1D() [1/6]. TH1D::TH1D ; (; ). Constructor. ; Definition at line 10402 of file TH1.cxx. ◆ TH1D() [2/6]. TH1D::TH1D ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . Double_t ; xlow, . Double_t ; xup . ). Create a 1-Dim histogram with fix bins of type double (see TH1::TH1 for explanation of parameters) ; Definition at line 10413 of file TH1.cxx. ◆ TH1D() [3/6]. TH1D::TH1D ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Float_t * ; xbins . ). Create a 1-Dim histogram with variable bins of type double (see TH1::TH1 for explanation of parameters) ; Definition at line 10427 of file TH1.cxx. ◆ TH1D() [4/6]. TH1D::TH1D ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Double_t * ; xbins . ). Create a 1-Dim histogram with variable bins of type double (see TH1::TH1 for explanation of parameters) ; Definition at line 10439 of file TH1.cxx. ◆ TH1D() [5/6]. TH1D::TH1D ; (; const TVectorD & ; v). explicit . Create a histogram from a TVectorD by default the histogram name is ""TVectorD"" and title = """". ; Definition at line 10451 of file TH1.cxx. ◆ TH1D() [6/6]. TH1D::TH1D ; (; const TH1D & ; h1d). Constructor. ; Definition at line 10474 of file TH1.cxx. ◆ ~TH1D(). TH1D::~TH1D ; (; ). override . Destructor. ; Definition at line 10467 of file TH1.cxx. Member Function Documentation. ◆ AddBinContent() [1/2]. void TH1D::AddBinContent ; (; Int_t ; bin). inlineoverridevirtual . Increment bin content by 1. ; Passing an out-of-range bin leads to undefined behavior ; Reimplemented from TH1.",MatchSource.WIKI,doc/master/classTH1D.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTH1D.html
