id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:33,Performance,load,load,33,// Attempt to convert a srl of a load into a narrower zero-extending load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:69,Performance,load,load,69,// Attempt to convert a srl of a load into a narrower zero-extending load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:42,Performance,optimiz,optimize,42,"// Here is a common situation. We want to optimize:; //; // %a = ...; // %b = and i32 %a, 2; // %c = srl i32 %b, 1; // brcond i32 %c ...; //; // into; //; // %a = ...; // %b = and %a, 2; // %c = setcc eq %b, 0; // brcond %c ...; //; // However when after the source operand of SRL is optimized into AND, the SRL; // itself may not be optimized further. Look for it and add the BRCOND into; // the worklist.; //; // The also tends to happen for binary operations when SimplifyDemandedBits; // is involved.; //; // FIXME: This is unecessary if we process the DAG in topological order,; // which we plan to do. This workaround can be removed once the DAG is; // processed in topological order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:284,Performance,optimiz,optimized,284,"// Here is a common situation. We want to optimize:; //; // %a = ...; // %b = and i32 %a, 2; // %c = srl i32 %b, 1; // brcond i32 %c ...; //; // into; //; // %a = ...; // %b = and %a, 2; // %c = setcc eq %b, 0; // brcond %c ...; //; // However when after the source operand of SRL is optimized into AND, the SRL; // itself may not be optimized further. Look for it and add the BRCOND into; // the worklist.; //; // The also tends to happen for binary operations when SimplifyDemandedBits; // is involved.; //; // FIXME: This is unecessary if we process the DAG in topological order,; // which we plan to do. This workaround can be removed once the DAG is; // processed in topological order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:334,Performance,optimiz,optimized,334,"// Here is a common situation. We want to optimize:; //; // %a = ...; // %b = and i32 %a, 2; // %c = srl i32 %b, 1; // brcond i32 %c ...; //; // into; //; // %a = ...; // %b = and %a, 2; // %c = setcc eq %b, 0; // brcond %c ...; //; // However when after the source operand of SRL is optimized into AND, the SRL; // itself may not be optimized further. Look for it and add the BRCOND into; // the worklist.; //; // The also tends to happen for binary operations when SimplifyDemandedBits; // is involved.; //; // FIXME: This is unecessary if we process the DAG in topological order,; // which we plan to do. This workaround can be removed once the DAG is; // processed in topological order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:467,Usability,Simpl,SimplifyDemandedBits,467,"// Here is a common situation. We want to optimize:; //; // %a = ...; // %b = and i32 %a, 2; // %c = srl i32 %b, 1; // brcond i32 %c ...; //; // into; //; // %a = ...; // %b = and %a, 2; // %c = setcc eq %b, 0; // brcond %c ...; //; // However when after the source operand of SRL is optimized into AND, the SRL; // itself may not be optimized further. Look for it and add the BRCOND into; // the worklist.; //; // The also tends to happen for binary operations when SimplifyDemandedBits; // is involved.; //; // FIXME: This is unecessary if we process the DAG in topological order,; // which we plan to do. This workaround can be removed once the DAG is; // processed in topological order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:94,Safety,detect,detected,94,// Try to transform this shift into a multiply-high if; // it matches the appropriate pattern detected in combineShiftToMULH.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:191,Testability,test,test,191,"// fold (fshl ld1, ld0, c) -> (ld0[ofs]) iff ld0 and ld1 are consecutive.; // fold (fshr ld1, ld0, c) -> (ld0[ofs]) iff ld0 and ld1 are consecutive.; // TODO - bigendian support once we have test coverage.; // TODO - can we merge this with CombineConseutiveLoads/MatchLoadCombine?; // TODO - permit LHS EXTLOAD if extensions are shifted out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:19,Performance,load,load,19,// Replace the old load's chain with the new load's chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:45,Performance,load,load,45,// Replace the old load's chain with the new load's chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:212,Safety,avoid,avoiding,212,"// fold (fshl N0, N0, N2) -> (rotl N0, N2); // fold (fshr N0, N0, N2) -> (rotr N0, N2); // TODO: Investigate flipping this rotate if only one is legal, if funnel shift; // is legal as well we might be better off avoiding non-constant (BW - N2).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Usability,Simpl,Simplify,3,"// Simplify, based on bits shifted out of N0/N1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:67,Modifiability,EXTEND,EXTEND,67,"// Given a ABS node, detect the following patterns:; // (ABS (SUB (EXTEND a), (EXTEND b))).; // (TRUNC (ABS (SUB (EXTEND a), (EXTEND b)))).; // Generates UABD/SABD instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:79,Modifiability,EXTEND,EXTEND,79,"// Given a ABS node, detect the following patterns:; // (ABS (SUB (EXTEND a), (EXTEND b))).; // (TRUNC (ABS (SUB (EXTEND a), (EXTEND b)))).; // Generates UABD/SABD instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:114,Modifiability,EXTEND,EXTEND,114,"// Given a ABS node, detect the following patterns:; // (ABS (SUB (EXTEND a), (EXTEND b))).; // (TRUNC (ABS (SUB (EXTEND a), (EXTEND b)))).; // Generates UABD/SABD instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:126,Modifiability,EXTEND,EXTEND,126,"// Given a ABS node, detect the following patterns:; // (ABS (SUB (EXTEND a), (EXTEND b))).; // (TRUNC (ABS (SUB (EXTEND a), (EXTEND b)))).; // Generates UABD/SABD instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,Safety,detect,detect,21,"// Given a ABS node, detect the following patterns:; // (ABS (SUB (EXTEND a), (EXTEND b))).; // (TRUNC (ABS (SUB (EXTEND a), (EXTEND b)))).; // Generates UABD/SABD instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:52,Modifiability,extend,extended,52,// Check if the operands of the sub are (zero|sign)-extended.; // TODO: Should we use ValueTracking instead?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:32,Testability,log,logical-shift-by-,32,// Try to canonicalize bswap-of-logical-shift-by-8-bit-multiple as; // inverse-shift-of-bswap:; // bswap (X u<< C) --> (bswap X) u>> C; // bswap (X u>> C) --> (bswap X) u<< C,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:154,Availability,mask,mask,154,"/// If a (v)select has a condition value that is a sign-bit test, try to smear; /// the condition operand sign-bit across the value width and use it as a mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:60,Testability,test,test,60,"/// If a (v)select has a condition value that is a sign-bit test, try to smear; /// the condition operand sign-bit across the value width and use it as a mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:66,Availability,reliab,reliably,66,"// fold (select Cond, 0, 1) -> (xor Cond, 1); // We can't do this reliably if integer based booleans have different contents; // to floating point based booleans. This is because we can't tell whether we; // have an integer-based boolean or a floating-point-based boolean unless we; // can find the SETCC that produced it and inspect its operands. This is; // fairly easy if C is the SETCC node, but it can potentially be; // undiscoverable (or not reasonably discoverable). For example, it could be; // in another basic block or it could require searching a complicated; // expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,Safety,avoid,avoid,39,"// Only do this before legalization to avoid conflicting with target-specific; // transforms in the other direction (create a select from a zext/sext). There; // is also a target-independent combine here in DAGCombiner in the other; // direction for (select Cond, -1, 0) when the condition is not i1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:79,Modifiability,extend,extend,79,"// For any constants that differ by 1, we can transform the select into; // an extend and add.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:37,Availability,mask,mask,37,"// If we have to invert the sign bit mask, only do that transform if the; // target has a bitwise 'and not' instruction (the invert is free).; // (Cond0 s< -0) ? 0 : N2 --> ~(Cond0 s>> BW-1) & N2",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:475,Performance,optimiz,optimize,475,"// The code in this block deals with the following 2 equivalences:; // select(C0|C1, x, y) <=> select(C0, x, select(C1, x, y)); // select(C0&C1, x, y) <=> select(C0, select(C1, x, y), y); // The target can specify its preferred form with the; // shouldNormalizeToSelectSequence() callback. However we always transform; // to the right anyway if we find the inner select exists in the DAG anyway; // and we always transform to the left side if we know that we can further; // optimize the combination of the conditions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,Availability,failure,failure,14,// Cleanup on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,Availability,failure,failure,14,// Cleanup on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:27,Performance,optimiz,optimize,27,"// Otherwise see if we can optimize the ""and"" to a better pattern.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:27,Performance,optimiz,optimize,27,// Otherwise see if we can optimize to a better pattern.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,Performance,optimiz,optimize,39,"// Use 'unsigned add with overflow' to optimize an unsigned saturating add.; // This is conservatively limited to pre-legal-operations to give targets; // a chance to reverse the transform if they want to do that. Also, it is; // unlikely that the pattern would be formed late, so it's probably not; // worth going through the other checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:13,Availability,avail,available,13,// Any flags available in a select/setcc fold will be on the setcc as they; // migrated from fcmp,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:8,Performance,perform,perform,8,// Only perform the transformation when existing operands can be reused.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:41,Modifiability,extend,extends,41,// It's always safe to look through zero extends.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:15,Safety,safe,safe,15,// It's always safe to look through zero extends.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,Modifiability,extend,extends,39,// It's only safe to look through sign extends when Index is signed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:13,Safety,safe,safe,13,// It's only safe to look through sign extends when Index is signed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:28,Availability,mask,mask,28,// Zap scatters with a zero mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:28,Availability,mask,mask,28,// Zap scatters with a zero mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:7,Availability,mask,masked,7,// Zap masked stores with a zero mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:33,Availability,mask,mask,33,// Zap masked stores with a zero mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:12,Availability,mask,masked,12,// Remove a masked store if base pointers and masks are equal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:46,Availability,mask,masks,46,// Remove a masked store if base pointers and masks are equal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:16,Availability,mask,masked,16,"// If this is a masked load with an all ones mask, we can use a unmasked load.; // FIXME: Can we do this for indexed, compressing, or truncating stores?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:45,Availability,mask,mask,45,"// If this is a masked load with an all ones mask, we can use a unmasked load.; // FIXME: Can we do this for indexed, compressing, or truncating stores?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:23,Performance,load,load,23,"// If this is a masked load with an all ones mask, we can use a unmasked load.; // FIXME: Can we do this for indexed, compressing, or truncating stores?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:73,Performance,load,load,73,"// If this is a masked load with an all ones mask, we can use a unmasked load.; // FIXME: Can we do this for indexed, compressing, or truncating stores?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:17,Usability,simpl,simplify,17,"// See if we can simplify the operation with; // SimplifyDemandedBits, which only works if the value has a single use.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,Usability,Simpl,SimplifyDemandedBits,49,"// See if we can simplify the operation with; // SimplifyDemandedBits, which only works if the value has a single use.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:112,Usability,Simpl,SimplifyDemandedBits,112,"// Re-visit the store if anything changed and the store hasn't been merged; // with another node (N is deleted) SimplifyDemandedBits will add Value's; // node back to the worklist if necessary, but we also need to re-visit; // the Store node itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,Availability,mask,masked,36,"// If this is a TRUNC followed by a masked store, fold this into a masked; // truncating store. We can do this even if this is already a masked; // truncstore.; // TODO: Try combine to masked compress store if possiable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:67,Availability,mask,masked,67,"// If this is a TRUNC followed by a masked store, fold this into a masked; // truncating store. We can do this even if this is already a masked; // truncstore.; // TODO: Try combine to masked compress store if possiable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:137,Availability,mask,masked,137,"// If this is a TRUNC followed by a masked store, fold this into a masked; // truncating store. We can do this even if this is already a masked; // truncstore.; // TODO: Try combine to masked compress store if possiable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:185,Availability,mask,masked,185,"// If this is a TRUNC followed by a masked store, fold this into a masked; // truncating store. We can do this even if this is already a masked; // truncstore.; // TODO: Try combine to masked compress store if possiable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:27,Availability,mask,mask,27,// Zap gathers with a zero mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:7,Availability,mask,masked,7,// Zap masked loads with a zero mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:32,Availability,mask,mask,32,// Zap masked loads with a zero mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,Performance,load,loads,14,// Zap masked loads with a zero mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:16,Availability,mask,masked,16,"// If this is a masked load with an all ones mask, we can use a unmasked load.; // FIXME: Can we do this for indexed, expanding, or extending loads?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:45,Availability,mask,mask,45,"// If this is a masked load with an all ones mask, we can use a unmasked load.; // FIXME: Can we do this for indexed, expanding, or extending loads?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:132,Modifiability,extend,extending,132,"// If this is a masked load with an all ones mask, we can use a unmasked load.; // FIXME: Can we do this for indexed, expanding, or extending loads?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:23,Performance,load,load,23,"// If this is a masked load with an all ones mask, we can use a unmasked load.; // FIXME: Can we do this for indexed, expanding, or extending loads?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:73,Performance,load,load,73,"// If this is a masked load with an all ones mask, we can use a unmasked load.; // FIXME: Can we do this for indexed, expanding, or extending loads?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:142,Performance,load,loads,142,"// If this is a masked load with an all ones mask, we can use a unmasked load.; // FIXME: Can we do this for indexed, expanding, or extending loads?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,Performance,load,load,36,// Try transforming N to an indexed load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:19,Performance,load,loads,19,// Combine strided loads with unit-stride to a regular VP load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:58,Performance,load,load,58,// Combine strided loads with unit-stride to a regular VP load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:90,Modifiability,variab,variable,90,/// A vector select of 2 constant vectors can be simplified to math/logic to; /// avoid a variable select instruction and possibly avoid constant loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:146,Performance,load,loads,146,/// A vector select of 2 constant vectors can be simplified to math/logic to; /// avoid a variable select instruction and possibly avoid constant loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:82,Safety,avoid,avoid,82,/// A vector select of 2 constant vectors can be simplified to math/logic to; /// avoid a variable select instruction and possibly avoid constant loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:131,Safety,avoid,avoid,131,/// A vector select of 2 constant vectors can be simplified to math/logic to; /// avoid a variable select instruction and possibly avoid constant loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:68,Testability,log,logic,68,/// A vector select of 2 constant vectors can be simplified to math/logic to; /// avoid a variable select instruction and possibly avoid constant loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,Usability,simpl,simplified,49,/// A vector select of 2 constant vectors can be simplified to math/logic to; /// avoid a variable select instruction and possibly avoid constant loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:157,Performance,load,load,157,// Check if we can use the condition value to increment/decrement a single; // constant value. This simplifies a select to an add and removes a constant; // load/materialization from the general case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:100,Usability,simpl,simplifies,100,// Check if we can use the condition value to increment/decrement a single; // constant value. This simplifies a select to an add and removes a constant; // load/materialization from the general case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:11,Usability,simpl,simplifications,11,// Further simplifications for the extra-special cases where the constants are; // all 0 or all -1 should be implemented as folds of these patterns.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:181,Testability,log,logic,181,"// The general case for select-of-constants:; // vselect <N x i1> Cond, C1, C2 --> xor (and (sext Cond), (C1^C2)), C2; // ...but that only makes sense if a vselect is slower than 2 logic ops, so; // leave that to a machine-specific pass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:163,Modifiability,extend,extended,163,"// If this select has a condition (setcc) with narrower operands than the; // select, try to widen the compare to match the select width.; // TODO: This should be extended to handle any constant.; // TODO: This could be extended to handle non-loading patterns, but that; // requires thorough testing to avoid regressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:220,Modifiability,extend,extended,220,"// If this select has a condition (setcc) with narrower operands than the; // select, try to widen the compare to match the select width.; // TODO: This should be extended to handle any constant.; // TODO: This could be extended to handle non-loading patterns, but that; // requires thorough testing to avoid regressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:243,Performance,load,loading,243,"// If this select has a condition (setcc) with narrower operands than the; // select, try to widen the compare to match the select width.; // TODO: This should be extended to handle any constant.; // TODO: This could be extended to handle non-loading patterns, but that; // requires thorough testing to avoid regressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:303,Safety,avoid,avoid,303,"// If this select has a condition (setcc) with narrower operands than the; // select, try to widen the compare to match the select width.; // TODO: This should be extended to handle any constant.; // TODO: This could be extended to handle non-loading patterns, but that; // requires thorough testing to avoid regressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:292,Testability,test,testing,292,"// If this select has a condition (setcc) with narrower operands than the; // select, try to widen the compare to match the select width.; // TODO: This should be extended to handle any constant.; // TODO: This could be extended to handle non-loading patterns, but that; // requires thorough testing to avoid regressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:73,Modifiability,extend,extended,73,"// Both compare operands can be widened for free. The LHS can use an; // extended load, and the RHS is a constant:; // vselect (ext (setcc load(X), C)), N1, N2 -->; // vselect (setcc extload(X), C'), N1, N2",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:82,Performance,load,load,82,"// Both compare operands can be widened for free. The LHS can use an; // extended load, and the RHS is a constant:; // vselect (ext (setcc load(X), C)), N1, N2 -->; // vselect (setcc extload(X), C'), N1, N2",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:139,Performance,load,load,139,"// Both compare operands can be widened for free. The LHS can use an; // extended load, and the RHS is a constant:; // vselect (ext (setcc load(X), C)), N1, N2 -->; // vselect (setcc extload(X), C'), N1, N2",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:134,Testability,log,logic,134,// Check if one of the arms of the VSELECT is vector with all bits set.; // If it's on the left side invert the predicate to simplify logic below.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:125,Usability,simpl,simplify,125,// Check if one of the arms of the VSELECT is vector with all bits set.; // If it's on the left side invert the predicate to simplify logic below.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Testability,test,test,10,"// We can test against either of the addition operands.; // x <= x+y ? x+y : ~0 --> uaddsat x, y; // x+y >= x ? x+y : ~0 --> uaddsat x, y",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:123,Testability,log,logic,123,// Check if one of the arms of the VSELECT is a zero vector. If it's on; // the left side invert the predicate to simplify logic below.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:114,Usability,simpl,simplify,114,// Check if one of the arms of the VSELECT is a zero vector. If it's on; // the left side invert the predicate to simplify logic below.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:177,Safety,safe,safe,177,"// Another special case: If C was a sign bit, the sub has been; // canonicalized into a xor.; // FIXME: Would it be better to use computeKnownBits to; // determine whether it's safe to decanonicalize the xor?; // x s< 0 ? x^C : 0 --> usubsat x, C",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:13,Usability,simpl,simpler,13,// Fold to a simpler select_cc,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:119,Availability,mask,mask,119,"// Optimize; // 1) (icmp eq/ne (and X, C0), (shift X, C1)); // or; // 2) (icmp eq/ne X, (rotate X, C1)); // If C0 is a mask or shifted mask and the shift amt (C1) isolates the; // remaining bits (i.e something like `(x64 & UINT32_MAX) == (x64 >> 32)`); // Then:; // If C1 is a power of 2, then the rotate and shift+and versions are; // equivilent, so we can interchange them depending on target preference.; // Otherwise, if we have the shift+and version we can interchange srl/shl; // which inturn affects the constant C0. We can use this to get better; // constants again determined by target preference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:135,Availability,mask,mask,135,"// Optimize; // 1) (icmp eq/ne (and X, C0), (shift X, C1)); // or; // 2) (icmp eq/ne X, (rotate X, C1)); // If C0 is a mask or shifted mask and the shift amt (C1) isolates the; // remaining bits (i.e something like `(x64 & UINT32_MAX) == (x64 >> 32)`); // Then:; // If C1 is a power of 2, then the rotate and shift+and versions are; // equivilent, so we can interchange them depending on target preference.; // Otherwise, if we have the shift+and version we can interchange srl/shl; // which inturn affects the constant C0. We can use this to get better; // constants again determined by target preference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:277,Energy Efficiency,power,power,277,"// Optimize; // 1) (icmp eq/ne (and X, C0), (shift X, C1)); // or; // 2) (icmp eq/ne X, (rotate X, C1)); // If C0 is a mask or shifted mask and the shift amt (C1) isolates the; // remaining bits (i.e something like `(x64 & UINT32_MAX) == (x64 >> 32)`); // Then:; // If C1 is a power of 2, then the rotate and shift+and versions are; // equivilent, so we can interchange them depending on target preference.; // Otherwise, if we have the shift+and version we can interchange srl/shl; // which inturn affects the constant C0. We can use this to get better; // constants again determined by target preference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:375,Integrability,depend,depending,375,"// Optimize; // 1) (icmp eq/ne (and X, C0), (shift X, C1)); // or; // 2) (icmp eq/ne X, (rotate X, C1)); // If C0 is a mask or shifted mask and the shift amt (C1) isolates the; // remaining bits (i.e something like `(x64 & UINT32_MAX) == (x64 >> 32)`); // Then:; // If C1 is a power of 2, then the rotate and shift+and versions are; // equivilent, so we can interchange them depending on target preference.; // Otherwise, if we have the shift+and version we can interchange srl/shl; // which inturn affects the constant C0. We can use this to get better; // constants again determined by target preference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Performance,Optimiz,Optimize,3,"// Optimize; // 1) (icmp eq/ne (and X, C0), (shift X, C1)); // or; // 2) (icmp eq/ne X, (rotate X, C1)); // If C0 is a mask or shifted mask and the shift amt (C1) isolates the; // remaining bits (i.e something like `(x64 & UINT32_MAX) == (x64 >> 32)`); // Then:; // If C1 is a power of 2, then the rotate and shift+and versions are; // equivilent, so we can interchange them depending on target preference.; // Otherwise, if we have the shift+and version we can interchange srl/shl; // which inturn affects the constant C0. We can use this to get better; // constants again determined by target preference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,Availability,mask,mask,49,// Get constant shift/rotate amount and possibly mask (if its shift+and; // variant).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,Availability,mask,mask,14,// Check that mask and shift compliment eachother,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22,Availability,mask,mask,22,// Check that the and mask is correct for the shift,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:59,Performance,Load,Load,59,"/// Check if N satisfies:; /// N is used once.; /// N is a Load.; /// The load is compatible with ExtOpcode. It means; /// If load has explicit zero/sign extension, ExpOpcode must have the same; /// extension.; /// Otherwise returns true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:74,Performance,load,load,74,"/// Check if N satisfies:; /// N is used once.; /// N is a Load.; /// The load is compatible with ExtOpcode. It means; /// If load has explicit zero/sign extension, ExpOpcode must have the same; /// extension.; /// Otherwise returns true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:126,Performance,load,load,126,"/// Check if N satisfies:; /// N is used once.; /// N is a Load.; /// The load is compatible with ExtOpcode. It means; /// If load has explicit zero/sign extension, ExpOpcode must have the same; /// extension.; /// Otherwise returns true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:7,Performance,Load,LoadExt,7,"// Now LoadExt is either SEXTLOAD or ZEXTLOAD, ExtOpcode must have the same; // extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:31,Performance,load,load,31,"/// Fold; /// (sext (select c, load x, load y)) -> (select c, sextload x, sextload y); /// (zext (select c, load x, load y)) -> (select c, zextload x, zextload y); /// (aext (select c, load x, load y)) -> (select c, extload x, extload y); /// This function is called by the DAGCombiner when visiting sext/zext/aext; /// dag nodes (see for example method DAGCombiner::visitSIGN_EXTEND).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,Performance,load,load,39,"/// Fold; /// (sext (select c, load x, load y)) -> (select c, sextload x, sextload y); /// (zext (select c, load x, load y)) -> (select c, zextload x, zextload y); /// (aext (select c, load x, load y)) -> (select c, extload x, extload y); /// This function is called by the DAGCombiner when visiting sext/zext/aext; /// dag nodes (see for example method DAGCombiner::visitSIGN_EXTEND).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:108,Performance,load,load,108,"/// Fold; /// (sext (select c, load x, load y)) -> (select c, sextload x, sextload y); /// (zext (select c, load x, load y)) -> (select c, zextload x, zextload y); /// (aext (select c, load x, load y)) -> (select c, extload x, extload y); /// This function is called by the DAGCombiner when visiting sext/zext/aext; /// dag nodes (see for example method DAGCombiner::visitSIGN_EXTEND).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:116,Performance,load,load,116,"/// Fold; /// (sext (select c, load x, load y)) -> (select c, sextload x, sextload y); /// (zext (select c, load x, load y)) -> (select c, zextload x, zextload y); /// (aext (select c, load x, load y)) -> (select c, extload x, extload y); /// This function is called by the DAGCombiner when visiting sext/zext/aext; /// dag nodes (see for example method DAGCombiner::visitSIGN_EXTEND).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:185,Performance,load,load,185,"/// Fold; /// (sext (select c, load x, load y)) -> (select c, sextload x, sextload y); /// (zext (select c, load x, load y)) -> (select c, zextload x, zextload y); /// (aext (select c, load x, load y)) -> (select c, extload x, extload y); /// This function is called by the DAGCombiner when visiting sext/zext/aext; /// dag nodes (see for example method DAGCombiner::visitSIGN_EXTEND).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:193,Performance,load,load,193,"/// Fold; /// (sext (select c, load x, load y)) -> (select c, sextload x, sextload y); /// (zext (select c, load x, load y)) -> (select c, zextload x, zextload y); /// (aext (select c, load x, load y)) -> (select c, extload x, extload y); /// This function is called by the DAGCombiner when visiting sext/zext/aext; /// dag nodes (see for example method DAGCombiner::visitSIGN_EXTEND).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:261,Modifiability,extend,extends,261,/// Try to fold a sext/zext/aext dag node into a ConstantSDNode or; /// a build_vector of constants.; /// This function is called by the DAGCombiner when visiting sext/zext/aext; /// dag nodes (see for example method DAGCombiner::visitSIGN_EXTEND).; /// Vector extends are not folded if operations are legal; this is to; /// avoid introducing illegal build_vector dag nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:325,Safety,avoid,avoid,325,/// Try to fold a sext/zext/aext dag node into a ConstantSDNode or; /// a build_vector of constants.; /// This function is called by the DAGCombiner when visiting sext/zext/aext; /// dag nodes (see for example method DAGCombiner::visitSIGN_EXTEND).; /// Vector extends are not folded if operations are legal; this is to; /// avoid introducing illegal build_vector dag nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Modifiability,Extend,ExtendUsesToFormExtLoad,3,"// ExtendUsesToFormExtLoad - Trying to extend uses of a load to enable this:; // ""fold ({s|z|a}ext (load x)) -> ({s|z|a}ext (truncate ({s|z|a}extload x)))""; // transformation. Returns true if extension are possible and the above; // mentioned transformation is profitable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,Modifiability,extend,extend,39,"// ExtendUsesToFormExtLoad - Trying to extend uses of a load to enable this:; // ""fold ({s|z|a}ext (load x)) -> ({s|z|a}ext (truncate ({s|z|a}extload x)))""; // transformation. Returns true if extension are possible and the above; // mentioned transformation is profitable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:56,Performance,load,load,56,"// ExtendUsesToFormExtLoad - Trying to extend uses of a load to enable this:; // ""fold ({s|z|a}ext (load x)) -> ({s|z|a}ext (truncate ({s|z|a}extload x)))""; // transformation. Returns true if extension are possible and the above; // mentioned transformation is profitable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:100,Performance,load,load,100,"// ExtendUsesToFormExtLoad - Trying to extend uses of a load to enable this:; // ""fold ({s|z|a}ext (load x)) -> ({s|z|a}ext (truncate ({s|z|a}extload x)))""; // transformation. Returns true if extension are possible and the above; // mentioned transformation is profitable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:15,Modifiability,extend,extend,15,"// FIXME: Only extend SETCC N, N and SETCC N, c for now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:61,Modifiability,extend,extend,61,"// If truncates aren't free and there are users we can't; // extend, it isn't worthwhile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:23,Modifiability,extend,extended,23,// Both unextended and extended values are live out. There had better be; // a good reason for the transformation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Modifiability,Extend,Extend,3,// Extend SetCC uses if necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:15,Performance,load,load,15,"// fold (sext (load x)) to multiple smaller sextloads; same for zext.; // For example, on a target with legal v4i32, but illegal v8i32, turn:; // (v8i32 (sext (v8i16 (load x)))); // into:; // (v8i32 (concat_vectors (v4i32 (sextload x)),; // (v4i32 (sextload (x + 16))))); // Where uses of the original load, i.e.:; // (v8i16 (load x)); // are replaced with:; // (v8i16 (truncate; // (v8i32 (concat_vectors (v4i32 (sextload x)),; // (v4i32 (sextload (x + 16))))))); //; // This combine is only applicable to illegal, but splittable, vectors.; // All legal types, and illegal non-vector types, are handled elsewhere.; // This combine is controlled by TargetLowering::isVectorLoadExtDesirable.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:167,Performance,load,load,167,"// fold (sext (load x)) to multiple smaller sextloads; same for zext.; // For example, on a target with legal v4i32, but illegal v8i32, turn:; // (v8i32 (sext (v8i16 (load x)))); // into:; // (v8i32 (concat_vectors (v4i32 (sextload x)),; // (v4i32 (sextload (x + 16))))); // Where uses of the original load, i.e.:; // (v8i16 (load x)); // are replaced with:; // (v8i16 (truncate; // (v8i32 (concat_vectors (v4i32 (sextload x)),; // (v4i32 (sextload (x + 16))))))); //; // This combine is only applicable to illegal, but splittable, vectors.; // All legal types, and illegal non-vector types, are handled elsewhere.; // This combine is controlled by TargetLowering::isVectorLoadExtDesirable.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:302,Performance,load,load,302,"// fold (sext (load x)) to multiple smaller sextloads; same for zext.; // For example, on a target with legal v4i32, but illegal v8i32, turn:; // (v8i32 (sext (v8i16 (load x)))); // into:; // (v8i32 (concat_vectors (v4i32 (sextload x)),; // (v4i32 (sextload (x + 16))))); // Where uses of the original load, i.e.:; // (v8i16 (load x)); // are replaced with:; // (v8i16 (truncate; // (v8i32 (concat_vectors (v4i32 (sextload x)),; // (v4i32 (sextload (x + 16))))))); //; // This combine is only applicable to illegal, but splittable, vectors.; // All legal types, and illegal non-vector types, are handled elsewhere.; // This combine is controlled by TargetLowering::isVectorLoadExtDesirable.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:326,Performance,load,load,326,"// fold (sext (load x)) to multiple smaller sextloads; same for zext.; // For example, on a target with legal v4i32, but illegal v8i32, turn:; // (v8i32 (sext (v8i16 (load x)))); // into:; // (v8i32 (concat_vectors (v4i32 (sextload x)),; // (v4i32 (sextload (x + 16))))); // Where uses of the original load, i.e.:; // (v8i16 (load x)); // are replaced with:; // (v8i16 (truncate; // (v8i32 (concat_vectors (v4i32 (sextload x)),; // (v4i32 (sextload (x + 16))))))); //; // This combine is only applicable to illegal, but splittable, vectors.; // All legal types, and illegal non-vector types, are handled elsewhere.; // This combine is controlled by TargetLowering::isVectorLoadExtDesirable.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:40,Availability,down,down,40,// Try to split the vector types to get down to legal types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Usability,Simpl,Simplify,3,// Simplify TF.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:32,Performance,load,load,32,// Replace uses of the original load (before extension); // with a truncate of the concatenated sextloaded vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,Performance,load,load,36,"// fold (zext (and/or/xor (shl/shr (load x), cst), cst)) ->; // (and/or/xor (shl/shr (zextload x), (zext cst)), (zext cst))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Performance,load,load,3,// load,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:31,Testability,log,logic,31,"// If the shift op is SHL, the logic op must be AND, otherwise the result; // will be wrong.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:306,Energy Efficiency,efficient,efficient,306,"/// If we're narrowing or widening the result of a vector select and the final; /// size is the same size as a setcc (compare) feeding the select, then try to; /// apply the cast operation to the select's operands because matching vector; /// sizes for a select condition and other operands should be more efficient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:19,Performance,load,load,19,"// fold ([s|z]ext (load x)) -> ([s|z]ext (truncate ([s|z]extload x))); // Only generate vector extloads when 1) they're legal, and 2) they are; // deemed desirable by the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Performance,load,load,10,"// If the load value is used only by N, replace it via CombineTo N.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:117,Usability,Simpl,SimplifySelectCC,117,"// setge X, C is canonicalized to setgt, so we do not need to match that; // pattern. The setlt sibling is folded in SimplifySelectCC() because it does; // not require the 'not' op.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:124,Performance,optimiz,optimize,124,// On some architectures (such as SSE/NEON/etc) the SETCC result type is; // the same size as the compared operands. Try to optimize sext(setcc()); // if this is the case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:148,Modifiability,extend,extend,148,"// If the desired elements are smaller or larger than the source; // elements, we can use a matching integer vector type and then; // truncate/sign extend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:78,Modifiability,extend,extended,78,// We have an unsupported narrow vector compare op that would be legal; // if extended to the destination type. See if the compare operands; // can be freely extended to the destination type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:158,Modifiability,extend,extended,158,// We have an unsupported narrow vector compare op that would be legal; // if extended to the destination type. See if the compare operands; // can be freely extended to the destination type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:23,Modifiability,extend,extended,23,"// Match a simple, non-extended load that can be converted to a; // legal {z/s}ext-load.; // TODO: Allow widening of an existing {z/s}ext-load?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:32,Performance,load,load,32,"// Match a simple, non-extended load that can be converted to a; // legal {z/s}ext-load.; // TODO: Allow widening of an existing {z/s}ext-load?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:83,Performance,load,load,83,"// Match a simple, non-extended load that can be converted to a; // legal {z/s}ext-load.; // TODO: Allow widening of an existing {z/s}ext-load?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:138,Performance,load,load,138,"// Match a simple, non-extended load that can be converted to a; // legal {z/s}ext-load.; // TODO: Allow widening of an existing {z/s}ext-load?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:11,Usability,simpl,simple,11,"// Match a simple, non-extended load that can be converted to a; // legal {z/s}ext-load.; // TODO: Allow widening of an existing {z/s}ext-load?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:82,Modifiability,extend,extends,82,// Non-chain users of this value must either be the setcc in this; // sequence or extends that can be folded into the new {z/s}ext-load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:131,Performance,load,load,131,// Non-chain users of this value must either be the setcc in this; // sequence or extends that can be folded into the new {z/s}ext-load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:116,Modifiability,Extend,ExtendUsesToFormExtLoad,116,// Extra users must have exactly the same cast we are about to create.; // TODO: This restriction could be eased if ExtendUsesToFormExtLoad(); // is enhanced similarly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:149,Modifiability,enhance,enhanced,149,// Extra users must have exactly the same cast we are about to create.; // TODO: This restriction could be eased if ExtendUsesToFormExtLoad(); // is enhanced similarly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:87,Integrability,depend,depending,87,"// sext(setcc x, y, cc) -> (select (setcc x, y, cc), T, 0); // Here, T can be 1 or -1, depending on the type of the setcc and; // getBooleanContents().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:330,Integrability,depend,depends,330,"// To determine the ""true"" side of the select, we need to know the high bit; // of the value returned by the setcc if it evaluates to true.; // If the type of the setcc is i1, then the true case of the select is just; // sext(i1 1), that is, -1.; // If the type of the setcc is larger (say, i8) then the value of the high; // bit depends on getBooleanContents(), so ask TLI for a real ""true"" value; // of the appropriate width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:25,Performance,load,load,25,"// fold (sext (truncate (load x))) -> (sext (smaller load x)); // fold (sext (truncate (srl (load x), c))) -> (sext (smaller load (x+c/n)))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:53,Performance,load,load,53,"// fold (sext (truncate (load x))) -> (sext (smaller load x)); // fold (sext (truncate (srl (load x), c))) -> (sext (smaller load (x+c/n)))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:93,Performance,load,load,93,"// fold (sext (truncate (load x))) -> (sext (smaller load x)); // fold (sext (truncate (srl (load x), c))) -> (sext (smaller load (x+c/n)))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:125,Performance,load,load,125,"// fold (sext (truncate (load x))) -> (sext (smaller load x)); // fold (sext (truncate (srl (load x), c))) -> (sext (smaller load (x+c/n)))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:52,Modifiability,extend,extended,52,"// See if the value being truncated is already sign extended. If so, just; // eliminate the trunc/sext pair.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,Performance,load,load,26,// Try to simplify (sext (load x)).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Usability,simpl,simplify,10,// Try to simplify (sext (load x)).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:15,Performance,load,load,15,// fold (sext (load x)) to multiple smaller sextloads.; // Only on illegal but splittable vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Usability,simpl,simplify,10,// Try to simplify (sext (sextload x)).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:27,Performance,load,load,27,"// fold (sext (and/or/xor (load x), cst)) ->; // (and/or/xor (sextload x), (sext cst))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:23,Modifiability,extend,extend,23,// Eliminate this sign extend by doing a negation in the destination type:; // sext i32 (0 - (zext i8 X to i32)) to i64 --> 0 - (zext i8 X to i64),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:23,Modifiability,extend,extend,23,// Eliminate this sign extend by doing a decrement in the destination type:; // sext i32 ((zext i8 X to i32) + (-1)) to i64 --> (zext i8 X to i64) + (-1),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:71,Modifiability,extend,extended,71,"// fold sext (not i1 X) -> add (zext i1 X), -1; // TODO: This could be extended to handle bool vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:13,Modifiability,extend,extending,13,"/// Given an extending node with a pop-count operand, if the target does not; /// support a pop-count in the narrow source type but does support it in the; /// destination type, widen the pop-count to the destination type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:132,Modifiability,extend,extend,132,"// If we have (zext (abs X)) where X is a type that will be promoted by type; // legalization, convert to (abs (sext X)). But don't extend past a legal type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,Availability,mask,mask,39,"// fold (zext (truncate x)) -> (and x, mask)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:25,Performance,load,load,25,"// fold (zext (truncate (load x))) -> (zext (smaller load x)); // fold (zext (truncate (srl (load x), c))) -> (zext (smaller load (x+c/n)))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:53,Performance,load,load,53,"// fold (zext (truncate (load x))) -> (zext (smaller load x)); // fold (zext (truncate (srl (load x), c))) -> (zext (smaller load (x+c/n)))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:93,Performance,load,load,93,"// fold (zext (truncate (load x))) -> (zext (smaller load x)); // fold (zext (truncate (srl (load x), c))) -> (zext (smaller load (x+c/n)))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:125,Performance,load,load,125,"// fold (zext (truncate (load x))) -> (zext (smaller load x)); // fold (zext (truncate (srl (load x), c))) -> (zext (smaller load (x+c/n)))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Availability,mask,mask,10,"// Try to mask before the extension to avoid having to generate a larger mask,; // possibly over several sub-vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:73,Availability,mask,mask,73,"// Try to mask before the extension to avoid having to generate a larger mask,; // possibly over several sub-vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,Safety,avoid,avoid,39,"// Try to mask before the extension to avoid having to generate a larger mask,; // possibly over several sub-vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Safety,safe,safely,10,// We may safely transfer the debug info describing the truncate node over; // to the equivalent and operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,Performance,load,load,26,// Try to simplify (zext (load x)).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Usability,simpl,simplify,10,// Try to simplify (zext (load x)).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:15,Performance,load,load,15,// fold (zext (load x)) to multiple smaller zextloads.; // Only on illegal but splittable vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:27,Performance,load,load,27,"// fold (zext (and/or/xor (load x), cst)) ->; // (and/or/xor (zextload x), (zext cst)); // Unless (and (load x) cst) will match as a zextload already and has; // additional users, or the zext is already free.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:104,Performance,load,load,104,"// fold (zext (and/or/xor (load x), cst)) ->; // (and/or/xor (zextload x), (zext cst)); // Unless (and (load x) cst) will match as a zextload already and has; // additional users, or the zext is already free.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,Performance,load,load,36,"// fold (zext (and/or/xor (shl/shr (load x), cst), cst)) ->; // (and/or/xor (shl/shr (zextload x), (zext cst)), (zext cst))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Usability,simpl,simplify,10,// Try to simplify (zext (zextload x)).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:146,Modifiability,extend,extend,146,// If the desired elements are smaller or larger than the source; // elements we can use a matching integer vector type and then; // truncate/any extend followed by zext_in_reg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:103,Availability,Mask,MaskedValueIsZero,103,"// If the original shl may be shifting out bits, do not perform this; // transformation.; // TODO: Add MaskedValueIsZero check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:56,Performance,perform,perform,56,"// If the original shl may be shifting out bits, do not perform this; // transformation.; // TODO: Add MaskedValueIsZero check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:25,Performance,load,load,25,"// fold (aext (truncate (load x))) -> (aext (smaller load x)); // fold (aext (truncate (srl (load x), c))) -> (aext (small load (x+c/n)))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:53,Performance,load,load,53,"// fold (aext (truncate (load x))) -> (aext (smaller load x)); // fold (aext (truncate (srl (load x), c))) -> (aext (small load (x+c/n)))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:93,Performance,load,load,93,"// fold (aext (truncate (load x))) -> (aext (smaller load x)); // fold (aext (truncate (srl (load x), c))) -> (aext (small load (x+c/n)))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:123,Performance,load,load,123,"// fold (aext (truncate (load x))) -> (aext (smaller load x)); // fold (aext (truncate (srl (load x), c))) -> (aext (small load (x+c/n)))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:15,Performance,load,load,15,"// fold (aext (load x)) -> (aext (truncate (extload x))); // None of the supported targets knows how to perform load and any_ext; // on vectors in one instruction, so attempt to fold to zext instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:104,Performance,perform,perform,104,"// fold (aext (load x)) -> (aext (truncate (extload x))); // None of the supported targets knows how to perform load and any_ext; // on vectors in one instruction, so attempt to fold to zext instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:112,Performance,load,load,112,"// fold (aext (load x)) -> (aext (truncate (extload x))); // None of the supported targets knows how to perform load and any_ext; // on vectors in one instruction, so attempt to fold to zext instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,Performance,load,load,26,// Try to simplify (zext (load x)).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Usability,simpl,simplify,10,// Try to simplify (zext (load x)).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Performance,load,load,10,"// If the load value is used only by N, replace it via CombineTo N.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:146,Modifiability,extend,extend,146,// If the desired elements are smaller or larger than the source; // elements we can use a matching integer vector type and then; // truncate/any extend,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:9,Testability,assert,assert,9,"// fold (assert?ext (assert?ext x, vt), vt) -> (assert?ext x, vt)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,Testability,assert,assert,21,"// fold (assert?ext (assert?ext x, vt), vt) -> (assert?ext x, vt)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:48,Testability,assert,assert,48,"// fold (assert?ext (assert?ext x, vt), vt) -> (assert?ext x, vt)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,Testability,assert,assert,14,"// We have an assert, truncate, assert sandwich. Make one stronger assert; // by asserting on the smallest asserted type to the larger source type.; // This eliminates the later assert:; // assert (trunc (assert X, i8) to iN), i1 --> trunc (assert X, i1) to iN; // assert (trunc (assert X, i1) to iN), i8 --> trunc (assert X, i1) to iN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:32,Testability,assert,assert,32,"// We have an assert, truncate, assert sandwich. Make one stronger assert; // by asserting on the smallest asserted type to the larger source type.; // This eliminates the later assert:; // assert (trunc (assert X, i8) to iN), i1 --> trunc (assert X, i1) to iN; // assert (trunc (assert X, i1) to iN), i8 --> trunc (assert X, i1) to iN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:67,Testability,assert,assert,67,"// We have an assert, truncate, assert sandwich. Make one stronger assert; // by asserting on the smallest asserted type to the larger source type.; // This eliminates the later assert:; // assert (trunc (assert X, i8) to iN), i1 --> trunc (assert X, i1) to iN; // assert (trunc (assert X, i1) to iN), i8 --> trunc (assert X, i1) to iN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:81,Testability,assert,asserting,81,"// We have an assert, truncate, assert sandwich. Make one stronger assert; // by asserting on the smallest asserted type to the larger source type.; // This eliminates the later assert:; // assert (trunc (assert X, i8) to iN), i1 --> trunc (assert X, i1) to iN; // assert (trunc (assert X, i1) to iN), i8 --> trunc (assert X, i1) to iN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:107,Testability,assert,asserted,107,"// We have an assert, truncate, assert sandwich. Make one stronger assert; // by asserting on the smallest asserted type to the larger source type.; // This eliminates the later assert:; // assert (trunc (assert X, i8) to iN), i1 --> trunc (assert X, i1) to iN; // assert (trunc (assert X, i1) to iN), i8 --> trunc (assert X, i1) to iN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:178,Testability,assert,assert,178,"// We have an assert, truncate, assert sandwich. Make one stronger assert; // by asserting on the smallest asserted type to the larger source type.; // This eliminates the later assert:; // assert (trunc (assert X, i8) to iN), i1 --> trunc (assert X, i1) to iN; // assert (trunc (assert X, i1) to iN), i8 --> trunc (assert X, i1) to iN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:190,Testability,assert,assert,190,"// We have an assert, truncate, assert sandwich. Make one stronger assert; // by asserting on the smallest asserted type to the larger source type.; // This eliminates the later assert:; // assert (trunc (assert X, i8) to iN), i1 --> trunc (assert X, i1) to iN; // assert (trunc (assert X, i1) to iN), i8 --> trunc (assert X, i1) to iN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:205,Testability,assert,assert,205,"// We have an assert, truncate, assert sandwich. Make one stronger assert; // by asserting on the smallest asserted type to the larger source type.; // This eliminates the later assert:; // assert (trunc (assert X, i8) to iN), i1 --> trunc (assert X, i1) to iN; // assert (trunc (assert X, i1) to iN), i8 --> trunc (assert X, i1) to iN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:241,Testability,assert,assert,241,"// We have an assert, truncate, assert sandwich. Make one stronger assert; // by asserting on the smallest asserted type to the larger source type.; // This eliminates the later assert:; // assert (trunc (assert X, i8) to iN), i1 --> trunc (assert X, i1) to iN; // assert (trunc (assert X, i1) to iN), i8 --> trunc (assert X, i1) to iN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:265,Testability,assert,assert,265,"// We have an assert, truncate, assert sandwich. Make one stronger assert; // by asserting on the smallest asserted type to the larger source type.; // This eliminates the later assert:; // assert (trunc (assert X, i8) to iN), i1 --> trunc (assert X, i1) to iN; // assert (trunc (assert X, i1) to iN), i8 --> trunc (assert X, i1) to iN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:280,Testability,assert,assert,280,"// We have an assert, truncate, assert sandwich. Make one stronger assert; // by asserting on the smallest asserted type to the larger source type.; // This eliminates the later assert:; // assert (trunc (assert X, i8) to iN), i1 --> trunc (assert X, i1) to iN; // assert (trunc (assert X, i1) to iN), i8 --> trunc (assert X, i1) to iN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:316,Testability,assert,assert,316,"// We have an assert, truncate, assert sandwich. Make one stronger assert; // by asserting on the smallest asserted type to the larger source type.; // This eliminates the later assert:; // assert (trunc (assert X, i8) to iN), i1 --> trunc (assert X, i1) to iN; // assert (trunc (assert X, i1) to iN), i8 --> trunc (assert X, i1) to iN",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:15,Testability,Assert,AssertZext,15,"// If we have (AssertZext (truncate (AssertSext X, iX)), iY) and Y is smaller; // than X. Just move the AssertZext in front of the truncate and drop the; // AssertSExt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:37,Testability,Assert,AssertSext,37,"// If we have (AssertZext (truncate (AssertSext X, iX)), iY) and Y is smaller; // than X. Just move the AssertZext in front of the truncate and drop the; // AssertSExt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:104,Testability,Assert,AssertZext,104,"// If we have (AssertZext (truncate (AssertSext X, iX)), iY) and Y is smaller; // than X. Just move the AssertZext in front of the truncate and drop the; // AssertSExt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:157,Testability,Assert,AssertSExt,157,"// If we have (AssertZext (truncate (AssertSext X, iX)), iY) and Y is smaller; // than X. Just move the AssertZext in front of the truncate and drop the; // AssertSExt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:9,Testability,assert,assertalign,9,"// Fold (assertalign (assertalign x, AL0), AL1) ->; // (assertalign x, max(AL0, AL1))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22,Testability,assert,assertalign,22,"// Fold (assertalign (assertalign x, AL0), AL1) ->; // (assertalign x, max(AL0, AL1))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:56,Testability,assert,assertalign,56,"// Fold (assertalign (assertalign x, AL0), AL1) ->; // (assertalign x, max(AL0, AL1))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:92,Availability,down,down,92,"// In rare cases, there are trivial arithmetic ops in source operands. Sink; // this assert down to source operands so that those arithmetic ops could be; // exposed to the DAG combining.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:158,Security,expose,exposed,158,"// In rare cases, there are trivial arithmetic ops in source operands. Sink; // this assert down to source operands so that those arithmetic ops could be; // exposed to the DAG combining.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:85,Testability,assert,assert,85,"// In rare cases, there are trivial arithmetic ops in source operands. Sink; // this assert down to source operands so that those arithmetic ops could be; // exposed to the DAG combining.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,Availability,mask,masked,39,"/// If the result of a load is shifted/masked/truncated to an effectively; /// narrower type, try to transform the load to a narrower type and/or; /// use an extending load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:158,Modifiability,extend,extending,158,"/// If the result of a load is shifted/masked/truncated to an effectively; /// narrower type, try to transform the load to a narrower type and/or; /// use an extending load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:23,Performance,load,load,23,"/// If the result of a load is shifted/masked/truncated to an effectively; /// narrower type, try to transform the load to a narrower type and/or; /// use an extending load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:115,Performance,load,load,115,"/// If the result of a load is shifted/masked/truncated to an effectively; /// narrower type, try to transform the load to a narrower type and/or; /// use an extending load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:168,Performance,load,load,168,"/// If the result of a load is shifted/masked/truncated to an effectively; /// narrower type, try to transform the load to a narrower type and/or; /// use an extending load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:46,Performance,load,loads,46,// This transformation isn't valid for vector loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:13,Modifiability,variab,variable,13,// The ShAmt variable is used to indicate that we've consumed a right; // shift. I.e. we want to narrow the width of the load by skipping to load the; // ShAmt least significant bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:121,Performance,load,load,121,// The ShAmt variable is used to indicate that we've consumed a right; // shift. I.e. we want to narrow the width of the load by skipping to load the; // ShAmt least significant bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:141,Performance,load,load,141,// The ShAmt variable is used to indicate that we've consumed a right; // shift. I.e. we want to narrow the width of the load by skipping to load the; // ShAmt least significant bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:71,Availability,mask,masked,71,"// A special case is when the least significant bits from the load are masked; // away, but using an AND rather than a right shift. HasShiftedOffset is used; // to indicate that the narrowed load should be left-shifted ShAmt bits to get; // the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:62,Performance,load,load,62,"// A special case is when the least significant bits from the load are masked; // away, but using an AND rather than a right shift. HasShiftedOffset is used; // to indicate that the narrowed load should be left-shifted ShAmt bits to get; // the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:191,Performance,load,load,191,"// A special case is when the least significant bits from the load are masked; // away, but using an AND rather than a right shift. HasShiftedOffset is used; // to indicate that the narrowed load should be left-shifted ShAmt bits to get; // the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:77,Modifiability,extend,extended,77,// Special case: SIGN_EXTEND_INREG is basically truncating to ExtVT then; // extended to VT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:56,Modifiability,extend,extending,56,"// Another special-case: SRL/SRA is basically zero/sign-extending a narrower; // value, or it may be shifting a higher subword, half or byte into the; // lowest bits.; // Only handle shift with constant shift amount, and the shiftee must be a; // load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:247,Performance,load,load,247,"// Another special-case: SRL/SRA is basically zero/sign-extending a narrower; // value, or it may be shifting a higher subword, half or byte into the; // lowest bits.; // Only handle shift with constant shift amount, and the shiftee must be a; // load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:94,Performance,load,loaded,94,// If the shift amount is larger than the memory type then we're not; // accessing any of the loaded bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:73,Security,access,accessing,73,// If the shift amount is larger than the memory type then we're not; // accessing any of the loaded bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:15,Performance,load,load,15,"// If original load is a SEXTLOAD then we can't simply replace it by a; // ZEXTLOAD (we could potentially replace it by a more narrow SEXTLOAD; // followed by a ZEXT, but that is not handled at the moment). Similarly if; // the original load is a ZEXTLOAD and we want to use a SEXTLOAD.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:237,Performance,load,load,237,"// If original load is a SEXTLOAD then we can't simply replace it by a; // ZEXTLOAD (we could potentially replace it by a more narrow SEXTLOAD; // followed by a ZEXT, but that is not handled at the moment). Similarly if; // the original load is a ZEXTLOAD and we want to use a SEXTLOAD.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:48,Usability,simpl,simply,48,"// If original load is a SEXTLOAD then we can't simply replace it by a; // ZEXTLOAD (we could potentially replace it by a more narrow SEXTLOAD; // followed by a ZEXT, but that is not handled at the moment). Similarly if; // the original load is a ZEXTLOAD and we want to use a SEXTLOAD.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,Availability,mask,mask,26,// An AND with a constant mask is the same as a truncate + zero-extend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:64,Modifiability,extend,extend,64,// An AND with a constant mask is the same as a truncate + zero-extend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:190,Availability,mask,masking,190,"// In case Opc==SRL we've already prepared ExtVT/ExtType/ShAmt based on doing; // a right shift. Here we redo some of those checks, to possibly adjust the; // ExtVT even further based on ""a masking AND"". We could also end up here for; // other reasons (e.g. based on Opc==TRUNCATE) and that is why some checks; // need to be done here as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:138,Availability,mask,masking,138,// Bail out when the SRL has more than one use. This is done for historical; // (undocumented) reasons. Maybe intent was to guard the AND-masking below; // check below? And maybe it could be non-profitable to do the transform in; // case the SRL has multiple uses and we get here with Opc!=ISD::SRL?; // FIXME: Can't we just skip this check for the Opc==ISD::SRL case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:81,Usability,undo,undocumented,81,// Bail out when the SRL has more than one use. This is done for historical; // (undocumented) reasons. Maybe intent was to guard the AND-masking below; // check below? And maybe it could be non-profitable to do the transform in; // case the SRL has multiple uses and we get here with Opc!=ISD::SRL?; // FIXME: Can't we just skip this check for the Opc==ISD::SRL case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:79,Performance,load,load,79,"// Only handle shift with constant shift amount, and the shiftee must be a; // load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:93,Performance,load,loaded,93,// If the shift amount is larger than the input type then we're not; // accessing any of the loaded bytes. If the load was a zextload/extload; // then the result of the shift+trunc is zero/undef (handled elsewhere).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:114,Performance,load,load,114,// If the shift amount is larger than the input type then we're not; // accessing any of the loaded bytes. If the load was a zextload/extload; // then the result of the shift+trunc is zero/undef (handled elsewhere).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:72,Security,access,accessing,72,// If the shift amount is larger than the input type then we're not; // accessing any of the loaded bytes. If the load was a zextload/extload; // then the result of the shift+trunc is zero/undef (handled elsewhere).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:51,Modifiability,extend,extend,51,"// Because a SRL must be assumed to *need* to zero-extend the high bits; // (as opposed to anyext the high bits), we can't combine the zextload; // lowering of SRL and an sextload.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:61,Performance,load,load,61,"// Avoid reading outside the memory accessed by the original load (could; // happened if we only adjust the load base pointer by ShAmt). Instead we; // try to narrow the load even further. The typical scenario here is:; // (i64 (truncate (i96 (srl (load x), 64)))) ->; // (i64 (truncate (i96 (zextload (load i32 + offset) from i32))))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:108,Performance,load,load,108,"// Avoid reading outside the memory accessed by the original load (could; // happened if we only adjust the load base pointer by ShAmt). Instead we; // try to narrow the load even further. The typical scenario here is:; // (i64 (truncate (i96 (srl (load x), 64)))) ->; // (i64 (truncate (i96 (zextload (load i32 + offset) from i32))))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:170,Performance,load,load,170,"// Avoid reading outside the memory accessed by the original load (could; // happened if we only adjust the load base pointer by ShAmt). Instead we; // try to narrow the load even further. The typical scenario here is:; // (i64 (truncate (i96 (srl (load x), 64)))) ->; // (i64 (truncate (i96 (zextload (load i32 + offset) from i32))))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:249,Performance,load,load,249,"// Avoid reading outside the memory accessed by the original load (could; // happened if we only adjust the load base pointer by ShAmt). Instead we; // try to narrow the load even further. The typical scenario here is:; // (i64 (truncate (i96 (srl (load x), 64)))) ->; // (i64 (truncate (i96 (zextload (load i32 + offset) from i32))))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:303,Performance,load,load,303,"// Avoid reading outside the memory accessed by the original load (could; // happened if we only adjust the load base pointer by ShAmt). Instead we; // try to narrow the load even further. The typical scenario here is:; // (i64 (truncate (i96 (srl (load x), 64)))) ->; // (i64 (truncate (i96 (zextload (load i32 + offset) from i32))))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Safety,Avoid,Avoid,3,"// Avoid reading outside the memory accessed by the original load (could; // happened if we only adjust the load base pointer by ShAmt). Instead we; // try to narrow the load even further. The typical scenario here is:; // (i64 (truncate (i96 (srl (load x), 64)))) ->; // (i64 (truncate (i96 (zextload (load i32 + offset) from i32))))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,Security,access,accessed,36,"// Avoid reading outside the memory accessed by the original load (could; // happened if we only adjust the load base pointer by ShAmt). Instead we; // try to narrow the load even further. The typical scenario here is:; // (i64 (truncate (i96 (srl (load x), 64)))) ->; // (i64 (truncate (i96 (zextload (load i32 + offset) from i32))))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,Performance,load,load,14,// Narrow the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:32,Availability,mask,masking,32,"// If the SRL is only used by a masking AND, we may be able to adjust; // the ExtVT to make the AND redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:100,Availability,redundant,redundant,100,"// If the SRL is only used by a masking AND, we may be able to adjust; // the ExtVT to make the AND redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:100,Safety,redund,redundant,100,"// If the SRL is only used by a masking AND, we may be able to adjust; // the ExtVT to make the AND redundant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Availability,mask,mask,10,"// If the mask is smaller, recompute the type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Performance,load,load,10,"// If the load is shifted left (and the result isn't shifted back right), we; // can fold a truncate through the shift. The typical scenario is that N; // points at a TRUNCATE here so the attempted fold is:; // (truncate (shl (load x), c))) -> (shl (narrow load x), c); // ShLeftAmt will indicate how much a narrowed load should be shifted left.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:227,Performance,load,load,227,"// If the load is shifted left (and the result isn't shifted back right), we; // can fold a truncate through the shift. The typical scenario is that N; // points at a TRUNCATE here so the attempted fold is:; // (truncate (shl (load x), c))) -> (shl (narrow load x), c); // ShLeftAmt will indicate how much a narrowed load should be shifted left.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:257,Performance,load,load,257,"// If the load is shifted left (and the result isn't shifted back right), we; // can fold a truncate through the shift. The typical scenario is that N; // points at a TRUNCATE here so the attempted fold is:; // (truncate (shl (load x), c))) -> (shl (narrow load x), c); // ShLeftAmt will indicate how much a narrowed load should be shifted left.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:317,Performance,load,load,317,"// If the load is shifted left (and the result isn't shifted back right), we; // can fold a truncate through the shift. The typical scenario is that N; // points at a TRUNCATE here so the attempted fold is:; // (truncate (shl (load x), c))) -> (shl (narrow load x), c); // ShLeftAmt will indicate how much a narrowed load should be shifted left.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:25,Performance,load,load,25,"// If we haven't found a load, we can't narrow it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:88,Energy Efficiency,reduce,reduce,88,"// Reducing the width of a volatile load is illegal. For atomics, we may be; // able to reduce the width provided we never widen again. (see D66309)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,Performance,load,load,36,"// Reducing the width of a volatile load is illegal. For atomics, we may be; // able to reduce the width provided we never widen again. (see D66309)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:40,Performance,load,load,40,// We need to adjust the pointer to the load by ShAmt bits in order to load; // the correct bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:71,Performance,load,load,71,// We need to adjust the pointer to the load by ShAmt bits in order to load; // the correct bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:35,Integrability,wrap,wrap,35,"// The original load itself didn't wrap, so an offset within it doesn't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:16,Performance,load,load,16,"// The original load itself didn't wrap, so an offset within it doesn't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:19,Performance,load,load,19,// Replace the old load's chain with the new load's chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:45,Performance,load,load,45,// Replace the old load's chain with the new load's chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:161,Usability,simpl,simply,161,"// If the shift amount is as large as the result size (but, presumably,; // no larger than the source) then the useful bits of the result are; // zero; we can't simply return the shortened shift, because the result; // of that operation is undefined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:25,Availability,mask,mask,25,"// We're using a shifted mask, so the load now has an offset. This means; // that data has been loaded into the lower bytes than it would have been; // before, so we need to shl the loaded data into the correct position in the; // register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:38,Performance,load,load,38,"// We're using a shifted mask, so the load now has an offset. This means; // that data has been loaded into the lower bytes than it would have been; // before, so we need to shl the loaded data into the correct position in the; // register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:96,Performance,load,loaded,96,"// We're using a shifted mask, so the load now has an offset. This means; // that data has been loaded into the lower bytes than it would have been; // before, so we need to shl the loaded data into the correct position in the; // register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:182,Performance,load,loaded,182,"// We're using a shifted mask, so the load now has an offset. This means; // that data has been loaded into the lower bytes than it would have been; // before, so we need to shl the loaded data into the correct position in the; // register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:18,Performance,load,loaded,18,// Return the new loaded value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:32,Modifiability,extend,extended,32,"// If the input is already sign extended, just drop the extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:191,Modifiability,extend,extending,191,// fold (sext_in_reg (sext x)) -> (sext x); // fold (sext_in_reg (aext x)) -> (sext x); // if x is small enough or if we know that x has more than 1 sign bit and the; // sign_extend_inreg is extending from one of them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:177,Modifiability,extend,extending,177,// fold (sext_in_reg (*_extend_vector_inreg x)) -> (sext_vector_inreg x); // if x is small enough or if we know that x has more than 1 sign bit and the; // sign_extend_inreg is extending from one of them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:58,Modifiability,extend,extending,58,// fold (sext_in_reg (zext x)) -> (sext x); // iff we are extending the source sign bit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22,Performance,load,load,22,"// fold (sext_in_reg (load x)) -> (smaller sextload x); // fold (sext_in_reg (srl (load x), c)) -> (smaller sextload (x+c/evtbits))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:83,Performance,load,load,83,"// fold (sext_in_reg (load x)) -> (smaller sextload x); // fold (sext_in_reg (srl (load x), c)) -> (smaller sextload (x+c/evtbits))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:77,Modifiability,extend,extended,77,// We can turn this into an SRA iff the input to the SRL is already sign; // extended enough.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:208,Modifiability,extend,extends,208,"// fold (sext_inreg (extload x)) -> (sextload x); // If sextload is not supported by target, we can only do the combine when; // load has one use. Doing otherwise can block folding the extload with other; // extends that the target does support.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:129,Performance,load,load,129,"// fold (sext_inreg (extload x)) -> (sextload x); // If sextload is not supported by target, we can only do the combine when; // load has one use. Doing otherwise can block folding the extload with other; // extends that the target does support.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:54,Performance,load,load,54,// fold (sext_inreg (zextload x)) -> (sextload x) iff load has one use,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:82,Availability,mask,masked,82,// fold (sext_inreg (masked_load x)) -> (sext_masked_load x); // ignore it if the masked load is already sign extended,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:110,Modifiability,extend,extended,110,// fold (sext_inreg (masked_load x)) -> (sext_masked_load x); // ignore it if the masked load is already sign extended,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:89,Performance,load,load,89,// fold (sext_inreg (masked_load x)) -> (sext_masked_load x); // ignore it if the masked load is already sign extended,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:35,Modifiability,extend,extending,35,// Profitability check: we must be extending exactly one of it's operands.; // FIXME: this is probably overly restrictive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:60,Modifiability,extend,extend,60,"// if the source is smaller than the dest, we still need an extend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:66,Modifiability,extend,extend,66,"// if the source and dest are the same type, we can drop both the extend; // and the truncate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:268,Performance,optimiz,optimization,268,"// Fold extract-and-trunc into a narrow extract. For example:; // i64 x = EXTRACT_VECTOR_ELT(v2i64 val, i32 1); // i32 y = TRUNCATE(i64 x); // -- becomes --; // v16i8 b = BITCAST (v2i64 val); // i8 x = EXTRACT_VECTOR_ELT(v16i8 b, i32 8); //; // Note: We only run this optimization after type legalization (which often; // creates this pattern) and before operation legalization after which; // we need to be more careful about the vector instructions that we generate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Safety,Avoid,Avoid,3,// Avoid creating illegal types if running after type legalizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:19,Performance,load,load,19,"// fold (truncate (load x)) -> (smaller load x); // fold (truncate (srl (load x), c)) -> (smaller load (x+c/evtbits))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:40,Performance,load,load,40,"// fold (truncate (load x)) -> (smaller load x); // fold (truncate (srl (load x), c)) -> (smaller load (x+c/evtbits))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:73,Performance,load,load,73,"// fold (truncate (load x)) -> (smaller load x); // fold (truncate (srl (load x), c)) -> (smaller load (x+c/evtbits))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:98,Performance,load,load,98,"// fold (truncate (load x)) -> (smaller load x); // fold (truncate (srl (load x), c)) -> (smaller load (x+c/evtbits))",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:77,Performance,load,loaded,77,// Handle the case where the truncated result is at least as wide as the; // loaded type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Usability,Simpl,Simplify,3,// Simplify the operands using demanded-bits information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:188,Safety,avoid,avoid,188,"// TODO: We already restricted this to pre-legalization, but for vectors; // we are extra cautious to not create an unsupported operation.; // Target-specific changes are likely needed to avoid regressions here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:16,Performance,load,load,16,"/// build_pair (load, load) -> load; /// if load locations are consecutive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22,Performance,load,load,22,"/// build_pair (load, load) -> load; /// if load locations are consecutive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:31,Performance,load,load,31,"/// build_pair (load, load) -> load; /// if load locations are consecutive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:44,Performance,load,load,44,"/// build_pair (load, load) -> load; /// if load locations are consecutive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:146,Performance,load,load,146,"// A BUILD_PAIR is always having the least significant part in elt 0 and the; // most significant part in elt 1. So when combining into one large load, we; // need to consider the endianness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:97,Testability,log,logic,97,"// If this is not a bitcast to an FP type or if the target doesn't have; // IEEE754-compliant FP logic, we're done.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:35,Testability,log,logic,35,"// This needs to be the inverse of logic in foldSignChangeInBitcast.; // FIXME: I don't think looking for bitcast intrinsically makes sense, but; // removing this would require more changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:242,Integrability,depend,depending,242,"// If the input is a BUILD_VECTOR with all constant elements, fold this now.; // Only do this before legalize types, unless both types are integer and the; // scalar type is legal. Only do this before legalize ops, since the target; // maybe depending on the bitcast.; // First check to see if this is all constant.; // TODO: Support FP bitcasts after legalize types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:15,Testability,log,logicop,15,"// fold (conv (logicop (conv x), (c))) -> (logicop x, (conv c)); // iff the current bitwise logicop type isn't legal",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:43,Testability,log,logicop,43,"// fold (conv (logicop (conv x), (c))) -> (logicop x, (conv c)); // iff the current bitwise logicop type isn't legal",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:92,Testability,log,logicop,92,"// fold (conv (logicop (conv x), (c))) -> (logicop x, (conv c)); // iff the current bitwise logicop type isn't legal",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:15,Performance,load,load,15,// fold (conv (load x)) -> (load (conv*)x); // If the resultant load doesn't need a higher alignment than the original!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:28,Performance,load,load,28,// fold (conv (load x)) -> (load (conv*)x); // If the resultant load doesn't need a higher alignment than the original!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:64,Performance,load,load,64,// fold (conv (load x)) -> (load (conv*)x); // If the resultant load doesn't need a higher alignment than the original!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Performance,load,load,10,"// If the load is volatile, we only want to change the load type if the; // resulting load is legal. Otherwise we might increase the number of; // memory accesses. We don't care if the original type was legal or not; // as we assume software couldn't rely on the number of accesses of an; // illegal type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:55,Performance,load,load,55,"// If the load is volatile, we only want to change the load type if the; // resulting load is legal. Otherwise we might increase the number of; // memory accesses. We don't care if the original type was legal or not; // as we assume software couldn't rely on the number of accesses of an; // illegal type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:86,Performance,load,load,86,"// If the load is volatile, we only want to change the load type if the; // resulting load is legal. Otherwise we might increase the number of; // memory accesses. We don't care if the original type was legal or not; // as we assume software couldn't rely on the number of accesses of an; // illegal type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:154,Security,access,accesses,154,"// If the load is volatile, we only want to change the load type if the; // resulting load is legal. Otherwise we might increase the number of; // memory accesses. We don't care if the original type was legal or not; // as we assume software couldn't rely on the number of accesses of an; // illegal type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:273,Security,access,accesses,273,"// If the load is volatile, we only want to change the load type if the; // resulting load is legal. Otherwise we might increase the number of; // memory accesses. We don't care if the original type was legal or not; // as we assume software couldn't rely on the number of accesses of an; // illegal type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:425,Energy Efficiency,reduce,reduces,425,"// fold (bitconvert (fneg x)) -> (xor (bitconvert x), signbit); // fold (bitconvert (fabs x)) -> (and (bitconvert x), (not signbit)); //; // For ppc_fp128:; // fold (bitcast (fneg x)) ->; // flipbit = signbit; // (xor (bitcast x) (build_pair flipbit, flipbit)); //; // fold (bitcast (fabs x)) ->; // flipbit = (and (extract_element (bitcast x), 0), signbit); // (xor (bitcast x) (build_pair flipbit, flipbit)); // This often reduces constant pool loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:447,Performance,load,loads,447,"// fold (bitconvert (fneg x)) -> (xor (bitconvert x), signbit); // fold (bitconvert (fabs x)) -> (and (bitconvert x), (not signbit)); //; // For ppc_fp128:; // fold (bitcast (fneg x)) ->; // flipbit = signbit; // (xor (bitcast x) (build_pair flipbit, flipbit)); //; // fold (bitcast (fabs x)) ->; // flipbit = (and (extract_element (bitcast x), 0), signbit); // (xor (bitcast x) (build_pair flipbit, flipbit)); // This often reduces constant pool loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:44,Performance,load,load,44,"// bitconvert(build_pair(ld, ld)) -> ld iff load locations are consecutive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:18,Deployability,update,updated,18,"// But, that also updated the use in the freeze we just created, thus; // creating a cycle in a DAG. Let's undo that by mutating the freeze.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:107,Usability,undo,undo,107,"// But, that also updated the use in the freeze we just created, thus; // creating a cycle in a DAG. Let's undo that by mutating the freeze.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:32,Deployability,update,updated,32,"// The whole node may have been updated, so the value we were holding; // may no longer be valid. Re-fetch the operand we're `freeze`ing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:50,Deployability,update,updated,50,"// Finally, recreate the node, it's operands were updated to use; // frozen operands, so we just need to use it's ""original"" operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:58,Safety,avoid,avoid,58,"// Otherwise, we're growing or shrinking the elements. To avoid having to; // handle annoying details of growing/shrinking FP values, we convert them to; // int first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:34,Integrability,contract,contraction,34,// Returns true if floating point contraction is allowed on the FMUL-SDValue; // `N`,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:11,Performance,perform,perform,11,/// Try to perform FMA combining on a given FADD node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,Integrability,contract,contractable,26,"// If the addition is not contractable, do not combine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:103,Energy Efficiency,reduce,reduce,103,"// Folding fadd (fmul x, y), (fmul x, y) -> fma x, y, (fmul x, y) is never; // beneficial. It does not reduce latency. It increases register pressure. It; // replaces an fadd with an fma which is a more complex instruction, so is; // likely to have a larger encoding, use more functional units, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:110,Performance,latency,latency,110,"// Folding fadd (fmul x, y), (fmul x, y) -> fma x, y, (fmul x, y) is never; // beneficial. It does not reduce latency. It increases register pressure. It; // replaces an fadd with an fma which is a more complex instruction, so is; // likely to have a larger encoding, use more functional units, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:27,Integrability,contract,contractable,27,// Is the node an FMUL and contractable either due to global flags or; // SDNodeFlags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:60,Usability,simpl,simplified,60,// Replacing the inner FMul could cause the outer FMA to be simplified; // away.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:11,Performance,perform,perform,11,/// Try to perform FMA combining on a given FSUB node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:29,Integrability,contract,contractable,29,"// If the subtraction is not contractable, do not combine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:27,Integrability,contract,contractable,27,// Is the node an FMUL and contractable either due to global flags or; // SDNodeFlags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:265,Integrability,contract,contract,265,"// fold (fsub (fpext (fneg (fmul, x, y))), z); // -> (fneg (fma (fpext x), (fpext y), z)); // Note: This could be removed with appropriate canonicalization of the; // input expression into (fneg (fadd (fpext (fmul, x, y)), z). However, the; // orthogonal flags -fp-contract=fast and -enable-unsafe-fp-math prevent; // from implementing the canonicalization in visitFSUB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:291,Safety,unsafe,unsafe-fp-math,291,"// fold (fsub (fpext (fneg (fmul, x, y))), z); // -> (fneg (fma (fpext x), (fpext y), z)); // Note: This could be removed with appropriate canonicalization of the; // input expression into (fneg (fadd (fpext (fmul, x, y)), z). However, the; // orthogonal flags -fp-contract=fast and -enable-unsafe-fp-math prevent; // from implementing the canonicalization in visitFSUB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:265,Integrability,contract,contract,265,"// fold (fsub (fneg (fpext (fmul, x, y))), z); // -> (fneg (fma (fpext x)), (fpext y), z); // Note: This could be removed with appropriate canonicalization of the; // input expression into (fneg (fadd (fpext (fmul, x, y)), z). However, the; // orthogonal flags -fp-contract=fast and -enable-unsafe-fp-math prevent; // from implementing the canonicalization in visitFSUB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:291,Safety,unsafe,unsafe-fp-math,291,"// fold (fsub (fneg (fpext (fmul, x, y))), z); // -> (fneg (fma (fpext x)), (fpext y), z); // Note: This could be removed with appropriate canonicalization of the; // input expression into (fneg (fadd (fpext (fmul, x, y)), z). However, the; // orthogonal flags -fp-contract=fast and -enable-unsafe-fp-math prevent; // from implementing the canonicalization in visitFSUB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:11,Performance,perform,perform,11,"/// Try to perform FMA combining on a given FMUL node based on the distributive; /// law x * (y + 1) = x * y + x and variants thereof (commuted versions,; /// subtraction instead of addition).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:7,Safety,unsafe,unsafe,7,"// If 'unsafe math' or reassoc and nsz, fold lots of things.; // TODO: break out portions of the transformations below for which Unsafe is; // considered and which do not require both nsz and reassoc",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:129,Safety,Unsafe,Unsafe,129,"// If 'unsafe math' or reassoc and nsz, fold lots of things.; // TODO: break out portions of the transformations below for which Unsafe is; // considered and which do not require both nsz and reassoc",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:98,Safety,safe,safe,98,// We can fold chains of FADD's of the same value into multiplications.; // This transform is not safe in general because we are reducing the number; // of rounding steps.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Safety,unsafe,unsafe-fp-math,10,// enable-unsafe-fp-math; // FADD -> FMA combines:,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:266,Energy Efficiency,power,power,266,"// Transform IEEE Floats:; // (fmul C, (uitofp Pow2)); // -> (bitcast_to_FP (add (bitcast_to_INT C), Log2(Pow2) << mantissa)); // (fdiv C, (uitofp Pow2)); // -> (bitcast_to_FP (sub (bitcast_to_INT C), Log2(Pow2) << mantissa)); //; // The rationale is fmul/fdiv by a power of 2 is just change the exponent, so; // there is no need for more than an add/sub.; //; // This is valid under the following circumstances:; // 1) We are dealing with IEEE floats; // 2) C is normal; // 3) The fmul/fdiv add/sub will not go outside of min/max exponent bounds.; // TODO: Much of this could also be used for generating `ldexp` on targets the; // prefer it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Performance,Perform,Perform,3,// Perform actual transform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Safety,Avoid,Avoid,3,// Avoid an infinite loop by making sure that N00 is not a constant; // (the inner multiply has not been constant folded yet).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,Safety,Unsafe,UnsafeFPMath,49,// FIXME: use fast math flags instead of Options.UnsafeFPMath,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,Usability,simpl,simplified,36,// Skip X/sqrt(X) that has not been simplified to sqrt(X) yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:33,Performance,optimiz,optimization,33,// This division is eligible for optimization only if global unsafe math; // is enabled or if this division allows reciprocal formation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:61,Safety,unsafe,unsafe,61,// This division is eligible for optimization only if global unsafe math; // is enabled or if this division allows reciprocal formation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:91,Deployability,configurat,configuration,91,"// Do not optimize out type conversion of f128 type yet.; // For some targets like x86_64, configuration is changed to keep one f128; // value in one SSE register, but instruction selection cannot handle; // FCOPYSIGN on SSE registers yet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:91,Modifiability,config,configuration,91,"// Do not optimize out type conversion of f128 type yet.; // For some targets like x86_64, configuration is changed to keep one f128; // value in one SSE register, but instruction selection cannot handle; // FCOPYSIGN on SSE registers yet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Performance,optimiz,optimize,10,"// Do not optimize out type conversion of f128 type yet.; // For some targets like x86_64, configuration is changed to keep one f128; // value in one SSE register, but instruction selection cannot handle; // FCOPYSIGN on SSE registers yet.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:217,Energy Efficiency,power,power-of-,217,"// Try to convert x ** (1/4) and x ** (3/4) into square roots.; // x ** (1/2) is canonicalized to sqrt, so we do not bother with that case.; // TODO: This could be extended (using a target hook) to handle smaller; // power-of-2 fractional exponents.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:164,Modifiability,extend,extended,164,"// Try to convert x ** (1/4) and x ** (3/4) into square roots.; // x ** (1/2) is canonicalized to sqrt, so we do not bother with that case.; // TODO: This could be extended (using a target hook) to handle smaller; // power-of-2 fractional exponents.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:12,Performance,optimiz,optimizations,12,"// The next optimizations are desirable only if SELECT_CC can be lowered.; // fold (sint_to_fp (setcc x, y, cc)) -> (select (setcc x, y, cc), -1.0, 0.0)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:263,Integrability,depend,depend,263,"// We can safely assume the conversion won't overflow the output range,; // because (for example) (uint8_t)18293.f is undefined behavior.; // Since we can assume the conversion won't overflow, our decision as to; // whether the input will fit in the float should depend on the minimum; // of the input range and output range.; // This means this is also safe for a signed input and unsigned output, since; // a negative input would lead to undefined behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Safety,safe,safely,10,"// We can safely assume the conversion won't overflow the output range,; // because (for example) (uint8_t)18293.f is undefined behavior.; // Since we can assume the conversion won't overflow, our decision as to; // whether the input will fit in the float should depend on the minimum; // of the input range and output range.; // This means this is also safe for a signed input and unsigned output, since; // a negative input would lead to undefined behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:354,Safety,safe,safe,354,"// We can safely assume the conversion won't overflow the output range,; // because (for example) (uint8_t)18293.f is undefined behavior.; // Since we can assume the conversion won't overflow, our decision as to; // whether the input will fit in the float should depend on the minimum; // of the input range and output range.; // This means this is also safe for a signed input and unsigned output, since; // a negative input would lead to undefined behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Safety,Avoid,Avoid,3,// Avoid folding legal fp_rounds into non-legal ones.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:16,Performance,load,load,16,// fold (fpext (load x)) -> (fpext (fptrunc (extload x))),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22,Safety,unsafe,unsafe,22,"// -(X-Y) -> (Y-X) is unsafe because when X==Y, -0.0 != +0.0; // FIXME: This is duplicated in getNegatibleCost, but getNegatibleCost doesn't; // know it was called from a context with a nsz flag if the input fsub does; // not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:204,Availability,avail,available,204,"// If N is a constant we could fold this into a fallthrough or unconditional; // branch. However that doesn't happen very often in normal code, because; // Instcombine/SimplifyCFG should have handled the available opportunities.; // If we did this folding here, it would be necessary to update the; // MachineBasicBlock CFG, which is awkward.; // fold a brcond with a setcc condition into a BR_CC node if BR_CC is legal; // on the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:287,Deployability,update,update,287,"// If N is a constant we could fold this into a fallthrough or unconditional; // branch. However that doesn't happen very often in normal code, because; // Instcombine/SimplifyCFG should have handled the available opportunities.; // If we did this folding here, it would be necessary to update the; // MachineBasicBlock CFG, which is awkward.; // fold a brcond with a setcc condition into a BR_CC node if BR_CC is legal; // on the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:168,Usability,Simpl,SimplifyCFG,168,"// If N is a constant we could fold this into a fallthrough or unconditional; // branch. However that doesn't happen very often in normal code, because; // Instcombine/SimplifyCFG should have handled the available opportunities.; // If we did this folding here, it would be necessary to update the; // MachineBasicBlock CFG, which is awkward.; // fold a brcond with a setcc condition into a BR_CC node if BR_CC is legal; // on the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:439,Testability,TEST,TEST,439,"// Match this pattern so that we can generate simpler code:; //; // %a = ...; // %b = and i32 %a, 2; // %c = srl i32 %b, 1; // brcond i32 %c ...; //; // into; //; // %a = ...; // %b = and i32 %a, 2; // %c = setcc eq %b, 0; // brcond %c ...; //; // This applies only when the AND constant value has one bit set and the; // SRL constant is equal to the log2 of the AND constant. The back-end is; // smart enough to convert the result into a TEST/JMP sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:46,Usability,simpl,simpler,46,"// Match this pattern so that we can generate simpler code:; //; // %a = ...; // %b = and i32 %a, 2; // %c = srl i32 %b, 1; // brcond i32 %c ...; //; // into; //; // %a = ...; // %b = and i32 %a, 2; // %c = setcc eq %b, 0; // brcond %c ...; //; // This applies only when the AND constant value has one bit set and the; // SRL constant is equal to the log2 of the AND constant. The back-end is; // smart enough to convert the result into a TEST/JMP sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:63,Usability,Simpl,SimplifiedSetCC,63,"// Because we may call this on a speculatively constructed; // SimplifiedSetCC Node, we need to simplify this node first.; // Ideally this should be folded into SimplifySetCC and not; // here. For now, grab a handle to N so we don't lose it from; // replacements interal to the visit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:96,Usability,simpl,simplify,96,"// Because we may call this on a speculatively constructed; // SimplifiedSetCC Node, we need to simplify this node first.; // Ideally this should be folded into SimplifySetCC and not; // here. For now, grab a handle to N so we don't lose it from; // replacements interal to the visit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:161,Usability,Simpl,SimplifySetCC,161,"// Because we may call this on a speculatively constructed; // SimplifiedSetCC Node, we need to simplify this node first.; // Ideally this should be folded into SimplifySetCC and not; // here. For now, grab a handle to N so we don't lose it from; // replacements interal to the visit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:6,Usability,simpl,simplification,6,// No simplification done.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:8,Usability,simpl,simplified,8,// Node simplified. Try simplifying again.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:24,Usability,simpl,simplifying,24,// Node simplified. Try simplifying again.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:204,Availability,avail,available,204,"// If N is a constant we could fold this into a fallthrough or unconditional; // branch. However that doesn't happen very often in normal code, because; // Instcombine/SimplifyCFG should have handled the available opportunities.; // If we did this folding here, it would be necessary to update the; // MachineBasicBlock CFG, which is awkward.; // Use SimplifySetCC to simplify SETCC's.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:287,Deployability,update,update,287,"// If N is a constant we could fold this into a fallthrough or unconditional; // branch. However that doesn't happen very often in normal code, because; // Instcombine/SimplifyCFG should have handled the available opportunities.; // If we did this folding here, it would be necessary to update the; // MachineBasicBlock CFG, which is awkward.; // Use SimplifySetCC to simplify SETCC's.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:168,Usability,Simpl,SimplifyCFG,168,"// If N is a constant we could fold this into a fallthrough or unconditional; // branch. However that doesn't happen very often in normal code, because; // Instcombine/SimplifyCFG should have handled the available opportunities.; // If we did this folding here, it would be necessary to update the; // MachineBasicBlock CFG, which is awkward.; // Use SimplifySetCC to simplify SETCC's.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:351,Usability,Simpl,SimplifySetCC,351,"// If N is a constant we could fold this into a fallthrough or unconditional; // branch. However that doesn't happen very often in normal code, because; // Instcombine/SimplifyCFG should have handled the available opportunities.; // If we did this folding here, it would be necessary to update the; // MachineBasicBlock CFG, which is awkward.; // Use SimplifySetCC to simplify SETCC's.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:368,Usability,simpl,simplify,368,"// If N is a constant we could fold this into a fallthrough or unconditional; // branch. However that doesn't happen very often in normal code, because; // Instcombine/SimplifyCFG should have handled the available opportunities.; // If we did this folding here, it would be necessary to update the; // MachineBasicBlock CFG, which is awkward.; // Use SimplifySetCC to simplify SETCC's.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:13,Usability,simpl,simpler,13,// fold to a simpler setcc,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:18,Performance,load,load,18,"/// Try turning a load/store into a pre-indexed load/store when the base; /// pointer is an add or subtract and it has other uses besides the load/store.; /// After the transformation, the new indexed load/store has effectively folded; /// the add/subtract in and all of its other uses are redirected to the; /// new load/store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:48,Performance,load,load,48,"/// Try turning a load/store into a pre-indexed load/store when the base; /// pointer is an add or subtract and it has other uses besides the load/store.; /// After the transformation, the new indexed load/store has effectively folded; /// the add/subtract in and all of its other uses are redirected to the; /// new load/store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:142,Performance,load,load,142,"/// Try turning a load/store into a pre-indexed load/store when the base; /// pointer is an add or subtract and it has other uses besides the load/store.; /// After the transformation, the new indexed load/store has effectively folded; /// the add/subtract in and all of its other uses are redirected to the; /// new load/store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:201,Performance,load,load,201,"/// Try turning a load/store into a pre-indexed load/store when the base; /// pointer is an add or subtract and it has other uses besides the load/store.; /// After the transformation, the new indexed load/store has effectively folded; /// the add/subtract in and all of its other uses are redirected to the; /// new load/store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:317,Performance,load,load,317,"/// Try turning a load/store into a pre-indexed load/store when the base; /// pointer is an add or subtract and it has other uses besides the load/store.; /// After the transformation, the new indexed load/store has effectively folded; /// the add/subtract in and all of its other uses are redirected to the; /// new load/store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:91,Modifiability,variab,variable,91,// Backends without true r+i pre-indexed forms may need to pass a; // constant base with a variable offset so that constant coercion; // will work with the patterns in canonical form.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,Performance,load,load,26,// Don't create a indexed load / store with zero offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:37,Performance,load,load,37,// Try turning it into a pre-indexed load / store except when:; // 1) The new base ptr is a frame index.; // 2) If N is a store and the new base ptr is either the same as or is a; // predecessor of the value being stored.; // 3) Another use of old base ptr is a predecessor of N. If ptr is folded; // that would create a cycle.; // 4) All uses are load / store ops that use it as old base ptr.; // Check #1. Preinc'ing a frame index would require copying the stack pointer; // (plus the implicit offset) to a register to preinc anyway.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:348,Performance,load,load,348,// Try turning it into a pre-indexed load / store except when:; // 1) The new base ptr is a frame index.; // 2) If N is a store and the new base ptr is either the same as or is a; // predecessor of the value being stored.; // 3) Another use of old base ptr is a predecessor of N. If ptr is folded; // that would create a cycle.; // 4) All uses are load / store ops that use it as old base ptr.; // Check #1. Preinc'ing a frame index would require copying the stack pointer; // (plus the implicit offset) to a register to preinc anyway.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Performance,Cache,Caches,3,// Caches for hasPredecessorHelper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:128,Safety,avoid,avoid,128,"// If the offset is a constant, there may be other adds of constants that; // can be folded with this one. We should do this to avoid having to keep; // a copy of the original base pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:45,Deployability,update,updated,45,// Replace other uses of BasePtr that can be updated to use Ptr,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:154,Performance,load,load,154,"// We need to replace ptr0 in the following expression:; // x0 * offset0 + y0 * ptr0 = t0; // knowing that; // x1 * offset1 + y1 * ptr0 = t1 (the indexed load/store); //; // where x0, x1, y0 and y1 in {-1, 1} are given by the types of the; // indexed load/store and the expression that needs to be re-written.; //; // Therefore, we have:; // t0 = (x0 * offset0 - x1 * y0 * y1 *offset1) + (y0 * y1) * t1",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:251,Performance,load,load,251,"// We need to replace ptr0 in the following expression:; // x0 * offset0 + y0 * ptr0 = t0; // knowing that; // x1 * offset1 + y1 * ptr0 = t1 (the indexed load/store); //; // where x0, x1, y0 and y1 in {-1, 1} are given by the types of the; // indexed load/store and the expression that needs to be re-written.; //; // Therefore, we have:; // t0 = (x0 * offset0 - x1 * y0 * y1 *offset1) + (y0 * y1) * t1",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:44,Deployability,update,updated,44,// Replace the uses of Ptr with uses of the updated base value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,Performance,load,load,26,// Don't create a indexed load / store with zero offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:42,Performance,perform,perform,42,// No if there's a later user which could perform the index instead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:23,Performance,load,load,23,"// If all the uses are load / store addresses, then don't do the; // transformation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:38,Performance,load,load,38,"// Try turning it into a post-indexed load / store except when; // 1) All uses are load / store ops that use it as base ptr (and; // it may be folded as addressing mmode).; // 2) Op must be independent of N, i.e. Op is neither a predecessor; // nor a successor of N. Otherwise, if Op is folded that would; // create a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:83,Performance,load,load,83,"// Try turning it into a post-indexed load / store except when; // 1) All uses are load / store ops that use it as base ptr (and; // it may be folded as addressing mmode).; // 2) Op must be independent of N, i.e. Op is neither a predecessor; // nor a successor of N. Otherwise, if Op is folded that would; // create a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,Performance,load,load,21,/// Try to combine a load/store with a add/sub of the base pointer node into a; /// post-indexed load/store. The transformation folded the add/subtract into the; /// new indexed load/store effectively and all of its uses are redirected to the; /// new load/store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:97,Performance,load,load,97,/// Try to combine a load/store with a add/sub of the base pointer node into a; /// post-indexed load/store. The transformation folded the add/subtract into the; /// new indexed load/store effectively and all of its uses are redirected to the; /// new load/store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:178,Performance,load,load,178,/// Try to combine a load/store with a add/sub of the base pointer node into a; /// post-indexed load/store. The transformation folded the add/subtract into the; /// new indexed load/store effectively and all of its uses are redirected to the; /// new load/store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:252,Performance,load,load,252,/// Try to combine a load/store with a add/sub of the base pointer node into a; /// post-indexed load/store. The transformation folded the add/subtract into the; /// new indexed load/store effectively and all of its uses are redirected to the; /// new load/store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:44,Deployability,update,updated,44,// Replace the uses of Use with uses of the updated base value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:41,Performance,load,load,41,"// Some backends use TargetConstants for load offsets, but don't expect; // TargetConstants in general ADD nodes. We can convert these constants into; // regular Constants (if the constant is not opaque).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:81,Performance,load,load,81,"// There are two cases to consider here:; // 1. The store is fixed width and the load is scalable. In this case we; // don't know at compile time if the store completely envelops the load; // so we abandon the optimisation.; // 2. The store is scalable and the load is fixed width. We could; // potentially support a limited number of cases here, but there has been; // no cost-benefit analysis to prove it's worth it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:89,Performance,scalab,scalable,89,"// There are two cases to consider here:; // 1. The store is fixed width and the load is scalable. In this case we; // don't know at compile time if the store completely envelops the load; // so we abandon the optimisation.; // 2. The store is scalable and the load is fixed width. We could; // potentially support a limited number of cases here, but there has been; // no cost-benefit analysis to prove it's worth it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:183,Performance,load,load,183,"// There are two cases to consider here:; // 1. The store is fixed width and the load is scalable. In this case we; // don't know at compile time if the store completely envelops the load; // so we abandon the optimisation.; // 2. The store is scalable and the load is fixed width. We could; // potentially support a limited number of cases here, but there has been; // no cost-benefit analysis to prove it's worth it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:244,Performance,scalab,scalable,244,"// There are two cases to consider here:; // 1. The store is fixed width and the load is scalable. In this case we; // don't know at compile time if the store completely envelops the load; // so we abandon the optimisation.; // 2. The store is scalable and the load is fixed width. We could; // potentially support a limited number of cases here, but there has been; // no cost-benefit analysis to prove it's worth it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:261,Performance,load,load,261,"// There are two cases to consider here:; // 1. The store is fixed width and the load is scalable. In this case we; // don't know at compile time if the store completely envelops the load; // so we abandon the optimisation.; // 2. The store is scalable and the load is fixed width. We could; // potentially support a limited number of cases here, but there has been; // no cost-benefit analysis to prove it's worth it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,Performance,scalab,scalable,26,"// If we are dealing with scalable vectors on a big endian platform the; // calculation of offsets below becomes trickier, since we do not know at; // compile time the absolute size of the vector. Until we've done more; // analysis on big-endian platforms it seems better to bail out for now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:103,Performance,load,loaded,103,// Normalize for Endianness. After this Offset=0 will denote that the least; // significant bit in the loaded value maps to the least significant bit in; // the stored value). With Offset=n (for n > 0) the loaded value starts at the; // n:th least significant byte of the stored value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:206,Performance,load,loaded,206,// Normalize for Endianness. After this Offset=0 will denote that the least; // significant bit in the loaded value maps to the least significant bit in; // the stored value). With Offset=n (for n > 0) the loaded value starts at the; // n:th least significant byte of the stored value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:55,Performance,load,loaded,55,// Check that the stored value cover all bits that are loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:110,Performance,load,loads,110,// Cannot handle opaque target constants and we must respect the user's; // request not to split indexes from loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:37,Availability,mask,masked,37,// Memory as copy space (potentially masked).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Usability,Simpl,Simple,3,// Simple case: Direct non-truncating forwarding,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:55,Availability,mask,mask,55,// Can we model the truncate and extension with an and mask?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Availability,Mask,Mask,3,// Mask to size of LDMemType,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:6,Availability,failure,failure,6,"// On failure, cleanup dead nodes we may have created.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:82,Deployability,update,updated,82,"// If load is not volatile and there are no uses of the loaded value (and; // the updated indexed value in case of indexed loads), change uses of the; // chain value into uses of the chain input (i.e. delete the dead load).; // TODO: Allow this for unordered atomics (see D66309)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:6,Performance,load,load,6,"// If load is not volatile and there are no uses of the loaded value (and; // the updated indexed value in case of indexed loads), change uses of the; // chain value into uses of the chain input (i.e. delete the dead load).; // TODO: Allow this for unordered atomics (see D66309)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:56,Performance,load,loaded,56,"// If load is not volatile and there are no uses of the loaded value (and; // the updated indexed value in case of indexed loads), change uses of the; // chain value into uses of the chain input (i.e. delete the dead load).; // TODO: Allow this for unordered atomics (see D66309)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:123,Performance,load,loads,123,"// If load is not volatile and there are no uses of the loaded value (and; // the updated indexed value in case of indexed loads), change uses of the; // chain value into uses of the chain input (i.e. delete the dead load).; // TODO: Allow this for unordered atomics (see D66309)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:217,Performance,load,load,217,"// If load is not volatile and there are no uses of the loaded value (and; // the updated indexed value in case of indexed loads), change uses of the; // chain value into uses of the chain input (i.e. delete the dead load).; // TODO: Allow this for unordered atomics (see D66309)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:13,Performance,load,loads,13,// Unindexed loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:84,Performance,load,load,84,"// It's not safe to use the two value CombineTo variant here. e.g.; // v1, chain2 = load chain1, loc; // v2, chain3 = load chain2, loc; // v3 = add v2, c; // Now we replace use of chain2 with chain1. This makes the second load; // isomorphic to the one we are deleting, and thus makes this load live.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:118,Performance,load,load,118,"// It's not safe to use the two value CombineTo variant here. e.g.; // v1, chain2 = load chain1, loc; // v2, chain3 = load chain2, loc; // v3 = add v2, c; // Now we replace use of chain2 with chain1. This makes the second load; // isomorphic to the one we are deleting, and thus makes this load live.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:222,Performance,load,load,222,"// It's not safe to use the two value CombineTo variant here. e.g.; // v1, chain2 = load chain1, loc; // v2, chain3 = load chain2, loc; // v3 = add v2, c; // Now we replace use of chain2 with chain1. This makes the second load; // isomorphic to the one we are deleting, and thus makes this load live.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:290,Performance,load,load,290,"// It's not safe to use the two value CombineTo variant here. e.g.; // v1, chain2 = load chain1, loc; // v2, chain3 = load chain2, loc; // v3 = add v2, c; // Now we replace use of chain2 with chain1. This makes the second load; // isomorphic to the one we are deleting, and thus makes this load live.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:12,Safety,safe,safe,12,"// It's not safe to use the two value CombineTo variant here. e.g.; // v1, chain2 = load chain1, loc; // v2, chain3 = load chain2, loc; // v3 = add v2, c; // Now we replace use of chain2 with chain1. This makes the second load; // isomorphic to the one we are deleting, and thus makes this load live.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:11,Performance,load,loads,11,// Indexed loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:11,Performance,load,load,11,"// If this load has an opaque TargetConstant offset, then we cannot split; // the indexing into an add/sub directly (that TargetConstant may not be; // valid for a different type of node, and we cannot convert an opaque; // target constant into a regular constant).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:59,Performance,load,loads,59,// Try to fold the base pointer arithmetic into subsequent loads and; // stores.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:11,Performance,load,load,11,"// If this load is directly stored, replace the load value with the stored; // value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:48,Performance,load,load,48,"// If this load is directly stored, replace the load value with the stored; // value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:54,Performance,load,load,54,// Try to infer better alignment information than the load already has.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:29,Integrability,depend,dependency,29,// Replace the chain to void dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,Performance,load,load,21,// Replace uses with load result and token factor,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,Performance,load,load,36,// Try transforming N to an indexed load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,Performance,load,loads,36,// Try to slice up N to more direct loads if the slices are mapped to; // different register banks or pairing can take place.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:37,Performance,load,load,37,"/// Helper structure used to slice a load in smaller loads.; /// Basically a slice is obtained from the following sequence:; /// Origin = load Ty1, Base; /// Shift = srl Ty1 Origin, CstTy Amount; /// Inst = trunc Shift to Ty2; ///; /// Then, it will be rewritten into:; /// Slice = load SliceTy, Base + SliceOffset; /// [Inst = zext Slice to Ty2], only if SliceTy <> Ty2; ///; /// SliceTy is deduced from the number of bits that are actually used to; /// build Inst.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:53,Performance,load,loads,53,"/// Helper structure used to slice a load in smaller loads.; /// Basically a slice is obtained from the following sequence:; /// Origin = load Ty1, Base; /// Shift = srl Ty1 Origin, CstTy Amount; /// Inst = trunc Shift to Ty2; ///; /// Then, it will be rewritten into:; /// Slice = load SliceTy, Base + SliceOffset; /// [Inst = zext Slice to Ty2], only if SliceTy <> Ty2; ///; /// SliceTy is deduced from the number of bits that are actually used to; /// build Inst.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:138,Performance,load,load,138,"/// Helper structure used to slice a load in smaller loads.; /// Basically a slice is obtained from the following sequence:; /// Origin = load Ty1, Base; /// Shift = srl Ty1 Origin, CstTy Amount; /// Inst = trunc Shift to Ty2; ///; /// Then, it will be rewritten into:; /// Slice = load SliceTy, Base + SliceOffset; /// [Inst = zext Slice to Ty2], only if SliceTy <> Ty2; ///; /// SliceTy is deduced from the number of bits that are actually used to; /// build Inst.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:282,Performance,load,load,282,"/// Helper structure used to slice a load in smaller loads.; /// Basically a slice is obtained from the following sequence:; /// Origin = load Ty1, Base; /// Shift = srl Ty1 Origin, CstTy Amount; /// Inst = trunc Shift to Ty2; ///; /// Then, it will be rewritten into:; /// Slice = load SliceTy, Base + SliceOffset; /// [Inst = zext Slice to Ty2], only if SliceTy <> Ty2; ///; /// SliceTy is deduced from the number of bits that are actually used to; /// build Inst.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:11,Performance,optimiz,optimizing,11,/// Are we optimizing for code size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:182,Performance,load,load,182,/// Account for slicing gain in the current cost.; /// Slicing provide a few gains like removing a shift or a; /// truncate. This method allows to grow the cost of the original; /// load with the gain from this slice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:58,Performance,load,loads,58,// Assume cross register banks copies are as expensive as loads.; // FIXME: Do we want some more target hooks?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:17,Performance,optimiz,optimizing,17,"// Unless we are optimizing for code size, consider the; // expensive operation first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:16,Performance,load,load,16,// The original load instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:52,Performance,load,load,52,// The right shift amount in bits from the original load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:88,Modifiability,extend,extend,88,// Reproduce the trunc(lshr) sequence:; // - Start from the truncated value.; // - Zero extend to the desired bit width.; // - Shift left.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,Performance,load,loaded,36,/// Get the size of the slice to be loaded in bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:30,Performance,load,loaded,30,/// Get the type that will be loaded for this slice.; /// Note: This may not be the final type for the slice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:29,Performance,load,load,29,/// Get the alignment of the load used for this slice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:27,Performance,load,load,27,"// Offsets are for indexed load only, we do not handle that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:18,Performance,load,load,18,// Check that the load is legal for this type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:59,Performance,load,loading,59,"// If Offset is bigger than TySizeInBytes, it means we are loading all; // zeros. This should have been optimized before in the process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:104,Performance,optimiz,optimized,104,"// If Offset is bigger than TySizeInBytes, it means we are loading all; // zeros. This should have been optimized before in the process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:45,Performance,load,load,45,/// Generate the sequence of instructions to load the slice; /// represented by this object and redirect the uses of this slice to; /// this new sequence of instructions.; /// \pre this->Inst && this->Origin are valid Instructions and this; /// object passed the legal check: LoadedSlice::isLegal returned true.; /// \return The last instruction of the sequence used to load the slice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:276,Performance,Load,LoadedSlice,276,/// Generate the sequence of instructions to load the slice; /// represented by this object and redirect the uses of this slice to; /// this new sequence of instructions.; /// \pre this->Inst && this->Origin are valid Instructions and this; /// object passed the legal check: LoadedSlice::isLegal returned true.; /// \return The last instruction of the sequence used to load the slice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:370,Performance,load,load,370,/// Generate the sequence of instructions to load the slice; /// represented by this object and redirect the uses of this slice to; /// this new sequence of instructions.; /// \pre this->Inst && this->Origin are valid Instructions and this; /// object passed the legal check: LoadedSlice::isLegal returned true.; /// \return The last instruction of the sequence used to load the slice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,Performance,load,loaded,26,// Create the type of the loaded slice according to its size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,Performance,load,load,14,// Create the load for the slice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:117,Modifiability,extend,extend,117,"// If the final type is not the same as the loaded type, this means that; // we have to pad with zero. Create a zero extend for that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:44,Performance,load,loaded,44,"// If the final type is not the same as the loaded type, this means that; // we have to pad with zero. Create a zero extend for that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:102,Performance,load,load,102,"/// Check if this slice can be merged with an expensive cross register; /// bank copy. E.g.,; /// i = load i32; /// f = bitcast i32 i to float",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:34,Performance,perform,perform,34,"// At this point, we know that we perform a cross-register-bank copy.; // Check if it is expensive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,Performance,load,load,39,// Check if it will be merged with the load.; // 1. Check the alignment / fast memory access constraint.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:86,Security,access,access,86,// Check if it will be merged with the load.; // 1. Check the alignment / fast memory access constraint.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,Performance,load,load,21,// 2. Check that the load is a legal operation for that type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:137,Performance,load,loaded,137,/// Check whether or not \p First and \p Second are next to each other; /// in memory. This means that there is no hole between the bits loaded; /// by \p First and the bits loaded by \p Second.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:174,Performance,load,loaded,174,/// Check whether or not \p First and \p Second are next to each other; /// in memory. This means that there is no hole between the bits loaded; /// by \p First and the bits loaded by \p Second.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:172,Performance,load,loads,172,/// Adjust the \p GlobalLSCost according to the target; /// paring capabilities and the layout of the slices.; /// \pre \p GlobalLSCost should account for at least as many loads as; /// there is in the slices in \p LoadedSlices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:215,Performance,Load,LoadedSlices,215,/// Adjust the \p GlobalLSCost according to the target; /// paring capabilities and the layout of the slices.; /// \pre \p GlobalLSCost should account for at least as many loads as; /// there is in the slices in \p LoadedSlices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:103,Performance,load,load,103,// First (resp. Second) is the first (resp. Second) potentially candidate; // to be placed in a paired load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,Performance,load,loads,39,// Check if the target supplies paired loads for this type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:19,Performance,load,loads,19,// Check that both loads are next to each other in memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:44,Performance,Load,LoadedSlice,44,"/// Check the profitability of all involved LoadedSlice.; /// Currently, it is considered profitable if there is exactly two; /// involved slices (1) which are (2) next to each other in memory, and; /// whose cost (\see LoadedSlice::Cost) is smaller than the original load (3).; ///; /// Note: The order of the elements in \p LoadedSlices may be modified, but not; /// the elements themselves.; ///; /// FIXME: When the cost model will be mature enough, we can relax; /// constraints (1) and (2).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:220,Performance,Load,LoadedSlice,220,"/// Check the profitability of all involved LoadedSlice.; /// Currently, it is considered profitable if there is exactly two; /// involved slices (1) which are (2) next to each other in memory, and; /// whose cost (\see LoadedSlice::Cost) is smaller than the original load (3).; ///; /// Note: The order of the elements in \p LoadedSlices may be modified, but not; /// the elements themselves.; ///; /// FIXME: When the cost model will be mature enough, we can relax; /// constraints (1) and (2).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:268,Performance,load,load,268,"/// Check the profitability of all involved LoadedSlice.; /// Currently, it is considered profitable if there is exactly two; /// involved slices (1) which are (2) next to each other in memory, and; /// whose cost (\see LoadedSlice::Cost) is smaller than the original load (3).; ///; /// Note: The order of the elements in \p LoadedSlices may be modified, but not; /// the elements themselves.; ///; /// FIXME: When the cost model will be mature enough, we can relax; /// constraints (1) and (2).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:326,Performance,Load,LoadedSlices,326,"/// Check the profitability of all involved LoadedSlice.; /// Currently, it is considered profitable if there is exactly two; /// involved slices (1) which are (2) next to each other in memory, and; /// whose cost (\see LoadedSlice::Cost) is smaller than the original load (3).; ///; /// Note: The order of the elements in \p LoadedSlices may be modified, but not; /// the elements themselves.; ///; /// FIXME: When the cost model will be mature enough, we can relax; /// constraints (1) and (2).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:33,Performance,load,load,33,// The original code has one big load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:35,Deployability,configurat,configuration,35,// Account as cost in the original configuration the gain obtained; // with the current slices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:35,Modifiability,config,configuration,35,// Account as cost in the original configuration the gain obtained; // with the current slices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:33,Performance,load,load,33,"// If the target supports paired load, adjust the cost accordingly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:17,Performance,load,load,17,"/// If the given load, \p LI, is used only by trunc or trunc(lshr); /// operations, split it in the various pieces being extracted.; ///; /// This sort of thing is introduced by SROA.; /// This slicing takes care not to insert overlapping loads.; /// \pre LI is a simple load (i.e., not an atomic or volatile load).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:239,Performance,load,loads,239,"/// If the given load, \p LI, is used only by trunc or trunc(lshr); /// operations, split it in the various pieces being extracted.; ///; /// This sort of thing is introduced by SROA.; /// This slicing takes care not to insert overlapping loads.; /// \pre LI is a simple load (i.e., not an atomic or volatile load).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:271,Performance,load,load,271,"/// If the given load, \p LI, is used only by trunc or trunc(lshr); /// operations, split it in the various pieces being extracted.; ///; /// This sort of thing is introduced by SROA.; /// This slicing takes care not to insert overlapping loads.; /// \pre LI is a simple load (i.e., not an atomic or volatile load).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:309,Performance,load,load,309,"/// If the given load, \p LI, is used only by trunc or trunc(lshr); /// operations, split it in the various pieces being extracted.; ///; /// This sort of thing is introduced by SROA.; /// This slicing takes care not to insert overlapping loads.; /// \pre LI is a simple load (i.e., not an atomic or volatile load).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:264,Usability,simpl,simple,264,"/// If the given load, \p LI, is used only by trunc or trunc(lshr); /// operations, split it in the various pieces being extracted.; ///; /// This sort of thing is introduced by SROA.; /// This slicing takes care not to insert overlapping loads.; /// \pre LI is a simple load (i.e., not an atomic or volatile load).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:31,Performance,load,load,31,"// The algorithm to split up a load of a scalable vector into individual; // elements currently requires knowing the length of the loaded type,; // so will need adjusting to work on scalable vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:41,Performance,scalab,scalable,41,"// The algorithm to split up a load of a scalable vector into individual; // elements currently requires knowing the length of the loaded type,; // so will need adjusting to work on scalable vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:131,Performance,load,loaded,131,"// The algorithm to split up a load of a scalable vector into individual; // elements currently requires knowing the length of the loaded type,; // so will need adjusting to work on scalable vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:182,Performance,scalab,scalable,182,"// The algorithm to split up a load of a scalable vector into individual; // elements currently requires knowing the length of the loaded type,; // so will need adjusting to work on scalable vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:38,Safety,detect,detect,38,"// Keep track of already used bits to detect overlapping values.; // In that case, we will just abort the transformation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:96,Safety,abort,abort,96,"// Keep track of already used bits to detect overlapping values.; // In that case, we will just abort the transformation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:17,Performance,load,load,17,"// Check if this load is used as several smaller chunks of bits.; // Basically, look for uses in trunc or trunc(lshr) and record a new chain; // of computation for each trunc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:35,Energy Efficiency,power,power,35,"// The width of the type must be a power of 2 and greater than 8-bits.; // Otherwise the load cannot be represented in LLVM IR.; // Moreover, if we shifted with a non-8-bits multiple, the slice; // will be across several bytes. We do not support that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:89,Performance,load,load,89,"// The width of the type must be a power of 2 and greater than 8-bits.; // Otherwise the load cannot be represented in LLVM IR.; // Moreover, if we shifted with a non-8-bits multiple, the slice; // will be across several bytes. We do not support that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Deployability,Update,Update,3,// Update the bits used globally.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Safety,Abort,Abort,3,// Abort slicing if it does not seem to be profitable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Modifiability,Rewrite,Rewrite,3,"// Rewrite each chain to use an independent load.; // By construction, each chain can be represented by a unique load.; // Prepare the argument for the new token factor for all the slices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:44,Performance,load,load,44,"// Rewrite each chain to use an independent load.; // By construction, each chain can be represented by a unique load.; // Prepare the argument for the new token factor for all the slices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:113,Performance,load,load,113,"// Rewrite each chain to use an independent load.; // By construction, each chain can be represented by a unique load.; // Prepare the argument for the new token factor for all the slices.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:140,Availability,mask,masked,140,"/// Check to see if V is (and load (ptr), imm), where the load is having; /// specific bytes cleared out. If so, return the byte size being masked out; /// and the shift amount.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:30,Performance,load,load,30,"/// Check to see if V is (and load (ptr), imm), where the load is having; /// specific bytes cleared out. If so, return the byte size being masked out; /// and the shift amount.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:58,Performance,load,load,58,"/// Check to see if V is (and load (ptr), imm), where the load is having; /// specific bytes cleared out. If so, return the byte size being masked out; /// and the shift amount.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:93,Usability,clear,cleared,93,"/// Check to see if V is (and load (ptr), imm), where the load is having; /// specific bytes cleared out. If so, return the byte size being masked out; /// and the shift amount.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:48,Usability,simpl,simple,48,// Not from same pointer.; // This only handles simple types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22,Availability,mask,mask,22,// Check the constant mask. Invert it so that the bits being masked out are; // 0 and the bits being kept are 1. Use getSExtValue so that leading bits; // follow the sign bit for uniformity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:61,Availability,mask,masked,61,// Check the constant mask. Invert it so that the bits being masked out are; // 0 and the bits being kept are 1. Use getSExtValue so that leading bits; // follow the sign bit for uniformity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:12,Availability,mask,mask,12,"// All zero mask.; // See if we have a continuous run of bits. If so, we have 0*1+0*",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,Deployability,continuous,continuous,39,"// All zero mask.; // See if we have a continuous run of bits. If so, we have 0*1+0*",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:20,Availability,down,down,20,// Adjust NotMaskLZ down to be from the actual size of the int instead of i64.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:11,Availability,mask,mask,11,"// All one mask, or 5-byte mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:27,Availability,mask,mask,27,"// All one mask, or 5-byte mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:53,Availability,mask,mask,53,// Verify that the first bit starts at a multiple of mask so that the access; // is aligned the same as the access width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:70,Security,access,access,70,// Verify that the first bit starts at a multiple of mask so that the access; // is aligned the same as the access width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:108,Security,access,access,108,// Verify that the first bit starts at a multiple of mask so that the access; // is aligned the same as the access width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:59,Performance,load,load,59,"// For narrowing to be valid, it must be the case that the load the; // immediately preceding memory operation before the store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:51,Integrability,depend,dependencies,51,// LD has only 1 chain use so they are no indirect dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:81,Availability,Mask,MaskInfo,81,"/// Check to see if IVal is something that provides a value as specified by; /// MaskInfo. If so, replace the specified store with a narrower store of; /// truncated IVal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:55,Availability,mask,masked,55,"// Check to see if IVal is all zeros in the part being masked in by the 'or'; // that uses this. If not, this is not a replacement.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:116,Availability,down,down,116,"// Okay, we can do this! Replace the 'St' store with a store of IVal that is; // shifted by ByteShift and truncated down to NumBytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:64,Security,access,access,64,// Figure out the offset for the store and the alignment of the access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:12,Availability,down,down,12,// Truncate down to the new size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:25,Performance,load,load,25,"/// Look for sequence of load / op / store where op is one of 'or', 'xor', and; /// 'and' of immediates. If 'op' is only touching some of the loaded bits, try; /// narrowing the load and store if it would end up being a win for performance; /// or code size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:142,Performance,load,loaded,142,"/// Look for sequence of load / op / store where op is one of 'or', 'xor', and; /// 'and' of immediates. If 'op' is only touching some of the loaded bits, try; /// narrowing the load and store if it would end up being a win for performance; /// or code size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:178,Performance,load,load,178,"/// Look for sequence of load / op / store where op is one of 'or', 'xor', and; /// 'and' of immediates. If 'op' is only touching some of the loaded bits, try; /// narrowing the load and store if it would end up being a win for performance; /// or code size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:228,Performance,perform,performance,228,"/// Look for sequence of load / op / store where op is one of 'or', 'xor', and; /// 'and' of immediates. If 'op' is only touching some of the loaded bits, try; /// narrowing the load and store if it would end up being a win for performance; /// or code size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:91,Availability,mask,mask,91,"// If this is ""store (or X, Y), P"" and X is ""(and (load P), cst)"", where cst; // is a byte mask indicating a consecutive number of bytes, check to see if; // Y is known to provide just those bytes. If so, we try to replace the; // load + replace + store sequence with a single (narrower) store, which makes; // the load dead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:51,Performance,load,load,51,"// If this is ""store (or X, Y), P"" and X is ""(and (load P), cst)"", where cst; // is a byte mask indicating a consecutive number of bytes, check to see if; // Y is known to provide just those bytes. If so, we try to replace the; // load + replace + store sequence with a single (narrower) store, which makes; // the load dead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:231,Performance,load,load,231,"// If this is ""store (or X, Y), P"" and X is ""(and (load P), cst)"", where cst; // is a byte mask indicating a consecutive number of bytes, check to see if; // Y is known to provide just those bytes. If so, we try to replace the; // load + replace + store sequence with a single (narrower) store, which makes; // the load dead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:315,Performance,load,load,315,"// If this is ""store (or X, Y), P"" and X is ""(and (load P), cst)"", where cst; // is a byte mask indicating a consecutive number of bytes, check to see if; // Y is known to provide just those bytes. If so, we try to replace the; // load + replace + store sequence with a single (narrower) store, which makes; // the load dead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:34,Performance,load,load,34,// Find the type to narrow it the load / op / store to.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:43,Performance,load,load,43,"// The narrowing should be profitable, the load/store operation should be; // legal (or custom) and the store size should be equal to the NewVT width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:78,Performance,load,load,78,"// For big endian targets, we need to adjust the offset to the pointer to; // load the correct bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:31,Performance,load,load,31,"/// For a given floating point load / store pair, if the load value isn't used; /// by any other operations, then consider transforming the pair to integer; /// load / store operations if the target deems the transformation profitable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:57,Performance,load,load,57,"/// For a given floating point load / store pair, if the load value isn't used; /// by any other operations, then consider transforming the pair to integer; /// load / store operations if the target deems the transformation profitable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:161,Performance,load,load,161,"/// For a given floating point load / store pair, if the load value isn't used; /// by any other operations, then consider transforming the pair to integer; /// load / store operations if the target deems the transformation profitable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:29,Performance,scalab,scalable,29,// We don't know the size of scalable types at compile time so we cannot; // create an integer of the equivalent size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:7,Usability,clear,clear,7,// Not clear how to truncate FP values.; // TODO: Handle truncation of build_vector constants,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:18,Performance,Load,Load,18,// Create the new Load and Store operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:12,Performance,load,loadbaseptr,12,// Match on loadbaseptr if relevant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Performance,Load,Load,3,// Load and store should be the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Performance,Load,Loads,3,// Loads must only have one use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:7,Performance,Load,Load,7,// The Load's Base Ptr must also match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Performance,Load,Loads,3,// Loads must only have one use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22,Performance,load,loads,22,// Don't mix temporal loads with non-temporal loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:46,Performance,load,loads,46,// Don't mix temporal loads with non-temporal loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:110,Integrability,depend,dependence,110,// Check if the pair of StoreNode and the RootNode already bail out many; // times which is over the limit in dependence check.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:129,Availability,down,down,129,"// We looking for a root node which is an ancestor to all mergable; // stores. We search up through a load, to our root and then down; // through all children. For instance we will find Store{1,2,3} if; // St is Store1, Store2. or Store3 where the root is not a load; // which always true for nonvolatile ops. TODO: Expand; // the search to find all valid candidates through multiple layers of loads.; //; // Root; // |-------|-------|; // Load Load Store3; // | |; // Store1 Store2; //; // FIXME: We should be able to climb and; // descend TokenFactors to find candidates as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:384,Modifiability,layers,layers,384,"// We looking for a root node which is an ancestor to all mergable; // stores. We search up through a load, to our root and then down; // through all children. For instance we will find Store{1,2,3} if; // St is Store1, Store2. or Store3 where the root is not a load; // which always true for nonvolatile ops. TODO: Expand; // the search to find all valid candidates through multiple layers of loads.; //; // Root; // |-------|-------|; // Load Load Store3; // | |; // Store1 Store2; //; // FIXME: We should be able to climb and; // descend TokenFactors to find candidates as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:102,Performance,load,load,102,"// We looking for a root node which is an ancestor to all mergable; // stores. We search up through a load, to our root and then down; // through all children. For instance we will find Store{1,2,3} if; // St is Store1, Store2. or Store3 where the root is not a load; // which always true for nonvolatile ops. TODO: Expand; // the search to find all valid candidates through multiple layers of loads.; //; // Root; // |-------|-------|; // Load Load Store3; // | |; // Store1 Store2; //; // FIXME: We should be able to climb and; // descend TokenFactors to find candidates as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:262,Performance,load,load,262,"// We looking for a root node which is an ancestor to all mergable; // stores. We search up through a load, to our root and then down; // through all children. For instance we will find Store{1,2,3} if; // St is Store1, Store2. or Store3 where the root is not a load; // which always true for nonvolatile ops. TODO: Expand; // the search to find all valid candidates through multiple layers of loads.; //; // Root; // |-------|-------|; // Load Load Store3; // | |; // Store1 Store2; //; // FIXME: We should be able to climb and; // descend TokenFactors to find candidates as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:394,Performance,load,loads,394,"// We looking for a root node which is an ancestor to all mergable; // stores. We search up through a load, to our root and then down; // through all children. For instance we will find Store{1,2,3} if; // St is Store1, Store2. or Store3 where the root is not a load; // which always true for nonvolatile ops. TODO: Expand; // the search to find all valid candidates through multiple layers of loads.; //; // Root; // |-------|-------|; // Load Load Store3; // | |; // Store1 Store2; //; // FIXME: We should be able to climb and; // descend TokenFactors to find candidates as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:440,Performance,Load,Load,440,"// We looking for a root node which is an ancestor to all mergable; // stores. We search up through a load, to our root and then down; // through all children. For instance we will find Store{1,2,3} if; // St is Store1, Store2. or Store3 where the root is not a load; // which always true for nonvolatile ops. TODO: Expand; // the search to find all valid candidates through multiple layers of loads.; //; // Root; // |-------|-------|; // Load Load Store3; // | |; // Store1 Store2; //; // FIXME: We should be able to climb and; // descend TokenFactors to find candidates as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:445,Performance,Load,Load,445,"// We looking for a root node which is an ancestor to all mergable; // stores. We search up through a load, to our root and then down; // through all children. For instance we will find Store{1,2,3} if; // St is Store1, Store2. or Store3 where the root is not a load; // which always true for nonvolatile ops. TODO: Expand; // the search to find all valid candidates through multiple layers of loads.; //; // Root; // |-------|-------|; // Load Load Store3; // | |; // Store1 Store2; //; // FIXME: We should be able to climb and; // descend TokenFactors to find candidates as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:8,Availability,down,down,8,// walk down chain,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,Integrability,depend,depend,21,// Check stores that depend on the root (e.g. Store 3 in the chart above).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:108,Integrability,depend,depend,108,// We need to check that merging these stores does not cause a loop in the; // DAG. Any store candidate may depend on another candidate indirectly through; // its operands. Check in parallel by searching up from operands of candidates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:205,Usability,simpl,simplfication,205,// FIXME: We should be able to truncate a full search of; // predecessors by doing a BFS and keeping tabs the originating; // stores from which worklist nodes come from in a similar way to; // TokenFactor simplfication.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:147,Integrability,depend,dependencies,147,"// Of the 4 Store Operands:; // * Chain (Op 0) -> We have already considered these; // in candidate selection, but only by following the; // chain dependencies. We could still have a chain; // dependency to a load, that has a non-chain dep to; // another load, that depends on a store, etc. So it is; // possible to have dependencies that consist of a mix; // of chain and non-chain deps, and we need to include; // chain operands in the analysis here..; // * Value (Op 1) -> Cycles may happen (e.g. through load chains); // * Address (Op 2) -> Merged addresses may only vary by a fixed constant,; // but aren't necessarily fromt the same base node, so; // cycles possible (e.g. via indexed store).; // * (Op 3) -> Represents the pre or post-indexing offset (or undef for; // non-indexed stores). Not constant on all targets (e.g. ARM); // and so can participate in a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:193,Integrability,depend,dependency,193,"// Of the 4 Store Operands:; // * Chain (Op 0) -> We have already considered these; // in candidate selection, but only by following the; // chain dependencies. We could still have a chain; // dependency to a load, that has a non-chain dep to; // another load, that depends on a store, etc. So it is; // possible to have dependencies that consist of a mix; // of chain and non-chain deps, and we need to include; // chain operands in the analysis here..; // * Value (Op 1) -> Cycles may happen (e.g. through load chains); // * Address (Op 2) -> Merged addresses may only vary by a fixed constant,; // but aren't necessarily fromt the same base node, so; // cycles possible (e.g. via indexed store).; // * (Op 3) -> Represents the pre or post-indexing offset (or undef for; // non-indexed stores). Not constant on all targets (e.g. ARM); // and so can participate in a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:266,Integrability,depend,depends,266,"// Of the 4 Store Operands:; // * Chain (Op 0) -> We have already considered these; // in candidate selection, but only by following the; // chain dependencies. We could still have a chain; // dependency to a load, that has a non-chain dep to; // another load, that depends on a store, etc. So it is; // possible to have dependencies that consist of a mix; // of chain and non-chain deps, and we need to include; // chain operands in the analysis here..; // * Value (Op 1) -> Cycles may happen (e.g. through load chains); // * Address (Op 2) -> Merged addresses may only vary by a fixed constant,; // but aren't necessarily fromt the same base node, so; // cycles possible (e.g. via indexed store).; // * (Op 3) -> Represents the pre or post-indexing offset (or undef for; // non-indexed stores). Not constant on all targets (e.g. ARM); // and so can participate in a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:321,Integrability,depend,dependencies,321,"// Of the 4 Store Operands:; // * Chain (Op 0) -> We have already considered these; // in candidate selection, but only by following the; // chain dependencies. We could still have a chain; // dependency to a load, that has a non-chain dep to; // another load, that depends on a store, etc. So it is; // possible to have dependencies that consist of a mix; // of chain and non-chain deps, and we need to include; // chain operands in the analysis here..; // * Value (Op 1) -> Cycles may happen (e.g. through load chains); // * Address (Op 2) -> Merged addresses may only vary by a fixed constant,; // but aren't necessarily fromt the same base node, so; // cycles possible (e.g. via indexed store).; // * (Op 3) -> Represents the pre or post-indexing offset (or undef for; // non-indexed stores). Not constant on all targets (e.g. ARM); // and so can participate in a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:209,Performance,load,load,209,"// Of the 4 Store Operands:; // * Chain (Op 0) -> We have already considered these; // in candidate selection, but only by following the; // chain dependencies. We could still have a chain; // dependency to a load, that has a non-chain dep to; // another load, that depends on a store, etc. So it is; // possible to have dependencies that consist of a mix; // of chain and non-chain deps, and we need to include; // chain operands in the analysis here..; // * Value (Op 1) -> Cycles may happen (e.g. through load chains); // * Address (Op 2) -> Merged addresses may only vary by a fixed constant,; // but aren't necessarily fromt the same base node, so; // cycles possible (e.g. via indexed store).; // * (Op 3) -> Represents the pre or post-indexing offset (or undef for; // non-indexed stores). Not constant on all targets (e.g. ARM); // and so can participate in a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:255,Performance,load,load,255,"// Of the 4 Store Operands:; // * Chain (Op 0) -> We have already considered these; // in candidate selection, but only by following the; // chain dependencies. We could still have a chain; // dependency to a load, that has a non-chain dep to; // another load, that depends on a store, etc. So it is; // possible to have dependencies that consist of a mix; // of chain and non-chain deps, and we need to include; // chain operands in the analysis here..; // * Value (Op 1) -> Cycles may happen (e.g. through load chains); // * Address (Op 2) -> Merged addresses may only vary by a fixed constant,; // but aren't necessarily fromt the same base node, so; // cycles possible (e.g. via indexed store).; // * (Op 3) -> Represents the pre or post-indexing offset (or undef for; // non-indexed stores). Not constant on all targets (e.g. ARM); // and so can participate in a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:508,Performance,load,load,508,"// Of the 4 Store Operands:; // * Chain (Op 0) -> We have already considered these; // in candidate selection, but only by following the; // chain dependencies. We could still have a chain; // dependency to a load, that has a non-chain dep to; // another load, that depends on a store, etc. So it is; // possible to have dependencies that consist of a mix; // of chain and non-chain deps, and we need to include; // chain operands in the analysis here..; // * Value (Op 1) -> Cycles may happen (e.g. through load chains); // * Address (Op 2) -> Merged addresses may only vary by a fixed constant,; // but aren't necessarily fromt the same base node, so; // cycles possible (e.g. via indexed store).; // * (Op 3) -> Represents the pre or post-indexing offset (or undef for; // non-indexed stores). Not constant on all targets (e.g. ARM); // and so can participate in a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:12,Performance,load,load,12,// Look for load nodes which are used by the stored values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:19,Performance,load,loads,19,"// Find acceptable loads. Loads need to have the same chain (token factor),; // must not be zext, volatile, indexed, and they must be consecutive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,Performance,Load,Loads,26,"// Find acceptable loads. Loads need to have the same chain (token factor),; // must not be zext, volatile, indexed, and they must be consecutive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,Performance,load,load,14,"// If we have load/store pair instructions and we only have two values,; // don't bother merging.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Performance,load,loads,10,"// If the loads are reversed, see if we can rotate the halves into place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:109,Modifiability,variab,variables,109,// Scan the memory operations on the chain and find the first; // non-consecutive load memory address. These variables hold the index in; // the store node array.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:82,Performance,load,load,82,// Scan the memory operations on the chain and find the first; // non-consecutive load memory address. These variables hold the index in; // the store node array.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:8,Modifiability,variab,variable,8,// This variable refers to the size and not index in the array.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:7,Performance,load,loads,7,// All loads must share the same chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:38,Modifiability,variab,variables,38,// We add +1 here because the LastXXX variables refer to location while; // the NumElem refers to array/index size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:313,Performance,load,load,313,// We know that candidate stores are in order and of correct; // shape. While there is no mergeable sequence from the; // beginning one may start later in the sequence. The only; // reason a merge of size N could have failed where another of; // the same size would not have is if the alignment or either; // the load or store has improved. Drop as many candidates as we; // can here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:54,Performance,load,load,54,// Find if it is better to use vectors or integers to load and store; // to memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,Performance,load,loads,14,"// The merged loads are required to have the same incoming chain, so; // using the first's chain is acceptable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:33,Performance,load,loads,33,// Transfer chain users from old loads to the new load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:50,Performance,load,load,50,// Transfer chain users from old loads to the new load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:9,Modifiability,Extend,Extend,9,"// TODO: Extend this function to merge stores of scalable vectors.; // (i.e. two <vscale x 8 x i8> stores can be merged to one <vscale x 16 x i8>; // store since we know <vscale x 16 x i8> is exactly twice as large as; // <vscale x 8 x i8>). Until then, bail out for scalable vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,Performance,scalab,scalable,49,"// TODO: Extend this function to merge stores of scalable vectors.; // (i.e. two <vscale x 8 x i8> stores can be merged to one <vscale x 16 x i8>; // store since we know <vscale x 16 x i8> is exactly twice as large as; // <vscale x 8 x i8>). Until then, bail out for scalable vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:267,Performance,scalab,scalable,267,"// TODO: Extend this function to merge stores of scalable vectors.; // (i.e. two <vscale x 8 x i8> stores can be merged to one <vscale x 16 x i8>; // store since we know <vscale x 16 x i8> is exactly twice as large as; // <vscale x 8 x i8>). Until then, bail out for scalable vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:66,Performance,load,loads,66,"// Do not bother looking at stored values that are not constants, loads, or; // extracted vector elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:30,Integrability,depend,dependency,30,// Replace the chain to avoid dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:24,Safety,avoid,avoid,24,// Replace the chain to avoid dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:30,Performance,load,load,30,"// (store (insert_vector_elt (load p), x, i), p) -> (store x, p+offset); //; // If a store of a load with an element inserted into it has no other; // uses in between the chain, then we can consider the vector store; // dead and replace it with just the single scalar element store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:96,Performance,load,load,96,"// (store (insert_vector_elt (load p), x, i), p) -> (store x, p+offset); //; // If a store of a load with an element inserted into it has no other; // uses in between the chain, then we can consider the vector store; // dead and replace it with just the single scalar element store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,Availability,recover,recover,49,// If the offset is a known constant then try to recover the pointer; // info,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,Safety,recover,recover,49,// If the offset is a known constant then try to recover the pointer; // info,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:157,Security,access,accesses,157,"// If the store is volatile, we only want to change the store type if the; // resulting store is legal. Otherwise we might increase the number of; // memory accesses. We don't care if the original type was legal or not; // as we assume software couldn't rely on the number of accesses of an; // illegal type.; // TODO: May be able to relax for unordered atomics (see D66309)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:276,Security,access,accesses,276,"// If the store is volatile, we only want to change the store type if the; // resulting store is legal. Otherwise we might increase the number of; // memory accesses. We don't care if the original type was legal or not; // as we assume software couldn't rely on the number of accesses of an; // illegal type.; // TODO: May be able to relax for unordered atomics (see D66309)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:42,Performance,load,load,42,// Try transforming a pair floating point load / store ops to integer; // load / store ops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:74,Performance,load,load,74,// Try transforming a pair floating point load / store ops to integer; // load / store ops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:17,Usability,simpl,simplify,17,"// See if we can simplify the operation with SimplifyDemandedBits, which; // only works if the value has a single use.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:45,Usability,Simpl,SimplifyDemandedBits,45,"// See if we can simplify the operation with SimplifyDemandedBits, which; // only works if the value has a single use.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:112,Usability,Simpl,SimplifyDemandedBits,112,"// Re-visit the store if anything changed and the store hasn't been merged; // with another node (N is deleted) SimplifyDemandedBits will add Value's; // node back to the worklist if necessary, but we also need to re-visit; // the Store node itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:28,Usability,simpl,simplify,28,"// Otherwise, see if we can simplify the input to this truncstore with; // knowledge that only the low bits are being used. For example:; // ""truncstore (or (shl x, 8), y), i8"" -> ""truncstore y, i8""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:56,Usability,simpl,simplify,56,"// If we're storing a truncated constant, see if we can simplify it.; // TODO: Move this to targetShrinkDemandedConstant?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:16,Performance,load,load,16,"// If this is a load followed by a store to the same location, then the store; // is dead/noop. Peek through any truncates if canCombineTruncStore failed.; // TODO: Add big-endian truncate support with test coverage.; // TODO: Can relax for unordered atomics (see D66309)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:202,Testability,test,test,202,"// If this is a load followed by a store to the same location, then the store; // is dead/noop. Peek through any truncates if canCombineTruncStore failed.; // TODO: Add big-endian truncate support with test coverage.; // TODO: Can relax for unordered atomics (see D66309)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:47,Performance,load,load,47,"// There can't be any side effects between the load and store, such as; // a call or store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,Performance,load,loads,36,// Try scalarizing vector stores of loads where we only change one element,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:58,Performance,scalab,scalable,58,"// If we consider two stores and one smaller in size is a scalable; // vector type and another one a bigger size store with a fixed type,; // then we could not allow the scalable store removal because we don't; // know its final size in the end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:170,Performance,scalab,scalable,170,"// If we consider two stores and one smaller in size is a scalable; // vector type and another one a bigger size store with a fixed type,; // then we could not allow the scalable store removal because we don't; // know its final size in the end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Performance,perform,perform,10,"// Always perform this optimization before types are legal. If the target; // prefers, also try this after legalization to catch stores that were created; // by intrinsics or other nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:23,Performance,optimiz,optimization,23,"// Always perform this optimization before types are legal. If the target; // prefers, also try this after legalization to catch stores that were created; // by intrinsics or other nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:145,Safety,avoid,avoid,145,"// Turn 'store float 1.0, Ptr' -> 'store int 0x12345678, Ptr'; //; // Make sure to do this only after attempting to merge stores in order to; // avoid changing the types of some subset of stores due to visit order,; // preventing their merging.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:19,Performance,scalab,scalable,19,"// The bounds of a scalable store are not known until runtime, so this; // store cannot be elided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:965,Usability,simpl,simple,965,"/// For the instruction sequence of store below, F and I values; /// are bundled together as an i64 value before being stored into memory.; /// Sometimes it is more efficent to generate separate stores for F and I,; /// which can remove the bitwise instructions or sink them to colder places.; ///; /// (store (or (zext (bitcast F to i32) to i64),; /// (shl (zext I to i64), 32)), addr) -->; /// (store F, addr) and (store I, addr+4); ///; /// Similarly, splitting for other merged store can also be beneficial, like:; /// For pair of {i32, i32}, i64 store --> two i32 stores.; /// For pair of {i32, i16}, i64 store --> two i32 stores.; /// For pair of {i16, i16}, i32 store --> two i16 stores.; /// For pair of {i16, i8}, i32 store --> two i16 stores.; /// For pair of {i8, i8}, i16 store --> two i8 stores.; ///; /// We allow each target to determine specifically which kind of splitting is; /// supported.; ///; /// The store patterns are commonly seen from the simple code snippet below; /// if only std::make_pair(...) is sroa transformed before inlined into hoo.; /// void goo(const std::pair<int, float> &);; /// hoo() {; /// ...; /// goo(std::make_pair(tmp, ftmp));; /// ...; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:37,Security,access,accesses,37,// Can't change the number of memory accesses for a volatile store or break; // atomicity for an atomic one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22,Modifiability,extend,extended,22,// Lo and Hi are zero-extended from int with size less equal than 32; // to i64.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:93,Availability,Mask,Mask,93,"// Merge an insertion into an existing shuffle:; // (insert_vector_elt (vector_shuffle X, Y, Mask),; // .(extract_vector_elt X, N), InsIndex); // --> (vector_shuffle X, Y, NewMask); // and variations where shuffle operands may be CONCAT_VECTORS.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:168,Performance,perform,perform,168,"// We explore the inputs of the shuffle in order to see if we find the; // source of the extract_vector_elt. If so, we can use it to modify the; // shuffle rather than perform an insert_vector_elt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:170,Availability,Mask,Mask,170,"// Convert a disguised subvector insertion into a shuffle:; // insert_vector_elt V, (bitcast X from vector type), IdxC -->; // bitcast(shuffle (bitcast V), (extended X), Mask); // Note: We do not use an insert_subvector node because that requires a; // legal subvector type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:157,Modifiability,extend,extended,157,"// Convert a disguised subvector insertion into a shuffle:; // insert_vector_elt V, (bitcast X from vector type), IdxC -->; // bitcast(shuffle (bitcast V), (extended X), Mask); // Note: We do not use an insert_subvector node because that requires a; // legal subvector type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:28,Availability,mask,mask,28,"// Step 1: Create a shuffle mask that implements this insert operation. The; // vector that we are inserting into will be operand 0 of the shuffle, so; // those elements are just 'i'. The inserted subvector is in the first; // positions of operand 1 of the shuffle. Example:; // insert v4i32 V, (v2i16 X), 2 --> shuffle v8i16 V', X', {0,1,2,3,8,9,6,7}",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,Performance,load,load,26,"// Combine insert(shuffle(load, <u,0,1,2>), load, 0) into a single load if; // possible and the new load will be quick. We use more loads but less shuffles; // and inserts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:44,Performance,load,load,44,"// Combine insert(shuffle(load, <u,0,1,2>), load, 0) into a single load if; // possible and the new load will be quick. We use more loads but less shuffles; // and inserts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:67,Performance,load,load,67,"// Combine insert(shuffle(load, <u,0,1,2>), load, 0) into a single load if; // possible and the new load will be quick. We use more loads but less shuffles; // and inserts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:100,Performance,load,load,100,"// Combine insert(shuffle(load, <u,0,1,2>), load, 0) into a single load if; // possible and the new load will be quick. We use more loads but less shuffles; // and inserts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:132,Performance,load,loads,132,"// Combine insert(shuffle(load, <u,0,1,2>), load, 0) into a single load if; // possible and the new load will be quick. We use more loads but less shuffles; // and inserts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:31,Availability,mask,mask,31,"// Look for a shuffle with the mask u,0,1,2,3,4,5,6 or 1,2,3,4,5,6,7,u; // depending on the InsIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:75,Integrability,depend,depending,75,"// Look for a shuffle with the mask u,0,1,2,3,4,5,6 or 1,2,3,4,5,6,7,u; // depending on the InsIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:30,Modifiability,extend,extend,30,// We optionally skip over an extend so long as both loads are extended in the; // same way from the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:63,Modifiability,extend,extended,63,// We optionally skip over an extend so long as both loads are extended in the; // same way from the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:53,Performance,load,loads,53,// We optionally skip over an extend so long as both loads are extended in the; // same way from the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:66,Deployability,continuous,continuous,66,// Check that the offset between the pointers to produce a single continuous; // load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:81,Performance,load,load,81,// Check that the offset between the pointers to produce a single continuous; // load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:30,Performance,load,load,30,// And that the new unaligned load will be fast.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:44,Performance,load,load,44,// Calculate the new Ptr and create the new load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Availability,redundant,redundant,10,// Remove redundant insertions:; // (insert_vector_elt x (extract_vector_elt x idx) idx) -> x,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Safety,redund,redundant,10,// Remove redundant insertions:; // (insert_vector_elt x (extract_vector_elt x idx) idx) -> x,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,Modifiability,variab,variable,14,"// If this is variable insert to undef vector, it might be better to splat:; // inselt undef, InVal, EltNo --> build_vector < InVal, InVal, ... >",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:92,Availability,mask,mask,92,"// VECTOR_SHUFFLE - if all the operands match the shuffle's sources,; // update the shuffle mask (and second operand if we started with unary; // shuffle) and create a new legal shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:73,Deployability,update,update,73,"// VECTOR_SHUFFLE - if all the operands match the shuffle's sources,; // update the shuffle mask (and second operand if we started with unary; // shuffle) and create a new legal shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:59,Availability,mask,mask,59,"// If all insertions are zero value, try to convert to AND mask.; // TODO: Do this for -1 with OR mask?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:98,Availability,mask,mask,98,"// If all insertions are zero value, try to convert to AND mask.; // TODO: Do this for -1 with OR mask?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:116,Performance,load,load,116,// If the vector element type is not a multiple of a byte then we are unable; // to correctly compute an address to load only the extracted element as a; // scalar.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:136,Modifiability,variab,variable,136,// Discard the pointer info except the address space because the memory; // operand can't represent this new access since the offset is variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:109,Security,access,access,109,// Discard the pointer info except the address space because the memory; // operand can't represent this new access since the offset is variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:29,Performance,load,load,29,// We are replacing a vector load with a scalar load. The new load must have; // identical memory op ordering to the original.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:48,Performance,load,load,48,// We are replacing a vector load with a scalar load. The new load must have; // identical memory op ordering to the original.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:62,Performance,load,load,62,// We are replacing a vector load with a scalar load. The new load must have; // identical memory op ordering to the original.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:76,Modifiability,extend,extending,76,"// If the result type of vextract is wider than the load, then issue an; // extending load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:52,Performance,load,load,52,"// If the result type of vextract is wider than the load, then issue an; // extending load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:86,Performance,load,load,86,"// If the result type of vextract is wider than the load, then issue an; // extending load instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:95,Testability,log,logic,95,/// Transform a vector binary operation into a scalar binary operation by moving; /// the math/logic after an extract element of a vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:23,Safety,avoid,avoid,23,// Targets may want to avoid this to prevent an expensive register transfer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:374,Availability,recover,recover,374,"// Given a ISD::EXTRACT_VECTOR_ELT, which is a glorified bit sequence extract,; // recursively analyse all of it's users. and try to model themselves as; // bit sequence extractions. If all of them agree on the new, narrower element; // type, and all of them can be modelled as ISD::EXTRACT_VECTOR_ELT's of that; // new element type, do so now.; // This is mainly useful to recover from legalization that scalarized; // the vector as wide elements, but tries to rebuild it with narrower elements.; //; // Some more nodes could be modelled if that helps cover interesting patterns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:374,Safety,recover,recover,374,"// Given a ISD::EXTRACT_VECTOR_ELT, which is a glorified bit sequence extract,; // recursively analyse all of it's users. and try to model themselves as; // bit sequence extractions. If all of them agree on the new, narrower element; // type, and all of them can be modelled as ISD::EXTRACT_VECTOR_ELT's of that; // new element type, do so now.; // This is mainly useful to recover from legalization that scalarized; // the vector as wide elements, but tries to rebuild it with narrower elements.; //; // Some more nodes could be modelled if that helps cover interesting patterns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:6,Performance,perform,perform,6,// We perform this optimization post type-legalization because; // the type-legalizer often scalarizes integer-promoted vectors.; // Performing this optimization before may cause legalizaton cycles.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:19,Performance,optimiz,optimization,19,// We perform this optimization post type-legalization because; // the type-legalizer often scalarizes integer-promoted vectors.; // Performing this optimization before may cause legalizaton cycles.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:133,Performance,Perform,Performing,133,// We perform this optimization post type-legalization because; // the type-legalizer often scalarizes integer-promoted vectors.; // Performing this optimization before may cause legalizaton cycles.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:149,Performance,optimiz,optimization,149,// We perform this optimization post type-legalization because; // the type-legalizer often scalarizes integer-promoted vectors.; // Performing this optimization before may cause legalizaton cycles.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,Usability,simpl,simply,14,"// Truncation simply means we keep position, but extract less bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Testability,Log,Logical,3,"// Logical right-shift means that we start extraction later,; // but stop it at the same position we did previously.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:186,Modifiability,extend,extend,186,"// Check if the result type doesn't match the inserted element type.; // The inserted element and extracted element may have mismatched bitwidth.; // As a result, EXTRACT_VECTOR_ELT may extend or truncate the extracted vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:147,Performance,scalab,scalable,147,"// All the code from this point onwards assumes fixed width vectors, but it's; // possible that some of the combinations could be made to work for scalable; // vectors too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:198,Energy Efficiency,reduce,reduce,198,"// TODO: These transforms should not require the 'hasOneUse' restriction, but; // there are regressions on multiple targets without it. We can end up with a; // mess of scalar and vector code if we reduce only part of the DAG to scalar.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:46,Integrability,depend,depend,46,// The vector index of the LSBs of the source depend on the endian-ness.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:179,Modifiability,extend,extend,179,"// An extract element return value type can be wider than its vector; // operand element type. In that case, the high bits are undefined, so; // it's possible that we may need to extend rather than truncate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:88,Performance,perform,perform,88,"// Transform: (EXTRACT_VECTOR_ELT( VECTOR_SHUFFLE )) -> EXTRACT_VECTOR_ELT.; // We only perform this optimization before the op legalization phase because; // we may introduce new vector instructions which are not backed by TD; // patterns. For example on AVX, extracting elements from a wide vector; // without using extract_subvector. However, if we can find an underlying; // scalar value, then we can always use that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:101,Performance,optimiz,optimization,101,"// Transform: (EXTRACT_VECTOR_ELT( VECTOR_SHUFFLE )) -> EXTRACT_VECTOR_ELT.; // We only perform this optimization before the op legalization phase because; // we may introduce new vector instructions which are not backed by TD; // patterns. For example on AVX, extracting elements from a wide vector; // without using extract_subvector. However, if we can find an underlying; // scalar value, then we can always use that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:69,Usability,simpl,simplify,69,// If only EXTRACT_VECTOR_ELT nodes use the source vector we can; // simplify it based on the (valid) extraction indices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:6,Usability,simpl,simplified,6,"// We simplified the vector operand of this extract element. If this; // extract is not dead, visit it again so it is folded properly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:6,Usability,simpl,simplified,6,"// We simplified the vector operand of this extract element. If this; // extract is not dead, visit it again so it is folded properly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:60,Performance,load,loaded,60,"// Everything under here is trying to match an extract of a loaded value.; // If the result of load has to be truncated, then it's not necessarily; // profitable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:95,Performance,load,load,95,"// Everything under here is trying to match an extract of a loaded value.; // If the result of load has to be truncated, then it's not necessarily; // profitable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,Performance,load,load,21,// Don't duplicate a load with other uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:19,Performance,load,load,19,"// extract (vector load $addr), i --> load $addr + i * size",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:38,Performance,load,load,38,"// extract (vector load $addr), i --> load $addr + i * size",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Performance,Perform,Perform,3,// Perform only after legalization to ensure build_vector / vector_shuffle; // optimizations have already been done.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:79,Performance,optimiz,optimizations,79,// Perform only after legalization to ensure build_vector / vector_shuffle; // optimizations have already been done.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:20,Performance,load,load,20,"// (vextract (v4f32 load $addr), c) -> (f32 load $addr+c*size); // (vextract (v4f32 s2v (f32 load $addr)), c) -> (f32 load $addr+c*size); // (vextract (v4f32 shuffle (load $addr), <1,u,u,u>), 0) -> (f32 load $addr)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:44,Performance,load,load,44,"// (vextract (v4f32 load $addr), c) -> (f32 load $addr+c*size); // (vextract (v4f32 s2v (f32 load $addr)), c) -> (f32 load $addr+c*size); // (vextract (v4f32 shuffle (load $addr), <1,u,u,u>), 0) -> (f32 load $addr)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:93,Performance,load,load,93,"// (vextract (v4f32 load $addr), c) -> (f32 load $addr+c*size); // (vextract (v4f32 s2v (f32 load $addr)), c) -> (f32 load $addr+c*size); // (vextract (v4f32 shuffle (load $addr), <1,u,u,u>), 0) -> (f32 load $addr)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:118,Performance,load,load,118,"// (vextract (v4f32 load $addr), c) -> (f32 load $addr+c*size); // (vextract (v4f32 s2v (f32 load $addr)), c) -> (f32 load $addr+c*size); // (vextract (v4f32 shuffle (load $addr), <1,u,u,u>), 0) -> (f32 load $addr)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:167,Performance,load,load,167,"// (vextract (v4f32 load $addr), c) -> (f32 load $addr+c*size); // (vextract (v4f32 s2v (f32 load $addr)), c) -> (f32 load $addr+c*size); // (vextract (v4f32 shuffle (load $addr), <1,u,u,u>), 0) -> (f32 load $addr)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:203,Performance,load,load,203,"// (vextract (v4f32 load $addr), c) -> (f32 load $addr+c*size); // (vextract (v4f32 s2v (f32 load $addr)), c) -> (f32 load $addr+c*size); // (vextract (v4f32 shuffle (load $addr), <1,u,u,u>), 0) -> (f32 load $addr)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,Performance,load,load,21,// Don't duplicate a load with other uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:30,Performance,load,load,30,"// (vextract (vector_shuffle (load $addr), v2, <1, u, u, u>), 1); // =>; // (load $addr+1*size); // Don't duplicate a load with other uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:77,Performance,load,load,77,"// (vextract (vector_shuffle (load $addr), v2, <1, u, u, u>), 1); // =>; // (load $addr+1*size); // Don't duplicate a load with other uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:118,Performance,load,load,118,"// (vextract (vector_shuffle (load $addr), v2, <1, u, u, u>), 1); // =>; // (load $addr+1*size); // Don't duplicate a load with other uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:86,Availability,mask,mask,86,"// If the bit convert changed the number of elements, it is unsafe; // to examine the mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:60,Safety,unsafe,unsafe,60,"// If the bit convert changed the number of elements, it is unsafe; // to examine the mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,Performance,load,load,21,// Don't duplicate a load with other uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:37,Performance,load,load,37,// Make sure we found a non-volatile load and the extractelement is; // the only use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Usability,Simpl,Simplify,3,// Simplify (build_vec (ext )) to (bitcast (build_vec )),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:6,Performance,perform,perform,6,// We perform this optimization post type-legalization because; // the type-legalizer often scalarizes integer-promoted vectors.; // Performing this optimization before may create bit-casts which; // will be type-legalized to complex code sequences.; // We perform this optimization only before the operation legalizer because we; // may introduce illegal operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:19,Performance,optimiz,optimization,19,// We perform this optimization post type-legalization because; // the type-legalizer often scalarizes integer-promoted vectors.; // Performing this optimization before may create bit-casts which; // will be type-legalized to complex code sequences.; // We perform this optimization only before the operation legalizer because we; // may introduce illegal operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:133,Performance,Perform,Performing,133,// We perform this optimization post type-legalization because; // the type-legalizer often scalarizes integer-promoted vectors.; // Performing this optimization before may create bit-casts which; // will be type-legalized to complex code sequences.; // We perform this optimization only before the operation legalizer because we; // may introduce illegal operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:149,Performance,optimiz,optimization,149,// We perform this optimization post type-legalization because; // the type-legalizer often scalarizes integer-promoted vectors.; // Performing this optimization before may create bit-casts which; // will be type-legalized to complex code sequences.; // We perform this optimization only before the operation legalizer because we; // may introduce illegal operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:257,Performance,perform,perform,257,// We perform this optimization post type-legalization because; // the type-legalizer often scalarizes integer-promoted vectors.; // Performing this optimization before may create bit-casts which; // will be type-legalized to complex code sequences.; // We perform this optimization only before the operation legalizer because we; // may introduce illegal operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:270,Performance,optimiz,optimization,270,// We perform this optimization post type-legalization because; // the type-legalizer often scalarizes integer-promoted vectors.; // Performing this optimization before may create bit-casts which; // will be type-legalized to complex code sequences.; // We perform this optimization only before the operation legalizer because we; // may introduce illegal operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:253,Modifiability,extend,extend,253,"// Check to see if this is a BUILD_VECTOR of a bunch of values; // which come from any_extend or zero_extend nodes. If so, we can create; // a new BUILD_VECTOR using bit-casts which may enable other BUILD_VECTOR; // optimizations. We do not handle sign-extend because we can't fill the sign; // using shuffles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:216,Performance,optimiz,optimizations,216,"// Check to see if this is a BUILD_VECTOR of a bunch of values; // which come from any_extend or zero_extend nodes. If so, we can create; // a new BUILD_VECTOR using bit-casts which may enable other BUILD_VECTOR; // optimizations. We do not handle sign-extend because we can't fill the sign; // using shuffles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Safety,Abort,Abort,3,// Abort if the element is not an extension.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,Safety,Abort,Abort,26,// Multiple income types. Abort.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:23,Modifiability,extend,extends,23,// Check if all of the extends are ANY_EXTENDs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:175,Energy Efficiency,power,power,175,"// In order to have valid types, all of the inputs must be extended from the; // same source type and all of the inputs must be any or zero extend.; // Scalar sizes must be a power of two.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:59,Modifiability,extend,extended,59,"// In order to have valid types, all of the inputs must be extended from the; // same source type and all of the inputs must be any or zero extend.; // Scalar sizes must be a power of two.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:140,Modifiability,extend,extend,140,"// In order to have valid types, all of the inputs must be extended from the; // same source type and all of the inputs must be any or zero extend.; // Scalar sizes must be a power of two.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:58,Performance,optimiz,optimizations,58,// Create a new simpler BUILD_VECTOR sequence which other optimizations can; // turn into a single shuffle instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:16,Usability,simpl,simpler,16,// Create a new simpler BUILD_VECTOR sequence which other optimizations can; // turn into a single shuffle instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:61,Performance,optimiz,optimized,61,// The new BUILD_VECTOR node has the potential to be further optimized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Usability,Simpl,Simplify,3,// Simplify (build_vec (trunc $1); // (trunc (srl $1 half-width)); // (trunc (srl $1 (2 * half-width)))); // to (bitcast $1),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:12,Energy Efficiency,power,power,12,// Only for power of two types to be sure that bitcast works well,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:42,Modifiability,variab,variable,42,// Vector parts do not stem from the same variable,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,Availability,mask,mask,14,// Initialize mask to undef.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:76,Modifiability,extend,extend,76,"// First, determine where the build vector is not undef.; // TODO: We could extend this to handle zero elements as well as undefs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:128,Modifiability,extend,extended,128,"// The build vector contains some number of undef elements and exactly; // one other element. That other element must be a zero-extended scalar; // extracted from a vector at a constant index to turn this into a shuffle.; // Also, require that the build vector does not implicitly truncate/extend; // its elements.; // TODO: This could be enhanced to allow ANY_EXTEND as well as ZERO_EXTEND.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:290,Modifiability,extend,extend,290,"// The build vector contains some number of undef elements and exactly; // one other element. That other element must be a zero-extended scalar; // extracted from a vector at a constant index to turn this into a shuffle.; // Also, require that the build vector does not implicitly truncate/extend; // its elements.; // TODO: This could be enhanced to allow ANY_EXTEND as well as ZERO_EXTEND.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:339,Modifiability,enhance,enhanced,339,"// The build vector contains some number of undef elements and exactly; // one other element. That other element must be a zero-extended scalar; // extracted from a vector at a constant index to turn this into a shuffle.; // Also, require that the build vector does not implicitly truncate/extend; // its elements.; // TODO: This could be enhanced to allow ANY_EXTEND as well as ZERO_EXTEND.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:12,Modifiability,extend,extend,12,"// The zero-extend must be a multiple of the source size, and we must be; // building a vector of the same size as the source of the extract element.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:20,Availability,mask,mask,20,// Create a shuffle mask that will combine the extracted element with zeros; // and undefs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:238,Availability,mask,mask,238,"// The low bits of the (potentially translated) extracted element map to; // the source vector. The high bits map to zero. We will use a zero vector; // as the 2nd source operand of the shuffle, so use the 1st element of; // that vector (mask value is number-of-elements) for the high bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:89,Availability,mask,mask,89,// Undef elements of the build vector remain undef because we initialize; // the shuffle mask with -1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:91,Energy Efficiency,efficient,efficiently,91,"// If all the Operands of BUILD_VECTOR extract from same; // vector, then split the vector efficiently based on the maximum; // vector access index and adjust the VectorMask and; // VecIn accordingly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:135,Security,access,access,135,"// If all the Operands of BUILD_VECTOR extract from same; // vector, then split the vector efficiently based on the maximum; // vector access index and adjust the VectorMask and; // VecIn accordingly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,Availability,mask,mask,21,// Update the vector mask to point to the post-shuffle vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Deployability,Update,Update,3,// Update the vector mask to point to the post-shuffle vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:38,Modifiability,extend,extends,38,// Try to turn a build vector of zero extends of extract vector elts into a; // a vector zero extend and possibly an extract subvector.; // TODO: Support sign extend?; // TODO: Allow undef elements?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:94,Modifiability,extend,extend,94,// Try to turn a build vector of zero extends of extract vector elts into a; // a vector zero extend and possibly an extract subvector.; // TODO: Support sign extend?; // TODO: Allow undef elements?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:159,Modifiability,extend,extend,159,// Try to turn a build vector of zero extends of extract vector elts into a; // a vector zero extend and possibly an extract subvector.; // TODO: Support sign extend?; // TODO: Allow undef elements?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,Usability,simpl,simple,21,"// If this is a very simple BUILD_VECTOR with first element being a ZERO_EXTEND,; // and all other elements being constant zero's, granularize the BUILD_VECTOR's; // element width, absorbing the ZERO_EXTEND, turning it into a constant zero op.; // This patten can appear during legalization.; //; // NOTE: This can be generalized to allow more than a single; // non-constant-zero op, UNDEF's, and to be KnownBits-based,",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:60,Performance,scalab,scalable,60,// We currently can't generate an appropriate shuffle for a scalable vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:40,Availability,mask,mask,40,// UNDEF nodes convert to UNDEF shuffle mask values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:40,Availability,mask,mask,40,// UNDEF nodes convert to UNDEF shuffle mask values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:116,Integrability,depend,depends,116,"// The wider cast must be supported by the target. This is unusual because; // the operation support type parameter depends on the opcode. In addition,; // check the other type in the cast to make sure this is really legal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:20,Usability,simpl,simple,20,"// See if this is a simple CONCAT_VECTORS with no UNDEF operands, and if one of; // the operands is a SHUFFLE_VECTOR, and all other operands are also operands; // to that SHUFFLE_VECTOR, create wider SHUFFLE_VECTOR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:23,Usability,simpl,simple,23,"// For now, only allow simple 2-operand concatenations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:12,Availability,mask,masks,12,// Identity masks for the operands of the (padded) shuffle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:24,Availability,mask,mask,24,// New combined shuffle mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:32,Availability,mask,masks,32,// Don't create illegal shuffle masks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Performance,Optimiz,Optimize,3,// Optimize concat_vectors where all but the first of the vectors are undef.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:334,Performance,scalab,scalable,334,"// If the input is a concat_vectors, just make a larger concat by padding; // with smaller undefs.; //; // Legalizing in AArch64TargetLowering::LowerCONCAT_VECTORS() and combining; // here could cause an infinite loop. That legalizing happens when LegalDAG; // is true and input of AArch64TargetLowering::LowerCONCAT_VECTORS() is; // scalable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:98,Testability,test,tested,98,"// Fold any combination of BUILD_VECTOR or UNDEF nodes into one BUILD_VECTOR.; // We have already tested above for an UNDEF only concatenation.; // fold (concat_vectors (BUILD_VECTOR A, B, ...), (BUILD_VECTOR C, D, ...)); // -> (BUILD_VECTOR A, B, ..., C, D, ...)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:270,Performance,scalab,scalable,270,"// Type legalization of vectors and DAG canonicalization of SHUFFLE_VECTOR; // nodes often generate nop CONCAT_VECTOR nodes. Scan the CONCAT_VECTOR; // operands and look for a CONCAT operations that place the incoming vectors; // at the exact same location.; //; // For scalable vectors, EXTRACT_SUBVECTOR indexes are implicitly scaled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:92,Modifiability,extend,extend,92,"// Check the source type is the same as the type of the result.; // If not, this concat may extend the vector, so we can not; // optimize it away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:129,Performance,optimiz,optimize,129,"// Check the source type is the same as the type of the result.; // If not, this concat may extend the vector, so we can not; // optimize it away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:120,Safety,avoid,avoid,120,/// If we are extracting a subvector produced by a wide binary operator try; /// to use a narrow binary operator and/or avoid concatenation and extraction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:9,Modifiability,Refactor,Refactor,9,"// TODO: Refactor with the caller (visitEXTRACT_SUBVECTOR), so we can share; // some of these bailouts with other transforms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:81,Energy Efficiency,reduce,reduced,81,"// Exclude the fake form of fneg (fsub -0.0, x) because that is likely to be; // reduced to the unary fneg when it is visited, and we probably want to deal; // with fneg in a target-specific way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:124,Performance,scalab,scalable,124,"// The optimisations below currently assume we are dealing with fixed length; // vectors. It is possible to add support for scalable vectors, but at the; // moment we've done no analysis to prove whether they are profitable or not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:221,Modifiability,extend,extended,221,"// TODO: The motivating case for this transform is an x86 AVX1 target. That; // target has temptingly almost legal versions of bitwise logic ops in 256-bit; // flavors, but no other 256-bit integer support. This could be extended to; // handle any binop, but that may require fixing/adding other folds to avoid; // codegen regressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:305,Safety,avoid,avoid,305,"// TODO: The motivating case for this transform is an x86 AVX1 target. That; // target has temptingly almost legal versions of bitwise logic ops in 256-bit; // flavors, but no other 256-bit integer support. This could be extended to; // handle any binop, but that may require fixing/adding other folds to avoid; // codegen regressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:135,Testability,log,logic,135,"// TODO: The motivating case for this transform is an x86 AVX1 target. That; // target has temptingly almost legal versions of bitwise logic ops in 256-bit; // flavors, but no other 256-bit integer support. This could be extended to; // handle any binop, but that may require fixing/adding other folds to avoid; // codegen regressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:56,Performance,load,load,56,"/// If we are extracting a subvector from a wide vector load, convert to a; /// narrow load to eliminate the extraction:; /// (extract_subvector (load wide vector)) --> (load narrow vector)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:87,Performance,load,load,87,"/// If we are extracting a subvector from a wide vector load, convert to a; /// narrow load to eliminate the extraction:; /// (extract_subvector (load wide vector)) --> (load narrow vector)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:146,Performance,load,load,146,"/// If we are extracting a subvector from a wide vector load, convert to a; /// narrow load to eliminate the extraction:; /// (extract_subvector (load wide vector)) --> (load narrow vector)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:170,Performance,load,load,170,"/// If we are extracting a subvector from a wide vector load, convert to a; /// narrow load to eliminate the extraction:; /// (extract_subvector (load wide vector)) --> (load narrow vector)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:33,Performance,load,loads,33,// We can only create byte sized loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:48,Performance,scalab,scalable,48,// A fixed length vector being extracted from a scalable vector; // may not be any *smaller* than the scalable one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:102,Performance,scalab,scalable,102,// A fixed length vector being extracted from a scalable vector; // may not be any *smaller* than the scalable one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,Performance,load,load,14,// The narrow load will be offset from the base address of the old load if; // we are extracting from something besides index 0 (little-endian).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:67,Performance,load,load,67,// The narrow load will be offset from the base address of the old load if; // we are extracting from something besides index 0 (little-endian).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:53,Availability,Mask,Mask,53,"/// Given EXTRACT_SUBVECTOR(VECTOR_SHUFFLE(Op0, Op1, Mask)),; /// try to produce VECTOR_SHUFFLE(EXTRACT_SUBVECTOR(Op?, ?),; /// EXTRACT_SUBVECTOR(Op?, ?),; /// Mask')); /// iff it is legal and profitable to do so. Notably, the trimmed mask; /// (containing only the elements that are extracted); /// must reference at most two subvectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:160,Availability,Mask,Mask,160,"/// Given EXTRACT_SUBVECTOR(VECTOR_SHUFFLE(Op0, Op1, Mask)),; /// try to produce VECTOR_SHUFFLE(EXTRACT_SUBVECTOR(Op?, ?),; /// EXTRACT_SUBVECTOR(Op?, ?),; /// Mask')); /// iff it is legal and profitable to do so. Notably, the trimmed mask; /// (containing only the elements that are extracted); /// must reference at most two subvectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:235,Availability,mask,mask,235,"/// Given EXTRACT_SUBVECTOR(VECTOR_SHUFFLE(Op0, Op1, Mask)),; /// try to produce VECTOR_SHUFFLE(EXTRACT_SUBVECTOR(Op?, ?),; /// EXTRACT_SUBVECTOR(Op?, ?),; /// Mask')); /// iff it is legal and profitable to do so. Notably, the trimmed mask; /// (containing only the elements that are extracted); /// must reference at most two subvectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22,Performance,scalab,scalable,22,// Only deal with non-scalable vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,Availability,mask,mask,26,// Try to decode the wide mask into narrow mask from at most two subvectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:43,Availability,mask,mask,43,// Try to decode the wide mask into narrow mask from at most two subvectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:12,Integrability,depend,depend,12,"// Does not depend on operands, does not require adjustment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:55,Availability,mask,mask,55,// From which operand of the shuffle does this shuffle mask element pick?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:47,Availability,mask,mask,47,// Picking from an undef operand. Let's adjust mask instead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:54,Integrability,depend,depend,54,// Did we discover that the shuffle does not actually depend on operands?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:91,Availability,mask,mask,91,// Profitability check: only deal with extractions from the first subvector; // unless the mask becomes an identity mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:116,Availability,mask,mask,116,// Profitability check: only deal with extractions from the first subvector; // unless the mask becomes an identity mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:12,Performance,perform,perform,12,"// We still perform the exact same EXTRACT_SUBVECTOR, just on different; // operand[s]/index[es], so there is no point in checking for it's legality.; // Do not turn a legal shuffle into an illegal one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:74,Usability,simpl,simplification,74,"// If the concatenated source types match this extract, it's a direct; // simplification:; // extract_subvec (concat V1, V2, ...), i --> Vi",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:15,Usability,simpl,simple,15,// Handle only simple case where vector being inserted and vector; // being extracted are of same size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:147,Performance,perform,performance,147,"/// Try to convert a wide shuffle of concatenated vectors into 2 narrow shuffles; /// followed by concatenation. Narrow vector ops may have better performance; /// than wide ops, and this can unlock further narrowing of other vector ops.; /// Targets can invert this transform later if it is not profitable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,Availability,mask,mask,26,// Split the wide shuffle mask into halves. Any mask element that is accessing; // operand 1 is offset down to account for narrowing of the vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:48,Availability,mask,mask,48,// Split the wide shuffle mask into halves. Any mask element that is accessing; // operand 1 is offset down to account for narrowing of the vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:103,Availability,down,down,103,// Split the wide shuffle mask into halves. Any mask element that is accessing; // operand 1 is offset down to account for narrowing of the vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:69,Security,access,accessing,69,// Split the wide shuffle mask into halves. Any mask element that is accessing; // operand 1 is offset down to account for narrowing of the vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,Availability,Mask,Mask,49,"// shuffle (concat X, undef), (concat Y, undef), Mask -->; // concat (shuffle X, Y, Mask0), (shuffle X, Y, Mask1)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:117,Usability,simpl,simpler,117,"// Tries to turn a shuffle of two CONCAT_VECTORS into a single concat,; // or turn a shuffle of a single concat into simpler shuffle then concat.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:50,Energy Efficiency,efficient,efficiently,50,"// Special case: shuffle(concat(A,B)) can be more efficiently represented; // as concat(shuffle(A,B),UNDEF) if the shuffle doesn't set any of the high; // half vector elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:481,Modifiability,variab,variable,481,"// Attempt to combine a shuffle of 2 inputs of 'scalar sources' -; // BUILD_VECTOR or SCALAR_TO_VECTOR into a single BUILD_VECTOR.; //; // SHUFFLE(BUILD_VECTOR(), BUILD_VECTOR()) -> BUILD_VECTOR() is always; // a simplification in some sense, but it isn't appropriate in general: some; // BUILD_VECTORs are substantially cheaper than others. The general case; // of a BUILD_VECTOR requires inserting each element individually (or; // performing the equivalent in a temporary stack variable). A BUILD_VECTOR of; // all constants is a single constant pool load. A BUILD_VECTOR where each; // element is identical is a splat. A BUILD_VECTOR where most of the operands; // are undef lowers to a small number of element insertions.; //; // To deal with this, we currently use a bunch of mostly arbitrary heuristics.; // We don't fold shuffles where one side is a non-zero constant, and we don't; // fold shuffles if the resulting (non-splat) BUILD_VECTOR would have duplicate; // non-constant operands. This seems to work out reasonably well in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:434,Performance,perform,performing,434,"// Attempt to combine a shuffle of 2 inputs of 'scalar sources' -; // BUILD_VECTOR or SCALAR_TO_VECTOR into a single BUILD_VECTOR.; //; // SHUFFLE(BUILD_VECTOR(), BUILD_VECTOR()) -> BUILD_VECTOR() is always; // a simplification in some sense, but it isn't appropriate in general: some; // BUILD_VECTORs are substantially cheaper than others. The general case; // of a BUILD_VECTOR requires inserting each element individually (or; // performing the equivalent in a temporary stack variable). A BUILD_VECTOR of; // all constants is a single constant pool load. A BUILD_VECTOR where each; // element is identical is a splat. A BUILD_VECTOR where most of the operands; // are undef lowers to a small number of element insertions.; //; // To deal with this, we currently use a bunch of mostly arbitrary heuristics.; // We don't fold shuffles where one side is a non-zero constant, and we don't; // fold shuffles if the resulting (non-splat) BUILD_VECTOR would have duplicate; // non-constant operands. This seems to work out reasonably well in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:554,Performance,load,load,554,"// Attempt to combine a shuffle of 2 inputs of 'scalar sources' -; // BUILD_VECTOR or SCALAR_TO_VECTOR into a single BUILD_VECTOR.; //; // SHUFFLE(BUILD_VECTOR(), BUILD_VECTOR()) -> BUILD_VECTOR() is always; // a simplification in some sense, but it isn't appropriate in general: some; // BUILD_VECTORs are substantially cheaper than others. The general case; // of a BUILD_VECTOR requires inserting each element individually (or; // performing the equivalent in a temporary stack variable). A BUILD_VECTOR of; // all constants is a single constant pool load. A BUILD_VECTOR where each; // element is identical is a splat. A BUILD_VECTOR where most of the operands; // are undef lowers to a small number of element insertions.; //; // To deal with this, we currently use a bunch of mostly arbitrary heuristics.; // We don't fold shuffles where one side is a non-zero constant, and we don't; // fold shuffles if the resulting (non-splat) BUILD_VECTOR would have duplicate; // non-constant operands. This seems to work out reasonably well in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:213,Usability,simpl,simplification,213,"// Attempt to combine a shuffle of 2 inputs of 'scalar sources' -; // BUILD_VECTOR or SCALAR_TO_VECTOR into a single BUILD_VECTOR.; //; // SHUFFLE(BUILD_VECTOR(), BUILD_VECTOR()) -> BUILD_VECTOR() is always; // a simplification in some sense, but it isn't appropriate in general: some; // BUILD_VECTORs are substantially cheaper than others. The general case; // of a BUILD_VECTOR requires inserting each element individually (or; // performing the equivalent in a temporary stack variable). A BUILD_VECTOR of; // all constants is a single constant pool load. A BUILD_VECTOR where each; // element is identical is a splat. A BUILD_VECTOR where most of the operands; // are undef lowers to a small number of element insertions.; //; // To deal with this, we currently use a bunch of mostly arbitrary heuristics.; // We don't fold shuffles where one side is a non-zero constant, and we don't; // fold shuffles if the resulting (non-splat) BUILD_VECTOR would have duplicate; // non-constant operands. This seems to work out reasonably well in practice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:147,Availability,mask,mask,147,// If both inputs are splats of the same value then we can safely merge this; // to a single BUILD_VECTOR with undef elements based on the shuffle mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:59,Safety,safe,safely,59,// If both inputs are splats of the same value then we can safely merge this; // to a single BUILD_VECTOR with undef elements based on the shuffle mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:90,Modifiability,extend,extend,90,"// BUILD_VECTOR requires all inputs to be of the same type, find the; // maximum type and extend them all.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:246,Performance,perform,performed,246,"// Match shuffles that can be converted to *_vector_extend_in_reg.; // This is often generated during legalization.; // e.g. v4i32 <0,u,1,u> -> (v2i64 any_vector_extend_in_reg(v4i32 src)),; // and returns the EVT to which the extension should be performed.; // NOTE: this assumes that the src is the first operand of the shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:50,Testability,test,test,50,// TODO Add support for big-endian when we have a test case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:78,Energy Efficiency,power,power-of-,78,"// Attempt to match a '*_extend_vector_inreg' shuffle, we just search for; // power-of-2 extensions as they are the most likely.; // FIXME: should try Scale == NumElts case too,",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:50,Testability,test,test,50,// TODO Add support for big-endian when we have a test case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:51,Testability,test,test,51,// TODO: add support for big-endian when we have a test case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:54,Availability,mask,mask,54,"// Manifest zeroable element knowledge in the shuffle mask.; // NOTE: we don't have 'zeroable' sentinel value in generic DAG,; // this is a local invention, but it won't leak into DAG.; // FIXME: should we not manifest them, but just check when matching?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:60,Availability,mask,mask,60,"// Don't proceed unless we've refined at least one zeroable mask indice.; // If we didn't, then we are still trying to match the same shuffle mask; // we previously tried to match as ISD::ANY_EXTEND_VECTOR_INREG,; // and evidently failed. Proceeding will lead to endless combine loops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:142,Availability,mask,mask,142,"// Don't proceed unless we've refined at least one zeroable mask indice.; // If we didn't, then we are still trying to match the same shuffle mask; // we previously tried to match as ISD::ANY_EXTEND_VECTOR_INREG,; // and evidently failed. Proceeding will lead to endless combine loops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:141,Availability,mask,mask,141,// The shuffle may be more fine-grained than we want. Widen elements first.; // FIXME: should we do this before manifesting zeroable shuffle mask indices?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:23,Availability,mask,mask,23,// Analyze the shuffle mask in Scale-sized chunks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Safety,Detect,Detect,3,// Detect 'truncate_vector_inreg' style shuffles that pack the lower parts of; // each source element of a large type into the lowest elements of a smaller; // destination type. This is often generated during legalization.; // If the source node itself was a '*_extend_vector_inreg' node then we should; // then be able to remove it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:50,Testability,test,test,50,// TODO Add support for big-endian when we have a test case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:88,Availability,mask,mask,88,"// Combine shuffles of splat-shuffles of the form:; // shuffle (shuffle V, undef, splat-mask), undef, M; // If splat-mask contains undef elements, we need to be careful about; // introducing undef's in the folded mask which are not the result of composing; // the masks of the shuffles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:117,Availability,mask,mask,117,"// Combine shuffles of splat-shuffles of the form:; // shuffle (shuffle V, undef, splat-mask), undef, M; // If splat-mask contains undef elements, we need to be careful about; // introducing undef's in the folded mask which are not the result of composing; // the masks of the shuffles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:213,Availability,mask,mask,213,"// Combine shuffles of splat-shuffles of the form:; // shuffle (shuffle V, undef, splat-mask), undef, M; // If splat-mask contains undef elements, we need to be careful about; // introducing undef's in the folded mask which are not the result of composing; // the masks of the shuffles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:264,Availability,mask,masks,264,"// Combine shuffles of splat-shuffles of the form:; // shuffle (shuffle V, undef, splat-mask), undef, M; // If splat-mask contains undef elements, we need to be careful about; // introducing undef's in the folded mask which are not the result of composing; // the masks of the shuffles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:114,Availability,mask,mask,114,"// If the inner operand is a known splat with no undefs, just return that directly.; // TODO: Create DemandedElts mask from Shuf's mask.; // TODO: Allow undef elements and merge with the shuffle code below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:131,Availability,mask,mask,131,"// If the inner operand is a known splat with no undefs, just return that directly.; // TODO: Create DemandedElts mask from Shuf's mask.; // TODO: Allow undef elements and merge with the shuffle code below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:90,Availability,mask,mask,90,"// Prefer simplifying to the splat-shuffle, if possible. This is legal if; // every undef mask element in the splat-shuffle has a corresponding undef; // element in the user-shuffle's mask or if the composition of mask elements; // would result in undef.; // Examples for (shuffle (shuffle v, undef, SplatMask), undef, UserMask):; // * UserMask=[0,2,u,u], SplatMask=[2,u,2,u] -> [2,2,u,u]; // In this case it is not legal to simplify to the splat-shuffle because we; // may be exposing the users of the shuffle an undef element at index 1; // which was not there before the combine.; // * UserMask=[0,u,2,u], SplatMask=[2,u,2,u] -> [2,u,2,u]; // In this case the composition of masks yields SplatMask, so it's ok to; // simplify to the splat-shuffle.; // * UserMask=[3,u,2,u], SplatMask=[2,u,2,u] -> [u,u,2,u]; // In this case the composed mask includes all undef elements of SplatMask; // and in addition sets element zero to undef. It is safe to simplify to; // the splat-shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:184,Availability,mask,mask,184,"// Prefer simplifying to the splat-shuffle, if possible. This is legal if; // every undef mask element in the splat-shuffle has a corresponding undef; // element in the user-shuffle's mask or if the composition of mask elements; // would result in undef.; // Examples for (shuffle (shuffle v, undef, SplatMask), undef, UserMask):; // * UserMask=[0,2,u,u], SplatMask=[2,u,2,u] -> [2,2,u,u]; // In this case it is not legal to simplify to the splat-shuffle because we; // may be exposing the users of the shuffle an undef element at index 1; // which was not there before the combine.; // * UserMask=[0,u,2,u], SplatMask=[2,u,2,u] -> [2,u,2,u]; // In this case the composition of masks yields SplatMask, so it's ok to; // simplify to the splat-shuffle.; // * UserMask=[3,u,2,u], SplatMask=[2,u,2,u] -> [u,u,2,u]; // In this case the composed mask includes all undef elements of SplatMask; // and in addition sets element zero to undef. It is safe to simplify to; // the splat-shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:214,Availability,mask,mask,214,"// Prefer simplifying to the splat-shuffle, if possible. This is legal if; // every undef mask element in the splat-shuffle has a corresponding undef; // element in the user-shuffle's mask or if the composition of mask elements; // would result in undef.; // Examples for (shuffle (shuffle v, undef, SplatMask), undef, UserMask):; // * UserMask=[0,2,u,u], SplatMask=[2,u,2,u] -> [2,2,u,u]; // In this case it is not legal to simplify to the splat-shuffle because we; // may be exposing the users of the shuffle an undef element at index 1; // which was not there before the combine.; // * UserMask=[0,u,2,u], SplatMask=[2,u,2,u] -> [2,u,2,u]; // In this case the composition of masks yields SplatMask, so it's ok to; // simplify to the splat-shuffle.; // * UserMask=[3,u,2,u], SplatMask=[2,u,2,u] -> [u,u,2,u]; // In this case the composed mask includes all undef elements of SplatMask; // and in addition sets element zero to undef. It is safe to simplify to; // the splat-shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:678,Availability,mask,masks,678,"// Prefer simplifying to the splat-shuffle, if possible. This is legal if; // every undef mask element in the splat-shuffle has a corresponding undef; // element in the user-shuffle's mask or if the composition of mask elements; // would result in undef.; // Examples for (shuffle (shuffle v, undef, SplatMask), undef, UserMask):; // * UserMask=[0,2,u,u], SplatMask=[2,u,2,u] -> [2,2,u,u]; // In this case it is not legal to simplify to the splat-shuffle because we; // may be exposing the users of the shuffle an undef element at index 1; // which was not there before the combine.; // * UserMask=[0,u,2,u], SplatMask=[2,u,2,u] -> [2,u,2,u]; // In this case the composition of masks yields SplatMask, so it's ok to; // simplify to the splat-shuffle.; // * UserMask=[3,u,2,u], SplatMask=[2,u,2,u] -> [u,u,2,u]; // In this case the composed mask includes all undef elements of SplatMask; // and in addition sets element zero to undef. It is safe to simplify to; // the splat-shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:840,Availability,mask,mask,840,"// Prefer simplifying to the splat-shuffle, if possible. This is legal if; // every undef mask element in the splat-shuffle has a corresponding undef; // element in the user-shuffle's mask or if the composition of mask elements; // would result in undef.; // Examples for (shuffle (shuffle v, undef, SplatMask), undef, UserMask):; // * UserMask=[0,2,u,u], SplatMask=[2,u,2,u] -> [2,2,u,u]; // In this case it is not legal to simplify to the splat-shuffle because we; // may be exposing the users of the shuffle an undef element at index 1; // which was not there before the combine.; // * UserMask=[0,u,2,u], SplatMask=[2,u,2,u] -> [2,u,2,u]; // In this case the composition of masks yields SplatMask, so it's ok to; // simplify to the splat-shuffle.; // * UserMask=[3,u,2,u], SplatMask=[2,u,2,u] -> [u,u,2,u]; // In this case the composed mask includes all undef elements of SplatMask; // and in addition sets element zero to undef. It is safe to simplify to; // the splat-shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:940,Safety,safe,safe,940,"// Prefer simplifying to the splat-shuffle, if possible. This is legal if; // every undef mask element in the splat-shuffle has a corresponding undef; // element in the user-shuffle's mask or if the composition of mask elements; // would result in undef.; // Examples for (shuffle (shuffle v, undef, SplatMask), undef, UserMask):; // * UserMask=[0,2,u,u], SplatMask=[2,u,2,u] -> [2,2,u,u]; // In this case it is not legal to simplify to the splat-shuffle because we; // may be exposing the users of the shuffle an undef element at index 1; // which was not there before the combine.; // * UserMask=[0,u,2,u], SplatMask=[2,u,2,u] -> [2,u,2,u]; // In this case the composition of masks yields SplatMask, so it's ok to; // simplify to the splat-shuffle.; // * UserMask=[3,u,2,u], SplatMask=[2,u,2,u] -> [u,u,2,u]; // In this case the composed mask includes all undef elements of SplatMask; // and in addition sets element zero to undef. It is safe to simplify to; // the splat-shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Usability,simpl,simplifying,10,"// Prefer simplifying to the splat-shuffle, if possible. This is legal if; // every undef mask element in the splat-shuffle has a corresponding undef; // element in the user-shuffle's mask or if the composition of mask elements; // would result in undef.; // Examples for (shuffle (shuffle v, undef, SplatMask), undef, UserMask):; // * UserMask=[0,2,u,u], SplatMask=[2,u,2,u] -> [2,2,u,u]; // In this case it is not legal to simplify to the splat-shuffle because we; // may be exposing the users of the shuffle an undef element at index 1; // which was not there before the combine.; // * UserMask=[0,u,2,u], SplatMask=[2,u,2,u] -> [2,u,2,u]; // In this case the composition of masks yields SplatMask, so it's ok to; // simplify to the splat-shuffle.; // * UserMask=[3,u,2,u], SplatMask=[2,u,2,u] -> [u,u,2,u]; // In this case the composed mask includes all undef elements of SplatMask; // and in addition sets element zero to undef. It is safe to simplify to; // the splat-shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:425,Usability,simpl,simplify,425,"// Prefer simplifying to the splat-shuffle, if possible. This is legal if; // every undef mask element in the splat-shuffle has a corresponding undef; // element in the user-shuffle's mask or if the composition of mask elements; // would result in undef.; // Examples for (shuffle (shuffle v, undef, SplatMask), undef, UserMask):; // * UserMask=[0,2,u,u], SplatMask=[2,u,2,u] -> [2,2,u,u]; // In this case it is not legal to simplify to the splat-shuffle because we; // may be exposing the users of the shuffle an undef element at index 1; // which was not there before the combine.; // * UserMask=[0,u,2,u], SplatMask=[2,u,2,u] -> [2,u,2,u]; // In this case the composition of masks yields SplatMask, so it's ok to; // simplify to the splat-shuffle.; // * UserMask=[3,u,2,u], SplatMask=[2,u,2,u] -> [u,u,2,u]; // In this case the composed mask includes all undef elements of SplatMask; // and in addition sets element zero to undef. It is safe to simplify to; // the splat-shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:720,Usability,simpl,simplify,720,"// Prefer simplifying to the splat-shuffle, if possible. This is legal if; // every undef mask element in the splat-shuffle has a corresponding undef; // element in the user-shuffle's mask or if the composition of mask elements; // would result in undef.; // Examples for (shuffle (shuffle v, undef, SplatMask), undef, UserMask):; // * UserMask=[0,2,u,u], SplatMask=[2,u,2,u] -> [2,2,u,u]; // In this case it is not legal to simplify to the splat-shuffle because we; // may be exposing the users of the shuffle an undef element at index 1; // which was not there before the combine.; // * UserMask=[0,u,2,u], SplatMask=[2,u,2,u] -> [2,u,2,u]; // In this case the composition of masks yields SplatMask, so it's ok to; // simplify to the splat-shuffle.; // * UserMask=[3,u,2,u], SplatMask=[2,u,2,u] -> [u,u,2,u]; // In this case the composed mask includes all undef elements of SplatMask; // and in addition sets element zero to undef. It is safe to simplify to; // the splat-shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:948,Usability,simpl,simplify,948,"// Prefer simplifying to the splat-shuffle, if possible. This is legal if; // every undef mask element in the splat-shuffle has a corresponding undef; // element in the user-shuffle's mask or if the composition of mask elements; // would result in undef.; // Examples for (shuffle (shuffle v, undef, SplatMask), undef, UserMask):; // * UserMask=[0,2,u,u], SplatMask=[2,u,2,u] -> [2,2,u,u]; // In this case it is not legal to simplify to the splat-shuffle because we; // may be exposing the users of the shuffle an undef element at index 1; // which was not there before the combine.; // * UserMask=[0,u,2,u], SplatMask=[2,u,2,u] -> [2,u,2,u]; // In this case the composition of masks yields SplatMask, so it's ok to; // simplify to the splat-shuffle.; // * UserMask=[3,u,2,u], SplatMask=[2,u,2,u] -> [u,u,2,u]; // In this case the composed mask includes all undef elements of SplatMask; // and in addition sets element zero to undef. It is safe to simplify to; // the splat-shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:31,Availability,mask,mask,31,// Create a new shuffle with a mask that is composed of the two shuffles'; // masks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:78,Availability,mask,masks,78,// Create a new shuffle with a mask that is composed of the two shuffles'; // masks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:86,Availability,mask,mask,86,"// Combine shuffles of bitcasts into a shuffle of the bitcast type, providing; // the mask can be treated as a larger type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:41,Availability,mask,mask,41,// Check that each group of lanes in the mask are either undef or make a valid; // mask for the wider lane type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:83,Availability,mask,mask,83,// Check that each group of lanes in the mask are either undef or make a valid; // mask for the wider lane type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,Availability,mask,mask,39,// Create the new shuffle with the new mask and bitcast it back to the; // original type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:28,Availability,mask,masks,28,// Peek through the shuffle masks to get the underlying source element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:48,Availability,mask,mask,48,// TODO: The transform may be a win even if the mask is not legal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:19,Availability,mask,mask,19,"/// If the shuffle mask is taking exactly one element from the first vector; /// operand and passing through all other elements from the second vector; /// operand, return the index of the mask element that is choosing an element; /// from the first operand. Otherwise, return -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:189,Availability,mask,mask,189,"/// If the shuffle mask is taking exactly one element from the first vector; /// operand and passing through all other elements from the second vector; /// operand, return the index of the mask element that is choosing an element; /// from the first operand. Otherwise, return -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:72,Availability,mask,mask,72,"// TODO: This does not match if there are undef elements in the shuffle mask.; // Should we ignore undefs in the shuffle mask instead? The trade-off is; // removing an instruction (a shuffle), but losing the knowledge that some; // vector lanes are not needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:121,Availability,mask,mask,121,"// TODO: This does not match if there are undef elements in the shuffle mask.; // Should we ignore undefs in the shuffle mask instead? The trade-off is; // removing an instruction (a shuffle), but losing the knowledge that some; // vector lanes are not needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:118,Security,access,access,118,"/// If a shuffle inserts exactly one element from a source vector operand into; /// another vector operand and we can access the specified element as a scalar,; /// then we can eliminate the shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:11,Availability,mask,mask,11,// Commute mask and check again.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:50,Availability,mask,mask,50,// Commute operands to match the commuted shuffle mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:96,Security,access,access,96,"// The shuffle inserts exactly one element from operand 0 into operand 1.; // Now see if we can access that element as a scalar via a real insert element; // instruction.; // TODO: We can try harder to locate the element as a scalar. Examples: it; // could be an operand of SCALAR_TO_VECTOR, BUILD_VECTOR, or a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:512,Availability,mask,mask,512,"// There's an existing insertelement with constant insertion index, so we; // don't need to check the legality/profitability of a replacement operation; // that differs at most in the constant value. The target should be able to; // lower any of those in a similar way. If not, legalization will expand this; // to a scalar-to-vector plus shuffle.; //; // Note that the shuffle may move the scalar from the position that the insert; // element used. Therefore, our new insert element occurs at the shuffle's; // mask index value, not the insert's index value.; // shuffle (insertelt v1, x, C), v2, mask --> insertelt v2, x, C'",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:598,Availability,mask,mask,598,"// There's an existing insertelement with constant insertion index, so we; // don't need to check the legality/profitability of a replacement operation; // that differs at most in the constant value. The target should be able to; // lower any of those in a similar way. If not, legalization will expand this; // to a scalar-to-vector plus shuffle.; //; // Note that the shuffle may move the scalar from the position that the insert; // element used. Therefore, our new insert element occurs at the shuffle's; // mask index value, not the insert's index value.; // shuffle (insertelt v1, x, C), v2, mask --> insertelt v2, x, C'",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:191,Availability,mask,mask,191,"/// If we have a unary shuffle of a shuffle, see if it can be folded away; /// completely. This has the potential to lose undef knowledge because the first; /// shuffle may not have an undef mask element where the second one does. So; /// only call this after doing simplifications based on demanded elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:266,Usability,simpl,simplifications,266,"/// If we have a unary shuffle of a shuffle, see if it can be folded away; /// completely. This has the potential to lose undef knowledge because the first; /// shuffle may not have an undef mask element where the second one does. So; /// only call this after doing simplifications based on demanded elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,Availability,Mask,Mask,36,"// shuf (shuf0 X, Y, Mask0), undef, Mask",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:66,Availability,mask,mask,66,"// Canonicalize shuffle undef, v -> v, undef. Commute the shuffle mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:45,Availability,mask,mask,45,// Simplify source operands based on shuffle mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Usability,Simpl,Simplify,3,// Simplify source operands based on shuffle mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:56,Usability,simpl,simplification,56,// This is intentionally placed after demanded elements simplification because; // it could eliminate knowledge of undef elements created by this shuffle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:155,Availability,Mask,Mask,155,"// A shuffle of a concat of the same narrow vector can be reduced to use; // only low-half elements of a concat with undef:; // shuf (concat X, X), undef, Mask --> shuf (concat X, undef), undef, Mask'",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:195,Availability,Mask,Mask,195,"// A shuffle of a concat of the same narrow vector can be reduced to use; // only low-half elements of a concat with undef:; // shuf (concat X, X), undef, Mask --> shuf (concat X, undef), undef, Mask'",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:58,Energy Efficiency,reduce,reduced,58,"// A shuffle of a concat of the same narrow vector can be reduced to use; // only low-half elements of a concat with undef:; // shuf (concat X, X), undef, Mask --> shuf (concat X, undef), undef, Mask'",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:95,Performance,perform,performance,95,// Search [NumSubElts] spans for RHS sequence.; // TODO: Can we avoid nested loops to increase performance?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:64,Safety,avoid,avoid,64,// Search [NumSubElts] spans for RHS sequence.; // TODO: Can we avoid nested loops to increase performance?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:9,Availability,mask,mask,9,// Reset mask to identity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22,Availability,mask,mask,22,// See if the shuffle mask matches the reference insertion mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:59,Availability,mask,mask,59,// See if the shuffle mask matches the reference insertion mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:16,Performance,perform,performing,16,"// If we're not performing a select/blend shuffle, see if we can convert the; // shuffle into a AND node, with all the out-of-lane elements are known zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:26,Availability,mask,mask,26,// TODO: Should we try to mask with N1 as well?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:18,Availability,mask,mask,18,// See if a clear mask is legal instead of going via; // XformToShuffleWithZero which loses UNDEF mask elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:98,Availability,mask,mask,98,// See if a clear mask is legal instead of going via; // XformToShuffleWithZero which loses UNDEF mask elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:12,Usability,clear,clear,12,// See if a clear mask is legal instead of going via; // XformToShuffleWithZero which loses UNDEF mask elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,Availability,mask,masks,21,// Scale the shuffle masks to the smaller scalar type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,Availability,mask,masks,21,// Merge the shuffle masks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:20,Availability,mask,mask,20,// Test for shuffle mask legality over both commutations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Testability,Test,Test,3,// Test for shuffle mask legality over both commutations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:46,Availability,mask,mask,46,"// Match shuffles of bitcasts, so long as the mask can be treated as the; // larger type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:32,Availability,mask,mask,32,"// Compute the combined shuffle mask for a shuffle with SV0 as the first; // operand, and SV1 as the second operand.; // i.e. Merge SVN(OtherSVN, N1) -> shuffle(SV0, SV1, Mask) iff Commute = false; // Merge SVN(N1, OtherSVN) -> shuffle(SV0, SV1, Mask') iff Commute = true",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:171,Availability,Mask,Mask,171,"// Compute the combined shuffle mask for a shuffle with SV0 as the first; // operand, and SV1 as the second operand.; // i.e. Merge SVN(OtherSVN, N1) -> shuffle(SV0, SV1, Mask) iff Commute = false; // Merge SVN(N1, OtherSVN) -> shuffle(SV0, SV1, Mask') iff Commute = true",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:246,Availability,Mask,Mask,246,"// Compute the combined shuffle mask for a shuffle with SV0 as the first; // operand, and SV1 as the second operand.; // i.e. Merge SVN(OtherSVN, N1) -> shuffle(SV0, SV1, Mask) iff Commute = false; // Merge SVN(N1, OtherSVN) -> shuffle(SV0, SV1, Mask') iff Commute = true",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:47,Usability,simpl,simplify,47,"// Don't try to fold splats; they're likely to simplify somehow, or they; // might be free.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:83,Availability,mask,mask,83,// This shuffle index refers to the inner shuffle N0. Lookup the inner; // shuffle mask to identify which vector is actually referenced.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Usability,Simpl,Simple,3,// Simple case where 'CurrentVec' is UNDEF.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:56,Availability,mask,mask,56,// Ok. CurrentVec is the left hand side.; // Update the mask accordingly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:45,Deployability,Update,Update,45,// Ok. CurrentVec is the left hand side.; // Update the mask accordingly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:57,Availability,mask,mask,57,// Ok. CurrentVec is the right hand side.; // Update the mask accordingly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:46,Deployability,Update,Update,46,// Ok. CurrentVec is the right hand side.; // Update the mask accordingly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:43,Availability,mask,mask,43,"// Avoid introducing shuffles with illegal mask.; // shuffle(shuffle(A, B, M0), C, M1) -> shuffle(A, B, M2); // shuffle(shuffle(A, B, M0), C, M1) -> shuffle(A, C, M2); // shuffle(shuffle(A, B, M0), C, M1) -> shuffle(B, C, M2); // shuffle(shuffle(A, B, M0), C, M1) -> shuffle(B, A, M2); // shuffle(shuffle(A, B, M0), C, M1) -> shuffle(C, A, M2); // shuffle(shuffle(A, B, M0), C, M1) -> shuffle(C, B, M2)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Safety,Avoid,Avoid,3,"// Avoid introducing shuffles with illegal mask.; // shuffle(shuffle(A, B, M0), C, M1) -> shuffle(A, B, M2); // shuffle(shuffle(A, B, M0), C, M1) -> shuffle(A, C, M2); // shuffle(shuffle(A, B, M0), C, M1) -> shuffle(B, C, M2); // shuffle(shuffle(A, B, M0), C, M1) -> shuffle(B, A, M2); // shuffle(shuffle(A, B, M0), C, M1) -> shuffle(C, A, M2); // shuffle(shuffle(A, B, M0), C, M1) -> shuffle(C, B, M2)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:27,Availability,Mask,Mask,27,"// Check if all indices in Mask are Undef. In case, propagate Undef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:136,Safety,safe,safe,136,// TODO: We might be able to relax the VT check but we don't currently; // have any isBinOp() that has different result/ops VTs so play safe until; // we have test coverage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:159,Testability,test,test,159,// TODO: We might be able to relax the VT check but we don't currently; // have any isBinOp() that has different result/ops VTs so play safe until; // we have test coverage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:78,Performance,Perform,Perform,78,"// Match shuffles that can be converted to ISD::ZERO_EXTEND_VECTOR_INREG.; // Perform this really late, because it could eliminate knowledge; // of undef elements created by this shuffle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:109,Energy Efficiency,reduce,reduce,109,"// Try to convert a scalar binop with an extracted vector element to a vector; // binop. This is intended to reduce potentially expensive register moves.; // TODO: Check if both operands are extracted.; // TODO: How to prefer scalar/vector ops with multiple uses of the extact?; // TODO: Generalize this, so it can be called from visitINSERT_VECTOR_ELT().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:46,Availability,mask,mask,46,// Match an extract element and get a shuffle mask equivalent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Availability,Mask,Mask,3,"// Mask = {ExtractIndex, undef, undef....}",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:142,Usability,simpl,simplify,142,"// If this is an insert of an extracted vector into an undef vector, we can; // just use the input to the extract if the types match, and can simplify; // in some cases even if they don't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Usability,Simpl,Simplify,3,"// Simplify scalar inserts into an undef vector:; // insert_subvector undef, (splat X), N2 -> splat X",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:97,Performance,optimiz,optimize,97,"// If the input vector is a concatenation, and the insert replaces; // one of the pieces, we can optimize into a single concat_vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Usability,Simpl,Simplify,3,// Simplify source operands based on insertion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:96,Availability,mask,mask,96,// VP operations in which all vector elements are disabled - either by; // determining that the mask is all false or that the EVL is 0 - can be; // eliminated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:95,Performance,load,loads,95,// VP Memory operations can be replaced by either the chain (stores) or the; // chain + undef (loads).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:83,Performance,load,load,83,"// Check if the memory, where FP state is written to, is used only in a single; // load operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:16,Performance,load,loaded,16,// Check if the loaded value is used only in a store operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:32,Performance,load,loaded,32,// Check if the stored value is loaded from some location and the loaded; // value is used only in the store operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:66,Performance,load,loaded,66,// Check if the stored value is loaded from some location and the loaded; // value is used only in the store operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,Performance,load,load,49,"// Create new node SET_FPENV_MEM, which uses the load address to read FP; // environment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:35,Availability,mask,mask,35,"// Attempt to create a valid clear mask, splitting the mask into; // sub elements and checking to see if each is; // all zeros or all ones - suitable for shuffle masking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:55,Availability,mask,mask,55,"// Attempt to create a valid clear mask, splitting the mask into; // sub elements and checking to see if each is; // all zeros or all ones - suitable for shuffle masking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:162,Availability,mask,masking,162,"// Attempt to create a valid clear mask, splitting the mask into; // sub elements and checking to see if each is; // all zeros or all ones - suitable for shuffle masking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:29,Usability,clear,clear,29,"// Attempt to create a valid clear mask, splitting the mask into; // sub elements and checking to see if each is; // all zeros or all ones - suitable for shuffle masking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,Availability,mask,mask,49,// Extract the sub element from the constant bit mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:45,Availability,mask,masking,45,// Determine maximum split level (byte level masking).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:25,Performance,perform,performed,25,"/// If a vector binop is performed on splat values, it may be profitable to; /// extract, scalarize, and insert/splat.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:68,Availability,avail,available,68,"// TODO: Remove/replace the extract cost check? If the elements are available; // as scalars, then there may be no extract cost. Should we ask if; // inserting a scalar back into a vector is cheap instead?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:38,Availability,mask,masks,38,"// Move unary shuffles with identical masks after a vector binop:; // VBinOp (shuffle A, Undef, Mask), (shuffle B, Undef, Mask)); // --> shuffle (VBinOp A, B), Undef, Mask; // This does not require type legality checks because we are creating the; // same types of operations that are in the original sequence. We do have to; // restrict ops like integer div that have immediate UB (eg, div-by-zero); // though. This code is adapted from the identical transform in instcombine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:96,Availability,Mask,Mask,96,"// Move unary shuffles with identical masks after a vector binop:; // VBinOp (shuffle A, Undef, Mask), (shuffle B, Undef, Mask)); // --> shuffle (VBinOp A, B), Undef, Mask; // This does not require type legality checks because we are creating the; // same types of operations that are in the original sequence. We do have to; // restrict ops like integer div that have immediate UB (eg, div-by-zero); // though. This code is adapted from the identical transform in instcombine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:122,Availability,Mask,Mask,122,"// Move unary shuffles with identical masks after a vector binop:; // VBinOp (shuffle A, Undef, Mask), (shuffle B, Undef, Mask)); // --> shuffle (VBinOp A, B), Undef, Mask; // This does not require type legality checks because we are creating the; // same types of operations that are in the original sequence. We do have to; // restrict ops like integer div that have immediate UB (eg, div-by-zero); // though. This code is adapted from the identical transform in instcombine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:167,Availability,Mask,Mask,167,"// Move unary shuffles with identical masks after a vector binop:; // VBinOp (shuffle A, Undef, Mask), (shuffle B, Undef, Mask)); // --> shuffle (VBinOp A, B), Undef, Mask; // This does not require type legality checks because we are creating the; // same types of operations that are in the original sequence. We do have to; // restrict ops like integer div that have immediate UB (eg, div-by-zero); // though. This code is adapted from the identical transform in instcombine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:425,Energy Efficiency,adapt,adapted,425,"// Move unary shuffles with identical masks after a vector binop:; // VBinOp (shuffle A, Undef, Mask), (shuffle B, Undef, Mask)); // --> shuffle (VBinOp A, B), Undef, Mask; // This does not require type legality checks because we are creating the; // same types of operations that are in the original sequence. We do have to; // restrict ops like integer div that have immediate UB (eg, div-by-zero); // though. This code is adapted from the identical transform in instcombine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:425,Modifiability,adapt,adapted,425,"// Move unary shuffles with identical masks after a vector binop:; // VBinOp (shuffle A, Undef, Mask), (shuffle B, Undef, Mask)); // --> shuffle (VBinOp A, B), Undef, Mask; // This does not require type legality checks because we are creating the; // same types of operations that are in the original sequence. We do have to; // restrict ops like integer div that have immediate UB (eg, div-by-zero); // though. This code is adapted from the identical transform in instcombine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:339,Performance,optimiz,optimized,339,// Try to sink a splat shuffle after a binop with a uniform constant.; // This is limited to cases where neither the shuffle nor the constant have; // undefined elements because that could be poison-unsafe or inhibit; // demanded elements analysis. It is further limited to not change a splat; // of an inserted scalar because that may be optimized better by; // load-folding or other target-specific behaviors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:363,Performance,load,load-folding,363,// Try to sink a splat shuffle after a binop with a uniform constant.; // This is limited to cases where neither the shuffle nor the constant have; // undefined elements because that could be poison-unsafe or inhibit; // demanded elements analysis. It is further limited to not change a splat; // of an inserted scalar because that may be optimized better by; // load-folding or other target-specific behaviors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:199,Safety,unsafe,unsafe,199,// Try to sink a splat shuffle after a binop with a uniform constant.; // This is limited to cases where neither the shuffle nor the constant have; // undefined elements because that could be poison-unsafe or inhibit; // demanded elements analysis. It is further limited to not change a splat; // of an inserted scalar because that may be optimized better by; // load-folding or other target-specific behaviors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:189,Performance,perform,performance,189,"// The following pattern is likely to emerge with vector reduction ops. Moving; // the binary operation ahead of insertion may allow using a narrower vector; // instruction that has better performance than the wide version of the op:; // VBinOp (ins undef, X, Z), (ins undef, Y, Z) --> ins VecC, (VBinOp X, Y), Z",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:190,Performance,perform,performance,190,"// The following pattern is likely to emerge with vector reduction ops. Moving; // the binary operation ahead of the concat may allow using a narrower vector; // instruction that has better performance than the wide version of the op:; // VBinOp (concat X, undef/constant), (concat Y, undef/constant) -->; // concat (VBinOp X, Y), VecC",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:87,Availability,down,down,87,"// If we got a simplified select_cc node back from SimplifySelectCC, then; // break it down into a new SETCC node, and a new SELECT node, and then return; // the SELECT node, since we were called with a SELECT node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:15,Usability,simpl,simplified,15,"// If we got a simplified select_cc node back from SimplifySelectCC, then; // break it down into a new SETCC node, and a new SELECT node, and then return; // the SELECT node, since we were called with a SELECT node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:51,Usability,Simpl,SimplifySelectCC,51,"// If we got a simplified select_cc node back from SimplifySelectCC, then; // break it down into a new SETCC node, and a new SELECT node, and then return; // the SELECT node, since we were called with a SELECT node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:350,Safety,avoid,avoid,350,"/// Given a SELECT or a SELECT_CC node, where LHS and RHS are the two values; /// being selected between, see if we can simplify the select. Callers of this; /// should assume that TheSelect is deleted if this returns true. As such, they; /// should return the appropriate thing (e.g. the node) back to the top-level of; /// the DAG combiner loop to avoid it being looked at.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:120,Usability,simpl,simplify,120,"/// Given a SELECT or a SELECT_CC node, where LHS and RHS are the two values; /// being selected between, see if we can simplify the select. Callers of this; /// should assume that TheSelect is deleted if this returns true. As such, they; /// should return the appropriate thing (e.g. the node) back to the top-level of; /// the DAG combiner loop to avoid it being looked at.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:83,Availability,redundant,redundant,83,"// fold (select (setcc x, [+-]0.0, *lt), NaN, (fsqrt x)); // The select + setcc is redundant, because fsqrt returns NaN for X < 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:83,Safety,redund,redundant,83,"// fold (select (setcc x, [+-]0.0, *lt), NaN, (fsqrt x)); // The select + setcc is redundant, because fsqrt returns NaN for X < 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:10,Usability,simpl,simplify,10,// Cannot simplify select with vector condition,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:16,Performance,load,load,16,"// If this is a load and the token chain is identical, replace the select; // of two loads with a load through a select of the address to load from.; // This triggers in things like ""select bool X, 10.0, 123.0"" after the FP; // constants have been dropped into the constant pool.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:85,Performance,load,loads,85,"// If this is a load and the token chain is identical, replace the select; // of two loads with a load through a select of the address to load from.; // This triggers in things like ""select bool X, 10.0, 123.0"" after the FP; // constants have been dropped into the constant pool.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:98,Performance,load,load,98,"// If this is a load and the token chain is identical, replace the select; // of two loads with a load through a select of the address to load from.; // This triggers in things like ""select bool X, 10.0, 123.0"" after the FP; // constants have been dropped into the constant pool.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:138,Performance,load,load,138,"// If this is a load and the token chain is identical, replace the select; // of two loads with a load through a select of the address to load from.; // This triggers in things like ""select bool X, 10.0, 123.0"" after the FP; // constants have been dropped into the constant pool.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:34,Energy Efficiency,reduce,reduce,34,// Do not let this transformation reduce the number of volatile loads.; // Be conservative for atomics for the moment; // TODO: This does appear to be legal for unordered atomics (see D66309),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:64,Performance,load,loads,64,// Do not let this transformation reduce the number of volatile loads.; // Be conservative for atomics for the moment; // TODO: This does appear to be legal for unordered atomics (see D66309),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:42,Performance,load,load,42,"// FIXME: If either is a pre/post inc/dec load,; // we'd need to split out the address adjustment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:22,Integrability,depend,depend,22,// The loads must not depend on one another.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:7,Performance,load,loads,7,// The loads must not depend on one another.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:56,Performance,load,load,56,"// Check that the select condition doesn't reach either load. If so,; // folding this will induce a cycle into the DAG. If not, this is safe to; // xform, so create a select of the addresses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:136,Safety,safe,safe,136,"// Check that the select condition doesn't reach either load. If so,; // folding this will induce a cycle into the DAG. If not, this is safe to; // xform, so create a select of the addresses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:21,Performance,optimiz,optimization,21,"// We cannot do this optimization if any pair of {RLD, LLD} is a; // predecessor to {RLD, LLD, CondNode}. As we've already compared the; // Loads, we only need to check if CondNode is a successor to one of the; // loads. We can further avoid this if there's no use of their chain; // value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:140,Performance,Load,Loads,140,"// We cannot do this optimization if any pair of {RLD, LLD} is a; // predecessor to {RLD, LLD, CondNode}. As we've already compared the; // Loads, we only need to check if CondNode is a successor to one of the; // loads. We can further avoid this if there's no use of their chain; // value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:214,Performance,load,loads,214,"// We cannot do this optimization if any pair of {RLD, LLD} is a; // predecessor to {RLD, LLD, CondNode}. As we've already compared the; // Loads, we only need to check if CondNode is a successor to one of the; // loads. We can further avoid this if there's no use of their chain; // value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:236,Safety,avoid,avoid,236,"// We cannot do this optimization if any pair of {RLD, LLD} is a; // predecessor to {RLD, LLD, CondNode}. As we've already compared the; // Loads, we only need to check if CondNode is a successor to one of the; // loads. We can further avoid this if there's no use of their chain; // value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:45,Performance,optimiz,optimization,45,"// Otherwise SELECT_CC; // We cannot do this optimization if any pair of {RLD, LLD} is a; // predecessor to {RLD, LLD, CondLHS, CondRHS}. As we've already compared; // the Loads, we only need to check if CondLHS/CondRHS is a successor to; // one of the loads. We can further avoid this if there's no use of their; // chain value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:172,Performance,Load,Loads,172,"// Otherwise SELECT_CC; // We cannot do this optimization if any pair of {RLD, LLD} is a; // predecessor to {RLD, LLD, CondLHS, CondRHS}. As we've already compared; // the Loads, we only need to check if CondLHS/CondRHS is a successor to; // one of the loads. We can further avoid this if there's no use of their; // chain value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:253,Performance,load,loads,253,"// Otherwise SELECT_CC; // We cannot do this optimization if any pair of {RLD, LLD} is a; // predecessor to {RLD, LLD, CondLHS, CondRHS}. As we've already compared; // the Loads, we only need to check if CondLHS/CondRHS is a successor to; // one of the loads. We can further avoid this if there's no use of their; // chain value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:275,Safety,avoid,avoid,275,"// Otherwise SELECT_CC; // We cannot do this optimization if any pair of {RLD, LLD} is a; // predecessor to {RLD, LLD, CondLHS, CondRHS}. As we've already compared; // the Loads, we only need to check if CondLHS/CondRHS is a successor to; // one of the loads. We can further avoid this if there's no use of their; // chain value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:33,Performance,load,loads,33,"// It is safe to replace the two loads if they have different alignments,; // but the new load must be the minimum (most restrictive) alignment of the; // inputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:90,Performance,load,load,90,"// It is safe to replace the two loads if they have different alignments,; // but the new load must be the minimum (most restrictive) alignment of the; // inputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:9,Safety,safe,safe,9,"// It is safe to replace the two loads if they have different alignments,; // but the new load must be the minimum (most restrictive) alignment of the; // inputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,Performance,load,load,49,// Users of the select now use the result of the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:20,Performance,load,loads,20,// Users of the old loads now use the new load's chain. We know the; // old-load value is dead now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:42,Performance,load,load,42,// Users of the old loads now use the new load's chain. We know the; // old-load value is dead now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:76,Performance,load,load,76,// Users of the old loads now use the new load's chain. We know the; // old-load value is dead now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:117,Performance,perform,perform,117,"// If this is a select where the false operand is zero and the compare is a; // check of the sign bit, see if we can perform the ""gzip trick"":; // select_cc setlt X, 0, A, 0 -> and (sra X, size(X)-1), A; // select_cc setgt X, 0, A, 0 -> and (not (sra X, size(X)-1)), A",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:89,Availability,mask,mask,89,"// If the comparison is testing for a positive value, we have to invert; // the sign bit mask, so only do that transform if the target has a bitwise; // 'and not' instruction (the invert is free).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:24,Testability,test,testing,24,"// If the comparison is testing for a positive value, we have to invert; // the sign bit mask, so only do that transform if the target has a bitwise; // 'and not' instruction (the invert is free).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,Performance,load,loading,49,// Transform (fneg/fabs (bitconvert x)) to avoid loading constant pool values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:43,Safety,avoid,avoid,43,// Transform (fneg/fabs (bitconvert x)) to avoid loading constant pool values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:29,Availability,mask,mask,29,"// For vector, create a sign mask (0x80...) or its inverse (for fabs,; // 0x7f...) per element and splat it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:33,Availability,mask,mask,33,"// For scalar, just use the sign mask (0x80... or the inverse, 0x7f...)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:220,Availability,avail,available,220,"/// Turn ""(a cond b) ? 1.0f : 2.0f"" into ""load (tmp + ((a cond b) ? 0 : 4)""; /// where ""tmp"" is a constant pool entry containing an array with 1.0 and 2.0; /// in it. This may be a win when the constant is not otherwise available; /// because it replaces two constant pool loads with one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:42,Performance,load,load,42,"/// Turn ""(a cond b) ? 1.0f : 2.0f"" into ""load (tmp + ((a cond b) ? 0 : 4)""; /// where ""tmp"" is a constant pool entry containing an array with 1.0 and 2.0; /// in it. This may be a win when the constant is not otherwise available; /// because it replaces two constant pool loads with one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:273,Performance,load,loads,273,"/// Turn ""(a cond b) ? 1.0f : 2.0f"" into ""load (tmp + ((a cond b) ? 0 : 4)""; /// where ""tmp"" is a constant pool entry containing an array with 1.0 and 2.0; /// in it. This may be a win when the constant is not otherwise available; /// because it replaces two constant pool loads with one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:104,Safety,avoid,avoid,104,"// If we are before legalize types, we want the other legalization to happen; // first (for example, to avoid messing with soft float).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:45,Performance,load,loads,45,"// If a constant can be materialized without loads, this does not make sense.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:79,Performance,load,load,79,"// If both constants have multiple uses, then we won't need to do an extra; // load. The values are likely around in registers for other users.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:4,Usability,Simpl,Simplify,4,/// Simplify an expression of the form (N0 cond N1) ? N2 : N3; /// where 'cond' is the comparison specified by CC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:271,Testability,test,test,271,"// fold (select_cc seteq (and x, y), 0, 0, A) -> (and (sra (shl x)) A); // where y is has a single bit set.; // A plaintext description would be, we can turn the SELECT_CC into an AND; // when the condition can be materialized as an all-ones register. Any; // single bit-test can be materialized as an all-ones register with; // shift-left and shift-right-arith.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:13,Testability,test,tested,13,// Shift the tested bit over the sign bit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:36,Usability,simpl,simplify,36,"// If the caller doesn't want us to simplify this into a zext of a compare,; // don't do it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:14,Testability,stub,stub,14,/// This is a stub for TargetLowering::SimplifySetCC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:39,Usability,Simpl,SimplifySetCC,39,/// This is a stub for TargetLowering::SimplifySetCC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:210,Energy Efficiency,Power,PowerPC,210,"/// Given an ISD::SDIV node expressing a divide by constant, return; /// a DAG expression to select that will generate the same value by multiplying; /// by a magic number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:236,Usability,Guid,Guide,236,"/// Given an ISD::SDIV node expressing a divide by constant, return; /// a DAG expression to select that will generate the same value by multiplying; /// by a magic number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:60,Energy Efficiency,power,power,60,"/// Given an ISD::SDIV node expressing a divide by constant power of 2, return a; /// DAG expression that will generate the same value by right shifting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Safety,Avoid,Avoid,3,// Avoid division by zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:200,Energy Efficiency,Power,PowerPC,200,"/// Given an ISD::UDIV node expressing a divide by constant, return a DAG; /// expression that will generate the same value by multiplying by a magic; /// number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:226,Usability,Guid,Guide,226,"/// Given an ISD::UDIV node expressing a divide by constant, return a DAG; /// expression that will generate the same value by multiplying by a magic; /// number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:63,Energy Efficiency,power,power,63,"/// Given an ISD::SREM node expressing a remainder by constant power of 2,; /// return a DAG expression that will generate the same value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Safety,Avoid,Avoid,3,// Avoid division by zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:425,Usability,simpl,simply,425,// This is basically just a port of takeLog2 from InstCombineMulDivRem.cpp; //; // Returns the node that represents `Log2(Op)`. This may create a new node. If; // we are unable to compute `Log2(Op)` its return `SDValue()`.; //; // All nodes will be created at `DL` and the output will be of type `VT`.; //; // This will only return `Log2(Op)` if we can prove `Op` is non-zero. Set; // `AssumeNonZero` if this function should simply assume (not require proving; // `Op` is non-zero).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:47,Energy Efficiency,power,power-,47,// Helper for determining whether a value is a power-2 constant scalar or a; // vector of such elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:49,Energy Efficiency,power,powers,49,// TODO: We may also be able to support negative powers of 2 here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:16,Modifiability,extend,extended,16,// TODO: Handle extended types?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:24,Availability,avail,available,24,"// If no iterations are available, multiply with N.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:8,Integrability,rout,routine,8,// This routine must enter the loop below to work correctly; // when (Reciprocal == false).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:16,Modifiability,extend,extended,16,// TODO: Handle extended types?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:27,Testability,test,test,27,// Try the target specific test first.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:149,Testability,test,tests,149,"// Try to prove that there is aliasing, or that there is no aliasing. Either; // way, we can return now. If nothing can be proved, proceed with more tests.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:209,Performance,load,load,209,"// If one operation reads from invariant memory, and the other may store, they; // cannot alias. These should really be checking the equivalent of mayWrite,; // but it only matters for memory nodes other than load /store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:122,Security,access,access,122,"// If we know required SrcValue1 and SrcValue2 have relatively large; // alignment compared to the size and offset of the access, we may be able; // to prove they do not alias. This check is conservative for now to catch; // cases created by splitting vector types, it only works when the offsets are; // multiples of the size of the data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:56,Security,access,accesses,56,// There is no overlap between these relatively aligned accesses of; // similar size. Return no alias.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:93,Security,access,access,93,// We can forward past any lifetime start/end that can be proven not to; // alias the memory access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:98,Performance,queue,queue,98,"// We have to check each of the operands of the token factor for ""small""; // token factors, so we queue them up. Adding the operands to the queue; // (stack) in reverse order maintains the original order and increases the; // likelihood that getNode will find a matching token factor (CSE.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:140,Performance,queue,queue,140,"// We have to check each of the operands of the token factor for ""small""; // token factors, so we queue them up. Adding the operands to the queue; // (stack) in reverse order maintains the original order and increases the; // likelihood that getNode will find a matching token factor (CSE.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:3,Deployability,Update,Updated,3,"// Updated Chain Found, Consider new chain if one exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:138,Availability,redundant,redundant,138,"// This function tries to collect a bunch of potentially interesting; // nodes to improve the chains of, all at once. This might seem; // redundant, as this function gets called when visiting every store; // node, so why not let the work be done on each store as it's visited?; //; // I believe this is mainly important because mergeConsecutiveStores; // is unable to deal with merging stores of different sizes, so unless; // we improve the chains of all the potential candidates up-front; // before running mergeConsecutiveStores, it might only see some of; // the nodes that will eventually be candidates, and then not be able; // to go from a partially-merged state to the desired final; // fully-merged state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:138,Safety,redund,redundant,138,"// This function tries to collect a bunch of potentially interesting; // nodes to improve the chains of, all at once. This might seem; // redundant, as this function gets called when visiting every store; // node, so why not let the work be done on each store as it's visited?; //; // I believe this is mainly important because mergeConsecutiveStores; // is unable to deal with merging stores of different sizes, so unless; // we improve the chains of all the potential candidates up-front; // before running mergeConsecutiveStores, it might only see some of; // the nodes that will eventually be candidates, and then not be able; // to go from a partially-merged state to the desired final; // fully-merged state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:83,Performance,scalab,scalable,83,"// BaseIndexOffset assumes that offsets are fixed-size, which; // is not valid for scalable vectors where the offsets are; // scaled by `vscale`, so bail out early.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:41,Safety,avoid,avoid,41,// Improve St's chain. Use a new node to avoid creating a loop from CombineTo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp:62,Integrability,depend,dependence,62,"// If we improved every element of TFOps, then we've lost the dependence on; // NewChain to successors of St and we need to add it back to TFOps. Do so at; // the beginning to keep relative order consistent with FindBetterChains.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/DAGCombiner.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:791,Energy Efficiency,reduce,reduces,791,"//===- FastISel.cpp - Implementation of the FastISel class ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the implementation of the FastISel class.; //; // ""Fast"" instruction selection is designed to emit very poor code quickly.; // Also, it is not designed to be able to do much lowering, so most illegal; // types (e.g. i64 on 32-bit targets) and operations are not supported. It is; // also not intended to be able to do much optimization, except in a few cases; // where doing optimizations reduces overall compile time. For example, folding; // constants into immediate fields is often done, because it's cheap and it; // reduces the number of instructions later phases have to examine.; //; // ""Fast"" instruction selection is able to fail gracefully and transfer; // control to the SelectionDAG selector for operations that it doesn't; // support. In many cases, this allows us to avoid duplicating a lot of; // the complicated lowering logic that SelectionDAG currently has.; //; // The intended use for ""fast"" instruction selection is ""-O0"" mode; // compilation, where the quality of the generated code is irrelevant when; // weighed against the speed at which the code can be generated. Also,; // at -O0, the LLVM optimizers are not running, and this makes the; // compile time of codegen a much higher portion of the overall compile; // time. Despite its limitations, ""fast"" instruction selection is able to; // handle enough code on its own to provide noticeable overall speedups; // in -O0 compiles.; //; // Basic operations are supported in a target-independent way, by reading; // the same instruction descriptions that the SelectionDAG selector reads,; // and identifying simple arithmetic ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:923,Energy Efficiency,reduce,reduces,923,"//===- FastISel.cpp - Implementation of the FastISel class ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the implementation of the FastISel class.; //; // ""Fast"" instruction selection is designed to emit very poor code quickly.; // Also, it is not designed to be able to do much lowering, so most illegal; // types (e.g. i64 on 32-bit targets) and operations are not supported. It is; // also not intended to be able to do much optimization, except in a few cases; // where doing optimizations reduces overall compile time. For example, folding; // constants into immediate fields is often done, because it's cheap and it; // reduces the number of instructions later phases have to examine.; //; // ""Fast"" instruction selection is able to fail gracefully and transfer; // control to the SelectionDAG selector for operations that it doesn't; // support. In many cases, this allows us to avoid duplicating a lot of; // the complicated lowering logic that SelectionDAG currently has.; //; // The intended use for ""fast"" instruction selection is ""-O0"" mode; // compilation, where the quality of the generated code is irrelevant when; // weighed against the speed at which the code can be generated. Also,; // at -O0, the LLVM optimizers are not running, and this makes the; // compile time of codegen a much higher portion of the overall compile; // time. Despite its limitations, ""fast"" instruction selection is able to; // handle enough code on its own to provide noticeable overall speedups; // in -O0 compiles.; //; // Basic operations are supported in a target-independent way, by reading; // the same instruction descriptions that the SelectionDAG selector reads,; // and identifying simple arithmetic ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:725,Performance,optimiz,optimization,725,"//===- FastISel.cpp - Implementation of the FastISel class ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the implementation of the FastISel class.; //; // ""Fast"" instruction selection is designed to emit very poor code quickly.; // Also, it is not designed to be able to do much lowering, so most illegal; // types (e.g. i64 on 32-bit targets) and operations are not supported. It is; // also not intended to be able to do much optimization, except in a few cases; // where doing optimizations reduces overall compile time. For example, folding; // constants into immediate fields is often done, because it's cheap and it; // reduces the number of instructions later phases have to examine.; //; // ""Fast"" instruction selection is able to fail gracefully and transfer; // control to the SelectionDAG selector for operations that it doesn't; // support. In many cases, this allows us to avoid duplicating a lot of; // the complicated lowering logic that SelectionDAG currently has.; //; // The intended use for ""fast"" instruction selection is ""-O0"" mode; // compilation, where the quality of the generated code is irrelevant when; // weighed against the speed at which the code can be generated. Also,; // at -O0, the LLVM optimizers are not running, and this makes the; // compile time of codegen a much higher portion of the overall compile; // time. Despite its limitations, ""fast"" instruction selection is able to; // handle enough code on its own to provide noticeable overall speedups; // in -O0 compiles.; //; // Basic operations are supported in a target-independent way, by reading; // the same instruction descriptions that the SelectionDAG selector reads,; // and identifying simple arithmetic ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:777,Performance,optimiz,optimizations,777,"//===- FastISel.cpp - Implementation of the FastISel class ----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the implementation of the FastISel class.; //; // ""Fast"" instruction selection is designed to emit very poor code quickly.; // Also, it is not designed to be able to do much lowering, so most illegal; // types (e.g. i64 on 32-bit targets) and operations are not supported. It is; // also not intended to be able to do much optimization, except in a few cases; // where doing optimizations reduces overall compile time. For example, folding; // constants into immediate fields is often done, because it's cheap and it; // reduces the number of instructions later phases have to examine.; //; // ""Fast"" instruction selection is able to fail gracefully and transfer; // control to the SelectionDAG selector for operations that it doesn't; // support. In many cases, this allows us to avoid duplicating a lot of; // the complicated lowering logic that SelectionDAG currently has.; //; // The intended use for ""fast"" instruction selection is ""-O0"" mode; // compilation, where the quality of the generated code is irrelevant when; // weighed against the speed at which the code can be generated. Also,; // at -O0, the LLVM optimizers are not running, and this makes the; // compile time of codegen a much higher portion of the overall compile; // time. Despite its limitations, ""fast"" instruction selection is able to; // handle enough code on its own to provide noticeable overall speedups; // in -O0 compiles.; //; // Basic operations are supported in a target-independent way, by reading; // the same instruction descriptions that the SelectionDAG selector reads,; // and identifying simple arithmetic ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:1519,Performance,optimiz,optimizers,1519,"n.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the implementation of the FastISel class.; //; // ""Fast"" instruction selection is designed to emit very poor code quickly.; // Also, it is not designed to be able to do much lowering, so most illegal; // types (e.g. i64 on 32-bit targets) and operations are not supported. It is; // also not intended to be able to do much optimization, except in a few cases; // where doing optimizations reduces overall compile time. For example, folding; // constants into immediate fields is often done, because it's cheap and it; // reduces the number of instructions later phases have to examine.; //; // ""Fast"" instruction selection is able to fail gracefully and transfer; // control to the SelectionDAG selector for operations that it doesn't; // support. In many cases, this allows us to avoid duplicating a lot of; // the complicated lowering logic that SelectionDAG currently has.; //; // The intended use for ""fast"" instruction selection is ""-O0"" mode; // compilation, where the quality of the generated code is irrelevant when; // weighed against the speed at which the code can be generated. Also,; // at -O0, the LLVM optimizers are not running, and this makes the; // compile time of codegen a much higher portion of the overall compile; // time. Despite its limitations, ""fast"" instruction selection is able to; // handle enough code on its own to provide noticeable overall speedups; // in -O0 compiles.; //; // Basic operations are supported in a target-independent way, by reading; // the same instruction descriptions that the SelectionDAG selector reads,; // and identifying simple arithmetic operations that can be directly selected; // from simple operators. More complicated operations currently require; // target-specific code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:1183,Safety,avoid,avoid,1183,"se information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the implementation of the FastISel class.; //; // ""Fast"" instruction selection is designed to emit very poor code quickly.; // Also, it is not designed to be able to do much lowering, so most illegal; // types (e.g. i64 on 32-bit targets) and operations are not supported. It is; // also not intended to be able to do much optimization, except in a few cases; // where doing optimizations reduces overall compile time. For example, folding; // constants into immediate fields is often done, because it's cheap and it; // reduces the number of instructions later phases have to examine.; //; // ""Fast"" instruction selection is able to fail gracefully and transfer; // control to the SelectionDAG selector for operations that it doesn't; // support. In many cases, this allows us to avoid duplicating a lot of; // the complicated lowering logic that SelectionDAG currently has.; //; // The intended use for ""fast"" instruction selection is ""-O0"" mode; // compilation, where the quality of the generated code is irrelevant when; // weighed against the speed at which the code can be generated. Also,; // at -O0, the LLVM optimizers are not running, and this makes the; // compile time of codegen a much higher portion of the overall compile; // time. Despite its limitations, ""fast"" instruction selection is able to; // handle enough code on its own to provide noticeable overall speedups; // in -O0 compiles.; //; // Basic operations are supported in a target-independent way, by reading; // the same instruction descriptions that the SelectionDAG selector reads,; // and identifying simple arithmetic operations that can be directly selected; // from simple operators. More complicated operations currently require; // target-specific code.; //; //===--------------------------------------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:1239,Testability,log,logic,1239,"se information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the implementation of the FastISel class.; //; // ""Fast"" instruction selection is designed to emit very poor code quickly.; // Also, it is not designed to be able to do much lowering, so most illegal; // types (e.g. i64 on 32-bit targets) and operations are not supported. It is; // also not intended to be able to do much optimization, except in a few cases; // where doing optimizations reduces overall compile time. For example, folding; // constants into immediate fields is often done, because it's cheap and it; // reduces the number of instructions later phases have to examine.; //; // ""Fast"" instruction selection is able to fail gracefully and transfer; // control to the SelectionDAG selector for operations that it doesn't; // support. In many cases, this allows us to avoid duplicating a lot of; // the complicated lowering logic that SelectionDAG currently has.; //; // The intended use for ""fast"" instruction selection is ""-O0"" mode; // compilation, where the quality of the generated code is irrelevant when; // weighed against the speed at which the code can be generated. Also,; // at -O0, the LLVM optimizers are not running, and this makes the; // compile time of codegen a much higher portion of the overall compile; // time. Despite its limitations, ""fast"" instruction selection is able to; // handle enough code on its own to provide noticeable overall speedups; // in -O0 compiles.; //; // Basic operations are supported in a target-independent way, by reading; // the same instruction descriptions that the SelectionDAG selector reads,; // and identifying simple arithmetic operations that can be directly selected; // from simple operators. More complicated operations currently require; // target-specific code.; //; //===--------------------------------------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:1983,Usability,simpl,simple,1983,"n.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the implementation of the FastISel class.; //; // ""Fast"" instruction selection is designed to emit very poor code quickly.; // Also, it is not designed to be able to do much lowering, so most illegal; // types (e.g. i64 on 32-bit targets) and operations are not supported. It is; // also not intended to be able to do much optimization, except in a few cases; // where doing optimizations reduces overall compile time. For example, folding; // constants into immediate fields is often done, because it's cheap and it; // reduces the number of instructions later phases have to examine.; //; // ""Fast"" instruction selection is able to fail gracefully and transfer; // control to the SelectionDAG selector for operations that it doesn't; // support. In many cases, this allows us to avoid duplicating a lot of; // the complicated lowering logic that SelectionDAG currently has.; //; // The intended use for ""fast"" instruction selection is ""-O0"" mode; // compilation, where the quality of the generated code is irrelevant when; // weighed against the speed at which the code can be generated. Also,; // at -O0, the LLVM optimizers are not running, and this makes the; // compile time of codegen a much higher portion of the overall compile; // time. Despite its limitations, ""fast"" instruction selection is able to; // handle enough code on its own to provide noticeable overall speedups; // in -O0 compiles.; //; // Basic operations are supported in a target-independent way, by reading; // the same instruction descriptions that the SelectionDAG selector reads,; // and identifying simple arithmetic operations that can be directly selected; // from simple operators. More complicated operations currently require; // target-specific code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:2051,Usability,simpl,simple,2051,"n.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the implementation of the FastISel class.; //; // ""Fast"" instruction selection is designed to emit very poor code quickly.; // Also, it is not designed to be able to do much lowering, so most illegal; // types (e.g. i64 on 32-bit targets) and operations are not supported. It is; // also not intended to be able to do much optimization, except in a few cases; // where doing optimizations reduces overall compile time. For example, folding; // constants into immediate fields is often done, because it's cheap and it; // reduces the number of instructions later phases have to examine.; //; // ""Fast"" instruction selection is able to fail gracefully and transfer; // control to the SelectionDAG selector for operations that it doesn't; // support. In many cases, this allows us to avoid duplicating a lot of; // the complicated lowering logic that SelectionDAG currently has.; //; // The intended use for ""fast"" instruction selection is ""-O0"" mode; // compilation, where the quality of the generated code is irrelevant when; // weighed against the speed at which the code can be generated. Also,; // at -O0, the LLVM optimizers are not running, and this makes the; // compile time of codegen a much higher portion of the overall compile; // time. Despite its limitations, ""fast"" instruction selection is able to; // handle enough code on its own to provide noticeable overall speedups; // in -O0 compiles.; //; // Basic operations are supported in a target-independent way, by reading; // the same instruction descriptions that the SelectionDAG selector reads,; // and identifying simple arithmetic operations that can be directly selected; // from simple operators. More complicated operations currently require; // target-specific code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:108,Safety,Detect,Detect,108,"// If FastISel bails out, it could leave local value instructions behind; // that aren't used for anything. Detect and erase those.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:20,Usability,simpl,simple,20,// Don't handle non-simple values in FastISel.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:89,Availability,avail,available,89,/// Helper for getRegForValue. This function is called when the value isn't; /// already available in a register and must be materialized with new; /// instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:9,Performance,cache,cache,9,// Don't cache constant materializations in the general ValueMap.; // To do so would require tracking what uses they dominate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:73,Performance,cache,cache,73,"// Look up the value to see if we already have a register for it. We; // cache values defined by Instructions across blocks, and other values; // only locally. This is because Instructions already have the SSA; // def-dominates-use requirement enforced.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:64,Modifiability,extend,extend,64,"// If the index is smaller or larger than intptr_t, truncate or extend it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:78,Modifiability,variab,variables,78,"// void @llvm.experimental.stackmap(i64 <id>, i32 <numShadowBytes>,; // [live variables...])",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:133,Deployability,patch,patchpoint,133,"// The stackmap intrinsic only records the live variables (the arguments; // passed to it) and emits NOPS (if requested). Unlike the patchpoint; // intrinsic, this won't be lowered to a function call. This means we don't; // have to worry about calling conventions and target-specific lowering code.; // Instead we perform the call lowering right here.; //; // CALLSEQ_START(0, 0...); // STACKMAP(id, nbytes, ...); // CALLSEQ_END(0, 0); //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:48,Modifiability,variab,variables,48,"// The stackmap intrinsic only records the live variables (the arguments; // passed to it) and emits NOPS (if requested). Unlike the patchpoint; // intrinsic, this won't be lowered to a function call. This means we don't; // have to worry about calling conventions and target-specific lowering code.; // Instead we perform the call lowering right here.; //; // CALLSEQ_START(0, 0...); // STACKMAP(id, nbytes, ...); // CALLSEQ_END(0, 0); //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:315,Performance,perform,perform,315,"// The stackmap intrinsic only records the live variables (the arguments; // passed to it) and emits NOPS (if requested). Unlike the patchpoint; // intrinsic, this won't be lowered to a function call. This means we don't; // have to worry about calling conventions and target-specific lowering code.; // Instead we perform the call lowering right here.; //; // CALLSEQ_START(0, 0...); // STACKMAP(id, nbytes, ...); // CALLSEQ_END(0, 0); //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:13,Modifiability,variab,variables,13,// Push live variables for the stack map (skipping the first two arguments; // <id> and <numBytes>).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:34,Availability,mask,mask,34,"// We are not adding any register mask info here, because the stackmap doesn't; // clobber anything.; // Add scratch registers as implicit def and early clobber.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:31,Deployability,patch,patchpoint,31,"// void|i64 @llvm.experimental.patchpoint.void|i64(i64 <id>,; // i32 <numBytes>,; // i8* <target>,; // i32 <numArgs>,; // [Args...],; // [live variables...])",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:143,Modifiability,variab,variables,143,"// void|i64 @llvm.experimental.patchpoint.void|i64(i64 <id>,; // i32 <numBytes>,; // i8* <target>,; // i32 <numArgs>,; // [Args...],; // [live variables...])",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:13,Modifiability,variab,variables,13,// Push live variables for the stack map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:21,Availability,mask,mask,21,// Push the register mask info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:14,Deployability,patch,patchpoint,14,// Insert the patchpoint instruction before the call generated by the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:47,Deployability,patch,patchpoint,47,// Inform the Frame Information that we have a patchpoint in this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:14,Deployability,Patch,Patchable,14,"// Insert the Patchable Event Call instruction, that gets lowered properly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:14,Deployability,Patch,Patchable,14,"// Insert the Patchable Typed Event Call instruction, that gets lowered properly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:132,Energy Efficiency,allocate,allocated,132,"// Set the byval flag for CCAssignFn callbacks that don't know about; // inalloca. This way we can know how many bytes we should've allocated; // and how many bytes a callee cleanup function will pop. If we port; // inalloca to more targets, we'll have to add custom inalloca handling in; // the various CC lowering callbacks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:140,Energy Efficiency,allocate,allocated,140,"// Set the byval flag for CCAssignFn callbacks that don't know about; // preallocated. This way we can know how many bytes we should've; // allocated and how many bytes a callee cleanup function will pop. If we; // port preallocated to more targets, we'll have to add custom; // preallocated handling in the various CC lowering callbacks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:79,Integrability,depend,dependent,79,// Check if target-independent constraints permit a tail call here.; // Target-dependent constraints are checked within fastLowerCall.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:10,Usability,simpl,simple,10,// Handle simple inline asms.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:3,Usability,Clear,Clear,3,// Clear any metadata.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:86,Deployability,patch,patched,86,"// If using instruction referencing, produce this as a DBG_INSTR_REF,; // to be later patched up by finalizeDebugInstrRefs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:86,Deployability,patch,patched,86,"// If using instruction referencing, produce this as a DBG_INSTR_REF,; // to be later patched up by finalizeDebugInstrRefs. Tack a deref onto; // the expression, we don't have an ""indirect"" flag in DBG_INSTR_REF.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:51,Modifiability,variab,variable,51,"// A dbg.declare describes the address of a source variable, so lower it; // into an indirect DBG_VALUE.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:113,Energy Efficiency,reduce,reduce,113,"// Flush the local value map before starting each instruction.; // This improves locality and debugging, and can reduce spills.; // Reuse of values across IR instructions is relatively uncommon.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:17,Deployability,update,updates,17,"// Undo phi node updates, because they will be added again by SelectionDAG.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:3,Usability,Undo,Undo,3,"// Undo phi node updates, because they will be added again by SelectionDAG.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:115,Deployability,update,update,115,"/// Emit an unconditional branch to the given block, unless it is the immediate; /// (fall-through) successor, and update the CFG.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:21,Integrability,wrap,wrapper,21,"/// This method is a wrapper of fastEmit_ri. It first tries to emit an; /// instruction with an immediate operand using fastEmit_ri.; /// If that fails, it materializes the immediate into a register and try; /// fastEmit_rr instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:30,Energy Efficiency,power,power,30,"// If this is a multiply by a power of two, emit this as a shift left.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:65,Availability,avail,available,65,// Check successor nodes' PHI nodes that expect a constant to be available; // from this block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:20,Performance,load,load,20,"// We know that the load has a single use, but don't know what it is. If it; // isn't one of the folded instructions, then we can't succeed here. Handle; // this by scanning the single-use users of the load until we get to FoldInst.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:202,Performance,load,load,202,"// We know that the load has a single use, but don't know what it is. If it; // isn't one of the folded instructions, then we can't succeed here. Handle; // this by scanning the single-use users of the load until we get to FoldInst.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:14,Availability,down,down,14,// Don't scan down huge single-use chains of instrs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:30,Performance,load,loads,30,// Don't try to fold volatile loads. Target has to deal with alignment; // constraints.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:138,Performance,load,load,138,// Figure out which vreg this is going into. If there is no assigned vreg yet; // then there actually was no reference to it. Perhaps the load is referenced; // by a dead instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:163,Performance,load,loaded,163,"// We can't fold if this vreg has no uses or more than one use. Multiple uses; // may mean that the instruction got lowered to multiple MIs, or the use of; // the loaded value ended up being multiple operands of the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:119,Modifiability,extend,extends,119,// Set the insertion point properly. Folding the load can cause generation of; // other random instructions (like sign extends) for addressing modes; make; // sure they get inserted in a logical place before the new instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:49,Performance,load,load,49,// Set the insertion point properly. Folding the load can cause generation of; // other random instructions (like sign extends) for addressing modes; make; // sure they get inserted in a logical place before the new instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:187,Testability,log,logical,187,// Set the insertion point properly. Folding the load can cause generation of; // other random instructions (like sign extends) for addressing modes; make; // sure they get inserted in a logical place before the new instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:37,Performance,load,load,37,// Ask the target to try folding the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp:46,Performance,optimiz,optimize,46,"// If both operands are the same, then try to optimize or fold the cmp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FastISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:399,Integrability,rout,routines,399,"//===-- FunctionLoweringInfo.cpp ------------------------------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements routines for translating functions from LLVM IR into; // Machine IR.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:245,Availability,redundant,redundant,245,"// For the users of the source value being used for compare instruction, if; // the number of signed predicate is greater than unsigned predicate, we; // prefer to use SIGN_EXTEND.; //; // With this optimization, we would be able to reduce some redundant sign or; // zero extension instruction, and eventually more machine CSE opportunities; // can be exposed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:233,Energy Efficiency,reduce,reduce,233,"// For the users of the source value being used for compare instruction, if; // the number of signed predicate is greater than unsigned predicate, we; // prefer to use SIGN_EXTEND.; //; // With this optimization, we would be able to reduce some redundant sign or; // zero extension instruction, and eventually more machine CSE opportunities; // can be exposed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:199,Performance,optimiz,optimization,199,"// For the users of the source value being used for compare instruction, if; // the number of signed predicate is greater than unsigned predicate, we; // prefer to use SIGN_EXTEND.; //; // With this optimization, we would be able to reduce some redundant sign or; // zero extension instruction, and eventually more machine CSE opportunities; // can be exposed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:245,Safety,redund,redundant,245,"// For the users of the source value being used for compare instruction, if; // the number of signed predicate is greater than unsigned predicate, we; // prefer to use SIGN_EXTEND.; //; // With this optimization, we would be able to reduce some redundant sign or; // zero extension instruction, and eventually more machine CSE opportunities; // can be exposed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:352,Security,expose,exposed,352,"// For the users of the source value being used for compare instruction, if; // the number of signed predicate is greater than unsigned predicate, we; // prefer to use SIGN_EXTEND.; //; // With this optimization, we would be able to reduce some redundant sign or; // zero extension instruction, and eventually more machine CSE opportunities; // can be exposed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:13,Energy Efficiency,allocate,allocated,13,// Get total allocated size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:3,Performance,Scalab,Scalable,3,// Scalable vectors and structures that contain scalable vectors may; // need a special StackID to distinguish them from other (fixed size); // stack objects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:48,Performance,scalab,scalable,48,// Scalable vectors and structures that contain scalable vectors may; // need a special StackID to distinguish them from other (fixed size); // stack objects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:3,Deployability,Update,Update,3,// Update the catch handler information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:201,Modifiability,variab,variable-sized,201,// FIXME: Overaligned static allocas should be grouped into; // a single dynamic allocation instead of using a separate; // stack allocation for each one.; // Inform the Frame Information that we have variable-sized objects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:24,Modifiability,extend,extend,24,// Decide the preferred extend type for a value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:151,Safety,avoid,avoid,151,"// If this is a non-landingpad EH pad, mark this function as using; // funclets.; // FIXME: SEH catchpads do not create EH scope/funclets, so we could avoid; // setting this in such cases in order to improve frame layout.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:4,Usability,clear,clear,4,"/// clear - Clear out all the function-specific state. This returns this; /// FunctionLoweringInfo to an empty state, ready to be used for a; /// different function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:12,Usability,Clear,Clear,12,"/// clear - Clear out all the function-specific state. This returns this; /// FunctionLoweringInfo to an empty state, ready to be used for a; /// different function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:16,Energy Efficiency,Allocate,Allocate,16,/// CreateReg - Allocate a single virtual register for the given type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:17,Energy Efficiency,Allocate,Allocate,17,"/// CreateRegs - Allocate the appropriate number of virtual registers of; /// the correctly promoted or expanded types. Assign these registers; /// consecutive vreg numbers and return the first assigned number.; ///; /// In the case that the given value has struct or array type, this function; /// will assign registers for each member or element.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp:223,Modifiability,extend,extended,223,"/// GetLiveOutRegInfo - Gets LiveOutInfo for a register, returning NULL if the; /// register is a PHI destination and the PHI's LiveOutInfo is not valid. If; /// the register's LiveOutInfo is for a smaller bit width, it is extended to; /// the larger bit width by zero extension. The bit width must be no smaller; /// than the LiveOutInfo's existing bit width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/FunctionLoweringInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:408,Integrability,rout,routines,408,"//==--- InstrEmitter.cpp - Emit MachineInstrs for the SelectionDAG class ---==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements the Emit routines for the SelectionDAG class, which creates; // MachineInstrs based on the decisions of the SelectionDAG instruction; // selection.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:221,Energy Efficiency,Schedul,Schedule,221,"// If this value has only one use, that use is a kill. This is a; // conservative approximation. InstrEmitter does trivial coalescing; // with CopyFromReg nodes, so don't emit kill flags for them.; // Avoid kill flags on Schedule cloned nodes, since there will be; // multiple uses.; // Tied operands are never killed, so we need to check that. And that; // means we need to determine the index of the operand.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:201,Safety,Avoid,Avoid,201,"// If this value has only one use, that use is a kill. This is a; // conservative approximation. InstrEmitter does trivial coalescing; // with CopyFromReg nodes, so don't emit kill flags for them.; // Avoid kill flags on Schedule cloned nodes, since there will be; // multiple uses.; // Tied operands are never killed, so we need to check that. And that; // means we need to determine the index of the operand.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:3,Performance,Optimiz,Optimize,3,"// Optimize these:; // r1025 = s/zext r1024, 4; // r1026 = extract_subreg r1025, 4; // to a copy; // r1026 = copy r1024",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:265,Safety,safe,safeguard,265,"// It's possible we replaced this SDNode with other(s) and therefore; // didn't generate code for it. It's better to catch these cases where; // they happen and transfer the debug info, but trying to guarantee that; // in all cases would be very fragile; this is a safeguard for any; // that were missed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:38,Integrability,depend,depend,38,"// If this variable location does not depend on any instructions or contains; // any stack locations, produce it as a standard debug value instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:11,Modifiability,variab,variable,11,"// If this variable location does not depend on any instructions or contains; // any stack locations, produce it as a standard debug value instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:352,Deployability,patch,patch,352,"// It may not be immediately possible to identify the MachineInstr that; // defines a VReg, it can depend for example on the order blocks are; // emitted in. When this happens, or when further analysis is needed later,; // produce an instruction like this:; //; // DBG_INSTR_REF !123, !456, %0:gr64; //; // i.e., point the instruction at the vreg, and patch it up later in; // MachineFunction::finalizeDebugInstrRefs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:99,Integrability,depend,depend,99,"// It may not be immediately possible to identify the MachineInstr that; // defines a VReg, it can depend for example on the order blocks are; // emitted in. When this happens, or when further analysis is needed later,; // produce an instruction like this:; //; // DBG_INSTR_REF !123, !456, %0:gr64; //; // i.e., point the instruction at the vreg, and patch it up later in; // MachineFunction::finalizeDebugInstrRefs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:3,Safety,Avoid,Avoid,3,"// Avoid copy like instructions: they don't define values, only move them.; // Leave a virtual-register reference until it can be fixed up later, to; // find the underlying value definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:65,Safety,abort,abort,65,"// If we haven't created a valid MachineOperand for every DbgOp, abort and; // produce an undef DBG_VALUE.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:87,Integrability,depend,dependencies,87,/// EmitMachineNode - Generate machine code for a target-specific node and; /// needed dependencies.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:23,Deployability,PATCH,PATCHPOINT,23,// Handle STACKMAP and PATCHPOINT specially and then use the generic code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:97,Usability,simpl,simplify,97,"// Stackmaps do not have arguments and do not preserve their calling; // convention. However, to simplify runtime support, they clobber the same; // scratch registers as AnyRegCC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp:90,Integrability,depend,dependencies,90,/// EmitSpecialNode - Generate machine code for a target-independent node and; /// needed dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h:406,Integrability,rout,routines,406,"//===- InstrEmitter.h - Emit MachineInstrs for the SelectionDAG -*- C++ -*--==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This declares the Emit routines for the SelectionDAG class, which creates; // MachineInstrs based on the decisions of the SelectionDAG instruction; // selection.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h:239,Testability,assert,assertions,239,"/// AddOperand - Add the specified operand to the specified machine instr. II; /// specifies the instruction information for the node, and IIOpNum is the; /// operand number (in the II) that we are adding. IIOpNum and II are used for; /// assertions only.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h:98,Modifiability,variab,variable,98,/// Emit a dbg_value as a DBG_INSTR_REF. May produce DBG_VALUE $noreg instead; /// if there is no variable location; alternately a half-formed DBG_INSTR_REF; /// that refers to a virtual register and is corrected later in isel.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h:42,Modifiability,variab,variable,42,"/// Emit a DBG_VALUE $noreg, indicating a variable has no location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h:59,Integrability,depend,dependencies,59,/// EmitNode - Generate machine code for a node and needed dependencies.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/InstrEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:607,Energy Efficiency,efficient,efficiently,607,"//===----------------------------------------------------------------------===//; /// This takes an arbitrary SelectionDAG as input and; /// hacks on it until the target machine can handle it. This involves; /// eliminating value sizes the machine cannot handle (promoting small sizes to; /// large sizes or splitting up large values into small values) as well as; /// eliminating operations the machine cannot handle.; ///; /// This code also does a small amount of optimization and recognition of idioms; /// as part of its processing. For example, if a target does not support a; /// 'setcc' instruction efficiently, but does support 'brcc' instruction, this; /// will attempt merge setcc and brc instructions into brcc's.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:467,Performance,optimiz,optimization,467,"//===----------------------------------------------------------------------===//; /// This takes an arbitrary SelectionDAG as input and; /// hacks on it until the target machine can handle it. This involves; /// eliminating value sizes the machine cannot handle (promoting small sizes to; /// large sizes or splitting up large values into small values) as well as; /// eliminating operations the machine cannot handle.; ///; /// This code also does a small amount of optimization and recognition of idioms; /// as part of its processing. For example, if a target does not support a; /// 'setcc' instruction efficiently, but does support 'brcc' instruction, this; /// will attempt merge setcc and brc instructions into brcc's.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:99,Deployability,update,update,99,/// The set of nodes which have already been legalized. We hold a; /// reference to it in order to update as necessary on node deletion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:27,Deployability,update,updated,27,/// A set of all the nodes updated during legalization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:33,Modifiability,variab,variable,33,"/// Some targets cannot handle a variable; /// insertion index for the INSERT_VECTOR_ELT instruction. In this case, it; /// is necessary to spill the vector being inserted into to memory, perform; /// the insert there, and then read the result back.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:188,Performance,perform,perform,188,"/// Some targets cannot handle a variable; /// insertion index for the INSERT_VECTOR_ELT instruction. In this case, it; /// is necessary to spill the vector being inserted into to memory, perform; /// the insert there, and then read the result back.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:49,Performance,perform,performs,49,"/// Return a vector shuffle operation which; /// performs the same shuffe in terms of order or result bytes, but on a type; /// whose vector element type is narrower than the original shuffle type.; /// e.g. <v4i32> <0, 1, 0, 1> -> v8i16 <0, 1, 2, 3, 0, 1, 2, 3>",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:77,Performance,perform,performs,77,"// end anonymous namespace; /// Return a vector shuffle operation which; /// performs the same shuffle in terms of order or result bytes, but on a type; /// whose vector element type is narrower than the original shuffle type.; /// e.g. <v4i32> <0, 1, 0, 1> -> v8i16 <0, 1, 2, 3, 0, 1, 2, 3>",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:65,Performance,load,load,65,/// Expands the ConstantFP node to an integer constant or; /// a load from the constant pool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:92,Modifiability,extend,extending,92,"// If a FP immediate is precise when represented as a float and if the; // target can do an extending load from float to double, we put it into; // the constant pool as a float, even if it's is statically typed as a; // double. This shrinks FP constants and canonicalizes them for targets where; // an FP extending load is the same cost as a normal load (such as on the x87; // fp stack or PPC FP unit).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:305,Modifiability,extend,extending,305,"// If a FP immediate is precise when represented as a float and if the; // target can do an extending load from float to double, we put it into; // the constant pool as a float, even if it's is statically typed as a; // double. This shrinks FP constants and canonicalizes them for targets where; // an FP extending load is the same cost as a normal load (such as on the x87; // fp stack or PPC FP unit).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:102,Performance,load,load,102,"// If a FP immediate is precise when represented as a float and if the; // target can do an extending load from float to double, we put it into; // the constant pool as a float, even if it's is statically typed as a; // double. This shrinks FP constants and canonicalizes them for targets where; // an FP extending load is the same cost as a normal load (such as on the x87; // fp stack or PPC FP unit).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:315,Performance,load,load,315,"// If a FP immediate is precise when represented as a float and if the; // target can do an extending load from float to double, we put it into; // the constant pool as a float, even if it's is statically typed as a; // double. This shrinks FP constants and canonicalizes them for targets where; // an FP extending load is the same cost as a normal load (such as on the x87; // fp stack or PPC FP unit).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:349,Performance,load,load,349,"// If a FP immediate is precise when represented as a float and if the; // target can do an extending load from float to double, we put it into; // the constant pool as a float, even if it's is statically typed as a; // double. This shrinks FP constants and canonicalizes them for targets where; // an FP extending load is the same cost as a normal load (such as on the x87; // fp stack or PPC FP unit).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:35,Performance,load,load,35,/// Expands the Constant node to a load from the constant pool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:32,Modifiability,variab,variable,32,"/// Some target cannot handle a variable insertion index for the; /// INSERT_VECTOR_ELT instruction. In this case, it; /// is necessary to spill the vector being inserted into to memory, perform; /// the insert there, and then read the result back.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:187,Performance,perform,perform,187,"/// Some target cannot handle a variable insertion index for the; /// INSERT_VECTOR_ELT instruction. In this case, it; /// is necessary to spill the vector being inserted into to memory, perform; /// the insert there, and then read the result back.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:104,Deployability,update,update,104,"// If the target doesn't support this, we have to spill the input vector; // to a temporary stack slot, update the element, then reload it. This is; // badness. We could also load the value into a vector register (either; // with a ""move to register"" or ""extload into register"" instruction, then; // permute it into place, if the idx is a constant and if the idx is; // supported by the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:175,Performance,load,load,175,"// If the target doesn't support this, we have to spill the input vector; // to a temporary stack slot, update the element, then reload it. This is; // badness. We could also load the value into a vector register (either; // with a ""move to register"" or ""extload into register"" instruction, then; // permute it into place, if the idx is a constant and if the idx is; // supported by the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:12,Deployability,update,updated,12,// Load the updated vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:3,Performance,Load,Load,3,// Load the updated vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:60,Availability,mask,mask,60,"// We generate a shuffle of InVec and ScVec, so the shuffle mask; // should be 0,1,2,3,4,5... with the appropriate element replaced with; // elt 0 of the RHS.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:242,Deployability,integrat,integrate,242,"// Turn 'store float 1.0, Ptr' -> 'store int 0x12345678, Ptr'; // FIXME: move this to the DAG Combiner! Note that we can't regress due; // to phase ordering between legalized code and the dag combiner. This; // probably means that we need to integrate dag combiner and legalizer; // together.; // We generally can't do this one for long doubles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:242,Integrability,integrat,integrate,242,"// Turn 'store float 1.0, Ptr' -> 'store int 0x12345678, Ptr'; // FIXME: move this to the DAG Combiner! Note that we can't regress due; // to phase ordering between legalized code and the dag combiner. This; // probably means that we need to integrate dag combiner and legalizer; // together.; // We generally can't do this one for long doubles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:20,Energy Efficiency,power,power-of-,20,"// If not storing a power-of-2 number of bits, expand as two stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:16,Safety,avoid,avoid,16,"// Big endian - avoid unaligned stores.; // TRUNCSTORE:i24 X -> TRUNCSTORE:i16 (srl X, 8), TRUNCSTORE@+2:i8 X; // Store the top RoundWidth bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:29,Performance,load,load,29,// The value returned by the load op.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:27,Performance,load,load,27,"// If this is an unaligned load and the target doesn't support it,; // expand it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:38,Performance,load,loading,38,"// Some targets pretend to have an i1 loading operation, and actually; // load an i8. This trick is correct for ZEXTLOAD because the top 7; // bits are guaranteed to be zero; it helps the optimizers understand; // that these bits are zero. It is also useful for EXTLOAD, since it; // tells the optimizers that those bits are undefined. It would be; // nice to have an effective generic way of getting these benefits...; // Until such a way is found, don't insist on promoting i1 here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:74,Performance,load,load,74,"// Some targets pretend to have an i1 loading operation, and actually; // load an i8. This trick is correct for ZEXTLOAD because the top 7; // bits are guaranteed to be zero; it helps the optimizers understand; // that these bits are zero. It is also useful for EXTLOAD, since it; // tells the optimizers that those bits are undefined. It would be; // nice to have an effective generic way of getting these benefits...; // Until such a way is found, don't insist on promoting i1 here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:188,Performance,optimiz,optimizers,188,"// Some targets pretend to have an i1 loading operation, and actually; // load an i8. This trick is correct for ZEXTLOAD because the top 7; // bits are guaranteed to be zero; it helps the optimizers understand; // that these bits are zero. It is also useful for EXTLOAD, since it; // tells the optimizers that those bits are undefined. It would be; // nice to have an effective generic way of getting these benefits...; // Until such a way is found, don't insist on promoting i1 here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:294,Performance,optimiz,optimizers,294,"// Some targets pretend to have an i1 loading operation, and actually; // load an i8. This trick is correct for ZEXTLOAD because the top 7; // bits are guaranteed to be zero; it helps the optimizers understand; // that these bits are zero. It is also useful for EXTLOAD, since it; // tells the optimizers that those bits are undefined. It would be; // nice to have an effective generic way of getting these benefits...; // Until such a way is found, don't insist on promoting i1 here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:27,Performance,load,load,27,"// Promote to a byte-sized load if not loading an integral number of; // bytes. For example, promote EXTLOAD:i20 -> EXTLOAD:i24.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:39,Performance,load,loading,39,"// Promote to a byte-sized load if not loading an integral number of; // bytes. For example, promote EXTLOAD:i20 -> EXTLOAD:i24.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:87,Performance,load,load,87,"// The extra bits are guaranteed to be zero, since we stored them that; // way. A zext load from NVT thus automatically gives zext from SrcVT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:51,Modifiability,extend,extending,51,// Having the top bits zero doesn't help when sign extending.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:59,Performance,optimiz,optimizers,59,// All the top bits are guaranteed to be zero - inform the optimizers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:20,Energy Efficiency,power,power-of-,20,"// If not loading a power-of-2 number of bits, expand as two loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:10,Performance,load,loading,10,"// If not loading a power-of-2 number of bits, expand as two loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:61,Performance,load,loads,61,"// If not loading a power-of-2 number of bits, expand as two loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:61,Performance,Load,Load,61,"// EXTLOAD:i24 -> ZEXTLOAD:i16 | (shl EXTLOAD@+2:i8, 16); // Load the bottom RoundWidth bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:3,Performance,Load,Load,3,// Load the remaining ExtraWidth bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:45,Performance,load,load,45,// Build a factor node to remember that this load is independent of; // the other one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:32,Performance,load,loads,32,"// Big endian - avoid unaligned loads.; // EXTLOAD:i24 -> (shl EXTLOAD:i16, 8) | ZEXTLOAD@+2:i8; // Load the top RoundWidth bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:100,Performance,Load,Load,100,"// Big endian - avoid unaligned loads.; // EXTLOAD:i24 -> (shl EXTLOAD:i16, 8) | ZEXTLOAD@+2:i8; // Load the top RoundWidth bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:16,Safety,avoid,avoid,16,"// Big endian - avoid unaligned loads.; // EXTLOAD:i24 -> (shl EXTLOAD:i16, 8) | ZEXTLOAD@+2:i8; // Load the top RoundWidth bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:3,Performance,Load,Load,3,// Load the remaining ExtraWidth bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:45,Performance,load,load,45,// Build a factor node to remember that this load is independent of; // the other one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:27,Performance,load,load,27,"// If this is an unaligned load and the target doesn't support it,; // expand it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:113,Modifiability,extend,extend,113,"// If the source type is not legal, see if there is a legal extload to; // an intermediate type that we can then extend further.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:20,Performance,Load,LoadVT,20,// Same as SrcVT == LoadVT?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:80,Modifiability,extend,extend,80,"// If we are loading a legal type, this is a non-extload followed by a; // full extend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:13,Performance,load,loading,13,"// If we are loading a legal type, this is a non-extload followed by a; // full extend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:136,Modifiability,extend,extend,136,"// Handle the special case of fp16 extloads. EXTLOAD doesn't have the; // normal undefined upper bits behavior to allow using an in-reg extend; // with the illegal FP type, so load as an integer and do the; // from-integer conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:176,Performance,load,load,176,"// Handle the special case of fp16 extloads. EXTLOAD doesn't have the; // normal undefined upper bits behavior to allow using an in-reg extend; // with the illegal FP type, so load as an integer and do the; // from-integer conversion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:77,Modifiability,extend,extend,77,"// FIXME: This does not work for vectors on most targets. Sign-; // and zero-extend operations are currently folded into extending; // loads, whether they are legal or not, and then we end up here; // without any support for legalizing them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:121,Modifiability,extend,extending,121,"// FIXME: This does not work for vectors on most targets. Sign-; // and zero-extend operations are currently folded into extending; // loads, whether they are legal or not, and then we end up here; // without any support for legalizing them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:135,Performance,load,loads,135,"// FIXME: This does not work for vectors on most targets. Sign-; // and zero-extend operations are currently folded into extending; // loads, whether they are legal or not, and then we end up here; // without any support for legalizing them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:83,Modifiability,extend,extend,83,// Turn the unsupported load into an EXTLOAD followed by an; // explicit zero/sign extend inreg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:24,Performance,load,load,24,// Turn the unsupported load into an EXTLOAD followed by an; // explicit zero/sign extend inreg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:9,Performance,load,loads,9,"// Since loads produce two values, make sure to remember that we legalized; // both of them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:32,Performance,LOAD,LOAD,32,"// FIXME: Model these properly. LOAD and STORE are complicated, and; // STORE expects the unlegalized operand in some cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:134,Deployability,update,update,134,// The getShiftAmountOperand() may create a new operand node or; // return the existing one. If new operand is created we need; // to update the parent node.; // Do not try to legalize SAO here! It will be automatically legalized; // in the next round.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:134,Deployability,update,update,134,// The getShiftAmountOperand() may create a new operand node or; // return the existing one. If new operand is created we need; // to update the parent node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:402,Performance,Cache,Caches,402,"// Before we generate a new store to a temporary stack slot, see if there is; // already one that we can use. There often is because when we scalarize; // vector operations (using SelectionDAG::UnrollVectorOp for example) a whole; // series of EXTRACT_VECTOR_ELT nodes are generated, one for each element in; // the vector. If all are expanded here, we don't want one store per vector; // element.; // Caches for hasPredecessorHelper",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:19,Integrability,depend,dependent,19,"// If the index is dependent on the store we will introduce a cycle when; // creating the load (the load uses the index, and by replacing the chain; // we will make the index dependent on the load). Also, the store might be; // dependent on the extractelement and introduce a cycle when creating; // the load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:175,Integrability,depend,dependent,175,"// If the index is dependent on the store we will introduce a cycle when; // creating the load (the load uses the index, and by replacing the chain; // we will make the index dependent on the load). Also, the store might be; // dependent on the extractelement and introduce a cycle when creating; // the load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:228,Integrability,depend,dependent,228,"// If the index is dependent on the store we will introduce a cycle when; // creating the load (the load uses the index, and by replacing the chain; // we will make the index dependent on the load). Also, the store might be; // dependent on the extractelement and introduce a cycle when creating; // the load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:90,Performance,load,load,90,"// If the index is dependent on the store we will introduce a cycle when; // creating the load (the load uses the index, and by replacing the chain; // we will make the index dependent on the load). Also, the store might be; // dependent on the extractelement and introduce a cycle when creating; // the load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:100,Performance,load,load,100,"// If the index is dependent on the store we will introduce a cycle when; // creating the load (the load uses the index, and by replacing the chain; // we will make the index dependent on the load). Also, the store might be; // dependent on the extractelement and introduce a cycle when creating; // the load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:192,Performance,load,load,192,"// If the index is dependent on the store we will introduce a cycle when; // creating the load (the load uses the index, and by replacing the chain; // we will make the index dependent on the load). Also, the store might be; // dependent on the extractelement and introduce a cycle when creating; // the load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:304,Performance,load,load,304,"// If the index is dependent on the store we will introduce a cycle when; // creating the load (the load uses the index, and by replacing the chain; // we will make the index dependent on the load). Also, the store might be; // dependent on the extractelement and introduce a cycle when creating; // the load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:51,Performance,LOAD,LOAD,51,"// Store the value to a temporary stack slot, then LOAD the returned part.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:67,Performance,load,load,67,"// Replace the chain going out of the store, by the one out of the load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:36,Deployability,update,update,36,"// We introduced a cycle though, so update the loads operands, making sure; // to use the original store's chain as an incoming chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:47,Performance,load,loads,47,"// We introduced a cycle though, so update the loads operands, making sure; // to use the original store's chain as an incoming chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:51,Performance,LOAD,LOAD,51,"// Store the value to a temporary stack slot, then LOAD the returned part.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:21,Deployability,update,updated,21,"// Finally, load the updated vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:12,Performance,load,load,12,"// Finally, load the updated vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:29,Energy Efficiency,efficient,efficiently,29,"// We can't handle this case efficiently. Allocate a sufficiently; // aligned object on the stack, store each operand into it, then load; // the result as a vector.; // Create the stack frame object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:42,Energy Efficiency,Allocate,Allocate,42,"// We can't handle this case efficiently. Allocate a sufficiently; // aligned object on the stack, store each operand into it, then load; // the result as a vector.; // Create the stack frame object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:132,Performance,load,load,132,"// We can't handle this case efficiently. Allocate a sufficiently; // aligned object on the stack, store each operand into it, then load; // the result as a vector.; // Create the stack frame object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:15,Performance,load,load,15,// Result is a load from the stack slot.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:35,Performance,load,load,35,"// Store the float to memory, then load the sign part out as an integer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:57,Performance,load,load,57,// First create a temporary that is aligned for both the load and store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:3,Performance,Load,Load,3,// Load out a legal integer with the same sign bit as the float.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:35,Performance,load,loaded,35,// Advance the pointer so that the loaded byte will contain the sign bit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:39,Usability,clear,clear,39,"// Transform Mag value to integer, and clear the sign bit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:31,Usability,clear,clear,31,"// Transform value to integer, clear the sign bit and transform back.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:184,Modifiability,extend,extending,184,"/// Emit a store/load combination to the stack. This stores; /// SrcOp to a stack slot of type SlotVT, truncating it if needed. It then does; /// a load from the stack slot to DestVT, extending it if needed.; /// The resultant code need not be legal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:17,Performance,load,load,17,"/// Emit a store/load combination to the stack. This stores; /// SrcOp to a stack slot of type SlotVT, truncating it if needed. It then does; /// a load from the stack slot to DestVT, extending it if needed.; /// The resultant code need not be legal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:148,Performance,load,load,148,"/// Emit a store/load combination to the stack. This stores; /// SrcOp to a stack slot of type SlotVT, truncating it if needed. It then does; /// a load from the stack slot to DestVT, extending it if needed.; /// The resultant code need not be legal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:35,Performance,load,load,35,// Don't convert with stack if the load/store is expensive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:15,Performance,load,load,15,// Result is a load from the stack slot.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:85,Performance,load,load,85,"// Create a vector sized/aligned stack slot, store the value to element #0,; // then load the whole vector back out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:208,Availability,mask,masks,208,"// Try to group the scalars into pairs, shuffle the pairs together, then; // shuffle the pairs of pairs together, etc. until the vector has; // been built. This will work only if all of the necessary shuffle masks; // are legal.; // We do this in two phases; first to check the legality of the shuffles,; // and next, assuming that all shuffles are legal, to create the new nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:58,Usability,simpl,simply,58,// This vector and the next vector are shuffled together (simply to; // append the one to the other).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:43,Performance,load,load,43,"// If all elements are constants, create a load from the constant pool.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:118,Usability,Undo,Undo,118,"// If OpVT and EltVT don't match, EltVT is not legal and the; // element values have been promoted/truncated earlier. Undo this;; // we don't want a v16i8 to become a v16i32 for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:40,Energy Efficiency,efficient,efficiently,40,"// Otherwise, we can't handle this case efficiently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:146,Integrability,depend,dependence,146,// The input chain to this libcall is the entry node of the function.; // Legalizing the call will automatically add the previous call to the; // dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:16,Performance,load,loaded,16,// Remainder is loaded back from the stack frame.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:37,Availability,avail,available,37,/// Return true if sincos libcall is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:146,Integrability,depend,dependence,146,// The input chain to this libcall is the entry node of the function.; // Legalizing the call will automatically add the previous call to the; // dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:26,Safety,avoid,avoid,26,// Offset by precision to avoid denormal range.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:150,Availability,down,down,150,"// TODO: Should really introduce control flow and use a block for the >; // MaxExp, < MinExp cases; // First, handle exponents Exp > MaxExp and scale down.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:3,Availability,Mask,Masks,3,// Masks out the exponent bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:3,Availability,Mask,Mask,3,"// Mask out the exponent part of the value.; //; // e.g, for f32 FractSignMaskVal = 0x807fffff",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:3,Performance,load,load,3,// load the constructed double,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:27,Safety,avoid,avoid,27,"// In strict mode, we must avoid spurious exceptions, and therefore; // must make sure to only emit a single STRICT_SINT_TO_FP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:25,Modifiability,inherit,inherits,25,// The STRICT_SINT_TO_FP inherits the exception mode from the; // incoming STRICT_UINT_TO_FP node; the STRICT_FADD node can; // never raise any exception.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:17,Performance,optimiz,optimization,17,// The following optimization is valid only if every value in SrcVT (when; // treated as signed) is representable in DestVT. Check that the mantissa; // size of DestVT is >= than the number of bits in SrcVT -1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:157,Integrability,depend,depending,157,"// If the sign bit of the integer is set, the large number will be treated; // as a negative number. To counteract this, the dynamic code adds an; // offset depending on the data type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:54,Modifiability,extend,extend,54,"// Okay, we found the operation and type to use. Zero extend our input to the; // desired type then run the operation on it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:30,Modifiability,extend,extended,30,// Truncate the result of the extended FP_TO_*INT operation to the desired; // size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:77,Performance,perform,perform,77,"// Saturation width is determined by second operand, so we don't have to; // perform any fixup and can directly truncate the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:34,Performance,load,load,34,// There is no libcall for atomic load; fake it with ATOMIC_CMP_SWAP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:105,Energy Efficiency,efficient,efficient,105,// We might as well mutate to FP_ROUND when FP_ROUND operation is legal; // since this operation is more efficient than stack operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:77,Availability,avail,available,77,// We fall back to use stack operation when the FP_ROUND operation; // isn't available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:107,Energy Efficiency,efficient,efficient,107,// We might as well mutate to FP_EXTEND when FP_EXTEND operation is legal; // since this operation is more efficient than stack operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:78,Availability,avail,available,78,// We fall back to use stack operation when the FP_EXTEND operation; // isn't available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:151,Availability,mask,mask,151,"// An in-register sign-extend of a boolean is a negation:; // 'true' (1) sign-extended is -1.; // 'false' (0) sign-extended is 0.; // However, we must mask the high bits of the source operand because the; // SIGN_EXTEND_INREG does not guarantee that the high bits are already zero.; // TODO: Do this for vectors too?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:23,Modifiability,extend,extend,23,"// An in-register sign-extend of a boolean is a negation:; // 'true' (1) sign-extended is -1.; // 'false' (0) sign-extended is 0.; // However, we must mask the high bits of the source operand because the; // SIGN_EXTEND_INREG does not guarantee that the high bits are already zero.; // TODO: Do this for vectors too?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:78,Modifiability,extend,extended,78,"// An in-register sign-extend of a boolean is a negation:; // 'true' (1) sign-extended is -1.; // 'false' (0) sign-extended is 0.; // However, we must mask the high bits of the source operand because the; // SIGN_EXTEND_INREG does not guarantee that the high bits are already zero.; // TODO: Do this for vectors too?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:115,Modifiability,extend,extended,115,"// An in-register sign-extend of a boolean is a negation:; // 'true' (1) sign-extended is -1.; // 'false' (0) sign-extended is 0.; // However, we must mask the high bits of the source operand because the; // SIGN_EXTEND_INREG does not guarantee that the high bits are already zero.; // TODO: Do this for vectors too?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:31,Performance,load,load,31,"// NOTE: we could fall back on load/store here too for targets without; // SRA. However, it is doubtful that any exist.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:19,Security,access,access,19,// This must be an access of the only element. Return it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:126,Availability,mask,mask,126,"// Convert shuffle node.; // If original node was v4i64 and the new EltVT is i32,; // cast operands to v8i32 and re-build the mask.; // Calculate new VT, the size of the new VT should be equal to original.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:23,Availability,mask,mask,23,// Convert the shuffle mask,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:129,Availability,avail,available,129,"// We can extend to types bigger than f32 in two steps without changing; // the result. Since ""f16 -> f32"" is much more commonly available, give; // CodeGen the option of emitting that before resorting to a libcall.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:10,Modifiability,extend,extend,10,"// We can extend to types bigger than f32 in two steps without changing; // the result. Since ""f16 -> f32"" is much more commonly available, give; // CodeGen the option of emitting that before resorting to a libcall.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:129,Availability,avail,available,129,"// We can extend to types bigger than f32 in two steps without changing; // the result. Since ""f16 -> f32"" is much more commonly available, give; // CodeGen the option of emitting that before resorting to a libcall.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:10,Modifiability,extend,extend,10,"// We can extend to types bigger than f32 in two steps without changing; // the result. Since ""f16 -> f32"" is much more commonly available, give; // CodeGen the option of emitting that before resorting to a libcall.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:7,Energy Efficiency,power,power-of-two,7,// For power-of-two jumptable entry sizes convert multiplication to a shift.; // This transformation needs to be done here since otherwise the MIPS; // backend will end up emitting a three instruction multiply sequence; // instead of a single shift and MSP430 will call a runtime function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:39,Performance,load,load,39,"// For PIC, the sequence is:; // BRIND(load(Jumptable + index) + RelocBase); // RelocBase can be JumpTable, GOT or some sort of global base.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:6,Testability,test,test,6,// We test only the i1 bit. Skip the AND if UNDEF or another AND.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:66,Integrability,wrap,wrap,66,"// If we expanded the SETCC by inverting the condition code, then wrap; // the existing SETCC in a NOT to restore the intended condition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:136,Availability,mask,mask,136,"// Otherwise, SETCC for the given comparison type must be completely; // illegal; expand it into a SELECT_CC.; // FIXME: This drops the mask/evl for VP_SETCC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:2,Availability,Mask,Mask,2,/*Mask*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:2,Availability,Mask,Mask,2,/*Mask*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:120,Energy Efficiency,efficient,efficiently,120,"// If the target didn't lower this, lower it to '__sync_synchronize()' call; // FIXME: handle ""fence singlethread"" more efficiently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:21,Availability,avail,available,21,"// If outline atomic available, prepare its arguments and expand.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:52,Safety,abort,abort,52,"// If this operation is not supported, lower it to 'abort()' call",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:13,Modifiability,extend,extend,13,// Sign/zero extend the argument if the libcall takes a larger type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:69,Performance,load,load,69,"// Call fegetmode, which saves control modes into a stack slot. Then load; // the value to return from the stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:8,Modifiability,extend,extend,8,"// Zero extend the argument unless its cttz, then use any_extend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:3,Performance,Perform,Perform,3,"// Perform the larger operation. For CTPOP and CTTZ_ZERO_UNDEF, this is; // already the correct result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:3,Performance,Perform,Perform,3,"// Perform the larger operation, then convert back",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:3,Performance,Perform,Perform,3,"// Perform the larger operation, then convert back",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:44,Availability,down,down,44,"// Perform the larger operation, then round down.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:3,Performance,Perform,Perform,3,"// Perform the larger operation, then round down.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:23,Availability,mask,mask,23,// Convert the shuffle mask to the right # elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp:167,Energy Efficiency,allocate,allocated,167,// Use a delete listener to remove nodes which were deleted during; // legalization from LegalizeNodes. This is needed to handle the situation; // where a new node is allocated by the object pool to the same address of a; // previously deleted node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:766,Performance,perform,performing,766,"//===-------- LegalizeFloatTypes.cpp - Legalization of float types --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements float type expansion and softening for LegalizeTypes.; // Softening is the act of turning a computation in an illegal floating point; // type into a computation in an integer type of the same size; also known as; // ""soft float"". For example, turning f32 arithmetic into operations using i32.; // The resulting integer value is the same as what you would get by performing; // the floating point operation and bitcasting the result to the integer type.; // Expansion is the act of changing a computation in an illegal type to be a; // computation in two identical registers of a smaller type. For example,; // implementing ppcf128 arithmetic in two f64 registers.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:158,Modifiability,refactor,refactored,158,/// GetFPLibCall - Return the right libcall for the given floating point type.; /// FIXME: This is a local version of RTLIB::getFPLibCall that should be; /// refactored away (see RTLIB::getPOWI for an example).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:3,Availability,Mask,Mask,3,// Mask = ~(1 << (Size-1)),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:23,Modifiability,extend,extend,23,// Shift right or sign-extend it if the two operands have different types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:3,Usability,Clear,Clear,3,// Clear the sign bit of the first operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:38,Availability,mask,mask,38,// Expand Y = FNEG(X) -> Y = X ^ sign mask,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:12,Modifiability,extend,extending,12,// Do a non-extending load followed by FP_EXTEND.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:22,Performance,load,load,22,// Do a non-extending load followed by FP_EXTEND.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:13,Modifiability,extend,extend,13,// Sign/zero extend the argument if the libcall takes a larger type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:38,Deployability,update,updated,38,"// If the result is N, the sub-method updated N in place. Tell the legalizer; // core about this to re-analyze.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:3,Deployability,Update,Update,3,// Update N to have the operands specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:3,Deployability,Update,Update,3,// Update N to have the operands specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:3,Deployability,Update,Update,3,// Update N to have the operands specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:23,Modifiability,extend,extend,23,// Shift right or sign-extend it if the two operands have different types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:20,Modifiability,extend,extend,20,// Other we need to extend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:38,Deployability,update,updated,38,"// If the result is N, the sub-method updated N in place. Tell the legalizer; // core about this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:3,Deployability,Update,Update,3,// Update N to have the operands specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:3,Deployability,Update,Update,3,// Update N to have the operands specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:9,Modifiability,extend,extend,9,"// Else, extend the promoted float value to the desired VT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:9,Modifiability,extend,extend,9,"// Else, extend the promoted float value to the desired VT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:28,Availability,down,down,28,// Lower the promoted Float down to the integer value of same size and construct; // a STORE of the integer value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:25,Energy Efficiency,reduce,reduce,25,// Explicit operation to reduce precision. Reduce the value to half precision; // and promote it back to the legal type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:43,Energy Efficiency,Reduce,Reduce,43,// Explicit operation to reduce precision. Reduce the value to half precision; // and promote it back to the legal type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:25,Energy Efficiency,reduce,reduce,25,// Explicit operation to reduce precision. Reduce the value to half precision; // and promote it back to the legal type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:43,Energy Efficiency,Reduce,Reduce,43,// Explicit operation to reduce precision. Reduce the value to half precision; // and promote it back to the legal type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:3,Performance,Load,Load,3,// Load the value as an integer value with the same number of bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:87,Performance,concurren,concurrently,87,"// Expand and promote recursively.; // TODO: This is non-optimal, but dealing with the concurrently happening; // vector-legalization is non-trivial. We could do something similar to; // PromoteFloatRes_EXTRACT_VECTOR_ELT here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:23,Modifiability,extend,extend,23,// Shift right or sign-extend it if the two operands have different types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:3,Usability,Clear,Clear,3,// Clear the sign bit of the first operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp:3,Performance,Load,Load,3,// Load the value as an integer value with the same number of bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeFloatTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:651,Energy Efficiency,power,powerpc,651,"//===----- LegalizeIntegerTypes.cpp - Legalization of integer types -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements integer type expansion and promotion for LegalizeTypes.; // Promotion is the act of changing a computation in an illegal type into a; // computation in a larger type. For example, implementing i8 arithmetic in an; // i32 register (often needed on powerpc).; // Expansion is the act of changing a computation in an illegal type into a; // computation in two identical registers of a smaller type. For example,; // implementing i64 arithmetic in two i32 registers (often needed on 32-bit; // targets).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,Modifiability,extend,extend,8,"// Sign-extend the new bits, and continue the assertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:46,Testability,assert,assertion,46,"// Sign-extend the new bits, and continue the assertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:39,Testability,assert,assertion,39,"// Zero the new bits, and continue the assertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:51,Modifiability,extend,extended,51,// Op2 is used for the comparison and thus must be extended according to the; // target's atomic operations. Op3 is merely stored and so can be left alone.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Deployability,Update,Update,3,// Update the use to N with the newly created Res.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,Modifiability,extend,extend,8,"// Zero extend things like i1, sign extend everything else. It shouldn't; // matter in theory which one we pick, but this tends to give better code?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:36,Modifiability,extend,extend,36,"// Zero extend things like i1, sign extend everything else. It shouldn't; // matter in theory which one we pick, but this tends to give better code?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,Modifiability,extend,extend,8,// Zero extend to the promoted type and do the count there.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,Modifiability,extend,extend,8,// Zero extend to the promoted type and do the count or parity there.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:297,Modifiability,extend,extend,297,"// Assert that the converted value fits in the original type. If it doesn't; // (eg: because the value being converted is too big), then the result of the; // original operation was undefined anyway, so the assert is still correct.; //; // NOTE: fp-to-uint to fp-to-sint promotion guarantees zero extend. For example:; // before legalization: fp-to-uint16, 65534. -> 0xfffe; // after legalization: fp-to-sint32, 65534. -> 0x0000fffe",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Testability,Assert,Assert,3,"// Assert that the converted value fits in the original type. If it doesn't; // (eg: because the value being converted is too big), then the result of the; // original operation was undefined anyway, so the assert is still correct.; //; // NOTE: fp-to-uint to fp-to-sint promotion guarantees zero extend. For example:; // before legalization: fp-to-uint16, 65534. -> 0xfffe; // after legalization: fp-to-sint32, 65534. -> 0x0000fffe",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:207,Testability,assert,assert,207,"// Assert that the converted value fits in the original type. If it doesn't; // (eg: because the value being converted is too big), then the result of the; // original operation was undefined anyway, so the assert is still correct.; //; // NOTE: fp-to-uint to fp-to-sint promotion guarantees zero extend. For example:; // before legalization: fp-to-uint16, 65534. -> 0xfffe; // after legalization: fp-to-sint32, 65534. -> 0x0000fffe",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:65,Usability,simpl,simplify,65,"// If the result and operand types are the same after promotion, simplify; // to an in-register extension. Unless this is a VP_*_EXTEND.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:62,Modifiability,extend,extend,62,// The high bits are not guaranteed to be anything. Insert an extend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:19,Modifiability,extend,extend,19,"// Otherwise, just extend the original operand all the way to the larger type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:172,Energy Efficiency,efficient,efficient,172,"// If the promoted type is legal, we can convert this to:; // 1. ANY_EXTEND iN to iM; // 2. SHL by M-N; // 3. [US][ADD|SUB|SHL]SAT; // 4. L/ASHR by M-N; // Else it is more efficient to convert this to a min and a max; // operation in the higher precision arithmetic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:58,Modifiability,extend,extended,58,// USUBSAT can always be promoted as long as we have zero-extended the args.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:50,Safety,detect,detect,50,"// Shift cannot use a min/max expansion, we can't detect overflow if all of; // the bits have been shifted out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:86,Modifiability,extend,extends,86,"// Promoting the operand and result values changes the saturation width,; // which is extends the values that we clamp to on saturation. This could be; // resolved by shifting one of the operands the same amount, which would; // also shift the result we compare against, then shifting back.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:17,Performance,perform,perform,17,// See if we can perform the division in this type without expanding.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:37,Modifiability,extend,extend,37,// Calculate the overflow flag: sign extend the arithmetic result from; // the original type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,Modifiability,extend,extend,8,// Sign extend the input.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,Modifiability,extend,extend,8,// Zero extend the input.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:32,Modifiability,extend,extend,32,// It doesn't matter if we sign extend or zero extend in the inputs. So do; // whatever is best for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:47,Modifiability,extend,extend,47,// It doesn't matter if we sign extend or zero extend in the inputs. So do; // whatever is best for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:41,Modifiability,extend,extended,41,// The input value must be properly sign extended.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:41,Modifiability,extend,extended,41,// The input value must be properly zero extended.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:57,Security,access,access,57,// TODO: VP_TRUNCATE need to handle when TypeWidenVector access to some; // targets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,Modifiability,extend,extend,8,// Zero extend so that the elements are of same type as those of NVT,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:37,Modifiability,extend,extend,37,// Calculate the overflow flag: zero extend the arithmetic result from; // the original type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:19,Modifiability,extend,extend,19,// We need to sign-extend the operands so the carry value computed by the; // wide operation will be equivalent to the carry value computed by the; // narrow operation.; // An UADDO_CARRY can generate carry only if any of the operands has its; // most significant bit set. Sign extension propagates the most significant; // bit into the higher bits which means the extra bit that the narrow; // addition would need (i.e. the carry) will be propagated through the higher; // bits of the wide addition.; // A USUBO_CARRY can generate borrow only if LHS < RHS and this property will; // be preserved by sign extension.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Deployability,Update,Update,3,// Update the users of the original carry/borrow value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:118,Modifiability,extend,extending,118,"// If a larger ABS or SMAX isn't supported by the target, try to expand now.; // If we expand later we'll end up sign extending more than just the sra input; // in sra+xor+sub expansion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:62,Modifiability,extend,extend,62,"// To determine if the result overflowed in a larger type, we extend the; // input to the larger type, do the multiply (checking if it overflows),; // then also check the high bits of the result to see if overflow happened; // there.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:113,Modifiability,extend,extend,113,"// Overflow occurred if it occurred in the larger type, or if the high part; // of the result does not zero/sign-extend the low part. Check this second; // possibility first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:59,Modifiability,extend,extend,59,// Signed overflow occurred if the high part does not sign extend the low.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:28,Performance,load,load,28,// Handle endianness of the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:38,Deployability,update,updated,38,"// If the result is N, the sub-method updated N in place. Tell the legalizer; // core about this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:43,Modifiability,extend,extends,43,"// We have to insert explicit sign or zero extends. Note that we could; // insert sign extends for ALL conditions. For those operations where either; // zero or sign extension would be valid, we ask the target which extension; // it would prefer.; // Signed comparisons always require sign extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:87,Modifiability,extend,extends,87,"// We have to insert explicit sign or zero extends. Note that we could; // insert sign extends for ALL conditions. For those operations where either; // zero or sign extension would be valid, we ask the target which extension; // it would prefer.; // Signed comparisons always require sign extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:145,Modifiability,extend,extended,145,// The target would prefer to promote the comparison operand with sign; // extension. Honor that unless the promoted values are already zero; // extended.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:35,Modifiability,extend,extended,35,"// The promoted values aren't zero extended, use a sext_inreg.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:180,Safety,avoid,avoid,180,"// Prefer to promote the comparison operand with zero extension.; // If the width of OpL/OpR excluding the duplicated sign bits is no greater; // than the width of LHS/RHS, we can avoid/ inserting a zext_inreg operation; // that we might not be able to remove.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:113,Performance,load,load,113,"// This should only occur in unusual situations like bitcasting to an; // x86_fp80, so just turn it into a store+load",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:95,Energy Efficiency,power,power-of-two,95,// The vector type is legal but the element type is not. This implies; // that the vector is a power-of-two in length and that the element; // type does not have a strange size (eg: it is not i1).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:7,Availability,Mask,Mask,7,// The Mask. Update in place.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:13,Deployability,Update,Update,13,// The Mask. Update in place.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Deployability,Update,Update,3,"// Update triggered CSE, do our own replacement since caller can't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:7,Availability,Mask,Mask,7,// The Mask,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:16,Modifiability,extend,extend,16,// Need to sign extend the index since the bits will likely be used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Deployability,Update,Update,3,"// Update triggered CSE, do our own replacement since caller can't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:7,Availability,Mask,Mask,7,// The Mask,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:16,Modifiability,extend,extend,16,// Need to sign extend the index since the bits will likely be used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:231,Modifiability,rewrite,rewrite,231,"// We can't just promote the exponent type in FPOWI, since we want to lower; // the node to a libcall and we if we promote to a type larger than; // sizeof(int) the libcall might not be according to the targets ABI. Instead; // we rewrite to a libcall here directly, letting makeLibCall handle promotion; // if the target accepts it according to shouldSignExtendTypeInLibCall.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Availability,Mask,Mask,3,// Mask; // Update in place.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:12,Deployability,Update,Update,12,// Mask; // Update in place.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:107,Performance,load,loaded,107,// Expanding to the strong ATOMIC_CMP_SWAP node means we can determine; // success simply by comparing the loaded value against the ingoing; // comparison.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:83,Usability,simpl,simply,83,// Expanding to the strong ATOMIC_CMP_SWAP node means we can determine; // success simply by comparing the loaded value against the ingoing; // comparison.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:68,Usability,simpl,simplify,68,"/// ExpandShiftWithKnownAmountBit - Try to determine whether we can simplify; /// this shift based on knowledge of the high bit of the shift amount. If we; /// can tell this, we know that it is >= 32 or < 32, without knowing the actual; /// shift amount.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:108,Usability,simpl,simple,108,"// If we know that any of the high bits of the shift amount are one, then we; // can do this as a couple of simple shifts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Availability,Mask,Mask,3,"// Mask out the high bit, which we know is set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:8,Modifiability,extend,extend,8,// Sign extend high part.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:109,Usability,simpl,simple,109,"// If we know that all of the high bits of the shift amount are zero, then we; // can do this as a couple of simple shifts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:47,Safety,avoid,avoid,47,// Calculate 31-x. 31 is used instead of 32 to avoid creating an undefined; // shift if x is zero. We can use XOR here because x is known to be smaller; // than 32.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:104,Modifiability,extend,extend,104,"// If the upper halves are all sign bits, then we can perform the MINMAX on; // the lower half and sign-extend the result to the upper half.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:54,Performance,perform,perform,54,"// If the upper halves are all sign bits, then we can perform the MINMAX on; // the lower half and sign-extend the result to the upper half.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:55,Usability,simpl,simplifies,55,"// Expand to ""a < b ? a : b"" etc. Prefer ge/le if that simplifies; // the compare.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:57,Energy Efficiency,reduce,reduce,57,// Special case: X+1 has a carry out if X+1==0. This may reduce the live; // range of X. We assume comparing with 0 is cheap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:24,Usability,simpl,simply,24,// Expand the result by simply replacing it with the equivalent; // non-overflow-checking operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:59,Safety,detect,detect,59,"// Special case: uaddo X, 1 overflowed if X+1 == 0. We can detect this; // with (Lo | Hi) == 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:41,Usability,simpl,simplify,41,// Split the promoted operand. This will simplify when it is expanded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:98,Modifiability,extend,extend,98,"// If the upper half is all sign bits, then we can perform the ABS on the; // lower half and zero-extend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:51,Performance,perform,perform,51,"// If the upper half is all sign bits, then we can perform the ABS on the; // lower half and zero-extend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Modifiability,Extend,Extend,3,// Extend to f32 as there is no bf16 libcall.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Modifiability,Extend,Extend,3,// Extend to f32.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:45,Performance,load,load,45,// Build a factor node to remember that this load is independent of the; // other one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:62,Performance,load,loads,62,// Big-endian - high bits are at low addresses. Favor aligned loads at; // the cost of some bit-fiddling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Performance,Load,Load,3,// Load both the high bits and maybe some of the low bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Performance,Load,Load,3,// Load the rest of the low bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:45,Performance,load,load,45,// Build a factor node to remember that this load is independent of the; // other one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:132,Availability,down,down,132,"/// This performs an expansion of the integer result for a fixed point; /// multiplication. The default expansion performs rounding down towards; /// negative infinity, though targets that do care about rounding should specify; /// a target hook for rounding and provide their own expansion or lowering of; /// fixed point multiplication to be consistent with rounding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:9,Performance,perform,performs,9,"/// This performs an expansion of the integer result for a fixed point; /// multiplication. The default expansion performs rounding down towards; /// negative infinity, though targets that do care about rounding should specify; /// a target hook for rounding and provide their own expansion or lowering of; /// fixed point multiplication to be consistent with rounding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:114,Performance,perform,performs,114,"/// This performs an expansion of the integer result for a fixed point; /// multiplication. The default expansion performs rounding down towards; /// negative infinity, though targets that do care about rounding should specify; /// a target hook for rounding and provide their own expansion or lowering of; /// fixed point multiplication to be consistent with rounding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:66,Testability,assert,assert,66,"// For SMULFIX[SAT] we only expect to find Scale<VTSize, but this assert will; // cover for unhandled cases below, while still being valid for UMULFIX[SAT].",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:66,Performance,perform,perform,66,"// After getting the multiplication result in 4 parts, we need to perform a; // shift right by the amount of the scale to get the result in that scale.; //; // Let's say we multiply 2 64 bit numbers. The resulting value can be held in; // 128 bits that are cut into 4 32-bit parts:; //; // HH HL LH LL; // |---32---|---32---|---32---|---32---|; // 128 96 64 32 0; //; // |------VTSize-----|; //; // |NVTSize-|; //; // The resulting Lo and Hi would normally be in LL and LH after the shift. But; // to avoid unneccessary shifting of all 4 parts, we can adjust the shift; // amount and get Lo and Hi using two funnel shifts. Or for the special case; // when Scale is a multiple of NVTSize we can just pick the result without; // shifting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:501,Safety,avoid,avoid,501,"// After getting the multiplication result in 4 parts, we need to perform a; // shift right by the amount of the scale to get the result in that scale.; //; // Let's say we multiply 2 64 bit numbers. The resulting value can be held in; // 128 bits that are cut into 4 32-bit parts:; //; // HH HL LH LL; // |---32---|---32---|---32---|---32---|; // 128 96 64 32 0; //; // |------VTSize-----|; //; // |NVTSize-|; //; // The resulting Lo and Hi would normally be in LL and LH after the shift. But; // to avoid unneccessary shifting of all 4 parts, we can adjust the shift; // amount and get Lo and Hi using two funnel shifts. Or for the special case; // when Scale is a multiple of NVTSize we can just pick the result without; // shifting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:24,Usability,simpl,simply,24,// Expand the result by simply replacing it with the equivalent; // non-overflow-checking operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:279,Modifiability,rewrite,rewrite,279,// Compute the overflow.; //; // LHSSign -> LHS < 0; // RHSSign -> RHS < 0; // SumSign -> Sum < 0; //; // Add:; // Overflow -> (LHSSign == RHSSign) && (LHSSign != SumSign); // Sub:; // Overflow -> (LHSSign != RHSSign) && (LHSSign != SumSign); //; // To get better codegen we can rewrite this by doing bitwise math on; // the integers and extract the final sign bit at the end. So the; // above becomes:; //; // Add:; // Overflow -> (~(LHS ^ RHS) & (LHS ^ Sum)) < 0; // Sub:; // Overflow -> ((LHS ^ RHS) & (LHS ^ Sum)) < 0; //; // NOTE: This is different than the expansion we do in expandSADDSUBO; // because it is more costly to determine the RHS is > 0 for SSUBO with the; // integers split.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Modifiability,Extend,Extend,3,"// Extend the value, that is being shifted, to the entire stack slot's width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:71,Performance,load,load,71,"// Now, compute the full-byte offset into stack slot from where we can load.; // We have shift amount, which is in bits, but in multiples of byte.; // So just divide by CHAR_BIT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:29,Performance,load,load,29,"// And clamp it, because OOB load is an immediate UB,; // while shift overflow would have *just* been poison.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:130,Availability,down,downwards,130,"// We have exactly two strategies on indexing into stack slot here:; // 1. upwards starting from the beginning of the slot; // 2. downwards starting from the middle of the slot; // On little-endian machine, we pick 1. for right shifts and 2. for left-shift; // and vice versa on big-endian machine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:71,Performance,load,load,71,// Get the pointer somewhere into the stack slot from which we need to load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:7,Performance,load,load,7,"// And load it! While the load is not legal, legalizing it is obvious.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:26,Performance,load,load,26,"// And load it! While the load is not legal, legalizing it is obvious.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:9,Performance,perform,performed,9,"// We've performed the shift by a CHAR_BIT * [_ShAmt / CHAR_BIT_]; // If we may still have a less-than-CHAR_BIT to shift by, do so now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:21,Energy Efficiency,efficient,efficient,21,"// If we can emit an efficient shift operation, do so now. Check to see if; // the RHS is a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:99,Modifiability,variab,variable,99,"// If we can determine that the high bit of the shift is zero or one, even if; // the low bits are variable, emit this shift in an optimized form.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:131,Performance,optimiz,optimized,131,"// If we can determine that the high bit of the shift is zero or one, even if; // the low bits are variable, emit this shift in an optimized form.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:41,Usability,simpl,simplify,41,// Split the promoted operand. This will simplify when it is expanded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:131,Safety,abort,abort,131,"// Cannot use `UMUL_LOHI` directly, because some 32-bit targets (ARM) do not; // know how to expand `i64,i64 = umul_lohi a, b` and abort (why isn’t this; // operation recursively legalized?).; //; // Many backends understand this pattern and will convert into LOHI; // themselves, if applicable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:119,Safety,avoid,avoid,119,"// If we don't have the libcall or if the function we are compiling is the; // implementation of the expected libcall (avoid inf-loop), expand inline.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:41,Usability,simpl,simplify,41,// Split the promoted operand. This will simplify when it is expanded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:38,Deployability,update,updated,38,"// If the result is N, the sub-method updated N in place. Tell the legalizer; // core about this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:199,Energy Efficiency,efficient,efficient,199,"// LoCmp = lo(op1) < lo(op2) // Always unsigned comparison; // HiCmp = hi(op1) < hi(op2) // Signedness depends on operands; // dest = hi(op1) == hi(op2) ? LoCmp : HiCmp;; // NOTE: on targets without efficient SELECT of bools, we can always use; // this identity: (B1 ? B2 : B3) --> (B1 & B2)|(!B1&B3)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:103,Integrability,depend,depends,103,"// LoCmp = lo(op1) < lo(op2) // Always unsigned comparison; // HiCmp = hi(op1) < hi(op2) // Signedness depends on operands; // dest = hi(op1) == hi(op2) ? LoCmp : HiCmp;; // NOTE: on targets without efficient SELECT of bools, we can always use; // this identity: (B1 ? B2 : B3) --> (B1 & B2)|(!B1&B3)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:18,Safety,detect,detect,18,"// SETCCCARRY can detect < and >= directly. For > and <=, flip; // operands and condition code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Performance,Perform,Perform,3,"// Perform a wide subtraction, feeding the carry from the low part into; // SETCCCARRY. The SETCCCARRY operation is essentially looking at the high; // part of the result of LHS - RHS. It is negative iff LHS < RHS. It is; // zero or positive iff LHS >= RHS.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Deployability,Update,Update,3,// Update N to have the operands specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:3,Deployability,Update,Update,3,// Update N to have the operands specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:14,Deployability,update,update,14,"// Otherwise, update N to have the operands specified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:57,Performance,scalab,scalable,57,// TODO: We may be able to use this for types other than scalable; // vectors and fix those tests that expect BUILD_VECTOR to be used,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:92,Testability,test,tests,92,// TODO: We may be able to use this for types other than scalable; // vectors and fix those tests that expect BUILD_VECTOR to be used,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:14,Modifiability,extend,extend,14,"// Attempt to extend constant bool vectors to match target's BooleanContent.; // While not necessary, this improves chances of the constant correctly; // folding with compare results (e.g. for NOT patterns).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:48,Modifiability,extend,extend,48,"// For operands whose TypeAction is to promote, extend the promoted node; // appropriately (ZERO_EXTEND or SIGN_EXTEND) from the original pre-promotion; // type, and then construct a new *_EXTEND_VECTOR_INREG node to the promote-to; // type..",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:12,Modifiability,extend,extend,12,// Directly extend to the appropriate transform-to type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:80,Usability,simpl,simply,80,"// The VECREDUCE result size may be larger than the element size, so; // we can simply change the result type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp:80,Usability,simpl,simply,80,"// The VP_REDUCE result size may be larger than the element size, so we can; // simply change the result type. However the start value and result must be; // the same.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:1138,Integrability,depend,depends,1138,"th an illegal type must be mapped; // by exactly one of PromotedIntegers, ExpandedIntegers, ..., ReplacedValues.; // Values with a legal type may be mapped by ReplacedValues, but not by any of; // the other maps.; // Note that these invariants may not hold momentarily when processing a node:; // the node being processed may be put in a map before being marked Processed.; // Note that it is possible to have nodes marked NewNode in the DAG. This can; // occur in two ways. Firstly, a node may be created during legalization but; // never passed to the legalization core. This is usually due to the implicit; // folding that occurs when using the DAG.getNode operators. Secondly, a new; // node may be passed to the legalization core, but when analyzed may morph; // into a different node, leaving the original node as a NewNode in the DAG.; // A node may morph if one of its operands changes during analysis. Whether; // it actually morphs or not depends on whether, after updating its operands,; // it is equivalent to an existing node: if so, it morphs into that existing; // node (CSE). An operand can change during analysis if the operand is a new; // node that morphs, or it is a processed value that was mapped to some other; // value (as recorded in ReplacedValues) in which case the operand is turned; // into that other value. If a node morphs then the node it morphed into will; // be used instead of it for legalization, however the original node continues; // to live on in the DAG.; // The conclusion is that though there may be nodes marked NewNode in the DAG,; // all uses of such nodes are also marked NewNode: the result is a fungus of; // NewNodes growing on top of the useful nodes, and perhaps using them, but; // not used by them.; // If a value is mapped by ReplacedValues, then it must have no uses, except; // by nodes marked NewNode (see above).; // The final node obtained by mapping by ReplacedValues is not marked NewNode.; // Note that ReplacedValues should be applied i",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:80,Deployability,update,updated,80,// It is possible the node has been remapped to another node and had; // its Id updated in the Value to Id table. The node it remapped to; // may not have been processed yet. Look up the Id in the Id to Value; // table and re-check the Processed state. If the node hasn't been; // remapped we'll get the same state as we got earlier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:73,Availability,down,down,73,"/// This is the main entry point for the type legalizer. This does a top-down; /// traversal of the dag, legalizing types as it goes. Returns ""true"" if it made; /// any changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:120,Deployability,update,update,120,"// The following calls must either replace all of the node's results; // using ReplaceValueWith, and return ""false""; or update the node's; // operands in place, and return ""true"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:18,Deployability,update,updated,18,"// The sub-method updated N in place. Check to see if any operands are new,; // and if so, mark them. If the node needs revisiting, don't add all users; // to the worklist etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:492,Deployability,update,updated,492,"// Okay, we know that this node is new. Recursively walk all of its operands; // to see if they are new also. The depth of this walk is bounded by the size; // of the new tree that was constructed (usually 2-3 nodes), so we don't worry; // about revisiting of nodes.; //; // As we walk the operands, keep track of the number of nodes that are; // processed. If non-zero, this will become the new nodeid of this node.; // Operands may morph when they are analyzed. If so, the node will be; // updated after all operands have been analyzed. Since this is rare,; // the code tries to minimize overhead in the non-morphing case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:27,Deployability,update,update,27,// Some operands changed - update the node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:55,Deployability,update,updates,55,/// This class is a DAGUpdateListener that listens for updates to nodes and; /// recomputes their ready state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:51,Energy Efficiency,schedul,scheduled,51,// In theory the deleted node could also have been scheduled for analysis.; // So remove it from the set of nodes which will be analyzed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:8,Deployability,update,updates,8,// Node updates can mean pretty much anything. It is possible that an; // operand was set to something already processed (f.e.) in which case; // this node could become ready. Recompute its flags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:67,Safety,safe,safe,67,// The node was analyzed while reanalyzing an earlier node - it is safe; // to skip. Note that this is not a morphing node - otherwise it would; // still be marked NewNode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:116,Deployability,update,updated,116,// OldVal may be a target of the ReplacedValues map which was marked; // NewNode to force reanalysis because it was updated. Ensure that; // anything that ReplacedValues mapped to OldVal will now be mapped; // all the way to NewVal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:20,Deployability,update,update,20,"// When recursively update nodes with new nodes, it is possible to have; // new uses of From due to CSE. If this happens, replace the new uses of; // From with To.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:228,Performance,scalab,scalable,228,// Note that in some cases vector operation operands may be greater than; // the vector element type. For example BUILD_VECTOR of type <1 x i1> with; // a constant i8 operand.; // We don't currently support the scalarization of scalable vector types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:29,Energy Efficiency,allocate,allocated,29,"// Lo/Hi may have been newly allocated, if so, add nodeid's as relevant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:29,Energy Efficiency,allocate,allocated,29,"// Lo/Hi may have been newly allocated, if so, add nodeid's as relevant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:29,Energy Efficiency,allocate,allocated,29,"// Lo/Hi may have been newly allocated, if so, add nodeid's as relevant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:164,Availability,down,down,164,// Create the stack frame object. Make sure it is aligned for both; // the source and destination types.; // In cases where the vector is illegal it will be broken down into parts; // and stored in parts - we should use the alignment for the smallest part.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:15,Performance,load,load,15,// Result is a load from the stack slot.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp:3,Deployability,Update,Update,3,// Update the widening map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:447,Integrability,interface,interface,447,"//===-- LegalizeTypes.h - DAG Type Legalizer class definition ---*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the DAGTypeLegalizer class. This is a private interface; // shared between the code that implements the SelectionDAG::LegalizeTypes; // method.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:56,Usability,simpl,simple,56,"/// This is a bitvector that contains two bits for each simple value type,; /// where the two bits correspond to the LegalizeAction enum from; /// TargetLowering. This can be queried with ""getTypeAction(VT)"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:29,Usability,simpl,simple,29,/// Return true if this is a simple legal type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:78,Availability,down,down,78,"/// This is the main entry point for the type legalizer. This does a; /// top-down traversal of the dag, legalizing types as it goes. Returns; /// ""true"" if it made any changes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:10,Integrability,rout,routines,10,// Common routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:525,Modifiability,extend,extended,525,"//===--------------------------------------------------------------------===//; // Integer Promotion Support: LegalizeIntegerTypes.cpp; //===--------------------------------------------------------------------===//; /// Given a processed operand Op which was promoted to a larger integer type,; /// this returns the promoted value. The low bits of the promoted value; /// corresponding to the original type are exactly equal to Op.; /// The extra bits contain rubbish, so the promoted value may need to be zero-; /// or sign-extended from the original type before it is usable (the helpers; /// SExtPromotedInteger and ZExtPromotedInteger can do this for you).; /// For example, if Op is an i16 and was promoted to an i32, then this method; /// returns an i32, the lower 16 bits of which coincide with Op, and the upper; /// 16 bits of which contain rubbish.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:570,Usability,usab,usable,570,"//===--------------------------------------------------------------------===//; // Integer Promotion Support: LegalizeIntegerTypes.cpp; //===--------------------------------------------------------------------===//; /// Given a processed operand Op which was promoted to a larger integer type,; /// this returns the promoted value. The low bits of the promoted value; /// corresponding to the original type are exactly equal to Op.; /// The extra bits contain rubbish, so the promoted value may need to be zero-; /// or sign-extended from the original type before it is usable (the helpers; /// SExtPromotedInteger and ZExtPromotedInteger can do this for you).; /// For example, if Op is an i16 and was promoted to an i32, then this method; /// returns an i32, the lower 16 bits of which coincide with Op, and the upper; /// 16 bits of which contain rubbish.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:36,Modifiability,extend,extend,36,/// Get a promoted operand and sign extend it to the final size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:36,Modifiability,extend,extend,36,/// Get a promoted operand and zero extend it to the final size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:76,Integrability,depend,depending,76,"// Get a promoted operand and sign or zero extend it to the final size; // (depending on TargetLoweringInfo::isSExtCheaperThanZExt). For a given; // subtarget and type, the choice of sign or zero-extension will be; // consistent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:43,Modifiability,extend,extend,43,"// Get a promoted operand and sign or zero extend it to the final size; // (depending on TargetLoweringInfo::isSExtCheaperThanZExt). For a given; // subtarget and type, the choice of sign or zero-extension will be; // consistent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:10,Availability,mask,mask,10,/// Split mask operator of a VP intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:10,Availability,mask,mask,10,/// Split mask operator of a VP intrinsic in a given location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:12,Availability,mask,mask,12,"/// Given a mask Mask, returns the larger vector into which Mask was widened.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:17,Availability,Mask,Mask,17,"/// Given a mask Mask, returns the larger vector into which Mask was widened.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:60,Availability,Mask,Mask,60,"/// Given a mask Mask, returns the larger vector into which Mask was widened.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:45,Availability,mask,mask,45,"// For VP operations, we must also widen the mask. Note that the mask type; // may not actually need widening, leading it be split along with the VP; // operation.; // FIXME: This could lead to an infinite split/widen loop. We only handle; // the case where the mask needs widening to an identically-sized type as; // the vector inputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:65,Availability,mask,mask,65,"// For VP operations, we must also widen the mask. Note that the mask type; // may not actually need widening, leading it be split along with the VP; // operation.; // FIXME: This could lead to an infinite split/widen loop. We only handle; // the case where the mask needs widening to an identically-sized type as; // the vector inputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:262,Availability,mask,mask,262,"// For VP operations, we must also widen the mask. Note that the mask type; // may not actually need widening, leading it be split along with the VP; // operation.; // FIXME: This could lead to an infinite split/widen loop. We only handle; // the case where the mask needs widening to an identically-sized type as; // the vector inputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:55,Performance,perform,perform,55,/// Helper function to generate a set of operations to perform; /// a vector operation for a wider type.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:264,Performance,load,loads,264,//===--------------------------------------------------------------------===//; // Vector Widening Utilities Support: LegalizeVectorTypes.cpp; //===--------------------------------------------------------------------===//; /// Helper function to generate a set of loads to load a vector with a; /// resulting wider type. It takes:; /// LdChain: list of chains for the load to be generated.; /// Ld: load to widen,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:273,Performance,load,load,273,//===--------------------------------------------------------------------===//; // Vector Widening Utilities Support: LegalizeVectorTypes.cpp; //===--------------------------------------------------------------------===//; /// Helper function to generate a set of loads to load a vector with a; /// resulting wider type. It takes:; /// LdChain: list of chains for the load to be generated.; /// Ld: load to widen,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:368,Performance,load,load,368,//===--------------------------------------------------------------------===//; // Vector Widening Utilities Support: LegalizeVectorTypes.cpp; //===--------------------------------------------------------------------===//; /// Helper function to generate a set of loads to load a vector with a; /// resulting wider type. It takes:; /// LdChain: list of chains for the load to be generated.; /// Ld: load to widen,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:399,Performance,load,load,399,//===--------------------------------------------------------------------===//; // Vector Widening Utilities Support: LegalizeVectorTypes.cpp; //===--------------------------------------------------------------------===//; /// Helper function to generate a set of loads to load a vector with a; /// resulting wider type. It takes:; /// LdChain: list of chains for the load to be generated.; /// Ld: load to widen,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:51,Performance,load,loads,51,/// Helper function to generate a set of extension loads to load a vector with; /// a resulting wider type. It takes:; /// LdChain: list of chains for the load to be generated.; /// Ld: load to widen; /// ExtType: extension element type,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:60,Performance,load,load,60,/// Helper function to generate a set of extension loads to load a vector with; /// a resulting wider type. It takes:; /// LdChain: list of chains for the load to be generated.; /// Ld: load to widen; /// ExtType: extension element type,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:155,Performance,load,load,155,/// Helper function to generate a set of extension loads to load a vector with; /// a resulting wider type. It takes:; /// LdChain: list of chains for the load to be generated.; /// Ld: load to widen; /// ExtType: extension element type,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:186,Performance,load,load,186,/// Helper function to generate a set of extension loads to load a vector with; /// a resulting wider type. It takes:; /// LdChain: list of chains for the load to be generated.; /// Ld: load to widen; /// ExtType: extension element type,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:13,Availability,mask,mask,13,/// Return a mask of vector type MaskVT to replace InMask. Also adjust; /// MaskVT to ToMaskVT if needed with vector extension or truncation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:33,Availability,Mask,MaskVT,33,/// Return a mask of vector type MaskVT to replace InMask. Also adjust; /// MaskVT to ToMaskVT if needed with vector extension or truncation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h:76,Availability,Mask,MaskVT,76,/// Return a mask of vector type MaskVT to replace InMask. Also adjust; /// MaskVT to ToMaskVT if needed with vector extension or truncation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:468,Integrability,rout,routines,468,"//===-------- LegalizeTypesGeneric.cpp - Generic type legalization --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements generic type expansion and splitting for LegalizeTypes.; // The routines here perform legalization when the details of the type (such as; // whether it is an integer or a float) do not matter.; // Expansion is the act of changing a computation in an illegal type to be a; // computation in two identical registers of a smaller type. The Lo/Hi part; // is required to be stored first in memory on little/big-endian machines.; // Splitting is the act of changing a computation in an illegal type to be a; // computation in two not necessarily identical registers of a smaller type.; // There are no requirements on how the type is represented in memory.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:482,Performance,perform,perform,482,"//===-------- LegalizeTypesGeneric.cpp - Generic type legalization --------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements generic type expansion and splitting for LegalizeTypes.; // The routines here perform legalization when the details of the type (such as; // whether it is an integer or a float) do not matter.; // Expansion is the act of changing a computation in an illegal type to be a; // computation in two identical registers of a smaller type. The Lo/Hi part; // is required to be stored first in memory on little/big-endian machines.; // Splitting is the act of changing a computation in an illegal type to be a; // computation in two not necessarily identical registers of a smaller type.; // There are no requirements on how the type is represented in memory.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:203,Integrability,rout,routines,203,"//===----------------------------------------------------------------------===//; // Generic Result Expansion.; //===----------------------------------------------------------------------===//; // These routines assume that the Lo/Hi part is stored first in memory on; // little/big-endian machines, followed by the Hi/Lo part. This means that; // they cannot be used as is on vectors, for which Lo is always stored first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:29,Energy Efficiency,efficient,efficiently,29,// Handle some special cases efficiently.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:36,Performance,load,load,36,// Lower the bit-convert to a store/load from the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:173,Availability,down,down,173,// Create the stack frame object. Make sure it is aligned for both; // the source and expanded destination types.; // In cases where the vector is illegal it will be broken down into parts; // and stored in parts - we should use the alignment for the smallest part.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:3,Performance,Load,Load,3,// Load the first half from the stack slot.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:3,Performance,Load,Load,3,// Load the second half from the stack slot.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:28,Performance,load,load,28,// Handle endianness of the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:104,Modifiability,extend,extend,104,"// The result of EXTRACT_VECTOR_ELT may be larger than the element type of; // the input vector. If so, extend the elements of the input vector to the; // same bitwidth as the result before expanding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:45,Performance,load,load,45,// Build a factor node to remember that this load is independent of the; // other one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:28,Performance,load,load,28,// Handle endianness of the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:28,Performance,load,load,28,// Handle endianness of the load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:39,Performance,load,load,39,"// Otherwise, store to a temporary and load out again as the new type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:62,Availability,avail,available,62,// Check if there are already splitted versions of the vector available and; // use those instead of splitting the mask operand again.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp:115,Availability,mask,mask,115,// Check if there are already splitted versions of the vector available and; // use those instead of splitting the mask operand again.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeTypesGeneric.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:990,Energy Efficiency,Power,PowerPC,990,"//===- LegalizeVectorOps.cpp - Implement SelectionDAG::LegalizeVectors ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the SelectionDAG::LegalizeVectors method.; //; // The vector legalizer looks for vector operations which might need to be; // scalarized and legalizes them. This is a separate step from Legalize because; // scalarizing can introduce illegal types. For example, suppose we have an; // ISD::SDIV of type v2i64 on x86-32. The type is legal (for example, addition; // on a v2i64 is legal), but ISD::SDIV isn't legal, so we have to unroll the; // operation, which introduces nodes with the illegal type i64 which must be; // expanded. Similarly, suppose we have an ISD::SRA of type v16i8 on PowerPC;; // the operation must be unrolled, which introduces nodes with the illegal; // type i8 which must be promoted.; //; // This does not legalize vector manipulations like ISD::BUILD_VECTOR,; // or operations that happen to take a vector which are custom-lowered;; // the legalization for such operations never produces nodes; // with illegal types, so it's okay to put off legalizing them until; // SelectionDAG::Legalize runs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:190,Safety,avoid,avoid,190,"// Keep track of whether anything changed; /// For nodes that are of legal width, and that have more than one use, this; /// map indicates what regularized operand to use. This allows us to avoid; /// legalizing the same thing more than once.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:35,Performance,cache,cache,35,/// Adds a node to the translation cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:36,Deployability,update,update,36,/// Make sure Results are legal and update the translation cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:59,Performance,cache,cache,59,/// Make sure Results are legal and update the translation cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:4,Integrability,Wrap,Wrapper,4,"/// Wrapper to interface LowerOperation with a vector of Results.; /// Returns false if the target wants to use default expansion. Otherwise; /// returns true. If return is true and the Results are empty, then the; /// target wants to keep the input node as is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:15,Integrability,interface,interface,15,"/// Wrapper to interface LowerOperation with a vector of Results.; /// Returns false if the target wants to use default expansion. Otherwise; /// returns true. If return is true and the Results are empty, then the; /// target wants to keep the input node as is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:98,Integrability,rout,routine,98,/// Implement expand-based legalization of vector operations.; ///; /// This is just a high-level routine to dispatch to specific code paths for; /// operations to legalize them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:182,Modifiability,extend,extended,182,/// Implement expansion for ANY_EXTEND_VECTOR_INREG.; ///; /// Shuffles the low lanes of the operand into place and bitcasts to the proper; /// type. The contents of the bits in the extended part of each element are; /// undef.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:22,Energy Efficiency,reduce,reduce,22,"/// Implements vector reduce operation promotion.; ///; /// All vector operands are promoted to a vector type with larger element; /// type, and the start value is promoted to a larger scalar type. Then the; /// result is truncated back to the original scalar type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:320,Safety,avoid,avoid,320,"// The legalize process is inherently a bottom-up recursive process (users; // legalize their uses before themselves). Given infinite stack space, we; // could just start legalizing on the root and traverse the whole graph. In; // practice however, this causes us to run out of stack space on large basic; // blocks. To avoid this problem, compute an ordering of the nodes where each; // node is only legalized after all of its operands are legalized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:105,Performance,cache,cache,105,"// Note that LegalizeOp may be reentered even from single-use nodes, which; // means that we always must cache transformed nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:100,Usability,simpl,simply,100,"// If we're asked to expand a strict vector floating-point operation,; // by default we're going to simply unroll it. That is usually the; // best approach, except in the case where the resulting strict (scalar); // operations would themselves use the fallback mutation to non-strict.; // In that specific case, just do the fallback on the vector op.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:8,Availability,mask,mask,8,// Skip mask operand.; // promote the vector operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:3,Availability,mask,mask,3,// mask,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:8,Availability,mask,mask,8,// Skip mask operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:30,Modifiability,extend,extending,30,"// ""Promote"" the operation by extending the operand.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:28,Modifiability,extend,extending,28,// Promote the operation by extending the operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:28,Modifiability,extend,extending,28,// Promote the operation by extending the operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:28,Modifiability,extend,extending,28,// Promote the operation by extending the operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:215,Modifiability,Extend,Extending,215,"// There are currently two cases of vector promotion:; // 1) Bitcasting a vector of integers to a different type to a vector of the; // same overall length. For example, x86 promotes ISD::AND v2i32 to v1i64.; // 2) Extending a vector of floats to a vector of the same number of larger; // floats. For example, AArch64 promotes ISD::FADD on v4f16 to v4f32.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:22,Availability,mask,mask,22,// Do not promote the mask operand of a VP OP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:3,Testability,Assert,Assert,3,"// Assert that the converted value fits in the original type. If it doesn't; // (eg: because the value being converted is too big), then the result of the; // original operation was undefined anyway, so the assert is still correct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:207,Testability,assert,assert,207,"// Assert that the converted value fits in the original type. If it doesn't; // (eg: because the value being converted is too big), then the result of the; // original operation was undefined anyway, so the assert is still correct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:33,Performance,scalab,scalable,33,// Expand the fpsosisat if it is scalable to prevent it from unrolling below.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:14,Availability,mask,mask,14,// Generate a mask operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:50,Availability,mask,mask,50,// What is the size of each element in the vector mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:17,Availability,mask,mask,17,// Broadcast the mask so that the entire vector is all one or all zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:51,Availability,mask,mask,51,// Bitcast the operands to be the same type as the mask.; // This is needed when we select between FP types because; // the mask is a vector of integers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:124,Availability,mask,mask,124,// Bitcast the operands to be the same type as the mask.; // This is needed when we select between FP types because; // the mask is a vector of integers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:51,Availability,avail,available,51,// Make sure that the SRA and SHL instructions are available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:16,Availability,mask,mask,16,// Build a base mask of undef shuffles.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:13,Modifiability,extend,extended,13,// Place the extended lanes into the correct locations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:22,Modifiability,extend,extend,22,// First build an any-extend node which can be legalized above when we; // recurse through it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:20,Modifiability,extend,extend,20,"// Now we need sign extend. Do this by shifting the elements. Even if these; // aren't legal operations, they have a better chance of being legalized; // without full scalarization than the sign extension does.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:3,Performance,Scalab,Scalable,3,// Scalable vectors can't use shuffle expansion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:32,Availability,mask,mask,32,// Generate a byte wise shuffle mask for the BSWAP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:30,Availability,mask,mask,30,// Only emit a shuffle if the mask is legal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:39,Performance,scalab,scalable,39,// We can't unroll or use shuffles for scalable vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:177,Energy Efficiency,reduce,reduces,177,"// If the vector element width is a whole number of bytes, test if its legal; // to BSWAP shuffle the bytes and then perform the BITREVERSE on the byte; // vector. This greatly reduces the number of bit shifts necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:117,Performance,perform,perform,117,"// If the vector element width is a whole number of bytes, test if its legal; // to BSWAP shuffle the bytes and then perform the BITREVERSE on the byte; // vector. This greatly reduces the number of bit shifts necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:59,Testability,test,test,59,"// If the vector element width is a whole number of bytes, test if its legal; // to BSWAP shuffle the bytes and then perform the BITREVERSE on the byte; // vector. This greatly reduces the number of bit shifts necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:177,Availability,mask,mask,177,"// This operation also isn't safe with AND, OR, XOR when the boolean type is; // 0/1 and the select operands aren't also booleans, as we need an all-ones; // vector constant to mask with.; // FIXME: Sign extend 1 to all ones if that's legal on the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:204,Modifiability,extend,extend,204,"// This operation also isn't safe with AND, OR, XOR when the boolean type is; // 0/1 and the select operands aren't also booleans, as we need an all-ones; // vector constant to mask with.; // FIXME: Sign extend 1 to all ones if that's legal on the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:29,Safety,safe,safe,29,"// This operation also isn't safe with AND, OR, XOR when the boolean type is; // 0/1 and the select operands aren't also booleans, as we need an all-ones; // vector constant to mask with.; // FIXME: Sign extend 1 to all ones if that's legal on the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:10,Availability,mask,mask,10,"// If the mask and the type are different sizes, unroll the vector op. This; // can occur when getSetCCResultType returns something that is different in; // size from the operand types. For example, v4i8 = select v4i32, v4i8, v4i8.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:51,Availability,mask,mask,51,// Bitcast the operands to be the same type as the mask.; // This is needed when we select between FP types because; // the mask is a vector of integers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:124,Availability,mask,mask,124,// Bitcast the operands to be the same type as the mask.; // This is needed when we select between FP types because; // the mask is a vector of integers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:29,Safety,safe,safe,29,// This operation also isn't safe when the operands aren't also booleans.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:55,Availability,mask,mask,55,// Implement VP_MERGE in terms of VSELECT. Construct a mask where vector; // indices less than the EVL/pivot are true. Combine that with the original; // mask for a full-length mask. Use a full-length VSELECT to select between; // the true and false values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:154,Availability,mask,mask,154,// Implement VP_MERGE in terms of VSELECT. Construct a mask where vector; // indices less than the EVL/pivot are true. Combine that with the original; // mask for a full-length mask. Use a full-length VSELECT to select between; // the true and false values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:177,Availability,mask,mask,177,// Implement VP_MERGE in terms of VSELECT. Construct a mask where vector; // indices less than the EVL/pivot are true. Combine that with the original; // mask for a full-length mask. Use a full-length VSELECT to select between; // the true and false values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:33,Availability,mask,mask,33,"// If we can't construct the EVL mask efficiently, it's better to unroll.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:38,Energy Efficiency,efficient,efficiently,38,"// If we can't construct the EVL mask efficiently, it's better to unroll.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:62,Availability,mask,mask,62,"// If using a SETCC would result in a different type than the mask type,; // unroll.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:58,Availability,avail,available,58,// Make sure that the SINT_TO_FP and SRL instructions are available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:16,Usability,clear,clear,16,"// Constants to clear the upper part of the word.; // Notice that we can also use SHL+SHR, but using a constant is slightly; // faster on x86.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:14,Energy Efficiency,power,power,14,// Two to the power of half-word-size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:3,Usability,Clear,Clear,3,"// Clear upper part of LO, lower HI",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp:66,Integrability,wrap,wrap,66,"// If we expanded the SETCC by inverting the condition code, then wrap; // the existing SETCC in a NOT to restore the intended condition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorOps.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:393,Performance,perform,performs,393,"//===------- LegalizeVectorTypes.cpp - Legalization of vector types -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file performs vector type splitting and scalarization for LegalizeTypes.; // Scalarization is the act of changing a computation in an illegal one-element; // vector type to be a computation in its scalar element type. For example,; // implementing <1 x f32> arithmetic in a scalar f32 register. This is needed; // as a base case when scalarizing vector arithmetic like <4 x f32>, which; // eventually decomposes to scalars if the target doesn't support v4f32 or v2f32; // types.; // Splitting is the act of changing a computation in an invalid vector type to; // be a computation in two vectors of half the size. For example, implementing; // <128 x f32> operations in terms of two <64 x f32> operations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:92,Testability,log,logic,92,"// The result needs scalarizing, but it's not a given that the source does.; // See similar logic in ScalarizeVecRes_UnaryOp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:420,Testability,log,logic,420,"// The result needs scalarizing, but it's not a given that the source does.; // This is a workaround for targets where it's impossible to scalarize the; // result of a conversion, because the source type is legal.; // For instance, this happens on AArch64: v1i1 is illegal but v1i{8,16,32}; // are widened to v8i8, v4i16, and v2i32, which is legal, because v1i64 is; // legal and was not scalarized.; // See the similar logic in ScalarizeVecRes_SETCC",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:169,Testability,log,logic,169,"// The vselect result and true/value operands needs scalarizing, but it's; // not a given that the Cond does. For instance, in AVX512 v1i1 is legal.; // See the similar logic in ScalarizeVecRes_SETCC",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:75,Availability,reliab,reliably,75,"// If integer and float booleans have different contents then we can't; // reliably optimize in all cases. There is a full explanation for this in; // DAGCombiner::visitSELECT() where the same issue affects folding; // (select C, 0, 1) to (xor C, 1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:84,Performance,optimiz,optimize,84,"// If integer and float booleans have different contents then we can't; // reliably optimize in all cases. There is a full explanation for this in; // DAGCombiner::visitSELECT() where the same issue affects folding; // (select C, 0, 1) to (xor C, 1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:59,Availability,mask,mask,59,"// Vector read from all ones, scalar expects a single 1 so mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:57,Modifiability,extend,extend,57,"// Vector reads from a one, scalar from all ones so sign extend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:38,Deployability,update,updated,38,"// If the result is N, the sub-method updated N in place. Tell the legalizer; // core about this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:132,Integrability,wrap,wrap,132,"/// If the operand is a vector that needs to be scalarized then the; /// result must be v1i1, so just convert to a scalar SETCC and wrap; /// with a scalar_to_vector since the res type is legal if we got here",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:20,Modifiability,extend,extend,20,"/// If the value to extend is a vector that needs to be scalarized, it must be; /// <1 x ty>. Convert the element instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:20,Modifiability,extend,extend,20,"/// If the value to extend is a vector that needs to be scalarized, it must be; /// <1 x ty>. Convert the element instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:29,Energy Efficiency,efficient,efficiently,29,// Handle some special cases efficiently.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:130,Safety,avoid,avoid,130,"// If we know the index is in the first half, and we know the subvector; // doesn't cross the boundary between the halves, we can avoid spilling the; // vector, and insert into the lower half of the split vector directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:161,Performance,scalab,scalable,161,"// Similarly if the subvector is fully in the high half, but mind that we; // can't tell whether a fixed-length subvector is fully within the high half; // of a scalable vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:93,Availability,down,down,93,// Spill the vector to the stack.; // In cases where the vector is illegal it will be broken down into parts; // and stored in parts - we should use the alignment for the smallest part.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Performance,Load,Load,3,// Load the Lo part from the stack slot.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Performance,Load,Load,3,// Load the Hi part from the stack slot.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:38,Modifiability,extend,extend,38,// *_EXTEND_VECTOR_INREG instructions extend the lowest elements of the; // input vector (i.e. we only use InLo):; // OutLo will extend the first OutNumElements from InLo.; // OutHi will extend the next OutNumElements from InLo.; // Shuffle the elements from InLo for OutHi into the bottom elements to; // create a 'fake' InHi.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:129,Modifiability,extend,extend,129,// *_EXTEND_VECTOR_INREG instructions extend the lowest elements of the; // input vector (i.e. we only use InLo):; // OutLo will extend the first OutNumElements from InLo.; // OutHi will extend the next OutNumElements from InLo.; // Shuffle the elements from InLo for OutHi into the bottom elements to; // create a 'fake' InHi.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:187,Modifiability,extend,extend,187,// *_EXTEND_VECTOR_INREG instructions extend the lowest elements of the; // input vector (i.e. we only use InLo):; // OutLo will extend the first OutNumElements from InLo.; // OutHi will extend the next OutNumElements from InLo.; // Shuffle the elements from InLo for OutHi into the bottom elements to; // create a 'fake' InHi.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Modifiability,Extend,Extend,3,// Extend the element type to match if needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:93,Availability,down,down,93,// Spill the vector to the stack.; // In cases where the vector is illegal it will be broken down into parts; // and stored in parts - we should use the alignment for the smallest part.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Performance,Load,Load,3,// Load the Lo part from the stack slot.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:45,Performance,load,load,45,// Build a factor node to remember that this load is independent of the; // other one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:9,Availability,Mask,Mask,9,// Split Mask operand,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:54,Usability,simpl,simply,54,// The hi vp_load has zero storage size. We therefore simply set it to; // the low vp_load and rely on subsequent removal from the chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:45,Performance,load,load,45,// Build a factor node to remember that this load is independent of the; // other one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:64,Usability,simpl,simply,64,// The high vp_strided_load has zero storage size. We therefore simply set; // it to the low vp_strided_load and rely on subsequent removal from the; // chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:169,Performance,load,loaded,169,"// Generate the high vp_strided_load.; // To calculate the high base address, we need to sum to the low base; // address stride number of bytes for each element already loaded by low,; // that is: Ptr = Ptr + (LoEVL * Stride)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:45,Performance,load,load,45,// Build a factor node to remember that this load is independent of the; // other one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:9,Availability,Mask,Mask,9,// Split Mask operand,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:10,Availability,mask,masked,10,// The hi masked load has zero storage size. We therefore simply set it to; // the low masked load and rely on subsequent removal from the chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:87,Availability,mask,masked,87,// The hi masked load has zero storage size. We therefore simply set it to; // the low masked load and rely on subsequent removal from the chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:17,Performance,load,load,17,// The hi masked load has zero storage size. We therefore simply set it to; // the low masked load and rely on subsequent removal from the chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:94,Performance,load,load,94,// The hi masked load has zero storage size. We therefore simply set it to; // the low masked load and rely on subsequent removal from the chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:58,Usability,simpl,simply,58,// The hi masked load has zero storage size. We therefore simply set it to; // the low masked load and rely on subsequent removal from the chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:15,Availability,mask,masked,15,// Generate hi masked load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:22,Performance,load,load,22,// Generate hi masked load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:45,Performance,load,load,45,// Build a factor node to remember that this load is independent of the; // other one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:9,Availability,Mask,Mask,9,// Split Mask operand,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:45,Performance,load,load,45,// Build a factor node to remember that this load is independent of the; // other one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:567,Availability,down,down,567,"// We can do better than a generic split operation if the extend is doing; // more than just doubling the width of the elements and the following are; // true:; // - The number of vector elements is even,; // - the source type is legal,; // - the type of a split source is illegal,; // - the type of an extended (by doubling element size) source is legal, and; // - the type of that extended source when split is legal.; //; // This won't necessarily completely legalize the operation, but it will; // more effectively move in the right direction and prevent falling down; // to scalarization in many cases due to the input vector being split too; // far.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:58,Modifiability,extend,extend,58,"// We can do better than a generic split operation if the extend is doing; // more than just doubling the width of the elements and the following are; // true:; // - The number of vector elements is even,; // - the source type is legal,; // - the type of a split source is illegal,; // - the type of an extended (by doubling element size) source is legal, and; // - the type of that extended source when split is legal.; //; // This won't necessarily completely legalize the operation, but it will; // more effectively move in the right direction and prevent falling down; // to scalarization in many cases due to the input vector being split too; // far.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:303,Modifiability,extend,extended,303,"// We can do better than a generic split operation if the extend is doing; // more than just doubling the width of the elements and the following are; // true:; // - The number of vector elements is even,; // - the source type is legal,; // - the type of a split source is illegal,; // - the type of an extended (by doubling element size) source is legal, and; // - the type of that extended source when split is legal.; //; // This won't necessarily completely legalize the operation, but it will; // more effectively move in the right direction and prevent falling down; // to scalarization in many cases due to the input vector being split too; // far.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:383,Modifiability,extend,extended,383,"// We can do better than a generic split operation if the extend is doing; // more than just doubling the width of the elements and the following are; // true:; // - The number of vector elements is even,; // - the source type is legal,; // - the type of a split source is illegal,; // - the type of an extended (by doubling element size) source is legal, and; // - the type of that extended source when split is legal.; //; // This won't necessarily completely legalize the operation, but it will; // more effectively move in the right direction and prevent falling down; // to scalarization in many cases due to the input vector being split too; // far.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Modifiability,Extend,Extend,3,// Extend the source vector by one step.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:43,Modifiability,extend,extended,43,"// Get the low and high halves of the new, extended one step, vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Modifiability,Extend,Extend,3,// Extend those vector halves the rest of the way.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Modifiability,Extend,Extend,3,// Extend the source vector by one step.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:43,Modifiability,extend,extended,43,"// Get the low and high halves of the new, extended one step, vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Modifiability,Extend,Extend,3,// Extend those vector halves the rest of the way.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:71,Availability,mask,mask,71,// Use shuffles operands instead of shuffles themselves.; // 1. Adjust mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:6,Deployability,Update,Update,6,// 2. Update inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Usability,Clear,Clear,3,// Clear the pair data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:38,Usability,simpl,simplified,38,// Check if any concat_vectors can be simplified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:10,Availability,mask,mask,10,// Adjust mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:54,Availability,mask,mask,54,// Found that operand is used already.; // 1. Fix the mask for the reused operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:10,Availability,mask,mask,10,// Adjust mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:10,Availability,mask,mask,10,"// Adjust mask in case of reused inputs. Also, need to insert constant; // inputs at first, otherwise it affects the final outcome.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:19,Availability,mask,mask,19,"// Build a shuffle mask for the output, discovering on the fly which; // input vectors to use as shuffle operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:38,Deployability,update,updated,38,"// If the result is N, the sub-method updated N in place. Tell the legalizer; // core about this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:54,Availability,mask,mask,54,"// The only possibility for an illegal operand is the mask, since result type; // legalization would have handled this node already otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:104,Energy Efficiency,reduce,reduced,104,// Use the appropriate scalar instruction on the split subvectors before; // reducing the now partially reduced smaller vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Energy Efficiency,Reduce,Reduce,3,// Reduce low half.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Energy Efficiency,Reduce,Reduce,3,"// Reduce high half, using low half result as initial value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:107,Availability,down,down,107,"// For example, i64 = BITCAST v4i16 on alpha. Typically the vector will; // end up being split all the way down to individual components. Convert the; // split pieces into integers and reassemble.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:89,Performance,scalab,scalable,89,// After this point the DAG node only permits extracting fixed-width; // subvectors from scalable vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:88,Performance,load,loading,88,"// If the element type is i1 and we're not promoting the result, then we may; // end up loading the wrong data since the bits are packed tightly into; // bytes. For example, if we extract a v4i1 (legal) from a nxv4i1 (legal); // type at index 4, then we will load a byte starting at index 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:259,Performance,load,load,259,"// If the element type is i1 and we're not promoting the result, then we may; // end up loading the wrong data since the bits are packed tightly into; // bytes. For example, if we extract a v4i1 (legal) from a nxv4i1 (legal); // type at index 4, then we will load a byte starting at index 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:28,Performance,load,loading,28,// Extract the subvector by loading the correct part.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:93,Availability,down,down,93,// Store the vector to the stack.; // In cases where the vector is illegal it will be broken down into parts; // and stored in parts - we should use the alignment for the smallest part.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Performance,Load,Load,3,// Load back the required element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:9,Availability,Mask,Mask,9,// Split Mask operand,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:9,Availability,Mask,Mask,9,// Split Mask operand,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:10,Availability,mask,masked,10,// The hi masked store has zero storage size.; // Only the lo masked store is needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:62,Availability,mask,masked,62,// The hi masked store has zero storage size.; // Only the lo masked store is needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:9,Availability,Mask,Mask,9,// Split Mask operand,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:202,Energy Efficiency,power,power-two,202,"// The input operands all must have the same type, and we know the result; // type is valid. Convert this to a buildvector which extracts all the; // input elements.; // TODO: If the input elements are power-two vectors, we could convert this to; // a new CONCAT_VECTORS node with elements that are half-wide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:253,Energy Efficiency,power,power-two,253,"// The result type is legal, but the input type is illegal. If splitting; // ends up with the result type of each half still being legal, just; // do that. If, however, that would result in an illegal result type,; // we can try to get more clever with power-two vectors. Specifically,; // split the input type, but also widen the result element size, then; // concatenate the halves and truncate again. For example, consider a target; // where v8i8 is legal and v8i32 is not (ARM, which doesn't have 256-bit; // vectors). To perform a ""%res = v8i8 trunc v8i32 %in"" we do:; // %inlo = v4i32 extract_subvector %in, 0; // %inhi = v4i32 extract_subvector %in, 4; // %lo16 = v4i16 trunc v4i32 %inlo; // %hi16 = v4i16 trunc v4i32 %inhi; // %in16 = v8i16 concat_vectors v4i16 %lo16, v4i16 %hi16; // %res = v8i8 trunc v8i16 %in16; //; // Without this transform, the original truncate would end up being; // scalarized, which is pretty much always a last resort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:526,Performance,perform,perform,526,"// The result type is legal, but the input type is illegal. If splitting; // ends up with the result type of each half still being legal, just; // do that. If, however, that would result in an illegal result type,; // we can try to get more clever with power-two vectors. Specifically,; // split the input type, but also widen the result element size, then; // concatenate the halves and truncate again. For example, consider a target; // where v8i8 is legal and v8i32 is not (ARM, which doesn't have 256-bit; // vectors). To perform a ""%res = v8i8 trunc v8i32 %in"" we do:; // %inlo = v4i32 extract_subvector %in, 0; // %inhi = v4i32 extract_subvector %in, 4; // %lo16 = v4i16 trunc v4i32 %inlo; // %hi16 = v4i16 trunc v4i32 %inhi; // %in16 = v8i16 concat_vectors v4i16 %lo16, v4i16 %hi16; // %res = v8i8 trunc v8i16 %in16; //; // Without this transform, the original truncate would end up being; // scalarized, which is pretty much always a last resort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:91,Energy Efficiency,power,power,91,"// Truncate them to 1/2 the element size.; //; // This assumes the number of elements is a power of two; any vector that; // isn't should be widened, not split.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:43,Availability,down,down,43,"// Now finish up by truncating all the way down to the original result; // type. This should normally be something that ends up being legal directly,; // but in theory if a target has very wide vectors and an annoyingly; // restricted set of legal types, this split can chain to build things up.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:207,Safety,avoid,avoid,207,"// We're going to widen this vector op to a legal type by padding with undef; // elements. If the wide vector op is eventually going to be expanded to; // scalar libcalls, then unroll into scalar ops now to avoid unnecessary; // libcalls on the undef elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:170,Safety,safe,safe,170,"// Given a vector of operations that have been broken up to widen, see; // if we can collect them together into the next widest legal VT. This; // implementation is trap-safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:30,Performance,scalab,scalable,30,// FIXME: Improve support for scalable vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:60,Modifiability,extend,extend,60,"// If both input and result vector types are of same width, extend; // operations should be done with SIGN/ZERO_EXTEND_VECTOR_INREG, which; // accepts fewer elements in the result than in the input.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:250,Safety,avoid,avoid,250,"// Because the result and the input are different vector types, widening; // the result could create a legal type but widening the input might make; // it an illegal type that might lead to repeatedly splitting the input; // and then widening it. To avoid this, we widen the input only if; // it results in a legal type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:10,Performance,Optimiz,Optimizations,10,// FIXME: Optimizations need to be implemented here.; // Otherwise unroll into some nasty scalar code and rebuild the vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:11,Modifiability,extend,extend,11,"// Unroll, extend the scalars and rebuild the vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:141,Performance,perform,perform,141,"// If the incoming type is a vector that is being promoted, then; // we know that the elements are arranged differently and that we; // must perform the conversion using a stack slot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:250,Safety,avoid,avoid,250,"// Because the result and the input are different vector types, widening; // the result could create a legal type but widening the input might; // make it an illegal type that might lead to repeatedly splitting the; // input and then widening it. To avoid this, we widen the input only if; // it results in a legal type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Safety,Avoid,Avoid,3,// Avoid recursion around e.g. nxv1i8.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:121,Integrability,depend,depend,121,"// A vector must always be stored in memory as-is, i.e. without any padding; // between the elements, since various code depend on it, e.g. in the; // handling of a bitcast of a vector type to int, which may be done with a; // vector store followed by an integer load. A vector that does not have; // elements that are byte-sized must therefore be stored as an integer; // built out of the extracted vector elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:263,Performance,load,load,263,"// A vector must always be stored in memory as-is, i.e. without any padding; // between the elements, since various code depend on it, e.g. in the; // handling of a bitcast of a vector type to int, which may be done with a; // vector store followed by an integer load. A vector that does not have; // elements that are byte-sized must therefore be stored as an integer; // built out of the extracted vector elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:135,Availability,mask,mask,135,"// Generate a vector-predicated load if it is custom/legal on the target. To; // avoid possible recursion, only do this if the widened mask type is legal.; // FIXME: Not all targets may support EVL in VP_LOAD. These will have been; // removed from the IR by the ExpandVectorPredication pass but we're; // reintroducing them here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:32,Performance,load,load,32,"// Generate a vector-predicated load if it is custom/legal on the target. To; // avoid possible recursion, only do this if the widened mask type is legal.; // FIXME: Not all targets may support EVL in VP_LOAD. These will have been; // removed from the IR by the ExpandVectorPredication pass but we're; // reintroducing them here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:81,Safety,avoid,avoid,81,"// Generate a vector-predicated load if it is custom/legal on the target. To; // avoid possible recursion, only do this if the widened mask type is legal.; // FIXME: Not all targets may support EVL in VP_LOAD. These will have been; // removed from the IR by the ExpandVectorPredication pass but we're; // reintroducing them here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:27,Performance,load,load,27,// Chain for the series of load,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:27,Performance,load,load,27,"// If we generate a single load, we can use that for the chain. Otherwise,; // build a factor node to remember the multiple loads are independent and; // chain to that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:124,Performance,load,loads,124,"// If we generate a single load, we can use that for the chain. Otherwise,; // build a factor node to remember the multiple loads are independent and; // chain to that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:7,Availability,mask,mask,7,// The mask should be widened as well,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:7,Availability,mask,mask,7,// The mask should be widened as well,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:7,Availability,mask,mask,7,// The mask should be widened as well,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:7,Availability,mask,mask,7,// The mask should be widened as well,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:29,Testability,assert,assert,29,// This is used just for the assert in convertMask(). Check that this either; // a SETCC or a previously handled SETCC by convertMask().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:12,Availability,mask,mask,12,// Return a mask of vector type MaskVT to replace InMask. Also adjust MaskVT; // to ToMaskVT if needed with vector extension or truncation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:32,Availability,Mask,MaskVT,32,// Return a mask of vector type MaskVT to replace InMask. Also adjust MaskVT; // to ToMaskVT if needed with vector extension or truncation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:70,Availability,Mask,MaskVT,70,// Return a mask of vector type MaskVT to replace InMask. Also adjust MaskVT; // to ToMaskVT if needed with vector extension or truncation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:14,Availability,Mask,Mask,14,"// Make a new Mask node, with a legal result VT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:6,Availability,Mask,MaskVT,6,"// If MaskVT has smaller or bigger elements than ToMaskVT, a vector sign; // extend or truncate is needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:77,Modifiability,extend,extend,77,"// If MaskVT has smaller or bigger elements than ToMaskVT, a vector sign; // extend or truncate is needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:10,Availability,Mask,Mask,10,// Adjust Mask to the right number of elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:66,Availability,mask,mask,66,"// This method tries to handle some special cases for the vselect mask; // and if needed adjusting the mask vector type to match that of the VSELECT.; // Without it, many cases end up with scalarization of the SETCC, with many; // unnecessary instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:103,Availability,mask,mask,103,"// This method tries to handle some special cases for the vselect mask; // and if needed adjusting the mask vector type to match that of the VSELECT.; // Without it, many cases end up with scalarization of the SETCC, with many; // unnecessary instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:28,Performance,scalab,scalable,28,// This method can't handle scalable vector types.; // FIXME: This support could be added in the future.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:40,Energy Efficiency,power,power,40,// Only handle vector types which are a power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:40,Availability,mask,mask,40,"// If there is support for an i1 vector mask, don't touch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:40,Availability,mask,mask,40,"// If there is support for an i1 vector mask (or only scalar i1 conditions),; // don't touch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:7,Availability,mask,mask,7,// The mask of the VSELECT should have integer elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:48,Modifiability,extend,extend,48,"// If the two SETCCs have different VTs, either extend/truncate one of; // them to the other ""towards"" ToMaskVT, or truncate one and extend the; // other to ToMaskVT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:133,Modifiability,extend,extend,133,"// If the two SETCCs have different VTs, either extend/truncate one of; // them to the other ""towards"" ToMaskVT, or truncate one and extend the; // other to ToMaskVT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:23,Testability,log,logical,23,// Make new SETCCs and logical nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:15,Testability,log,logical,15,// Convert the logical op for VSELECT if needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:10,Availability,mask,mask,10,// Adjust mask based on new input vector length.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:38,Deployability,update,updated,38,"// If the result is N, the sub-method updated N in place. Tell the legalizer; // core about this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:90,Modifiability,extend,extended,90,"// We couldn't find a legal vector type that was a widening of the input; // and could be extended in-register to the result type, so we have to; // scalarize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:55,Modifiability,extend,extending,55,// Use special DAG nodes to represent the operation of extending the; // low lanes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:117,Performance,optimiz,optimization,117,"// See if a widened result type would be legal, if so widen the node.; // FIXME: This isn't safe for StrictFP. Other optimization here is needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:92,Safety,safe,safe,92,"// See if a widened result type would be legal, if so widen the node.; // FIXME: This isn't safe for StrictFP. Other optimization here is needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:223,Safety,avoid,avoids,223,"// Handle a case like bitcast v12i8 -> v3i32. Normally that would get widened; // to v16i8 -> v4i32, but for a target where v3i32 is legal but v12i8 is not,; // we end up here. Handling the case here with EXTRACT_SUBVECTOR avoids; // having to copy via memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:55,Performance,scalab,scalable,55,"// Otherwise, if we're inserting a fixed vector into a scalable vector and; // we know the minimum vscale we can work out if it's valid ourselves.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:136,Availability,mask,mask,136,"// Generate a vector-predicated store if it is custom/legal on the target.; // To avoid possible recursion, only do this if the widened mask type is; // legal.; // FIXME: Not all targets may support EVL in VP_STORE. These will have been; // removed from the IR by the ExpandVectorPredication pass but we're; // reintroducing them here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:82,Safety,avoid,avoid,82,"// Generate a vector-predicated store if it is custom/legal on the target.; // To avoid possible recursion, only do this if the widened mask type is; // legal.; // FIXME: Not all targets may support EVL in VP_STORE. These will have been; // removed from the IR by the ExpandVectorPredication pass but we're; // reintroducing them here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:37,Availability,mask,mask,37,// We only handle the case where the mask needs widening to an; // identically-sized type as the vector inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:105,Availability,mask,mask,105,// We only handle the case where the stored value needs widening to an; // identically-sized type as the mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:7,Availability,mask,mask,7,// The mask should be widened as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:13,Availability,mask,mask,13,// Widen the mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:7,Availability,mask,mask,7,// The mask should be widened as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:261,Performance,load,load,261,"//===----------------------------------------------------------------------===//; // Vector Widening Utilities; //===----------------------------------------------------------------------===//; // Utility function to find the type to chop up a widen vector for load/store; // TLI: Target lowering used to determine legal types.; // Width: Width left need to load/store.; // WidenVT: The widen vector type to load to/store from; // Align: If 0, don't allow use of a wider type; // WidenEx: If Align is not 0, the amount additional we can load/store from.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:358,Performance,load,load,358,"//===----------------------------------------------------------------------===//; // Vector Widening Utilities; //===----------------------------------------------------------------------===//; // Utility function to find the type to chop up a widen vector for load/store; // TLI: Target lowering used to determine legal types.; // Width: Width left need to load/store.; // WidenVT: The widen vector type to load to/store from; // Align: If 0, don't allow use of a wider type; // WidenEx: If Align is not 0, the amount additional we can load/store from.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:408,Performance,load,load,408,"//===----------------------------------------------------------------------===//; // Vector Widening Utilities; //===----------------------------------------------------------------------===//; // Utility function to find the type to chop up a widen vector for load/store; // TLI: Target lowering used to determine legal types.; // Width: Width left need to load/store.; // WidenVT: The widen vector type to load to/store from; // Align: If 0, don't allow use of a wider type; // WidenEx: If Align is not 0, the amount additional we can load/store from.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:537,Performance,load,load,537,"//===----------------------------------------------------------------------===//; // Vector Widening Utilities; //===----------------------------------------------------------------------===//; // Utility function to find the type to chop up a widen vector for load/store; // TLI: Target lowering used to determine legal types.; // Width: Width left need to load/store.; // WidenVT: The widen vector type to load to/store from; // Align: If 0, don't allow use of a wider type; // WidenEx: If Align is not 0, the amount additional we can load/store from.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:29,Performance,load,load,29,"// If we have one element to load/store, return it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:61,Performance,scalab,scalable,61,"// Don't bother looking for an integer type if the vector is scalable, skip; // to vector types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:65,Performance,load,load,65,// See if there is larger legal integer than the element type to load/store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:43,Performance,load,load,43,// See if there is a larger vector type to load/store that has the same vector; // element type and is evenly divisible with the WidenVT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:42,Performance,scalab,scalable,42,// Skip vector MVTs which don't match the scalable property of WidenVT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:22,Performance,load,loads,22,// Using element-wise loads and stores for widening operations is not; // supported for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:88,Performance,scalab,scalable,88,// Using element-wise loads and stores for widening operations is not; // supported for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:36,Performance,load,loads,36,"// Builds a vector type from scalar loads; // VecTy: Resulting Vector type; // LDOps: Load operators to build a vector type; // [Start,End) the list of loads to use.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:86,Performance,Load,Load,86,"// Builds a vector type from scalar loads; // VecTy: Resulting Vector type; // LDOps: Load operators to build a vector type; // [Start,End) the list of loads to use.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:152,Performance,load,loads,152,"// Builds a vector type from scalar loads; // VecTy: Resulting Vector type; // LDOps: Load operators to build a vector type; // [Start,End) the list of loads to use.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:54,Performance,load,load,54,// Readjust position and vector position based on new load type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:36,Energy Efficiency,efficient,efficiently,36,// The strategy assumes that we can efficiently load power-of-two widths.; // The routine chops the vector into the largest vector loads with the same; // element type or scalar loads and then recombines it to the widen vector; // type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:53,Energy Efficiency,power,power-of-two,53,// The strategy assumes that we can efficiently load power-of-two widths.; // The routine chops the vector into the largest vector loads with the same; // element type or scalar loads and then recombines it to the widen vector; // type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:82,Integrability,rout,routine,82,// The strategy assumes that we can efficiently load power-of-two widths.; // The routine chops the vector into the largest vector loads with the same; // element type or scalar loads and then recombines it to the widen vector; // type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:48,Performance,load,load,48,// The strategy assumes that we can efficiently load power-of-two widths.; // The routine chops the vector into the largest vector loads with the same; // element type or scalar loads and then recombines it to the widen vector; // type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:131,Performance,load,loads,131,// The strategy assumes that we can efficiently load power-of-two widths.; // The routine chops the vector into the largest vector loads with the same; // element type or scalar loads and then recombines it to the widen vector; // type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:178,Performance,load,loads,178,// The strategy assumes that we can efficiently load power-of-two widths.; // The routine chops the vector into the largest vector loads with the same; // element type or scalar loads and then recombines it to the widen vector; // type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Performance,Load,Load,3,// Load information,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:70,Availability,fault,faults,70,// Allow wider loads if they are sufficiently aligned to avoid memory faults; // and if the original load is simple.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:15,Performance,load,loads,15,// Allow wider loads if they are sufficiently aligned to avoid memory faults; // and if the original load is simple.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:101,Performance,load,load,101,// Allow wider loads if they are sufficiently aligned to avoid memory faults; // and if the original load is simple.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:57,Safety,avoid,avoid,57,// Allow wider loads if they are sufficiently aligned to avoid memory faults; // and if the original load is simple.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:109,Usability,simpl,simple,109,// Allow wider loads if they are sufficiently aligned to avoid memory faults; // and if the original load is simple.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:33,Performance,load,load,33,// Find the vector type that can load from.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:24,Performance,load,load,24,// Unless we're able to load in one instruction we must work out how to load; // the remainder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:72,Performance,load,load,72,// Unless we're able to load in one instruction we must work out how to load; // the remainder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:19,Performance,load,load,19,// Check if we can load the element with one instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:37,Testability,test,tests,37,// TODO: We don't currently have any tests that exercise this code path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Performance,Load,Load,3,// Load vector by using multiple loads from largest vector to scalar.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:33,Performance,load,loads,33,// Load vector by using multiple loads from largest vector to scalar.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:36,Performance,load,load,36,// First incremement past the first load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:29,Performance,load,load,29,// Build the vector from the load operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:11,Performance,load,loads,11,// All the loads are scalar loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:28,Performance,load,loads,28,// All the loads are scalar loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:111,Energy Efficiency,power,power-of-,111,"// If the load contains vectors, build the vector using concat vector.; // All of the vectors used to load are power-of-2, and the scalar loads can be; // combined to make a power-of-2 vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:174,Energy Efficiency,power,power-of-,174,"// If the load contains vectors, build the vector using concat vector.; // All of the vectors used to load are power-of-2, and the scalar loads can be; // combined to make a power-of-2 vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:10,Performance,load,load,10,"// If the load contains vectors, build the vector using concat vector.; // All of the vectors used to load are power-of-2, and the scalar loads can be; // combined to make a power-of-2 vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:102,Performance,load,load,102,"// If the load contains vectors, build the vector using concat vector.; // All of the vectors used to load are power-of-2, and the scalar loads can be; // combined to make a power-of-2 vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:138,Performance,load,loads,138,"// If the load contains vectors, build the vector using concat vector.; // All of the vectors used to load are power-of-2, and the scalar loads can be; // combined to make a power-of-2 vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:29,Performance,load,loads,29,"// First, combine the scalar loads to a vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:43,Energy Efficiency,efficient,efficient,43,"// For extension loads, it may not be more efficient to chop up the vector; // and then extend it. Instead, we unroll the load and build a new vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:88,Modifiability,extend,extend,88,"// For extension loads, it may not be more efficient to chop up the vector; // and then extend it. Instead, we unroll the load and build a new vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:17,Performance,load,loads,17,"// For extension loads, it may not be more efficient to chop up the vector; // and then extend it. Instead, we unroll the load and build a new vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:122,Performance,load,load,122,"// For extension loads, it may not be more efficient to chop up the vector; // and then extend it. Instead, we unroll the load and build a new vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Performance,Load,Load,3,// Load information,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:3,Performance,Load,Load,3,// Load each element and widen.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:36,Energy Efficiency,efficient,efficiently,36,// The strategy assumes that we can efficiently store power-of-two widths.; // The routine chops the vector into the largest vector stores with the same; // element type or scalar stores.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:54,Energy Efficiency,power,power-of-two,54,// The strategy assumes that we can efficiently store power-of-two widths.; // The routine chops the vector into the largest vector stores with the same; // element type or scalar stores.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:83,Integrability,rout,routine,83,// The strategy assumes that we can efficiently store power-of-two widths.; // The routine chops the vector into the largest vector stores with the same; // element type or scalar stores.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp:37,Availability,mask,mask,37,"// Fall back to extract and build (+ mask, if padding with zeros).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/LegalizeVectorTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:652,Availability,down,down,652,"//===- ResourcePriorityQueue.cpp - A DFA-oriented priority queue -*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ResourcePriorityQueue class, which is a; // SchedulingPriorityQueue that prioritizes instructions using DFA state to; // reduce the length of the critical path through the basic block; // on VLIW platforms.; // The scheduler is basically a top-down adaptable list scheduler with DFA; // resource tracking added to the cost function.; // DFA is queried as a state machine to model ""packets/bundles"" during; // schedule. Currently packets/bundles are discarded at the end of; // scheduling, affecting only order of instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:452,Energy Efficiency,Schedul,SchedulingPriorityQueue,452,"//===- ResourcePriorityQueue.cpp - A DFA-oriented priority queue -*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ResourcePriorityQueue class, which is a; // SchedulingPriorityQueue that prioritizes instructions using DFA state to; // reduce the length of the critical path through the basic block; // on VLIW platforms.; // The scheduler is basically a top-down adaptable list scheduler with DFA; // resource tracking added to the cost function.; // DFA is queried as a state machine to model ""packets/bundles"" during; // schedule. Currently packets/bundles are discarded at the end of; // scheduling, affecting only order of instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:529,Energy Efficiency,reduce,reduce,529,"//===- ResourcePriorityQueue.cpp - A DFA-oriented priority queue -*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ResourcePriorityQueue class, which is a; // SchedulingPriorityQueue that prioritizes instructions using DFA state to; // reduce the length of the critical path through the basic block; // on VLIW platforms.; // The scheduler is basically a top-down adaptable list scheduler with DFA; // resource tracking added to the cost function.; // DFA is queried as a state machine to model ""packets/bundles"" during; // schedule. Currently packets/bundles are discarded at the end of; // scheduling, affecting only order of instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:623,Energy Efficiency,schedul,scheduler,623,"//===- ResourcePriorityQueue.cpp - A DFA-oriented priority queue -*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ResourcePriorityQueue class, which is a; // SchedulingPriorityQueue that prioritizes instructions using DFA state to; // reduce the length of the critical path through the basic block; // on VLIW platforms.; // The scheduler is basically a top-down adaptable list scheduler with DFA; // resource tracking added to the cost function.; // DFA is queried as a state machine to model ""packets/bundles"" during; // schedule. Currently packets/bundles are discarded at the end of; // scheduling, affecting only order of instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:657,Energy Efficiency,adapt,adaptable,657,"//===- ResourcePriorityQueue.cpp - A DFA-oriented priority queue -*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ResourcePriorityQueue class, which is a; // SchedulingPriorityQueue that prioritizes instructions using DFA state to; // reduce the length of the critical path through the basic block; // on VLIW platforms.; // The scheduler is basically a top-down adaptable list scheduler with DFA; // resource tracking added to the cost function.; // DFA is queried as a state machine to model ""packets/bundles"" during; // schedule. Currently packets/bundles are discarded at the end of; // scheduling, affecting only order of instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:672,Energy Efficiency,schedul,scheduler,672,"//===- ResourcePriorityQueue.cpp - A DFA-oriented priority queue -*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ResourcePriorityQueue class, which is a; // SchedulingPriorityQueue that prioritizes instructions using DFA state to; // reduce the length of the critical path through the basic block; // on VLIW platforms.; // The scheduler is basically a top-down adaptable list scheduler with DFA; // resource tracking added to the cost function.; // DFA is queried as a state machine to model ""packets/bundles"" during; // schedule. Currently packets/bundles are discarded at the end of; // scheduling, affecting only order of instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:817,Energy Efficiency,schedul,schedule,817,"//===- ResourcePriorityQueue.cpp - A DFA-oriented priority queue -*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ResourcePriorityQueue class, which is a; // SchedulingPriorityQueue that prioritizes instructions using DFA state to; // reduce the length of the critical path through the basic block; // on VLIW platforms.; // The scheduler is basically a top-down adaptable list scheduler with DFA; // resource tracking added to the cost function.; // DFA is queried as a state machine to model ""packets/bundles"" during; // schedule. Currently packets/bundles are discarded at the end of; // scheduling, affecting only order of instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:885,Energy Efficiency,schedul,scheduling,885,"//===- ResourcePriorityQueue.cpp - A DFA-oriented priority queue -*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ResourcePriorityQueue class, which is a; // SchedulingPriorityQueue that prioritizes instructions using DFA state to; // reduce the length of the critical path through the basic block; // on VLIW platforms.; // The scheduler is basically a top-down adaptable list scheduler with DFA; // resource tracking added to the cost function.; // DFA is queried as a state machine to model ""packets/bundles"" during; // schedule. Currently packets/bundles are discarded at the end of; // scheduling, affecting only order of instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:657,Modifiability,adapt,adaptable,657,"//===- ResourcePriorityQueue.cpp - A DFA-oriented priority queue -*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ResourcePriorityQueue class, which is a; // SchedulingPriorityQueue that prioritizes instructions using DFA state to; // reduce the length of the critical path through the basic block; // on VLIW platforms.; // The scheduler is basically a top-down adaptable list scheduler with DFA; // resource tracking added to the cost function.; // DFA is queried as a state machine to model ""packets/bundles"" during; // schedule. Currently packets/bundles are discarded at the end of; // scheduling, affecting only order of instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:59,Performance,queue,queue,59,"//===- ResourcePriorityQueue.cpp - A DFA-oriented priority queue -*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ResourcePriorityQueue class, which is a; // SchedulingPriorityQueue that prioritizes instructions using DFA state to; // reduce the length of the critical path through the basic block; // on VLIW platforms.; // The scheduler is basically a top-down adaptable list scheduler with DFA; // resource tracking added to the cost function.; // DFA is queried as a state machine to model ""packets/bundles"" during; // schedule. Currently packets/bundles are discarded at the end of; // scheduling, affecting only order of instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:34,Energy Efficiency,schedul,scheduling,34,/// This heuristic is used if DFA scheduling is not desired; /// for some VLIW platform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:176,Availability,down,down,176,// The isScheduleHigh flag allows nodes with wraparound dependencies that; // cannot easily be modeled as edges with latencies to be scheduled as; // soon as possible in a top-down schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:133,Energy Efficiency,schedul,scheduled,133,// The isScheduleHigh flag allows nodes with wraparound dependencies that; // cannot easily be modeled as edges with latencies to be scheduled as; // soon as possible in a top-down schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:181,Energy Efficiency,schedul,schedule,181,// The isScheduleHigh flag allows nodes with wraparound dependencies that; // cannot easily be modeled as edges with latencies to be scheduled as; // soon as possible in a top-down schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:45,Integrability,wrap,wraparound,45,// The isScheduleHigh flag allows nodes with wraparound dependencies that; // cannot easily be modeled as edges with latencies to be scheduled as; // soon as possible in a top-down schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:56,Integrability,depend,dependencies,56,// The isScheduleHigh flag allows nodes with wraparound dependencies that; // cannot easily be modeled as edges with latencies to be scheduled as; // soon as possible in a top-down schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:35,Energy Efficiency,schedul,scheduling,35,// The most important heuristic is scheduling the critical path.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:15,Availability,avail,available,15,"// We found an available, but not scheduled, predecessor. If it's the; // only one we have found, keep track of it... otherwise give up.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:34,Energy Efficiency,schedul,scheduled,34,"// We found an available, but not scheduled, predecessor. If it's the; // only one we have found, keep track of it... otherwise give up.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:13,Energy Efficiency,schedul,scheduling,13,/// Check if scheduling of this SU is possible; /// in the current packet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:20,Deployability,pipeline,pipeline,20,// First see if the pipeline could receive this instruction; // in the current cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:33,Integrability,depend,dependencies,33,// Now see if there are no other dependencies; // to instructions already in the packet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:18,Availability,avail,available,18,/// Keep track of available resources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:125,Integrability,depend,dependent,125,"/// Estimates change in reg pressure from this SU.; /// It is achieved by trivial tracking of defined; /// and used vregs in dependent instructions.; /// The RawPressure flag makes this function to ignore; /// existing reg file sizes, and report raw def/use; /// balance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:48,Energy Efficiency,schedul,scheduling,48,/// Returns single number reflecting benefit of scheduling SU; /// in the current cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:47,Energy Efficiency,schedul,scheduled,47,// Do not waste time on a node that is already scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:3,Energy Efficiency,Adapt,Adaptable,3,"// Adaptable scheduling; // A small, but very parallel; // region, where reg pressure is an issue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:13,Energy Efficiency,schedul,scheduling,13,"// Adaptable scheduling; // A small, but very parallel; // region, where reg pressure is an issue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:3,Modifiability,Adapt,Adaptable,3,"// Adaptable scheduling; // A small, but very parallel; // region, where reg pressure is an issue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:20,Availability,avail,available,20,"// If resources are available for it, multiply the; // chance of scheduling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:65,Energy Efficiency,schedul,scheduling,65,"// If resources are available for it, multiply the; // chance of scheduling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:40,Energy Efficiency,schedul,scheduling,40,// Consider change to reg pressure from scheduling; // this SU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:20,Availability,avail,available,20,"// If resources are available for it, multiply the; // chance of scheduling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:65,Energy Efficiency,schedul,scheduling,65,"// If resources are available for it, multiply the; // chance of scheduling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:85,Security,access,accessed,85,// These are platform-specific things.; // Will need to go into the back end; // and accessed from here via a hook.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:3,Deployability,Update,Update,3,// Update reg pressure tracking.; // First update current node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:43,Deployability,update,update,43,// Update reg pressure tracking.; // First update current node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:97,Energy Efficiency,reduce,reduces,97,"// Adjust number of parallel live ranges.; // Heuristic is simple - node with no data successors reduces; // number of live ranges. All others, increase it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:59,Usability,simpl,simple,59,"// Adjust number of parallel live ranges.; // Heuristic is simple - node with no data successors reduces; // number of live ranges. All others, increase it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:23,Energy Efficiency,allocate,allocated,23,// No register need be allocated for this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:114,Availability,avail,available,114,"/// adjustPriorityOfUnscheduledPreds - One of the predecessors of SU was just; /// scheduled. If SU is not itself available, then there is at least one; /// predecessor node that has not been scheduled yet. If SU has exactly ONE; /// unscheduled predecessor, we want to increase its priority: it getting; /// scheduled will make this node available, so it is better than some other; /// node of the same priority that will not make a node available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:339,Availability,avail,available,339,"/// adjustPriorityOfUnscheduledPreds - One of the predecessors of SU was just; /// scheduled. If SU is not itself available, then there is at least one; /// predecessor node that has not been scheduled yet. If SU has exactly ONE; /// unscheduled predecessor, we want to increase its priority: it getting; /// scheduled will make this node available, so it is better than some other; /// node of the same priority that will not make a node available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:439,Availability,avail,available,439,"/// adjustPriorityOfUnscheduledPreds - One of the predecessors of SU was just; /// scheduled. If SU is not itself available, then there is at least one; /// predecessor node that has not been scheduled yet. If SU has exactly ONE; /// unscheduled predecessor, we want to increase its priority: it getting; /// scheduled will make this node available, so it is better than some other; /// node of the same priority that will not make a node available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:83,Energy Efficiency,schedul,scheduled,83,"/// adjustPriorityOfUnscheduledPreds - One of the predecessors of SU was just; /// scheduled. If SU is not itself available, then there is at least one; /// predecessor node that has not been scheduled yet. If SU has exactly ONE; /// unscheduled predecessor, we want to increase its priority: it getting; /// scheduled will make this node available, so it is better than some other; /// node of the same priority that will not make a node available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:192,Energy Efficiency,schedul,scheduled,192,"/// adjustPriorityOfUnscheduledPreds - One of the predecessors of SU was just; /// scheduled. If SU is not itself available, then there is at least one; /// predecessor node that has not been scheduled yet. If SU has exactly ONE; /// unscheduled predecessor, we want to increase its priority: it getting; /// scheduled will make this node available, so it is better than some other; /// node of the same priority that will not make a node available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:309,Energy Efficiency,schedul,scheduled,309,"/// adjustPriorityOfUnscheduledPreds - One of the predecessors of SU was just; /// scheduled. If SU is not itself available, then there is at least one; /// predecessor node that has not been scheduled yet. If SU has exactly ONE; /// unscheduled predecessor, we want to increase its priority: it getting; /// scheduled will make this node available, so it is better than some other; /// node of the same priority that will not make a node available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:13,Energy Efficiency,schedul,scheduled,13,// All preds scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:47,Availability,avail,available,47,"// Okay, we found a single predecessor that is available, but not scheduled.; // Since it is available, it must be in the priority queue. First remove it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:93,Availability,avail,available,93,"// Okay, we found a single predecessor that is available, but not scheduled.; // Since it is available, it must be in the priority queue. First remove it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:66,Energy Efficiency,schedul,scheduled,66,"// Okay, we found a single predecessor that is available, but not scheduled.; // Since it is available, it must be in the priority queue. First remove it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:131,Performance,queue,queue,131,"// Okay, we found a single predecessor that is available, but not scheduled.; // Since it is available, it must be in the priority queue. First remove it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:39,Performance,queue,queue,39,"// Reinsert the node into the priority queue, which recomputes its; // NumNodesSolelyBlocking value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:71,Energy Efficiency,schedul,scheduling,71,/// Main access point - returns next instructions; /// to be placed in scheduling sequence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:9,Security,access,access,9,/// Main access point - returns next instructions; /// to be placed in scheduling sequence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp:18,Energy Efficiency,schedul,scheduling,18,// Use default TD scheduling mechanism.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ResourcePriorityQueue.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:11,Energy Efficiency,Schedul,ScheduleDAGFast,11,"//===----- ScheduleDAGFast.cpp - Fast poor list scheduler -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a fast scheduler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:48,Energy Efficiency,schedul,scheduler,48,"//===----- ScheduleDAGFast.cpp - Fast poor list scheduler -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a fast scheduler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:406,Energy Efficiency,schedul,scheduler,406,"//===----- ScheduleDAGFast.cpp - Fast poor list scheduler -----------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a fast scheduler.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:46,Performance,queue,queue,46,/// FastPriorityQueue - A degenerate priority queue that considers; /// all nodes to have the same priority.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:86,Energy Efficiency,Schedul,ScheduleDAGFast,86,"//===----------------------------------------------------------------------===//; /// ScheduleDAGFast - The actual ""fast"" list scheduler implementation.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:127,Energy Efficiency,schedul,scheduler,127,"//===----------------------------------------------------------------------===//; /// ScheduleDAGFast - The actual ""fast"" list scheduler implementation.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:4,Availability,Avail,AvailableQueue,4,/// AvailableQueue - The priority queue to use for the available SUnits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:55,Availability,avail,available,55,/// AvailableQueue - The priority queue to use for the available SUnits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:34,Performance,queue,queue,34,/// AvailableQueue - The priority queue to use for the available SUnits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:109,Energy Efficiency,schedul,scheduled,109,"/// LiveRegDefs - A set of physical registers and their definition; /// that are ""live"". These nodes must be scheduled before any other nodes that; /// modifies the registers can be scheduled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:182,Energy Efficiency,schedul,scheduled,182,"/// LiveRegDefs - A set of physical registers and their definition; /// that are ""live"". These nodes must be scheduled before any other nodes that; /// modifies the registers can be scheduled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:34,Energy Efficiency,schedul,scheduler,34,/// forceUnitLatencies - The fast scheduler doesn't care about real latencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:32,Energy Efficiency,Schedul,Schedule,32,// end anonymous namespace; /// Schedule - Schedule the DAG using list scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:43,Energy Efficiency,Schedul,Schedule,43,// end anonymous namespace; /// Schedule - Schedule the DAG using list scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:71,Energy Efficiency,schedul,scheduling,71,// end anonymous namespace; /// Schedule - Schedule the DAG using list scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:13,Energy Efficiency,schedul,scheduling,13,// Build the scheduling graph.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:22,Energy Efficiency,schedul,scheduling,22,// Execute the actual scheduling loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:277,Availability,Avail,AvailableQueue,277,//===----------------------------------------------------------------------===//; // Bottom-Up Scheduling; //===----------------------------------------------------------------------===//; /// ReleasePred - Decrement the NumSuccsLeft count of a predecessor. Add it to; /// the AvailableQueue if the count reaches zero. Also update its cycle bound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:193,Deployability,Release,ReleasePred,193,//===----------------------------------------------------------------------===//; // Bottom-Up Scheduling; //===----------------------------------------------------------------------===//; /// ReleasePred - Decrement the NumSuccsLeft count of a predecessor. Add it to; /// the AvailableQueue if the count reaches zero. Also update its cycle bound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:324,Deployability,update,update,324,//===----------------------------------------------------------------------===//; // Bottom-Up Scheduling; //===----------------------------------------------------------------------===//; /// ReleasePred - Decrement the NumSuccsLeft count of a predecessor. Add it to; /// the AvailableQueue if the count reaches zero. Also update its cycle bound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:95,Energy Efficiency,Schedul,Scheduling,95,//===----------------------------------------------------------------------===//; // Bottom-Up Scheduling; //===----------------------------------------------------------------------===//; /// ReleasePred - Decrement the NumSuccsLeft count of a predecessor. Add it to; /// the AvailableQueue if the count reaches zero. Also update its cycle bound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:36,Energy Efficiency,schedul,scheduled,36,"// If all the node's successors are scheduled, this node is ready; // to be scheduled. Ignore the special EntrySU node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:76,Energy Efficiency,schedul,scheduled,76,"// If all the node's successors are scheduled, this node is ready; // to be scheduled. Ignore the special EntrySU node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:14,Deployability,release,release,14,// Bottom up: release predecessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:156,Energy Efficiency,schedul,scheduled,156,// This is a physical register dependency and it's impossible or; // expensive to copy the register. Make sure nothing that can; // clobber the register is scheduled between the predecessor and; // this node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:31,Integrability,depend,dependency,31,// This is a physical register dependency and it's impossible or; // expensive to copy the register. Make sure nothing that can; // clobber the register is scheduled between the predecessor and; // this node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:170,Availability,Avail,Available,170,"/// ScheduleNodeBottomUp - Add the node to the schedule. Decrement the pending; /// count of its predecessors. If a predecessor pending count is zero, add it to; /// the Available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:4,Energy Efficiency,Schedul,ScheduleNodeBottomUp,4,"/// ScheduleNodeBottomUp - Add the node to the schedule. Decrement the pending; /// count of its predecessors. If a predecessor pending count is zero, add it to; /// the Available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:47,Energy Efficiency,schedul,schedule,47,"/// ScheduleNodeBottomUp - Add the node to the schedule. Decrement the pending; /// count of its predecessors. If a predecessor pending count is zero, add it to; /// the Available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:180,Performance,queue,queue,180,"/// ScheduleNodeBottomUp - Add the node to the schedule. Decrement the pending; /// count of its predecessors. If a predecessor pending count is zero, add it to; /// the Available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:3,Deployability,Release,Release,3,// Release all the implicit physical register defs that are live.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:66,Energy Efficiency,schedul,scheduled,66,/// CopyAndMoveSuccessors - Clone the specified node and move its scheduled; /// successors to the newly created node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:3,Performance,Load,LoadNode,3,// LoadNode may already exist. This can happen when there is another; // load from the same location and producing the same type of value; // but it has different alignment or volatileness.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:73,Performance,load,load,73,// LoadNode may already exist. This can happen when there is another; // load from the same location and producing the same type of value; // but it has different alignment or volatileness.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:13,Energy Efficiency,schedul,scheduled,13,// Only copy scheduled successors. Cut them from old node's successor; // list and move them over.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:72,Energy Efficiency,schedul,scheduled,72,/// InsertCopiesAndMoveSuccs - Insert register copies and move all; /// scheduled successors of the given SUnit to the last copy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:13,Energy Efficiency,schedul,scheduled,13,// Only copy scheduled successors. Cut them from old node's successor; // list and move them over.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:41,Deployability,update,update,41,"/// CheckForLiveRegDef - Return true and update live register vector if the; /// specified register def of the specified SUnit clobbers any ""live"" registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:203,Availability,avail,available,203,"/// DelayForLiveRegsBottomUp - Returns true if it is necessary to delay; /// scheduling of the given node to satisfy live physical register dependencies.; /// If the specific node is the last one that's available to schedule, do; /// whatever is necessary (i.e. backtracking or cloning) to make it possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:77,Energy Efficiency,schedul,scheduling,77,"/// DelayForLiveRegsBottomUp - Returns true if it is necessary to delay; /// scheduling of the given node to satisfy live physical register dependencies.; /// If the specific node is the last one that's available to schedule, do; /// whatever is necessary (i.e. backtracking or cloning) to make it possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:216,Energy Efficiency,schedul,schedule,216,"/// DelayForLiveRegsBottomUp - Returns true if it is necessary to delay; /// scheduling of the given node to satisfy live physical register dependencies.; /// If the specific node is the last one that's available to schedule, do; /// whatever is necessary (i.e. backtracking or cloning) to make it possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:140,Integrability,depend,dependencies,140,"/// DelayForLiveRegsBottomUp - Returns true if it is necessary to delay; /// scheduling of the given node to satisfy live physical register dependencies.; /// If the specific node is the last one that's available to schedule, do; /// whatever is necessary (i.e. backtracking or cloning) to make it possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:49,Energy Efficiency,schedul,scheduling,49,/// ListScheduleBottomUp - The main loop of list scheduling for bottom-up; /// schedulers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:79,Energy Efficiency,schedul,schedulers,79,/// ListScheduleBottomUp - The main loop of list scheduling for bottom-up; /// schedulers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:3,Deployability,Release,Release,3,// Release any predecessors of the special Exit node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:15,Availability,Avail,Available,15,// Add root to Available queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:25,Performance,queue,queue,25,// Add root to Available queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:9,Availability,Avail,Available,9,"// While Available queue is not empty, grab the node with the highest; // priority. If it is not ready put it back. Schedule the node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:116,Energy Efficiency,Schedul,Schedule,116,"// While Available queue is not empty, grab the node with the highest; // priority. If it is not ready put it back. Schedule the node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:19,Performance,queue,queue,19,"// While Available queue is not empty, grab the node with the highest; // priority. If it is not ready put it back. Schedule the node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:21,Availability,Avail,AvailableQueue,21,// This SU is not in AvailableQueue right now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:55,Integrability,depend,dependencies,55,// All candidates are delayed due to live physical reg dependencies.; // Try code duplication or inserting cross class copies; // to resolve it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:93,Integrability,depend,dependency,93,"// Try duplicating the nodes that produces these; // ""expensive to copy"" values to break the dependency. In case even; // that doesn't work, insert cross class copies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:49,Availability,avail,available,49,// Add the nodes that aren't ready back onto the available list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:20,Availability,avail,available,20,// May no longer be available due to backtracking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:85,Energy Efficiency,Schedul,ScheduleDAGLinearize,85,"//===----------------------------------------------------------------------===//; // ScheduleDAGLinearize - No scheduling scheduler, it simply linearize the; // DAG in topological order.; // IMPORTANT: this may not work for targets with phyreg dependency.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:111,Energy Efficiency,schedul,scheduling,111,"//===----------------------------------------------------------------------===//; // ScheduleDAGLinearize - No scheduling scheduler, it simply linearize the; // DAG in topological order.; // IMPORTANT: this may not work for targets with phyreg dependency.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:122,Energy Efficiency,schedul,scheduler,122,"//===----------------------------------------------------------------------===//; // ScheduleDAGLinearize - No scheduling scheduler, it simply linearize the; // DAG in topological order.; // IMPORTANT: this may not work for targets with phyreg dependency.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:244,Integrability,depend,dependency,244,"//===----------------------------------------------------------------------===//; // ScheduleDAGLinearize - No scheduling scheduler, it simply linearize the; // DAG in topological order.; // IMPORTANT: this may not work for targets with phyreg dependency.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:136,Usability,simpl,simply,136,"//===----------------------------------------------------------------------===//; // ScheduleDAGLinearize - No scheduling scheduler, it simply linearize the; // DAG in topological order.; // IMPORTANT: this may not work for targets with phyreg dependency.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:3,Performance,Cache,Cache,3,// Cache glue to its user,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:3,Energy Efficiency,Schedul,Schedule,3,// Schedule glue operand right above N.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:27,Energy Efficiency,schedul,scheduled,27,// Glue operand is already scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp:21,Energy Efficiency,schedul,scheduled,21,// Glue user must be scheduled together with the glue operand. So other; // users of the glue operand must be treated as its users.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGFast.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:417,Availability,down,down,417,"//===- ScheduleDAGRRList.cpp - Reg pressure reduction list scheduler ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements bottom-up and top-down register pressure reduction list; // schedulers, using standard algorithms. The basic approach uses a priority; // queue of available nodes to schedule. One at a time, nodes are taken from; // the priority queue (thus in priority order), checked for legality to; // schedule, and emitted if legal.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:546,Availability,avail,available,546,"//===- ScheduleDAGRRList.cpp - Reg pressure reduction list scheduler ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements bottom-up and top-down register pressure reduction list; // schedulers, using standard algorithms. The basic approach uses a priority; // queue of available nodes to schedule. One at a time, nodes are taken from; // the priority queue (thus in priority order), checked for legality to; // schedule, and emitted if legal.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:7,Energy Efficiency,Schedul,ScheduleDAGRRList,7,"//===- ScheduleDAGRRList.cpp - Reg pressure reduction list scheduler ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements bottom-up and top-down register pressure reduction list; // schedulers, using standard algorithms. The basic approach uses a priority; // queue of available nodes to schedule. One at a time, nodes are taken from; // the priority queue (thus in priority order), checked for legality to; // schedule, and emitted if legal.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:59,Energy Efficiency,schedul,scheduler,59,"//===- ScheduleDAGRRList.cpp - Reg pressure reduction list scheduler ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements bottom-up and top-down register pressure reduction list; // schedulers, using standard algorithms. The basic approach uses a priority; // queue of available nodes to schedule. One at a time, nodes are taken from; // the priority queue (thus in priority order), checked for legality to; // schedule, and emitted if legal.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:459,Energy Efficiency,schedul,schedulers,459,"//===- ScheduleDAGRRList.cpp - Reg pressure reduction list scheduler ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements bottom-up and top-down register pressure reduction list; // schedulers, using standard algorithms. The basic approach uses a priority; // queue of available nodes to schedule. One at a time, nodes are taken from; // the priority queue (thus in priority order), checked for legality to; // schedule, and emitted if legal.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:565,Energy Efficiency,schedul,schedule,565,"//===- ScheduleDAGRRList.cpp - Reg pressure reduction list scheduler ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements bottom-up and top-down register pressure reduction list; // schedulers, using standard algorithms. The basic approach uses a priority; // queue of available nodes to schedule. One at a time, nodes are taken from; // the priority queue (thus in priority order), checked for legality to; // schedule, and emitted if legal.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:688,Energy Efficiency,schedul,schedule,688,"//===- ScheduleDAGRRList.cpp - Reg pressure reduction list scheduler ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements bottom-up and top-down register pressure reduction list; // schedulers, using standard algorithms. The basic approach uses a priority; // queue of available nodes to schedule. One at a time, nodes are taken from; // the priority queue (thus in priority order), checked for legality to; // schedule, and emitted if legal.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:537,Performance,queue,queue,537,"//===- ScheduleDAGRRList.cpp - Reg pressure reduction list scheduler ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements bottom-up and top-down register pressure reduction list; // schedulers, using standard algorithms. The basic approach uses a priority; // queue of available nodes to schedule. One at a time, nodes are taken from; // the priority queue (thus in priority order), checked for legality to; // schedule, and emitted if legal.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:628,Performance,queue,queue,628,"//===- ScheduleDAGRRList.cpp - Reg pressure reduction list scheduler ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements bottom-up and top-down register pressure reduction list; // schedulers, using standard algorithms. The basic approach uses a priority; // queue of available nodes to schedule. One at a time, nodes are taken from; // the priority queue (thus in priority order), checked for legality to; // schedule, and emitted if legal.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:59,Availability,robust,robust,59,// Temporary sched=list-ilp flags until the heuristics are robust.; // Some options are also available under sched=list-hybrid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:93,Availability,avail,available,93,// Temporary sched=list-ilp flags until the heuristics are robust.; // Some options are also available under sched=list-hybrid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:195,Availability,down,down,195,//===----------------------------------------------------------------------===//; /// ScheduleDAGRRList - The actual register reduction list scheduler; /// implementation. This supports both top-down and bottom-up scheduling.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:86,Energy Efficiency,Schedul,ScheduleDAGRRList,86,//===----------------------------------------------------------------------===//; /// ScheduleDAGRRList - The actual register reduction list scheduler; /// implementation. This supports both top-down and bottom-up scheduling.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:141,Energy Efficiency,schedul,scheduler,141,//===----------------------------------------------------------------------===//; /// ScheduleDAGRRList - The actual register reduction list scheduler; /// implementation. This supports both top-down and bottom-up scheduling.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:214,Energy Efficiency,schedul,scheduling,214,//===----------------------------------------------------------------------===//; /// ScheduleDAGRRList - The actual register reduction list scheduler; /// implementation. This supports both top-down and bottom-up scheduling.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:30,Energy Efficiency,schedul,scheduler,30,/// NeedLatency - True if the scheduler will make use of latency information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:57,Performance,latency,latency,57,/// NeedLatency - True if the scheduler will make use of latency information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:4,Availability,Avail,AvailableQueue,4,/// AvailableQueue - The priority queue to use for the available SUnits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:55,Availability,avail,available,55,/// AvailableQueue - The priority queue to use for the available SUnits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:34,Performance,queue,queue,34,/// AvailableQueue - The priority queue to use for the available SUnits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:201,Availability,avail,available,201,"/// PendingQueue - This contains all of the instructions whose operands have; /// been issued, but their results are not ready yet (due to the latency of; /// the operation). Once the operands becomes available, the instruction is; /// added to the AvailableQueue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:249,Availability,Avail,AvailableQueue,249,"/// PendingQueue - This contains all of the instructions whose operands have; /// been issued, but their results are not ready yet (due to the latency of; /// the operation). Once the operands becomes available, the instruction is; /// added to the AvailableQueue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:143,Performance,latency,latency,143,"/// PendingQueue - This contains all of the instructions whose operands have; /// been issued, but their results are not ready yet (due to the latency of; /// the operation). Once the operands becomes available, the instruction is; /// added to the AvailableQueue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:4,Safety,Hazard,HazardRec,4,/// HazardRec - The hazard recognizer to use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:20,Safety,hazard,hazard,20,/// HazardRec - The hazard recognizer to use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:27,Energy Efficiency,schedul,scheduler,27,/// CurCycle - The current scheduler state corresponds to this cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:45,Availability,avail,available,45,/// MinAvailableCycle - Cycle of the soonest available instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:97,Energy Efficiency,schedul,scheduling,97,/// IssueCount - Count instructions issued in this cycle; /// Currently valid only for bottom-up scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:109,Energy Efficiency,schedul,scheduled,109,"/// LiveRegDefs - A set of physical registers and their definition; /// that are ""live"". These nodes must be scheduled before any other nodes that; /// modifies the registers can be scheduled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:182,Energy Efficiency,schedul,scheduled,182,"/// LiveRegDefs - A set of physical registers and their definition; /// that are ""live"". These nodes must be scheduled before any other nodes that; /// modifies the registers can be scheduled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:31,Deployability,update,update,31,/// AddPredQueued - Queues and update to add a predecessor edge to SUnit SU.; /// This returns true if this is a new predecessor.; /// Does *NOT* update the topological ordering! It just queues an update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:146,Deployability,update,update,146,/// AddPredQueued - Queues and update to add a predecessor edge to SUnit SU.; /// This returns true if this is a new predecessor.; /// Does *NOT* update the topological ordering! It just queues an update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:197,Deployability,update,update,197,/// AddPredQueued - Queues and update to add a predecessor edge to SUnit SU.; /// This returns true if this is a new predecessor.; /// Does *NOT* update the topological ordering! It just queues an update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:20,Performance,Queue,Queues,20,/// AddPredQueued - Queues and update to add a predecessor edge to SUnit SU.; /// This returns true if this is a new predecessor.; /// Does *NOT* update the topological ordering! It just queues an update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:187,Performance,queue,queues,187,/// AddPredQueued - Queues and update to add a predecessor edge to SUnit SU.; /// This returns true if this is a new predecessor.; /// Does *NOT* update the topological ordering! It just queues an update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:109,Deployability,Update,Updates,109,/// AddPred - adds a predecessor edge to SUnit SU.; /// This returns true if this is a new predecessor.; /// Updates the topological ordering if required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:111,Deployability,Update,Updates,111,/// RemovePred - removes a predecessor edge from SUnit SU.; /// This returns true if an edge was removed.; /// Updates the topological ordering if required.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Deployability,Update,Update,3,// Update the topological ordering.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Deployability,Update,Update,3,// Update the topological ordering.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:52,Energy Efficiency,schedul,scheduling,52,/// forceUnitLatencies - Register-pressure-reducing scheduling doesn't; /// need actual latency information but the hybrid scheduler does.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:123,Energy Efficiency,schedul,scheduler,123,/// forceUnitLatencies - Register-pressure-reducing scheduling doesn't; /// need actual latency information but the hybrid scheduler does.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:88,Performance,latency,latency,88,/// forceUnitLatencies - Register-pressure-reducing scheduling doesn't; /// need actual latency information but the hybrid scheduler does.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:4,Energy Efficiency,Schedul,Schedule,4,/// Schedule - Schedule the DAG using list scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:15,Energy Efficiency,Schedul,Schedule,15,/// Schedule - Schedule the DAG using list scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:43,Energy Efficiency,schedul,scheduling,43,/// Schedule - Schedule the DAG using list scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate slots for each physical register, plus one for a special register; // to track the virtual resource of a calling sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:13,Energy Efficiency,schedul,scheduling,13,// Build the scheduling graph.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:22,Energy Efficiency,schedul,scheduling,22,// Execute the actual scheduling loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:277,Availability,Avail,AvailableQueue,277,//===----------------------------------------------------------------------===//; // Bottom-Up Scheduling; //===----------------------------------------------------------------------===//; /// ReleasePred - Decrement the NumSuccsLeft count of a predecessor. Add it to; /// the AvailableQueue if the count reaches zero. Also update its cycle bound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:193,Deployability,Release,ReleasePred,193,//===----------------------------------------------------------------------===//; // Bottom-Up Scheduling; //===----------------------------------------------------------------------===//; /// ReleasePred - Decrement the NumSuccsLeft count of a predecessor. Add it to; /// the AvailableQueue if the count reaches zero. Also update its cycle bound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:324,Deployability,update,update,324,//===----------------------------------------------------------------------===//; // Bottom-Up Scheduling; //===----------------------------------------------------------------------===//; /// ReleasePred - Decrement the NumSuccsLeft count of a predecessor. Add it to; /// the AvailableQueue if the count reaches zero. Also update its cycle bound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:95,Energy Efficiency,Schedul,Scheduling,95,//===----------------------------------------------------------------------===//; // Bottom-Up Scheduling; //===----------------------------------------------------------------------===//; /// ReleasePred - Decrement the NumSuccsLeft count of a predecessor. Add it to; /// the AvailableQueue if the count reaches zero. Also update its cycle bound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:116,Deployability,pipeline,pipeline,116,// Updating predecessor's height. This is now the cycle when the; // predecessor can be scheduled without causing a pipeline stall.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:88,Energy Efficiency,schedul,scheduled,88,// Updating predecessor's height. This is now the cycle when the; // predecessor can be scheduled without causing a pipeline stall.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:36,Energy Efficiency,schedul,scheduled,36,"// If all the node's successors are scheduled, this node is ready; // to be scheduled. Ignore the special EntrySU node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:76,Energy Efficiency,schedul,scheduled,76,"// If all the node's successors are scheduled, this node is ready; // to be scheduled. Ignore the special EntrySU node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:64,Performance,queue,queue,64,"// CapturePred and others may have left the node in the pending queue, avoid; // adding it twice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:71,Safety,avoid,avoid,71,"// CapturePred and others may have left the node in the pending queue, avoid; // adding it twice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:80,Integrability,depend,dependencies,80,/// IsChainDependent - Test if Outer is reachable from Inner through; /// chain dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:23,Testability,Test,Test,23,/// IsChainDependent - Test if Outer is reachable from Inner through; /// chain dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:444,Safety,avoid,avoid,444,"/// FindCallSeqStart - Starting from the (lowered) CALLSEQ_END node, locate; /// the corresponding (lowered) CALLSEQ_BEGIN node.; ///; /// NestLevel and MaxNested are used in recursion to indcate the current level; /// of nesting of CALLSEQ_BEGIN and CALLSEQ_END pairs, as well as the maximum; /// level seen so far.; ///; /// TODO: It would be better to give CALLSEQ_END an explicit operand to point; /// to the corresponding CALLSEQ_BEGIN to avoid needing to search for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:9,Deployability,Release,ReleasePred,9,"/// Call ReleasePred for each predecessor, then update register live def/gen.; /// Always update LiveRegDefs for a register dependence even if the current SU; /// also defines the register. This effectively create one large live range; /// across a sequence of two-address node. This is important because the; /// entire chain must be scheduled together. Example:; ///; /// flags = (3) add; /// flags = (2) addc flags; /// flags = (1) addc flags; ///; /// results in; ///; /// LiveRegDefs[flags] = 3; /// LiveRegGens[flags] = 1; ///; /// If (2) addc is unscheduled, then (1) addc must also be unscheduled to avoid; /// interference on flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:48,Deployability,update,update,48,"/// Call ReleasePred for each predecessor, then update register live def/gen.; /// Always update LiveRegDefs for a register dependence even if the current SU; /// also defines the register. This effectively create one large live range; /// across a sequence of two-address node. This is important because the; /// entire chain must be scheduled together. Example:; ///; /// flags = (3) add; /// flags = (2) addc flags; /// flags = (1) addc flags; ///; /// results in; ///; /// LiveRegDefs[flags] = 3; /// LiveRegGens[flags] = 1; ///; /// If (2) addc is unscheduled, then (1) addc must also be unscheduled to avoid; /// interference on flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:90,Deployability,update,update,90,"/// Call ReleasePred for each predecessor, then update register live def/gen.; /// Always update LiveRegDefs for a register dependence even if the current SU; /// also defines the register. This effectively create one large live range; /// across a sequence of two-address node. This is important because the; /// entire chain must be scheduled together. Example:; ///; /// flags = (3) add; /// flags = (2) addc flags; /// flags = (1) addc flags; ///; /// results in; ///; /// LiveRegDefs[flags] = 3; /// LiveRegGens[flags] = 1; ///; /// If (2) addc is unscheduled, then (1) addc must also be unscheduled to avoid; /// interference on flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:335,Energy Efficiency,schedul,scheduled,335,"/// Call ReleasePred for each predecessor, then update register live def/gen.; /// Always update LiveRegDefs for a register dependence even if the current SU; /// also defines the register. This effectively create one large live range; /// across a sequence of two-address node. This is important because the; /// entire chain must be scheduled together. Example:; ///; /// flags = (3) add; /// flags = (2) addc flags; /// flags = (1) addc flags; ///; /// results in; ///; /// LiveRegDefs[flags] = 3; /// LiveRegGens[flags] = 1; ///; /// If (2) addc is unscheduled, then (1) addc must also be unscheduled to avoid; /// interference on flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:124,Integrability,depend,dependence,124,"/// Call ReleasePred for each predecessor, then update register live def/gen.; /// Always update LiveRegDefs for a register dependence even if the current SU; /// also defines the register. This effectively create one large live range; /// across a sequence of two-address node. This is important because the; /// entire chain must be scheduled together. Example:; ///; /// flags = (3) add; /// flags = (2) addc flags; /// flags = (1) addc flags; ///; /// results in; ///; /// LiveRegDefs[flags] = 3; /// LiveRegGens[flags] = 1; ///; /// If (2) addc is unscheduled, then (1) addc must also be unscheduled to avoid; /// interference on flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:608,Safety,avoid,avoid,608,"/// Call ReleasePred for each predecessor, then update register live def/gen.; /// Always update LiveRegDefs for a register dependence even if the current SU; /// also defines the register. This effectively create one large live range; /// across a sequence of two-address node. This is important because the; /// entire chain must be scheduled together. Example:; ///; /// flags = (3) add; /// flags = (2) addc flags; /// flags = (1) addc flags; ///; /// results in; ///; /// LiveRegDefs[flags] = 3; /// LiveRegGens[flags] = 1; ///; /// If (2) addc is unscheduled, then (1) addc must also be unscheduled to avoid; /// interference on flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:14,Deployability,release,release,14,// Bottom up: release predecessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:156,Energy Efficiency,schedul,scheduled,156,// This is a physical register dependency and it's impossible or; // expensive to copy the register. Make sure nothing that can; // clobber the register is scheduled between the predecessor and; // this node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:31,Integrability,depend,dependency,31,// This is a physical register dependency and it's impossible or; // expensive to copy the register. Make sure nothing that can; // clobber the register is scheduled between the predecessor and; // this node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:12,Energy Efficiency,schedul,scheduling,12,"// If we're scheduling a lowered CALLSEQ_END, find the corresponding; // CALLSEQ_BEGIN. Inject an artificial physical register dependence between; // these nodes, to prevent other calls from being interscheduled with them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:88,Integrability,Inject,Inject,88,"// If we're scheduling a lowered CALLSEQ_END, find the corresponding; // CALLSEQ_BEGIN. Inject an artificial physical register dependence between; // these nodes, to prevent other calls from being interscheduled with them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:127,Integrability,depend,dependence,127,"// If we're scheduling a lowered CALLSEQ_END, find the corresponding; // CALLSEQ_BEGIN. Inject an artificial physical register dependence between; // these nodes, to prevent other calls from being interscheduled with them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:88,Security,Inject,Inject,88,"// If we're scheduling a lowered CALLSEQ_END, find the corresponding; // CALLSEQ_BEGIN. Inject an artificial physical register dependence between; // these nodes, to prevent other calls from being interscheduled with them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:100,Availability,avail,available,100,"/// Check to see if any of the pending instructions are ready to issue. If; /// so, add them to the available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:110,Performance,queue,queue,110,"/// Check to see if any of the pending instructions are ready to issue. If; /// so, add them to the available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:10,Availability,avail,available,10,"// If the available queue is empty, it is safe to reset MinAvailableCycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:20,Performance,queue,queue,20,"// If the available queue is empty, it is safe to reset MinAvailableCycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:42,Safety,safe,safe,42,"// If the available queue is empty, it is safe to reset MinAvailableCycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:98,Availability,avail,available,98,"// Check to see if any of the pending instructions are ready to issue. If; // so, add them to the available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:108,Performance,queue,queue,108,"// Check to see if any of the pending instructions are ready to issue. If; // so, add them to the available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:13,Energy Efficiency,schedul,scheduler,13,/// Move the scheduler state forward by the specified number of Cycles.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:48,Performance,latency,latency,48,// Bypass lots of virtual calls in case of long latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:83,Availability,avail,available,83,"// FIXME: Instead of visiting the pending Q each time, set a dirty flag on the; // available Q to release pending nodes at least once before popping.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:98,Deployability,release,release,98,"// FIXME: Instead of visiting the pending Q each time, set a dirty flag on the; // available Q to release pending nodes at least once before popping.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:13,Energy Efficiency,schedul,scheduler,13,/// Move the scheduler state forward until the specified node's dependents are; /// ready and can be scheduled with no resource conflicts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:101,Energy Efficiency,schedul,scheduled,101,/// Move the scheduler state forward until the specified node's dependents are; /// ready and can be scheduled with no resource conflicts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:64,Integrability,depend,dependents,64,/// Move the scheduler state forward until the specified node's dependents are; /// ready and can be scheduled with no resource conflicts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:113,Availability,mask,mask,113,"// FIXME: Nodes such as CopyFromReg probably should not advance the current; // cycle. Otherwise, we can wrongly mask real stalls. If the non-machine node; // has predecessors the cycle will be advanced when they are scheduled.; // But given the crude nature of modeling latency though such nodes, we; // currently need to treat these nodes like real instructions.; // if (!SU->getNode() || !SU->getNode()->isMachineOpcode()) return;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:217,Energy Efficiency,schedul,scheduled,217,"// FIXME: Nodes such as CopyFromReg probably should not advance the current; // cycle. Otherwise, we can wrongly mask real stalls. If the non-machine node; // has predecessors the cycle will be advanced when they are scheduled.; // But given the crude nature of modeling latency though such nodes, we; // currently need to treat these nodes like real instructions.; // if (!SU->getNode() || !SU->getNode()->isMachineOpcode()) return;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:271,Performance,latency,latency,271,"// FIXME: Nodes such as CopyFromReg probably should not advance the current; // cycle. Otherwise, we can wrongly mask real stalls. If the non-machine node; // has predecessors the cycle will be advanced when they are scheduled.; // But given the crude nature of modeling latency though such nodes, we; // currently need to treat these nodes like real instructions.; // if (!SU->getNode() || !SU->getNode()->isMachineOpcode()) return;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:76,Availability,avail,available,76,// Bump CurCycle to account for latency. We assume the latency of other; // available instructions may be hidden by the stall (not a full pipe stall).; // This updates the hazard recognizer's cycle before reserving resources for; // this instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:160,Deployability,update,updates,160,// Bump CurCycle to account for latency. We assume the latency of other; // available instructions may be hidden by the stall (not a full pipe stall).; // This updates the hazard recognizer's cycle before reserving resources for; // this instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:32,Performance,latency,latency,32,// Bump CurCycle to account for latency. We assume the latency of other; // available instructions may be hidden by the stall (not a full pipe stall).; // This updates the hazard recognizer's cycle before reserving resources for; // this instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:55,Performance,latency,latency,55,// Bump CurCycle to account for latency. We assume the latency of other; // available instructions may be hidden by the stall (not a full pipe stall).; // This updates the hazard recognizer's cycle before reserving resources for; // this instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:172,Safety,hazard,hazard,172,// Bump CurCycle to account for latency. We assume the latency of other; // available instructions may be hidden by the stall (not a full pipe stall).; // This updates the hazard recognizer's cycle before reserving resources for; // this instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:13,Energy Efficiency,schedul,scheduled,13,"// Calls are scheduled in their preceding cycle, so don't conflict with; // hazards from instructions after the call. EmitNode will reset the; // scoreboard state before emitting the call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:76,Safety,hazard,hazards,76,"// Calls are scheduled in their preceding cycle, so don't conflict with; // hazards from instructions after the call. EmitNode will reset the; // scoreboard state before emitting the call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:50,Deployability,pipeline,pipelined,50,"// FIXME: For resource conflicts in very long non-pipelined stages, we; // should probably skip ahead here to avoid useless scoreboard checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:110,Safety,avoid,avoid,110,"// FIXME: For resource conflicts in very long non-pipelined stages, we; // should probably skip ahead here to avoid useless scoreboard checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:61,Deployability,update,update,61,/// Record this SUnit in the HazardRecognizer.; /// Does not update CurCycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:29,Safety,Hazard,HazardRecognizer,29,/// Record this SUnit in the HazardRecognizer.; /// Does not update CurCycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:29,Deployability,pipeline,pipeline,29,"// For inline asm, clear the pipeline state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:19,Usability,clear,clear,19,"// For inline asm, clear the pipeline state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:98,Deployability,pipeline,pipeline,98,"// Calls are scheduled with their preceding instructions. For bottom-up; // scheduling, clear the pipeline state before emitting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:13,Energy Efficiency,schedul,scheduled,13,"// Calls are scheduled with their preceding instructions. For bottom-up; // scheduling, clear the pipeline state before emitting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:76,Energy Efficiency,schedul,scheduling,76,"// Calls are scheduled with their preceding instructions. For bottom-up; // scheduling, clear the pipeline state before emitting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:88,Usability,clear,clear,88,"// Calls are scheduled with their preceding instructions. For bottom-up; // scheduling, clear the pipeline state before emitting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:170,Availability,Avail,Available,170,"/// ScheduleNodeBottomUp - Add the node to the schedule. Decrement the pending; /// count of its predecessors. If a predecessor pending count is zero, add it to; /// the Available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:4,Energy Efficiency,Schedul,ScheduleNodeBottomUp,4,"/// ScheduleNodeBottomUp - Add the node to the schedule. Decrement the pending; /// count of its predecessors. If a predecessor pending count is zero, add it to; /// the Available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:47,Energy Efficiency,schedul,schedule,47,"/// ScheduleNodeBottomUp - Add the node to the schedule. Decrement the pending; /// count of its predecessors. If a predecessor pending count is zero, add it to; /// the Available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:180,Performance,queue,queue,180,"/// ScheduleNodeBottomUp - Add the node to the schedule. Decrement the pending; /// count of its predecessors. If a predecessor pending count is zero, add it to; /// the Available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:122,Energy Efficiency,schedul,scheduling,122,"// FIXME: Do not modify node height. It may interfere with; // backtracking. Instead add a ""ready cycle"" to SUnit. Before scheduling the; // node its ready cycle can aid heuristics, and after scheduling it can; // indicate the scheduled cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:192,Energy Efficiency,schedul,scheduling,192,"// FIXME: Do not modify node height. It may interfere with; // backtracking. Instead add a ""ready cycle"" to SUnit. Before scheduling the; // node its ready cycle can aid heuristics, and after scheduling it can; // indicate the scheduled cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:227,Energy Efficiency,schedul,scheduled,227,"// FIXME: Do not modify node height. It may interfere with; // backtracking. Instead add a ""ready cycle"" to SUnit. Before scheduling the; // node its ready cycle can aid heuristics, and after scheduling it can; // indicate the scheduled cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:29,Energy Efficiency,schedul,scheduled,29,// Reserve resources for the scheduled instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:97,Deployability,Release,ReleasePredecessors,97,"// If HazardRec is disabled, and each inst counts as one cycle, then; // advance CurCycle before ReleasePredecessors to avoid useless pushes to; // PendingQueue for schedulers that implement HasReadyFilter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:165,Energy Efficiency,schedul,schedulers,165,"// If HazardRec is disabled, and each inst counts as one cycle, then; // advance CurCycle before ReleasePredecessors to avoid useless pushes to; // PendingQueue for schedulers that implement HasReadyFilter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:6,Safety,Hazard,HazardRec,6,"// If HazardRec is disabled, and each inst counts as one cycle, then; // advance CurCycle before ReleasePredecessors to avoid useless pushes to; // PendingQueue for schedulers that implement HasReadyFilter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:120,Safety,avoid,avoid,120,"// If HazardRec is disabled, and each inst counts as one cycle, then; // advance CurCycle before ReleasePredecessors to avoid useless pushes to; // PendingQueue for schedulers that implement HasReadyFilter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Deployability,Update,Update,3,// Update liveness of predecessors before successors to avoid treating a; // two-address node as a live range def.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:56,Safety,avoid,avoid,56,// Update liveness of predecessors before successors to avoid treating a; // two-address node as a live range def.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Deployability,Release,Release,3,// Release all the implicit physical register defs that are live.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Deployability,Release,Release,3,"// Release the special call resource dependence, if this is the beginning; // of a call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:37,Integrability,depend,dependence,37,"// Release the special call resource dependence, if this is the beginning; // of a call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:85,Availability,avail,available,85,"// Conditions under which the scheduler should eagerly advance the cycle:; // (1) No available instructions; // (2) All pipelines full, so available instructions must have hazards.; //; // If HazardRec is disabled, the cycle was pre-advanced before calling; // ReleasePredecessors. In that case, IssueCount should remain 0.; //; // Check AvailableQueue after ReleasePredecessors in case of zero latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:139,Availability,avail,available,139,"// Conditions under which the scheduler should eagerly advance the cycle:; // (1) No available instructions; // (2) All pipelines full, so available instructions must have hazards.; //; // If HazardRec is disabled, the cycle was pre-advanced before calling; // ReleasePredecessors. In that case, IssueCount should remain 0.; //; // Check AvailableQueue after ReleasePredecessors in case of zero latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:338,Availability,Avail,AvailableQueue,338,"// Conditions under which the scheduler should eagerly advance the cycle:; // (1) No available instructions; // (2) All pipelines full, so available instructions must have hazards.; //; // If HazardRec is disabled, the cycle was pre-advanced before calling; // ReleasePredecessors. In that case, IssueCount should remain 0.; //; // Check AvailableQueue after ReleasePredecessors in case of zero latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:120,Deployability,pipeline,pipelines,120,"// Conditions under which the scheduler should eagerly advance the cycle:; // (1) No available instructions; // (2) All pipelines full, so available instructions must have hazards.; //; // If HazardRec is disabled, the cycle was pre-advanced before calling; // ReleasePredecessors. In that case, IssueCount should remain 0.; //; // Check AvailableQueue after ReleasePredecessors in case of zero latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:261,Deployability,Release,ReleasePredecessors,261,"// Conditions under which the scheduler should eagerly advance the cycle:; // (1) No available instructions; // (2) All pipelines full, so available instructions must have hazards.; //; // If HazardRec is disabled, the cycle was pre-advanced before calling; // ReleasePredecessors. In that case, IssueCount should remain 0.; //; // Check AvailableQueue after ReleasePredecessors in case of zero latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:359,Deployability,Release,ReleasePredecessors,359,"// Conditions under which the scheduler should eagerly advance the cycle:; // (1) No available instructions; // (2) All pipelines full, so available instructions must have hazards.; //; // If HazardRec is disabled, the cycle was pre-advanced before calling; // ReleasePredecessors. In that case, IssueCount should remain 0.; //; // Check AvailableQueue after ReleasePredecessors in case of zero latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:30,Energy Efficiency,schedul,scheduler,30,"// Conditions under which the scheduler should eagerly advance the cycle:; // (1) No available instructions; // (2) All pipelines full, so available instructions must have hazards.; //; // If HazardRec is disabled, the cycle was pre-advanced before calling; // ReleasePredecessors. In that case, IssueCount should remain 0.; //; // Check AvailableQueue after ReleasePredecessors in case of zero latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:395,Performance,latency,latency,395,"// Conditions under which the scheduler should eagerly advance the cycle:; // (1) No available instructions; // (2) All pipelines full, so available instructions must have hazards.; //; // If HazardRec is disabled, the cycle was pre-advanced before calling; // ReleasePredecessors. In that case, IssueCount should remain 0.; //; // Check AvailableQueue after ReleasePredecessors in case of zero latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:172,Safety,hazard,hazards,172,"// Conditions under which the scheduler should eagerly advance the cycle:; // (1) No available instructions; // (2) All pipelines full, so available instructions must have hazards.; //; // If HazardRec is disabled, the cycle was pre-advanced before calling; // ReleasePredecessors. In that case, IssueCount should remain 0.; //; // Check AvailableQueue after ReleasePredecessors in case of zero latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:192,Safety,Hazard,HazardRec,192,"// Conditions under which the scheduler should eagerly advance the cycle:; // (1) No available instructions; // (2) All pipelines full, so available instructions must have hazards.; //; // If HazardRec is disabled, the cycle was pre-advanced before calling; // ReleasePredecessors. In that case, IssueCount should remain 0.; //; // Check AvailableQueue after ReleasePredecessors in case of zero latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:165,Availability,Avail,AvailableQueue,165,"/// CapturePred - This does the opposite of ReleasePred. Since SU is being; /// unscheduled, increase the succ left count of its predecessors. Remove; /// them from AvailableQueue if necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:44,Deployability,Release,ReleasePred,44,"/// CapturePred - This does the opposite of ReleasePred. Since SU is being; /// unscheduled, increase the succ left count of its predecessors. Remove; /// them from AvailableQueue if necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:64,Deployability,update,update,64,"/// UnscheduleNodeBottomUp - Remove the node from the schedule, update its and; /// its predecessor states to reflect the change.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:54,Energy Efficiency,schedul,schedule,54,"/// UnscheduleNodeBottomUp - Remove the node from the schedule, update its and; /// its predecessor states to reflect the change.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:37,Integrability,depend,dependence,37,"// Reclaim the special call resource dependence, if this is the beginning; // of a call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Deployability,Release,Release,3,"// Release the special call resource dependence, if this is the end; // of a call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:37,Integrability,depend,dependence,37,"// Release the special call resource dependence, if this is the end; // of a call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Deployability,Update,Update,3,// Update LiveRegGen only if was empty before this unscheduling.; // This is to avoid incorrect updating LiveRegGen set in previous run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:80,Safety,avoid,avoid,80,// Update LiveRegGen only if was empty before this unscheduling.; // This is to avoid incorrect updating LiveRegGen set in previous run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:14,Availability,avail,available,14,// Don't make available until backtracking is complete.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:28,Safety,hazard,hazard,28,"/// After backtracking, the hazard checker needs to be restored to a state; /// corresponding the current cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:34,Energy Efficiency,schedul,scheduling,34,/// BacktrackBottomUp - Backtrack scheduling to a previous cycle specified in; /// BTCycle in order to schedule a specific node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:103,Energy Efficiency,schedul,schedule,103,/// BacktrackBottomUp - Backtrack scheduling to a previous cycle specified in; /// BTCycle in order to schedule a specific node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Performance,Load,LoadNode,3,// LoadNode may already exist. This can happen when there is another; // load from the same location and producing the same type of value; // but it has different alignment or volatileness.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:73,Performance,load,load,73,// LoadNode may already exist. This can happen when there is another; // load from the same location and producing the same type of value; // but it has different alignment or volatileness.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:30,Energy Efficiency,schedul,scheduled,30,"// If LoadSU has already been scheduled, we should clone it but; // this would negate the benefit to unfolding so just return SU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:6,Performance,Load,LoadSU,6,"// If LoadSU has already been scheduled, we should clone it but; // this would negate the benefit to unfolding so just return SU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:29,Energy Efficiency,schedul,scheduled,29,"// If NewSU has already been scheduled, we need to clone it, but this; // negates the benefit to unfolding so just return SU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:14,Integrability,depend,dependency,14,// Add a data dependency to reflect that NewSU reads the value defined; // by LoadSU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:78,Performance,Load,LoadSU,78,// Add a data dependency to reflect that NewSU reads the value defined; // by LoadSU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:66,Energy Efficiency,schedul,scheduled,66,/// CopyAndMoveSuccessors - Clone the specified node and move its scheduled; /// successors to the newly created node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:18,Energy Efficiency,schedul,scheduled,18,// If this can be scheduled don't bother duplicating and just return,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:13,Energy Efficiency,schedul,scheduled,13,// Only copy scheduled successors. Cut them from old node's successor; // list and move them over.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:72,Energy Efficiency,schedul,scheduled,72,/// InsertCopiesAndMoveSuccs - Insert register copies and move all; /// scheduled successors of the given SUnit to the last copy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:13,Energy Efficiency,schedul,scheduled,13,// Only copy scheduled successors. Cut them from old node's successor; // list and move them over.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:9,Energy Efficiency,schedul,scheduling,9,"// Avoid scheduling the def-side copy before other successors. Otherwise,; // we could introduce another physreg interference on the copy and; // continue inserting copies indefinitely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Safety,Avoid,Avoid,3,"// Avoid scheduling the def-side copy before other successors. Otherwise,; // we could introduce another physreg interference on the copy and; // continue inserting copies indefinitely.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:41,Deployability,update,update,41,"/// CheckForLiveRegDef - Return true and update live register vector if the; /// specified register def of the specified SUnit clobbers any ""live"" registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:42,Availability,mask,mask,42,"/// getNodeRegMask - Returns the register mask attached to an SDNode, if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:203,Availability,avail,available,203,"/// DelayForLiveRegsBottomUp - Returns true if it is necessary to delay; /// scheduling of the given node to satisfy live physical register dependencies.; /// If the specific node is the last one that's available to schedule, do; /// whatever is necessary (i.e. backtracking or cloning) to make it possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:77,Energy Efficiency,schedul,scheduling,77,"/// DelayForLiveRegsBottomUp - Returns true if it is necessary to delay; /// scheduling of the given node to satisfy live physical register dependencies.; /// If the specific node is the last one that's available to schedule, do; /// whatever is necessary (i.e. backtracking or cloning) to make it possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:216,Energy Efficiency,schedul,schedule,216,"/// DelayForLiveRegsBottomUp - Returns true if it is necessary to delay; /// scheduling of the given node to satisfy live physical register dependencies.; /// If the specific node is the last one that's available to schedule, do; /// whatever is necessary (i.e. backtracking or cloning) to make it possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:140,Integrability,depend,dependencies,140,"/// DelayForLiveRegsBottomUp - Returns true if it is necessary to delay; /// scheduling of the given node to satisfy live physical register dependencies.; /// If the specific node is the last one that's available to schedule, do; /// whatever is necessary (i.e. backtracking or cloning) to make it possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:178,Energy Efficiency,schedul,schedule,178,"// If this node would clobber any ""live"" register, then it's not ready.; //; // If SU is the currently live definition of the same register that it uses,; // then we are free to schedule it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:29,Energy Efficiency,schedul,scheduling,29,"// If we're in the middle of scheduling a call, don't begin scheduling; // another call. Also, don't allow any physical registers to be live across; // the call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:60,Energy Efficiency,schedul,scheduling,60,"// If we're in the middle of scheduling a call, don't begin scheduling; // another call. Also, don't allow any physical registers to be live across; // the call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:49,Availability,avail,available,49,// Add the nodes that aren't ready back onto the available list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:41,Availability,avail,available,41,"// The interfering node may no longer be available due to backtracking.; // Furthermore, it may have been made available again, in which case it is; // now already in the AvailableQueue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:111,Availability,avail,available,111,"// The interfering node may no longer be available due to backtracking.; // Furthermore, it may have been made available again, in which case it is; // now already in the AvailableQueue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:171,Availability,Avail,AvailableQueue,171,"// The interfering node may no longer be available due to backtracking.; // Furthermore, it may have been made available again, in which case it is; // now already in the AvailableQueue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:147,Availability,avail,available,147,/// Return a node that can be scheduled in this cycle. Requirements:; /// (1) Ready: latency has been satisfied; /// (2) No Hazards: resources are available; /// (3) No Interferences: may unschedule to break register interferences.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:30,Energy Efficiency,schedul,scheduled,30,/// Return a node that can be scheduled in this cycle. Requirements:; /// (1) Ready: latency has been satisfied; /// (2) No Hazards: resources are available; /// (3) No Interferences: may unschedule to break register interferences.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:85,Performance,latency,latency,85,/// Return a node that can be scheduled in this cycle. Requirements:; /// (1) Ready: latency has been satisfied; /// (2) No Hazards: resources are available; /// (3) No Interferences: may unschedule to break register interferences.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:124,Safety,Hazard,Hazards,124,/// Return a node that can be scheduled in this cycle. Requirements:; /// (1) Ready: latency has been satisfied; /// (2) No Hazards: resources are available; /// (3) No Interferences: may unschedule to break register interferences.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:21,Availability,Avail,AvailableQueue,21,// This SU is not in AvailableQueue right now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Deployability,Update,Update,3,// Update the interference with current live regs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:81,Deployability,update,updates,81,"// We query the topological order in the loop body, so make sure outstanding; // updates are applied before entering it (we only enter the loop if there; // are some interferences). If we make changes to the ordering, we exit; // the loop.; // All candidates are delayed due to live physical reg dependencies.; // Try backtracking, code duplication, or inserting cross class copies; // to resolve it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:296,Integrability,depend,dependencies,296,"// We query the topological order in the loop body, so make sure outstanding; // updates are applied before entering it (we only enter the loop if there; // are some interferences). If we make changes to the ordering, we exit; // the loop.; // All candidates are delayed due to live physical reg dependencies.; // Try backtracking, code duplication, or inserting cross class copies; // to resolve it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:55,Energy Efficiency,schedul,schedule,55,// Try unscheduling up to the point where it's safe to schedule; // this node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:47,Safety,safe,safe,47,// Try unscheduling up to the point where it's safe to schedule; // this node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:32,Energy Efficiency,schedul,scheduled,32,// Force the current node to be scheduled before the node that; // requires the physical reg dep.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:90,Availability,avail,available,90,"// If one or more successors has been unscheduled, then the current; // node is no longer available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Availability,Avail,Available,3,// Available and in AvailableQueue,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:20,Availability,Avail,AvailableQueue,20,// Available and in AvailableQueue,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:162,Integrability,depend,dependency,162,"// Can't backtrack. If it's too expensive to copy the value, then try; // duplicate the nodes that produces these ""too expensive to copy""; // values to break the dependency. In case even that doesn't work,; // insert cross class copies.; // If it's not too expensive, i.e. cost != -1, issue copies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:49,Energy Efficiency,schedul,scheduling,49,/// ListScheduleBottomUp - The main loop of list scheduling for bottom-up; /// schedulers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:79,Energy Efficiency,schedul,schedulers,79,/// ListScheduleBottomUp - The main loop of list scheduling for bottom-up; /// schedulers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Deployability,Release,Release,3,// Release any predecessors of the special Exit node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:15,Availability,Avail,Available,15,// Add root to Available queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:25,Performance,queue,queue,25,// Add root to Available queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:9,Availability,Avail,Available,9,"// While Available queue is not empty, grab the node with the highest; // priority. If it is not ready put it back. Schedule the node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:116,Energy Efficiency,Schedul,Schedule,116,"// While Available queue is not empty, grab the node with the highest; // priority. If it is not ready put it back. Schedule the node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:19,Performance,queue,queue,19,"// While Available queue is not empty, grab the node with the highest; // priority. If it is not ready put it back. Schedule the node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:25,Energy Efficiency,schedul,schedule,25,// Pick the best node to schedule taking all constraints into; // consideration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:71,Security,expose,expose,71,"// reverse left/right rather than simply !SortFunc(left, right); // to expose different paths in the comparison logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:112,Testability,log,logic,112,"// reverse left/right rather than simply !SortFunc(left, right); // to expose different paths in the comparison logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:34,Usability,simpl,simply,34,"// reverse left/right rather than simply !SortFunc(left, right); // to expose different paths in the comparison logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:95,Energy Efficiency,schedul,scheduler,95,// NDEBUG; /// bu_ls_rr_sort - Priority function for bottom up register pressure; // reduction scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:55,Energy Efficiency,schedul,scheduler,55,// src_ls_rr_sort - Priority function for source order scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:52,Energy Efficiency,schedul,scheduler,52,// hybrid_ls_rr_sort - Priority function for hybrid scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:82,Energy Efficiency,schedul,scheduler,82,// ilp_ls_rr_sort - Priority function for ILP (instruction level parallelism); // scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:57,Performance,queue,queue,57,"// Only compute the cost for the first 1000 items in the queue, to avoid; // excessive compile-times for very large queues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:116,Performance,queue,queues,116,"// Only compute the cost for the first 1000 items in the queue, to avoid; // excessive compile-times for very large queues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:67,Safety,avoid,avoid,67,"// Only compute the cost for the first 1000 items in the queue, to avoid; // excessive compile-times for very large queues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:222,Energy Efficiency,Schedul,SchedulingPriorityQueue,222,//===----------------------------------------------------------------------===//; // RegReductionPriorityQueue Definition; //===----------------------------------------------------------------------===//; //; // This is a SchedulingPriorityQueue that schedules using Sethi Ullman numbers; // to reduce register pressure.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:251,Energy Efficiency,schedul,schedules,251,//===----------------------------------------------------------------------===//; // RegReductionPriorityQueue Definition; //===----------------------------------------------------------------------===//; //; // This is a SchedulingPriorityQueue that schedules using Sethi Ullman numbers; // to reduce register pressure.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:295,Energy Efficiency,reduce,reduce,295,//===----------------------------------------------------------------------===//; // RegReductionPriorityQueue Definition; //===----------------------------------------------------------------------===//; //; // This is a SchedulingPriorityQueue that schedules using Sethi Ullman numbers; // to reduce register pressure.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:355,Availability,down,down,355,"// end anonymous namespace; //===----------------------------------------------------------------------===//; // Static Node Priority for Register Pressure Reduction; //===----------------------------------------------------------------------===//; // Check for special nodes that bypass scheduling heuristics.; // Currently this pushes TokenFactor nodes down, but may be used for other; // pseudo-ops as well.; //; // Return -1 to schedule right above left, 1 for left above right.; // Return 0 if no bias exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:288,Energy Efficiency,schedul,scheduling,288,"// end anonymous namespace; //===----------------------------------------------------------------------===//; // Static Node Priority for Register Pressure Reduction; //===----------------------------------------------------------------------===//; // Check for special nodes that bypass scheduling heuristics.; // Currently this pushes TokenFactor nodes down, but may be used for other; // pseudo-ops as well.; //; // Return -1 to schedule right above left, 1 for left above right.; // Return 0 if no bias exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:432,Energy Efficiency,schedul,schedule,432,"// end anonymous namespace; //===----------------------------------------------------------------------===//; // Static Node Priority for Register Pressure Reduction; //===----------------------------------------------------------------------===//; // Check for special nodes that bypass scheduling heuristics.; // Currently this pushes TokenFactor nodes down, but may be used for other; // pseudo-ops as well.; //; // Return -1 to schedule right above left, 1 for left above right.; // Return 0 if no bias exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:19,Safety,avoid,avoid,19,// Use WorkList to avoid stack overflow on excessively large IRs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:77,Energy Efficiency,schedul,scheduling,77,/// CalculateSethiUllmanNumbers - Calculate Sethi-Ullman numbers of all; /// scheduling units.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:41,Availability,down,down,41,"// Lower priority means schedule further down. For bottom-up scheduling, lower; // priority SUs are scheduled before higher priority SUs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:24,Energy Efficiency,schedul,schedule,24,"// Lower priority means schedule further down. For bottom-up scheduling, lower; // priority SUs are scheduled before higher priority SUs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:61,Energy Efficiency,schedul,scheduling,61,"// Lower priority means schedule further down. For bottom-up scheduling, lower; // priority SUs are scheduled before higher priority SUs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:100,Energy Efficiency,schedul,scheduled,100,"// Lower priority means schedule further down. For bottom-up scheduling, lower; // priority SUs are scheduled before higher priority SUs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:74,Safety,avoid,avoid,74,// CopyToReg should be close to its uses to facilitate coalescing and; // avoid spilling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:212,Energy Efficiency,schedul,scheduled,212,"// If SU does not have a register use, i.e. it doesn't produce a value; // that would be consumed (e.g. store), then it terminates a chain of; // computation. Give it a large SethiUllman number so it will be; // scheduled right before its predecessors that it doesn't lengthen; // their live ranges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:39,Energy Efficiency,schedul,schedule,39,"// If SU does not have a register def, schedule it close to its uses; // because it does not lengthen any live ranges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:66,Energy Efficiency,schedul,scheduled,66,// NumRegDefsLeft is zero when enough uses of this node have been scheduled; // to cover the number of registers defined (they are all live).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:113,Availability,down,down,113,"// Compute the register pressure contribution by this instruction by count up; // for uses that are not live and down for defs. Only count register classes; // that are already under high pressure. As a side effect, compute the number of; // uses of registers that are already live.; //; // FIXME: This encompasses the logic in HighRegPressure and MayReduceRegPressure; // so could probably be factored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:319,Testability,log,logic,319,"// Compute the register pressure contribution by this instruction by count up; // for uses that are not live and down for defs. Only count register classes; // that are already under high pressure. As a side effect, compute the number of; // uses of registers that are already live.; //; // FIXME: This encompasses the logic in HighRegPressure and MayReduceRegPressure; // so could probably be factored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:66,Energy Efficiency,schedul,scheduled,66,// NumRegDefsLeft is zero when enough uses of this node have been scheduled; // to cover the number of registers defined (they are all live).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:66,Energy Efficiency,schedul,scheduled,66,// NumRegDefsLeft is zero when enough uses of this node have been scheduled; // to cover the number of registers defined (they are all live).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:536,Deployability,update,updates,536,"// FIXME: The ScheduleDAG currently loses information about which of a; // node's values is consumed by each dependence. Consequently, if the node; // defines multiple register classes, we don't know which to pressurize; // here. Instead the following loop consumes the register defs in an; // arbitrary order. At least it handles the common case of clustered loads; // to the same class. For precise liveness, each SDep needs to indicate the; // result number. But that tightly couples the ScheduleDAG with the; // SelectionDAG making updates tricky. A simpler hack would be to attach a; // value type or register class to SDep.; //; // The most important aspect of register tracking is balancing the increase; // here with the reduction further below. Note that this SU may use multiple; // defs in PredSU. The can't be determined here, but we've already; // compensated by reducing NumRegDefsLeft in PredSU during; // ScheduleDAGSDNodes::AddSchedEdges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:14,Energy Efficiency,Schedul,ScheduleDAG,14,"// FIXME: The ScheduleDAG currently loses information about which of a; // node's values is consumed by each dependence. Consequently, if the node; // defines multiple register classes, we don't know which to pressurize; // here. Instead the following loop consumes the register defs in an; // arbitrary order. At least it handles the common case of clustered loads; // to the same class. For precise liveness, each SDep needs to indicate the; // result number. But that tightly couples the ScheduleDAG with the; // SelectionDAG making updates tricky. A simpler hack would be to attach a; // value type or register class to SDep.; //; // The most important aspect of register tracking is balancing the increase; // here with the reduction further below. Note that this SU may use multiple; // defs in PredSU. The can't be determined here, but we've already; // compensated by reducing NumRegDefsLeft in PredSU during; // ScheduleDAGSDNodes::AddSchedEdges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:491,Energy Efficiency,Schedul,ScheduleDAG,491,"// FIXME: The ScheduleDAG currently loses information about which of a; // node's values is consumed by each dependence. Consequently, if the node; // defines multiple register classes, we don't know which to pressurize; // here. Instead the following loop consumes the register defs in an; // arbitrary order. At least it handles the common case of clustered loads; // to the same class. For precise liveness, each SDep needs to indicate the; // result number. But that tightly couples the ScheduleDAG with the; // SelectionDAG making updates tricky. A simpler hack would be to attach a; // value type or register class to SDep.; //; // The most important aspect of register tracking is balancing the increase; // here with the reduction further below. Note that this SU may use multiple; // defs in PredSU. The can't be determined here, but we've already; // compensated by reducing NumRegDefsLeft in PredSU during; // ScheduleDAGSDNodes::AddSchedEdges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:921,Energy Efficiency,Schedul,ScheduleDAGSDNodes,921,"// FIXME: The ScheduleDAG currently loses information about which of a; // node's values is consumed by each dependence. Consequently, if the node; // defines multiple register classes, we don't know which to pressurize; // here. Instead the following loop consumes the register defs in an; // arbitrary order. At least it handles the common case of clustered loads; // to the same class. For precise liveness, each SDep needs to indicate the; // result number. But that tightly couples the ScheduleDAG with the; // SelectionDAG making updates tricky. A simpler hack would be to attach a; // value type or register class to SDep.; //; // The most important aspect of register tracking is balancing the increase; // here with the reduction further below. Note that this SU may use multiple; // defs in PredSU. The can't be determined here, but we've already; // compensated by reducing NumRegDefsLeft in PredSU during; // ScheduleDAGSDNodes::AddSchedEdges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:109,Integrability,depend,dependence,109,"// FIXME: The ScheduleDAG currently loses information about which of a; // node's values is consumed by each dependence. Consequently, if the node; // defines multiple register classes, we don't know which to pressurize; // here. Instead the following loop consumes the register defs in an; // arbitrary order. At least it handles the common case of clustered loads; // to the same class. For precise liveness, each SDep needs to indicate the; // result number. But that tightly couples the ScheduleDAG with the; // SelectionDAG making updates tricky. A simpler hack would be to attach a; // value type or register class to SDep.; //; // The most important aspect of register tracking is balancing the increase; // here with the reduction further below. Note that this SU may use multiple; // defs in PredSU. The can't be determined here, but we've already; // compensated by reducing NumRegDefsLeft in PredSU during; // ScheduleDAGSDNodes::AddSchedEdges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:360,Performance,load,loads,360,"// FIXME: The ScheduleDAG currently loses information about which of a; // node's values is consumed by each dependence. Consequently, if the node; // defines multiple register classes, we don't know which to pressurize; // here. Instead the following loop consumes the register defs in an; // arbitrary order. At least it handles the common case of clustered loads; // to the same class. For precise liveness, each SDep needs to indicate the; // result number. But that tightly couples the ScheduleDAG with the; // SelectionDAG making updates tricky. A simpler hack would be to attach a; // value type or register class to SDep.; //; // The most important aspect of register tracking is balancing the increase; // here with the reduction further below. Note that this SU may use multiple; // defs in PredSU. The can't be determined here, but we've already; // compensated by reducing NumRegDefsLeft in PredSU during; // ScheduleDAGSDNodes::AddSchedEdges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:554,Usability,simpl,simpler,554,"// FIXME: The ScheduleDAG currently loses information about which of a; // node's values is consumed by each dependence. Consequently, if the node; // defines multiple register classes, we don't know which to pressurize; // here. Instead the following loop consumes the register defs in an; // arbitrary order. At least it handles the common case of clustered loads; // to the same class. For precise liveness, each SDep needs to indicate the; // result number. But that tightly couples the ScheduleDAG with the; // SelectionDAG making updates tricky. A simpler hack would be to attach a; // value type or register class to SDep.; //; // The most important aspect of register tracking is balancing the increase; // here with the reduction further below. Note that this SU may use multiple; // defs in PredSU. The can't be determined here, but we've already; // compensated by reducing NumRegDefsLeft in PredSU during; // ScheduleDAGSDNodes::AddSchedEdges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:201,Energy Efficiency,schedul,scheduled,201,"// We should have this assert, but there may be dead SDNodes that never; // materialize as SUnits, so they don't appear to generate liveness.; //assert(SU->NumRegDefsLeft == 0 && ""not all regdefs have scheduled uses"");",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:23,Testability,assert,assert,23,"// We should have this assert, but there may be dead SDNodes that never; // materialize as SUnits, so they don't appear to generate liveness.; //assert(SU->NumRegDefsLeft == 0 && ""not all regdefs have scheduled uses"");",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:145,Testability,assert,assert,145,"// We should have this assert, but there may be dead SDNodes that never; // materialize as SUnits, so they don't appear to generate liveness.; //assert(SU->NumRegDefsLeft == 0 && ""not all regdefs have scheduled uses"");",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:136,Energy Efficiency,schedul,scheduling,136,// Register pressure tracking is imprecise. This can happen. But we try; // hard not to let it happen because it likely results in poor scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:91,Integrability,depend,dependencies,91,// Check for isMachineOpcode() as PrescheduleNodesWithMultipleUses(); // may transfer data dependencies to CopyToReg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:252,Energy Efficiency,schedul,scheduled,252,//===----------------------------------------------------------------------===//; // Dynamic Node Priority for Register Pressure Reduction; //===----------------------------------------------------------------------===//; /// closestSucc - Returns the scheduled cycle of the successor which is; /// closest to the current cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:126,Integrability,depend,dependencies,126,"/// calcMaxScratches - Returns an cost estimate of the worse case requirement; /// for scratch registers, i.e. number of data dependencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:193,Energy Efficiency,schedul,scheduled,193,/// hasOnlyLiveOutUses - Return true if SU has only value successors that are; /// CopyToReg to a virtual register. This SU def is probably a liveout and; /// it has no other use. It should be scheduled closer to the terminator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:402,Energy Efficiency,schedul,scheduler,402,"// Set isVRegCycle for a node with only live in opers and live out uses. Also; // set isVRegCycle for its CopyFromReg operands.; //; // This is only relevant for single-block loops, in which case the VRegCycle; // node is likely an induction variable in which the operand and target virtual; // registers should be coalesced (e.g. pre/post increment values). Setting the; // isVRegCycle flag helps the scheduler prioritize other uses of the same; // CopyFromReg so that this node becomes the virtual register ""kill"". This; // avoids interference between the values live in and out of the block and; // eliminates a copy inside the loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:242,Modifiability,variab,variable,242,"// Set isVRegCycle for a node with only live in opers and live out uses. Also; // set isVRegCycle for its CopyFromReg operands.; //; // This is only relevant for single-block loops, in which case the VRegCycle; // node is likely an induction variable in which the operand and target virtual; // registers should be coalesced (e.g. pre/post increment values). Setting the; // isVRegCycle flag helps the scheduler prioritize other uses of the same; // CopyFromReg so that this node becomes the virtual register ""kill"". This; // avoids interference between the values live in and out of the block and; // eliminates a copy inside the loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:526,Safety,avoid,avoids,526,"// Set isVRegCycle for a node with only live in opers and live out uses. Also; // set isVRegCycle for its CopyFromReg operands.; //; // This is only relevant for single-block loops, in which case the VRegCycle; // node is likely an induction variable in which the operand and target virtual; // registers should be coalesced (e.g. pre/post increment values). Setting the; // isVRegCycle flag helps the scheduler prioritize other uses of the same; // CopyFromReg so that this node becomes the virtual register ""kill"". This; // avoids interference between the values live in and out of the block and; // eliminates a copy inside the loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:9,Energy Efficiency,schedul,scheduling,9,"// After scheduling the definition of a VRegCycle, clear the isVRegCycle flag of; // CopyFromReg operands. We should no longer penalize other uses of this VReg.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:51,Usability,clear,clear,51,"// After scheduling the definition of a VRegCycle, clear the isVRegCycle flag of; // CopyFromReg operands. We should no longer penalize other uses of this VReg.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:138,Energy Efficiency,schedul,scheduled,138,// Return true if this SUnit uses a CopyFromReg node marked as a VRegCycle. This; // means a node that defines the VRegCycle has not been scheduled yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:89,Energy Efficiency,Schedul,ScheduleHazardRecognizer,89,// Check for either a dependence (latency) or resource (hazard) stall.; //; // Note: The ScheduleHazardRecognizer interface requires a non-const SU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:22,Integrability,depend,dependence,22,// Check for either a dependence (latency) or resource (hazard) stall.; //; // Note: The ScheduleHazardRecognizer interface requires a non-const SU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:114,Integrability,interface,interface,114,// Check for either a dependence (latency) or resource (hazard) stall.; //; // Note: The ScheduleHazardRecognizer interface requires a non-const SU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:34,Performance,latency,latency,34,// Check for either a dependence (latency) or resource (hazard) stall.; //; // Note: The ScheduleHazardRecognizer interface requires a non-const SU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:56,Safety,hazard,hazard,56,// Check for either a dependence (latency) or resource (hazard) stall.; //; // Note: The ScheduleHazardRecognizer interface requires a non-const SU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:90,Performance,latency,latency-based,90,"// Return -1 if left has higher priority, 1 if right has higher priority.; // Return 0 if latency-based priority is equivalent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Energy Efficiency,Schedul,Scheduling,3,// Scheduling an instruction that uses a VReg whose postincrement has not yet; // been scheduled will induce a copy. Model this as an extra cycle of latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:87,Energy Efficiency,schedul,scheduled,87,// Scheduling an instruction that uses a VReg whose postincrement has not yet; // been scheduled will induce a copy. Model this as an extra cycle of latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:149,Performance,latency,latency,149,// Scheduling an instruction that uses a VReg whose postincrement has not yet; // been scheduled will induce a copy. Model this as an extra cycle of latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:46,Deployability,pipeline,pipeline,46,"// If scheduling one of the node will cause a pipeline stall, delay it.; // If scheduling either one of the node will cause a pipeline stall, sort; // them according to their height.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:126,Deployability,pipeline,pipeline,126,"// If scheduling one of the node will cause a pipeline stall, delay it.; // If scheduling either one of the node will cause a pipeline stall, sort; // them according to their height.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:6,Energy Efficiency,schedul,scheduling,6,"// If scheduling one of the node will cause a pipeline stall, delay it.; // If scheduling either one of the node will cause a pipeline stall, sort; // them according to their height.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:79,Energy Efficiency,schedul,scheduling,79,"// If scheduling one of the node will cause a pipeline stall, delay it.; // If scheduling either one of the node will cause a pipeline stall, sort; // them according to their height.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:21,Energy Efficiency,schedul,scheduling,21,"// If either node is scheduling for latency, sort them by height/depth; // and latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:36,Performance,latency,latency,36,"// If either node is scheduling for latency, sort them by height/depth; // and latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:79,Performance,latency,latency,79,"// If either node is scheduling for latency, sort them by height/depth; // and latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:58,Safety,Hazard,HazardRecognizer,58,"// If neither instruction stalls (!LStall && !RStall) and HazardRecognizer; // is enabled, grouping instructions by cycle, then its height is already; // covered so only its depth matters. We also reach this point if both stall; // but have the same height.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Energy Efficiency,Schedul,Schedule,3,"// Schedule physical register definitions close to their use. This is; // motivated by microarchitectures that can fuse cmp+jump macro-ops. But as; // long as shortening physreg live ranges is generally good, we can defer; // creating a subtarget hook.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:62,Availability,down,down,62,// Prioritize by Sethi-Ulmann number and push CopyToReg nodes down.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:103,Energy Efficiency,reduce,reduce,103,// Be really careful about hoisting call operands above previous calls.; // Only allows it if it would reduce register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:7,Energy Efficiency,schedul,schedule,7,"// Try schedule def + use closer when Sethi-Ullman numbers are the same.; // e.g.; // t1 = op t2, c1; // t3 = op t4, c2; //; // and the following instructions are both ready.; // t2 = op c3; // t4 = op c4; //; // Then schedule t2 = op first.; // i.e.; // t4 = op c4; // t2 = op c3; // t1 = op t2, c1; // t3 = op t4, c2; //; // This creates more short live intervals.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:218,Energy Efficiency,schedul,schedule,218,"// Try schedule def + use closer when Sethi-Ullman numbers are the same.; // e.g.; // t1 = op t2, c1; // t3 = op t4, c2; //; // and the following instructions are both ready.; // t2 = op c3; // t4 = op c4; //; // Then schedule t2 = op first.; // i.e.; // t4 = op c4; // t2 = op c3; // t1 = op t2, c1; // t3 = op t4, c2; //; // This creates more short live intervals.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:52,Energy Efficiency,schedul,scheduled,52,// How many registers becomes live when the node is scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:13,Performance,latency,latency,13,// Comparing latency against a call makes little sense unless the node; // is register pressure-neutral.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:258,Availability,avail,available,258,"// If the time between now and when the instruction will be ready can cover; // the spill code, then avoid adding it to the ready queue. This gives long; // stalls highest priority and allows hoisting across calls. It should also; // speed up processing the available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:130,Performance,queue,queue,130,"// If the time between now and when the instruction will be ready can cover; // the spill code, then avoid adding it to the ready queue. This gives long; // stalls highest priority and allows hoisting across calls. It should also; // speed up processing the available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:268,Performance,queue,queue,268,"// If the time between now and when the instruction will be ready can cover; // the spill code, then avoid adding it to the ready queue. This gives long; // stalls highest priority and allows hoisting across calls. It should also; // speed up processing the available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:101,Safety,avoid,avoid,101,"// If the time between now and when the instruction will be ready can cover; // the spill code, then avoid adding it to the ready queue. This gives long; // stalls highest priority and allows hoisting across calls. It should also; // speed up processing the available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:34,Energy Efficiency,schedul,scheduled,34,// Return true if right should be scheduled with higher priority than left.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:21,Performance,latency,latency,21,// No way to compute latency of calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:55,Energy Efficiency,schedul,schedule,55,"// Avoid causing spills. If register pressure is high, schedule for; // register pressure reduction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Safety,Avoid,Avoid,3,"// Avoid causing spills. If register pressure is high, schedule for; // register pressure reduction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:93,Availability,avail,available,93,// Schedule as many instructions in each cycle as possible. So don't make an; // instruction available unless it is ready in the current cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Energy Efficiency,Schedul,Schedule,3,// Schedule as many instructions in each cycle as possible. So don't make an; // instruction available unless it is ready in the current cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:74,Safety,avoid,avoid,74,// CopyToReg should be close to its uses to facilitate coalescing and; // avoid spilling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:39,Energy Efficiency,schedul,schedule,39,"// If SU does not have a register def, schedule it close to its uses; // because it does not lengthen any live ranges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:41,Energy Efficiency,schedul,scheduler,41,// list-ilp is currently an experimental scheduler that allows various; // heuristics to be enabled prior to the normal register reduction logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:139,Testability,log,logic,139,// list-ilp is currently an experimental scheduler that allows various; // heuristics to be enabled prior to the normal register reduction logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:21,Performance,latency,latency,21,// No way to compute latency of calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:14,Integrability,depend,dependency,14,// Add pseudo dependency edges for two-address nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:171,Energy Efficiency,schedul,scheduled,171,/// canClobberReachingPhysRegUse - True if SU would clobber one of it's; /// successor's explicit physregs whose definition can reach DepSU.; /// i.e. DepSU should not be scheduled above SU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:668,Energy Efficiency,schedul,scheduled,668,"/// PrescheduleNodesWithMultipleUses - Nodes with multiple uses; /// are not handled well by the general register pressure reduction; /// heuristics. When presented with code like this:; ///; /// N; /// / |; /// / |; /// U store; /// |; /// ...; ///; /// the heuristics tend to push the store up, but since the; /// operand of the store has another use (U), this would increase; /// the length of that other use (the U->N edge).; ///; /// This function transforms code like the above to route U's; /// dependence through the store when possible, like this:; ///; /// N; /// ||; /// ||; /// store; /// |; /// U; /// |; /// ...; ///; /// This results in the store being scheduled immediately; /// after N, which shortens the U->N live range, reducing; /// register pressure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:487,Integrability,rout,route,487,"/// PrescheduleNodesWithMultipleUses - Nodes with multiple uses; /// are not handled well by the general register pressure reduction; /// heuristics. When presented with code like this:; ///; /// N; /// / |; /// / |; /// U store; /// |; /// ...; ///; /// the heuristics tend to push the store up, but since the; /// operand of the store has another use (U), this would increase; /// the length of that other use (the U->N edge).; ///; /// This function transforms code like the above to route U's; /// dependence through the store when possible, like this:; ///; /// N; /// ||; /// ||; /// store; /// |; /// U; /// |; /// ...; ///; /// This results in the store being scheduled immediately; /// after N, which shortens the U->N live range, reducing; /// register pressure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:502,Integrability,depend,dependence,502,"/// PrescheduleNodesWithMultipleUses - Nodes with multiple uses; /// are not handled well by the general register pressure reduction; /// heuristics. When presented with code like this:; ///; /// N; /// / |; /// / |; /// U store; /// |; /// ...; ///; /// the heuristics tend to push the store up, but since the; /// operand of the store has another use (U), this would increase; /// the length of that other use (the U->N edge).; ///; /// This function transforms code like the above to route U's; /// dependence through the store when possible, like this:; ///; /// N; /// ||; /// ||; /// store; /// |; /// U; /// |; /// ...; ///; /// This results in the store being scheduled immediately; /// after N, which shortens the U->N live range, reducing; /// register pressure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:57,Availability,down,down,57,"// Visit all the nodes in topological order, working top-down.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:116,Energy Efficiency,schedul,scheduling,116,"// Avoid prescheduling copies to virtual registers, which don't behave; // like other nodes from the perspective of scheduling heuristics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Safety,Avoid,Avoid,3,"// Avoid prescheduling copies to virtual registers, which don't behave; // like other nodes from the perspective of scheduling heuristics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:42,Integrability,depend,dependence,42,// Find the predecessor which is not data dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:242,Availability,avail,available,242,"// If PredND is FrameSetup, we should not pre-scheduled the node,; // or else, when bottom up scheduling, ADJCALLSTACKDOWN and; // ADJCALLSTACKUP may hold CallResource too long and make other; // calls can't be scheduled. If there's no other available node; // to schedule, the schedular will try to rename the register by; // creating copy to avoid the conflict which will fail because; // CallResource is not a real physical register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:46,Energy Efficiency,schedul,scheduled,46,"// If PredND is FrameSetup, we should not pre-scheduled the node,; // or else, when bottom up scheduling, ADJCALLSTACKDOWN and; // ADJCALLSTACKUP may hold CallResource too long and make other; // calls can't be scheduled. If there's no other available node; // to schedule, the schedular will try to rename the register by; // creating copy to avoid the conflict which will fail because; // CallResource is not a real physical register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:94,Energy Efficiency,schedul,scheduling,94,"// If PredND is FrameSetup, we should not pre-scheduled the node,; // or else, when bottom up scheduling, ADJCALLSTACKDOWN and; // ADJCALLSTACKUP may hold CallResource too long and make other; // calls can't be scheduled. If there's no other available node; // to schedule, the schedular will try to rename the register by; // creating copy to avoid the conflict which will fail because; // CallResource is not a real physical register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:211,Energy Efficiency,schedul,scheduled,211,"// If PredND is FrameSetup, we should not pre-scheduled the node,; // or else, when bottom up scheduling, ADJCALLSTACKDOWN and; // ADJCALLSTACKUP may hold CallResource too long and make other; // calls can't be scheduled. If there's no other available node; // to schedule, the schedular will try to rename the register by; // creating copy to avoid the conflict which will fail because; // CallResource is not a real physical register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:264,Energy Efficiency,schedul,schedule,264,"// If PredND is FrameSetup, we should not pre-scheduled the node,; // or else, when bottom up scheduling, ADJCALLSTACKDOWN and; // ADJCALLSTACKUP may hold CallResource too long and make other; // calls can't be scheduled. If there's no other available node; // to schedule, the schedular will try to rename the register by; // creating copy to avoid the conflict which will fail because; // CallResource is not a real physical register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:278,Energy Efficiency,schedul,schedular,278,"// If PredND is FrameSetup, we should not pre-scheduled the node,; // or else, when bottom up scheduling, ADJCALLSTACKDOWN and; // ADJCALLSTACKUP may hold CallResource too long and make other; // calls can't be scheduled. If there's no other available node; // to schedule, the schedular will try to rename the register by; // creating copy to avoid the conflict which will fail because; // CallResource is not a real physical register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:344,Safety,avoid,avoid,344,"// If PredND is FrameSetup, we should not pre-scheduled the node,; // or else, when bottom up scheduling, ADJCALLSTACKDOWN and; // ADJCALLSTACKUP may hold CallResource too long and make other; // calls can't be scheduled. If there's no other available node; // to schedule, the schedular will try to rename the register by; // creating copy to avoid the conflict which will fail because; // CallResource is not a real physical register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:9,Modifiability,rewrite,rewrite,9,"// Don't rewrite edges that carry physregs, because that requires additional; // support infrastructure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:121,Energy Efficiency,schedul,scheduling,121,"// Avoid prescheduling to copies from virtual registers, which don't behave; // like other nodes from the perspective of scheduling heuristics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Safety,Avoid,Avoid,3,"// Avoid prescheduling to copies from virtual registers, which don't behave; // like other nodes from the perspective of scheduling heuristics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:3,Performance,Perform,Perform,3,// Perform checks on the successors of PredSU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:33,Integrability,depend,dependencies,33,// Don't break physical register dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:83,Deployability,Update,Update,83,"// Ok, the transformation is safe and the heuristics suggest it is; // profitable. Update the graph.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:29,Safety,safe,safe,29,"// Ok, the transformation is safe and the heuristics suggest it is; // profitable. Update the graph.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:382,Deployability,update,update,382,"/// AddPseudoTwoAddrDeps - If two nodes share an operand and one of them uses; /// it as a def&use operand. Add a pseudo control edge from it to the other; /// node (if it won't create a cycle) so the two-address one will be scheduled; /// first (lower in the schedule). If both nodes are two-address, favor the; /// one that has a CopyToReg use (more likely to be a loop induction update).; /// If both are two-address, but one is commutable while the other is not; /// commutable, favor the one that's not commutable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:225,Energy Efficiency,schedul,scheduled,225,"/// AddPseudoTwoAddrDeps - If two nodes share an operand and one of them uses; /// it as a def&use operand. Add a pseudo control edge from it to the other; /// node (if it won't create a cycle) so the two-address one will be scheduled; /// first (lower in the schedule). If both nodes are two-address, favor the; /// one that has a CopyToReg use (more likely to be a loop induction update).; /// If both are two-address, but one is commutable while the other is not; /// commutable, favor the one that's not commutable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp:260,Energy Efficiency,schedul,schedule,260,"/// AddPseudoTwoAddrDeps - If two nodes share an operand and one of them uses; /// it as a def&use operand. Add a pseudo control edge from it to the other; /// node (if it won't create a cycle) so the two-address one will be scheduled; /// first (lower in the schedule). If both nodes are two-address, favor the; /// one that has a CopyToReg use (more likely to be a loop induction update).; /// If both are two-address, but one is commutable while the other is not; /// commutable, favor the one that's not commutable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:9,Energy Efficiency,Schedul,ScheduleDAGSDNodes,9,"//===--- ScheduleDAGSDNodes.cpp - Implement the ScheduleDAGSDNodes class --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements the ScheduleDAG class, which is a base class used by; // scheduling implementation classes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:48,Energy Efficiency,Schedul,ScheduleDAGSDNodes,48,"//===--- ScheduleDAGSDNodes.cpp - Implement the ScheduleDAGSDNodes class --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements the ScheduleDAG class, which is a base class used by; // scheduling implementation classes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:403,Energy Efficiency,Schedul,ScheduleDAG,403,"//===--- ScheduleDAGSDNodes.cpp - Implement the ScheduleDAGSDNodes class --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements the ScheduleDAG class, which is a base class used by; // scheduling implementation classes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:456,Energy Efficiency,schedul,scheduling,456,"//===--- ScheduleDAGSDNodes.cpp - Implement the ScheduleDAGSDNodes class --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements the ScheduleDAG class, which is a base class used by; // scheduling implementation classes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:33,Energy Efficiency,schedul,scheduler,33,// This allows the latency-based scheduler to notice high latency instructions; // without a target itinerary. The choice of number here has more to do with; // balancing scheduler heuristics than with the actual machine latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:171,Energy Efficiency,schedul,scheduler,171,// This allows the latency-based scheduler to notice high latency instructions; // without a target itinerary. The choice of number here has more to do with; // balancing scheduler heuristics than with the actual machine latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:19,Performance,latency,latency-based,19,// This allows the latency-based scheduler to notice high latency instructions; // without a target itinerary. The choice of number here has more to do with; // balancing scheduler heuristics than with the actual machine latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:58,Performance,latency,latency,58,// This allows the latency-based scheduler to notice high latency instructions; // without a target itinerary. The choice of number here has more to do with; // balancing scheduler heuristics than with the actual machine latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:221,Performance,latency,latency,221,// This allows the latency-based scheduler to notice high latency instructions; // without a target itinerary. The choice of number here has more to do with; // balancing scheduler heuristics than with the actual machine latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:18,Energy Efficiency,schedul,scheduling,18,/// Run - perform scheduling.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:10,Performance,perform,perform,10,/// Run - perform scheduling.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:13,Energy Efficiency,schedul,scheduler,13,// Clear the scheduler's SUnit DAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:3,Usability,Clear,Clear,3,// Clear the scheduler's SUnit DAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:36,Energy Efficiency,schedul,scheduler,36,// Invoke the target's selection of scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:45,Integrability,depend,dependency,45,"/// CheckForPhysRegDependency - Check if the dependency between def and use of; /// a specified operand is a physical register dependency. If so, returns the; /// register and the cost of copying the register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:127,Integrability,depend,dependency,127,"/// CheckForPhysRegDependency - Check if the dependency between def and use of; /// a specified operand is a physical register dependency. If so, returns the; /// register and the cost of copying the register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:100,Usability,simpl,simply,100,// Cleanup after unsuccessful AddGlue. Use the standard method of morphing the; // node even though simply shrinking the value list is sufficient.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:264,Energy Efficiency,schedul,scheduled,264,"/// ClusterNeighboringLoads - Force nearby loads together by ""gluing"" them.; /// This function finds loads of the same base and different offsets. If the; /// offsets are not far apart (target specific), it add MVT::Glue inputs and; /// outputs to ensure they are scheduled together and in order. This; /// optimization may benefit some targets by improving cache locality.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:43,Performance,load,loads,43,"/// ClusterNeighboringLoads - Force nearby loads together by ""gluing"" them.; /// This function finds loads of the same base and different offsets. If the; /// offsets are not far apart (target specific), it add MVT::Glue inputs and; /// outputs to ensure they are scheduled together and in order. This; /// optimization may benefit some targets by improving cache locality.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:101,Performance,load,loads,101,"/// ClusterNeighboringLoads - Force nearby loads together by ""gluing"" them.; /// This function finds loads of the same base and different offsets. If the; /// offsets are not far apart (target specific), it add MVT::Glue inputs and; /// outputs to ensure they are scheduled together and in order. This; /// optimization may benefit some targets by improving cache locality.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:307,Performance,optimiz,optimization,307,"/// ClusterNeighboringLoads - Force nearby loads together by ""gluing"" them.; /// This function finds loads of the same base and different offsets. If the; /// offsets are not far apart (target specific), it add MVT::Glue inputs and; /// outputs to ensure they are scheduled together and in order. This; /// optimization may benefit some targets by improving cache locality.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:358,Performance,cache,cache,358,"/// ClusterNeighboringLoads - Force nearby loads together by ""gluing"" them.; /// This function finds loads of the same base and different offsets. If the; /// offsets are not far apart (target specific), it add MVT::Glue inputs and; /// outputs to ensure they are scheduled together and in order. This; /// optimization may benefit some targets by improving cache locality.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:83,Integrability,depend,dependency,83,"// Skip any load instruction that has a tied input. There may be an additional; // dependency requiring a different order than by increasing offsets, and the; // added glue may introduce a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:12,Performance,load,load,12,"// Skip any load instruction that has a tied input. There may be an additional; // dependency requiring a different order than by increasing offsets, and the; // added glue may introduce a cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:18,Performance,load,loads,18,// Look for other loads of the same chain. Find loads that are loading from; // the same base pointer and different offsets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:48,Performance,load,loads,48,// Look for other loads of the same chain. Find loads that are loading from; // the same base pointer and different offsets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:63,Performance,load,loading,63,// Look for other loads of the same chain. Find loads that are loading from; // the same base pointer and different offsets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:84,Safety,avoid,avoid,84,// This algorithm requires a reasonably low use count before finding a match; // to avoid uselessly blowing up compile time in large blocks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:72,Performance,optimiz,optimizations,72,// FIXME: Should be ok if they addresses are identical. But earlier; // optimizations really should have eliminated one of the loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:127,Performance,load,loads,127,// FIXME: Should be ok if they addresses are identical. But earlier; // optimizations really should have eliminated one of the loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:16,Performance,load,loads,16,// Check if the loads are close enough.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:27,Performance,load,loads,27,// Stop right here. Ignore loads that are further away.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:87,Energy Efficiency,schedul,scheduled,87,// Cluster loads by adding MVT::Glue outputs and inputs. This also; // ensure they are scheduled in order of increasing addresses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:11,Performance,load,loads,11,// Cluster loads by adding MVT::Glue outputs and inputs. This also; // ensure they are scheduled in order of increasing addresses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:57,Energy Efficiency,schedul,scheduled,57,/// ClusterNodes - Cluster certain nodes which should be scheduled together.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:11,Performance,load,loads,11,"// Cluster loads from ""near"" addresses into combined SUnits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:10,Energy Efficiency,schedul,scheduling,10,"// During scheduling, the NodeId field of SDNode is used to map SDNodes; // to their associated SUnits by holding SUnits table indices. A value; // of -1 means the SDNode does not yet have an associated SUnit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:233,Energy Efficiency,schedul,scheduling,233,"// Reserve entries in the vector for each of the SUnits we are creating. This; // ensure that reallocation of the vector won't happen, so SUnit*'s won't get; // invalidated.; // FIXME: Multiply by 2 because we may clone nodes during scheduling.; // This is a temporary workaround.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:8,Availability,down,down,8,// Scan down to find any glued succs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:3,Energy Efficiency,Schedul,Schedule,3,"// Schedule zero-latency TokenFactor below any nodes that may increase the; // schedule height. Otherwise, ancestors of the TokenFactor may appear to; // have false stalls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:79,Energy Efficiency,schedul,schedule,79,"// Schedule zero-latency TokenFactor below any nodes that may increase the; // schedule height. Otherwise, ancestors of the TokenFactor may appear to; // have false stalls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:17,Performance,latency,latency,17,"// Schedule zero-latency TokenFactor below any nodes that may increase the; // schedule height. Otherwise, ancestors of the TokenFactor may appear to; // have false stalls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:128,Deployability,Update,Update,128,"// If there are glue operands involved, N is now the bottom-most node; // of the sequence of nodes that are glued together.; // Update the SUnit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:14,Performance,Latency,Latency,14,// Assign the Latency field of NodeSUnit using target-provided information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:7,Energy Efficiency,schedul,scheduled,7,// Not scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:23,Energy Efficiency,schedul,scheduler,23,// Check to see if the scheduler cares about latencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:7,Energy Efficiency,schedul,scheduled,7,// Not scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:44,Integrability,depend,dependency,44,// Determine if this is a physical register dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:14,Energy Efficiency,Schedul,ScheduleDAGSDNodes,14,"// FIXME: See ScheduleDAGSDNodes::EmitCopyFromReg. For now, scheduler; // emits a copy from the physical register to a virtual register unless; // it requires a cross class copy (cost < 0). That means we are only; // treating ""expensive to copy"" register dependency as physical register; // dependency. This may change in the future though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:60,Energy Efficiency,schedul,scheduler,60,"// FIXME: See ScheduleDAGSDNodes::EmitCopyFromReg. For now, scheduler; // emits a copy from the physical register to a virtual register unless; // it requires a cross class copy (cost < 0). That means we are only; // treating ""expensive to copy"" register dependency as physical register; // dependency. This may change in the future though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:255,Integrability,depend,dependency,255,"// FIXME: See ScheduleDAGSDNodes::EmitCopyFromReg. For now, scheduler; // emits a copy from the physical register to a virtual register unless; // it requires a cross class copy (cost < 0). That means we are only; // treating ""expensive to copy"" register dependency as physical register; // dependency. This may change in the future though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:291,Integrability,depend,dependency,291,"// FIXME: See ScheduleDAGSDNodes::EmitCopyFromReg. For now, scheduler; // emits a copy from the physical register to a virtual register unless; // it requires a cross class copy (cost < 0). That means we are only; // treating ""expensive to copy"" register dependency as physical register; // dependency. This may change in the future though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:26,Performance,latency,latency,26,"// If this is a ctrl dep, latency is 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:43,Performance,latency,latency,43,// Special-case TokenFactor chains as zero-latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:264,Energy Efficiency,reduce,reduce,264,"// Multiple register uses are combined in the same SUnit. For example,; // we could have a set of glued nodes with all their defs consumed by; // another set of glued nodes. Register pressure tracking sees this as; // a single use, so to keep pressure balanced we reduce the defs.; //; // We can't tell (without more book-keeping) if this results from; // glued nodes or duplicate operands. As long as we don't reduce; // NumRegDefsLeft to zero, we handle the common cases well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:411,Energy Efficiency,reduce,reduce,411,"// Multiple register uses are combined in the same SUnit. For example,; // we could have a set of glued nodes with all their defs consumed by; // another set of glued nodes. Register pressure tracking sees this as; // a single use, so to keep pressure balanced we reduce the defs.; //; // We can't tell (without more book-keeping) if this results from; // glued nodes or duplicate operands. As long as we don't reduce; // NumRegDefsLeft to zero, we handle the common cases well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:191,Energy Efficiency,schedul,scheduling,191,"/// BuildSchedGraph - Build the SUnit graph from the selection dag that we; /// are input. This SUnit graph is similar to the SelectionDAG, but; /// excludes nodes that aren't interesting to scheduling, and represents; /// glued together nodes with a single SUnit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:41,Energy Efficiency,schedul,scheduled,41,// Cluster certain nodes which should be scheduled together.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:19,Energy Efficiency,schedul,scheduling,19,// Compute all the scheduling dependencies between nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:30,Integrability,depend,dependencies,30,// Compute all the scheduling dependencies between nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:23,Energy Efficiency,allocate,allocated,23,// No register need be allocated for this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:3,Deployability,PATCH,PATCHPOINT,3,"// PATCHPOINT is defined to have one result, but it might really have none; // if we're not using CallingConv::AnyReg. Don't mistake the chain for a; // real definition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:135,Security,access,access,135,// Some instructions define regs that are not represented in the selection DAG; // (e.g. unused flags). See tMOVi8. Make sure we don't access past NumValues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:87,Availability,Down,Down,87,"// TokenFactor operands are considered zero latency, and some schedulers; // (e.g. Top-Down list) may rely on the fact that operand latency is nonzero; // whenever node latency is nonzero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:62,Energy Efficiency,schedul,schedulers,62,"// TokenFactor operands are considered zero latency, and some schedulers; // (e.g. Top-Down list) may rely on the fact that operand latency is nonzero; // whenever node latency is nonzero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:44,Performance,latency,latency,44,"// TokenFactor operands are considered zero latency, and some schedulers; // (e.g. Top-Down list) may rely on the fact that operand latency is nonzero; // whenever node latency is nonzero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:132,Performance,latency,latency,132,"// TokenFactor operands are considered zero latency, and some schedulers; // (e.g. Top-Down list) may rely on the fact that operand latency is nonzero; // whenever node latency is nonzero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:169,Performance,latency,latency,169,"// TokenFactor operands are considered zero latency, and some schedulers; // (e.g. Top-Down list) may rely on the fact that operand latency is nonzero; // whenever node latency is nonzero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:23,Energy Efficiency,schedul,scheduler,23,// Check to see if the scheduler cares about latencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:15,Performance,latency,latency,15,// Compute the latency for the node. We use the sum of the latencies for; // all nodes glued together into this SUnit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:23,Energy Efficiency,schedul,scheduler,23,// Check to see if the scheduler cares about latencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:60,Energy Efficiency,reduce,reduce,60,"// This copy is a liveout value. It is likely coalesced, so reduce the; // latency so not to penalize the def.; // FIXME: need target specific adjustment here?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:75,Performance,latency,latency,75,"// This copy is a liveout value. It is likely coalesced, so reduce the; // latency so not to penalize the def.; // FIXME: need target specific adjustment here?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:58,Energy Efficiency,schedul,scheduled,58,/// VerifyScheduledSequence - Verify that all SUnits were scheduled and that; /// their state is consistent with the nodes listed in Sequence.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:105,Availability,avail,available,105,"// If DV has any VReg location operands which haven't been mapped then; // either that node is no longer available or we just haven't visited the; // node yet. In the former case we should emit an undef dbg_value, but we; // can do it later. And for the latter we'll want to wait until all; // dependent nodes have been visited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:294,Integrability,depend,dependent,294,"// If DV has any VReg location operands which haven't been mapped then; // either that node is no longer available or we just haven't visited the; // node yet. In the former case we should emit an undef dbg_value, but we; // can do it later. And for the latter we'll want to wait until all; // dependent nodes have been visited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:44,Energy Efficiency,schedul,scheduled,44,"/// EmitSchedule - Emit the machine code in scheduled order. Return the new; /// InsertPos and MachineBasicBlock that contains this insertion; /// point. ScheduleDAGSDNodes holds a BB pointer for convenience, but this does; /// not necessarily refer to returned BB. The emitter may split blocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:154,Energy Efficiency,Schedul,ScheduleDAGSDNodes,154,"/// EmitSchedule - Emit the machine code in scheduled order. Return the new; /// InsertPos and MachineBasicBlock that contains this insertion; /// point. ScheduleDAGSDNodes holds a BB pointer for convenience, but this does; /// not necessarily refer to returned BB. The emitter may split blocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp:20,Energy Efficiency,schedul,scheduling,20,"// For pre-regalloc scheduling, create instructions corresponding to the; // SDNode and any glued SDNodes and append them to the block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:10,Energy Efficiency,Schedul,ScheduleDAGSDNodes,10,"//===---- ScheduleDAGSDNodes.h - SDNode Scheduling --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleDAGSDNodes class, which implements; // scheduling for an SDNode-based dependency graph.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:40,Energy Efficiency,Schedul,Scheduling,40,"//===---- ScheduleDAGSDNodes.h - SDNode Scheduling --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleDAGSDNodes class, which implements; // scheduling for an SDNode-based dependency graph.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:408,Energy Efficiency,Schedul,ScheduleDAGSDNodes,408,"//===---- ScheduleDAGSDNodes.h - SDNode Scheduling --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleDAGSDNodes class, which implements; // scheduling for an SDNode-based dependency graph.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:455,Energy Efficiency,schedul,scheduling,455,"//===---- ScheduleDAGSDNodes.h - SDNode Scheduling --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleDAGSDNodes class, which implements; // scheduling for an SDNode-based dependency graph.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:486,Integrability,depend,dependency,486,"//===---- ScheduleDAGSDNodes.h - SDNode Scheduling --------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleDAGSDNodes class, which implements; // scheduling for an SDNode-based dependency graph.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:4,Energy Efficiency,Schedul,ScheduleDAGSDNodes,4,"/// ScheduleDAGSDNodes - A ScheduleDAG for scheduling SDNode-based DAGs.; ///; /// Edges between SUnits are initially based on edges in the SelectionDAG,; /// and additional edges can be added by the schedulers as heuristics.; /// SDNodes such as Constants, Registers, and a few others that are not; /// interesting to schedulers are not allocated SUnits.; ///; /// SDNodes with MVT::Glue operands are grouped along with the flagged; /// nodes into a single SUnit so that they are scheduled together.; ///; /// SDNode-based scheduling graphs do not use SDep::Anti or SDep::Output; /// edges. Physical register dependence information is not carried in; /// the DAG and must be handled explicitly by schedulers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:27,Energy Efficiency,Schedul,ScheduleDAG,27,"/// ScheduleDAGSDNodes - A ScheduleDAG for scheduling SDNode-based DAGs.; ///; /// Edges between SUnits are initially based on edges in the SelectionDAG,; /// and additional edges can be added by the schedulers as heuristics.; /// SDNodes such as Constants, Registers, and a few others that are not; /// interesting to schedulers are not allocated SUnits.; ///; /// SDNodes with MVT::Glue operands are grouped along with the flagged; /// nodes into a single SUnit so that they are scheduled together.; ///; /// SDNode-based scheduling graphs do not use SDep::Anti or SDep::Output; /// edges. Physical register dependence information is not carried in; /// the DAG and must be handled explicitly by schedulers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:43,Energy Efficiency,schedul,scheduling,43,"/// ScheduleDAGSDNodes - A ScheduleDAG for scheduling SDNode-based DAGs.; ///; /// Edges between SUnits are initially based on edges in the SelectionDAG,; /// and additional edges can be added by the schedulers as heuristics.; /// SDNodes such as Constants, Registers, and a few others that are not; /// interesting to schedulers are not allocated SUnits.; ///; /// SDNodes with MVT::Glue operands are grouped along with the flagged; /// nodes into a single SUnit so that they are scheduled together.; ///; /// SDNode-based scheduling graphs do not use SDep::Anti or SDep::Output; /// edges. Physical register dependence information is not carried in; /// the DAG and must be handled explicitly by schedulers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:200,Energy Efficiency,schedul,schedulers,200,"/// ScheduleDAGSDNodes - A ScheduleDAG for scheduling SDNode-based DAGs.; ///; /// Edges between SUnits are initially based on edges in the SelectionDAG,; /// and additional edges can be added by the schedulers as heuristics.; /// SDNodes such as Constants, Registers, and a few others that are not; /// interesting to schedulers are not allocated SUnits.; ///; /// SDNodes with MVT::Glue operands are grouped along with the flagged; /// nodes into a single SUnit so that they are scheduled together.; ///; /// SDNode-based scheduling graphs do not use SDep::Anti or SDep::Output; /// edges. Physical register dependence information is not carried in; /// the DAG and must be handled explicitly by schedulers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:319,Energy Efficiency,schedul,schedulers,319,"/// ScheduleDAGSDNodes - A ScheduleDAG for scheduling SDNode-based DAGs.; ///; /// Edges between SUnits are initially based on edges in the SelectionDAG,; /// and additional edges can be added by the schedulers as heuristics.; /// SDNodes such as Constants, Registers, and a few others that are not; /// interesting to schedulers are not allocated SUnits.; ///; /// SDNodes with MVT::Glue operands are grouped along with the flagged; /// nodes into a single SUnit so that they are scheduled together.; ///; /// SDNode-based scheduling graphs do not use SDep::Anti or SDep::Output; /// edges. Physical register dependence information is not carried in; /// the DAG and must be handled explicitly by schedulers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:338,Energy Efficiency,allocate,allocated,338,"/// ScheduleDAGSDNodes - A ScheduleDAG for scheduling SDNode-based DAGs.; ///; /// Edges between SUnits are initially based on edges in the SelectionDAG,; /// and additional edges can be added by the schedulers as heuristics.; /// SDNodes such as Constants, Registers, and a few others that are not; /// interesting to schedulers are not allocated SUnits.; ///; /// SDNodes with MVT::Glue operands are grouped along with the flagged; /// nodes into a single SUnit so that they are scheduled together.; ///; /// SDNode-based scheduling graphs do not use SDep::Anti or SDep::Output; /// edges. Physical register dependence information is not carried in; /// the DAG and must be handled explicitly by schedulers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:481,Energy Efficiency,schedul,scheduled,481,"/// ScheduleDAGSDNodes - A ScheduleDAG for scheduling SDNode-based DAGs.; ///; /// Edges between SUnits are initially based on edges in the SelectionDAG,; /// and additional edges can be added by the schedulers as heuristics.; /// SDNodes such as Constants, Registers, and a few others that are not; /// interesting to schedulers are not allocated SUnits.; ///; /// SDNodes with MVT::Glue operands are grouped along with the flagged; /// nodes into a single SUnit so that they are scheduled together.; ///; /// SDNode-based scheduling graphs do not use SDep::Anti or SDep::Output; /// edges. Physical register dependence information is not carried in; /// the DAG and must be handled explicitly by schedulers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:524,Energy Efficiency,schedul,scheduling,524,"/// ScheduleDAGSDNodes - A ScheduleDAG for scheduling SDNode-based DAGs.; ///; /// Edges between SUnits are initially based on edges in the SelectionDAG,; /// and additional edges can be added by the schedulers as heuristics.; /// SDNodes such as Constants, Registers, and a few others that are not; /// interesting to schedulers are not allocated SUnits.; ///; /// SDNodes with MVT::Glue operands are grouped along with the flagged; /// nodes into a single SUnit so that they are scheduled together.; ///; /// SDNode-based scheduling graphs do not use SDep::Anti or SDep::Output; /// edges. Physical register dependence information is not carried in; /// the DAG and must be handled explicitly by schedulers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:698,Energy Efficiency,schedul,schedulers,698,"/// ScheduleDAGSDNodes - A ScheduleDAG for scheduling SDNode-based DAGs.; ///; /// Edges between SUnits are initially based on edges in the SelectionDAG,; /// and additional edges can be added by the schedulers as heuristics.; /// SDNodes such as Constants, Registers, and a few others that are not; /// interesting to schedulers are not allocated SUnits.; ///; /// SDNodes with MVT::Glue operands are grouped along with the flagged; /// nodes into a single SUnit so that they are scheduled together.; ///; /// SDNode-based scheduling graphs do not use SDep::Anti or SDep::Output; /// edges. Physical register dependence information is not carried in; /// the DAG and must be handled explicitly by schedulers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:610,Integrability,depend,dependence,610,"/// ScheduleDAGSDNodes - A ScheduleDAG for scheduling SDNode-based DAGs.; ///; /// Edges between SUnits are initially based on edges in the SelectionDAG,; /// and additional edges can be added by the schedulers as heuristics.; /// SDNodes such as Constants, Registers, and a few others that are not; /// interesting to schedulers are not allocated SUnits.; ///; /// SDNodes with MVT::Glue operands are grouped along with the flagged; /// nodes into a single SUnit so that they are scheduled together.; ///; /// SDNode-based scheduling graphs do not use SDep::Anti or SDep::Output; /// edges. Physical register dependence information is not carried in; /// the DAG and must be handled explicitly by schedulers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:8,Energy Efficiency,schedul,schedule,8,/// The schedule. Null SUnit*'s represent noop instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:18,Energy Efficiency,schedul,scheduling,18,/// Run - perform scheduling.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:10,Performance,perform,perform,10,/// Run - perform scheduling.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:53,Energy Efficiency,schedul,scheduled,53,/// isPassiveNode - Return true if the node is a non-scheduled leaf.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:127,Energy Efficiency,schedul,scheduling,127,/// Clone - Creates a clone of the specified SUnit. It does not copy the; /// predecessors / successors info nor the temporary scheduling states.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:191,Energy Efficiency,schedul,scheduling,191,"/// BuildSchedGraph - Build the SUnit graph from the selection dag that we; /// are input. This SUnit graph is similar to the SelectionDAG, but; /// excludes nodes that aren't interesting to scheduling, and represents; /// flagged together nodes with a single SUnit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:34,Performance,latency,latency,34,/// computeLatency - Compute node latency.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:4,Energy Efficiency,Schedul,Schedule,4,"/// Schedule - Order nodes according to selected style, filling; /// in the Sequence member.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:57,Energy Efficiency,schedul,scheduled,57,/// VerifyScheduledSequence - Verify that all SUnits are scheduled and; /// consistent with the Sequence of scheduled instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:108,Energy Efficiency,schedul,scheduled,108,/// VerifyScheduledSequence - Verify that all SUnits are scheduled and; /// consistent with the Sequence of scheduled instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:44,Energy Efficiency,schedul,scheduling,44,/// ForceUnitLatencies - Return true if all scheduling edges should be given; /// a latency value of one. The default is to return false; schedulers may; /// override this as needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:138,Energy Efficiency,schedul,schedulers,138,/// ForceUnitLatencies - Return true if all scheduling edges should be given; /// a latency value of one. The default is to return false; schedulers may; /// override this as needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:84,Performance,latency,latency,84,/// ForceUnitLatencies - Return true if all scheduling edges should be given; /// a latency value of one. The default is to return false; schedulers may; /// override this as needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:38,Performance,load,loads,38,"/// ClusterNeighboringLoads - Cluster loads from ""near"" addresses into; /// combined SUnits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h:57,Energy Efficiency,schedul,scheduled,57,/// ClusterNodes - Cluster certain nodes which should be scheduled together.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGSDNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:405,Availability,down,down,405,"//===- ScheduleDAGVLIW.cpp - SelectionDAG list scheduler for VLIW -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a top-down list scheduler, using standard algorithms.; // The basic approach uses a priority queue of available nodes to schedule.; // One at a time, nodes are taken from the priority queue (thus in priority; // order), checked for legality to schedule, and emitted if legal.; //; // Nodes may not be legal to schedule either due to structural hazards (e.g.; // pipeline or resource constraints) or because an input to the instruction has; // not completed execution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:501,Availability,avail,available,501,"//===- ScheduleDAGVLIW.cpp - SelectionDAG list scheduler for VLIW -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a top-down list scheduler, using standard algorithms.; // The basic approach uses a priority queue of available nodes to schedule.; // One at a time, nodes are taken from the priority queue (thus in priority; // order), checked for legality to schedule, and emitted if legal.; //; // Nodes may not be legal to schedule either due to structural hazards (e.g.; // pipeline or resource constraints) or because an input to the instruction has; // not completed execution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:761,Deployability,pipeline,pipeline,761,"//===- ScheduleDAGVLIW.cpp - SelectionDAG list scheduler for VLIW -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a top-down list scheduler, using standard algorithms.; // The basic approach uses a priority queue of available nodes to schedule.; // One at a time, nodes are taken from the priority queue (thus in priority; // order), checked for legality to schedule, and emitted if legal.; //; // Nodes may not be legal to schedule either due to structural hazards (e.g.; // pipeline or resource constraints) or because an input to the instruction has; // not completed execution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:7,Energy Efficiency,Schedul,ScheduleDAGVLIW,7,"//===- ScheduleDAGVLIW.cpp - SelectionDAG list scheduler for VLIW -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a top-down list scheduler, using standard algorithms.; // The basic approach uses a priority queue of available nodes to schedule.; // One at a time, nodes are taken from the priority queue (thus in priority; // order), checked for legality to schedule, and emitted if legal.; //; // Nodes may not be legal to schedule either due to structural hazards (e.g.; // pipeline or resource constraints) or because an input to the instruction has; // not completed execution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:47,Energy Efficiency,schedul,scheduler,47,"//===- ScheduleDAGVLIW.cpp - SelectionDAG list scheduler for VLIW -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a top-down list scheduler, using standard algorithms.; // The basic approach uses a priority queue of available nodes to schedule.; // One at a time, nodes are taken from the priority queue (thus in priority; // order), checked for legality to schedule, and emitted if legal.; //; // Nodes may not be legal to schedule either due to structural hazards (e.g.; // pipeline or resource constraints) or because an input to the instruction has; // not completed execution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:415,Energy Efficiency,schedul,scheduler,415,"//===- ScheduleDAGVLIW.cpp - SelectionDAG list scheduler for VLIW -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a top-down list scheduler, using standard algorithms.; // The basic approach uses a priority queue of available nodes to schedule.; // One at a time, nodes are taken from the priority queue (thus in priority; // order), checked for legality to schedule, and emitted if legal.; //; // Nodes may not be legal to schedule either due to structural hazards (e.g.; // pipeline or resource constraints) or because an input to the instruction has; // not completed execution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:520,Energy Efficiency,schedul,schedule,520,"//===- ScheduleDAGVLIW.cpp - SelectionDAG list scheduler for VLIW -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a top-down list scheduler, using standard algorithms.; // The basic approach uses a priority queue of available nodes to schedule.; // One at a time, nodes are taken from the priority queue (thus in priority; // order), checked for legality to schedule, and emitted if legal.; //; // Nodes may not be legal to schedule either due to structural hazards (e.g.; // pipeline or resource constraints) or because an input to the instruction has; // not completed execution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:643,Energy Efficiency,schedul,schedule,643,"//===- ScheduleDAGVLIW.cpp - SelectionDAG list scheduler for VLIW -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a top-down list scheduler, using standard algorithms.; // The basic approach uses a priority queue of available nodes to schedule.; // One at a time, nodes are taken from the priority queue (thus in priority; // order), checked for legality to schedule, and emitted if legal.; //; // Nodes may not be legal to schedule either due to structural hazards (e.g.; // pipeline or resource constraints) or because an input to the instruction has; // not completed execution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:709,Energy Efficiency,schedul,schedule,709,"//===- ScheduleDAGVLIW.cpp - SelectionDAG list scheduler for VLIW -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a top-down list scheduler, using standard algorithms.; // The basic approach uses a priority queue of available nodes to schedule.; // One at a time, nodes are taken from the priority queue (thus in priority; // order), checked for legality to schedule, and emitted if legal.; //; // Nodes may not be legal to schedule either due to structural hazards (e.g.; // pipeline or resource constraints) or because an input to the instruction has; // not completed execution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:492,Performance,queue,queue,492,"//===- ScheduleDAGVLIW.cpp - SelectionDAG list scheduler for VLIW -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a top-down list scheduler, using standard algorithms.; // The basic approach uses a priority queue of available nodes to schedule.; // One at a time, nodes are taken from the priority queue (thus in priority; // order), checked for legality to schedule, and emitted if legal.; //; // Nodes may not be legal to schedule either due to structural hazards (e.g.; // pipeline or resource constraints) or because an input to the instruction has; // not completed execution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:583,Performance,queue,queue,583,"//===- ScheduleDAGVLIW.cpp - SelectionDAG list scheduler for VLIW -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a top-down list scheduler, using standard algorithms.; // The basic approach uses a priority queue of available nodes to schedule.; // One at a time, nodes are taken from the priority queue (thus in priority; // order), checked for legality to schedule, and emitted if legal.; //; // Nodes may not be legal to schedule either due to structural hazards (e.g.; // pipeline or resource constraints) or because an input to the instruction has; // not completed execution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:743,Safety,hazard,hazards,743,"//===- ScheduleDAGVLIW.cpp - SelectionDAG list scheduler for VLIW -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements a top-down list scheduler, using standard algorithms.; // The basic approach uses a priority queue of available nodes to schedule.; // One at a time, nodes are taken from the priority queue (thus in priority; // order), checked for legality to schedule, and emitted if legal.; //; // Nodes may not be legal to schedule either due to structural hazards (e.g.; // pipeline or resource constraints) or because an input to the instruction has; // not completed execution.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:175,Availability,down,down,175,//===----------------------------------------------------------------------===//; /// ScheduleDAGVLIW - The actual DFA list scheduler implementation. This; /// supports / top-down scheduling.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:86,Energy Efficiency,Schedul,ScheduleDAGVLIW,86,//===----------------------------------------------------------------------===//; /// ScheduleDAGVLIW - The actual DFA list scheduler implementation. This; /// supports / top-down scheduling.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:124,Energy Efficiency,schedul,scheduler,124,//===----------------------------------------------------------------------===//; /// ScheduleDAGVLIW - The actual DFA list scheduler implementation. This; /// supports / top-down scheduling.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:180,Energy Efficiency,schedul,scheduling,180,//===----------------------------------------------------------------------===//; /// ScheduleDAGVLIW - The actual DFA list scheduler implementation. This; /// supports / top-down scheduling.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:4,Availability,Avail,AvailableQueue,4,/// AvailableQueue - The priority queue to use for the available SUnits.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:55,Availability,avail,available,55,/// AvailableQueue - The priority queue to use for the available SUnits.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:34,Performance,queue,queue,34,/// AvailableQueue - The priority queue to use for the available SUnits.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:200,Availability,avail,available,200,"/// PendingQueue - This contains all of the instructions whose operands have; /// been issued, but their results are not ready yet (due to the latency of; /// the operation). Once the operands become available, the instruction is; /// added to the AvailableQueue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:248,Availability,Avail,AvailableQueue,248,"/// PendingQueue - This contains all of the instructions whose operands have; /// been issued, but their results are not ready yet (due to the latency of; /// the operation). Once the operands become available, the instruction is; /// added to the AvailableQueue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:143,Performance,latency,latency,143,"/// PendingQueue - This contains all of the instructions whose operands have; /// been issued, but their results are not ready yet (due to the latency of; /// the operation). Once the operands become available, the instruction is; /// added to the AvailableQueue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:4,Safety,Hazard,HazardRec,4,/// HazardRec - The hazard recognizer to use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:20,Safety,hazard,hazard,20,/// HazardRec - The hazard recognizer to use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:32,Energy Efficiency,Schedul,Schedule,32,// end anonymous namespace; /// Schedule - Schedule the DAG using list scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:43,Energy Efficiency,Schedul,Schedule,43,// end anonymous namespace; /// Schedule - Schedule the DAG using list scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:71,Energy Efficiency,schedul,scheduling,71,// end anonymous namespace; /// Schedule - Schedule the DAG using list scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:13,Energy Efficiency,schedul,scheduling,13,// Build the scheduling graph.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:89,Availability,Down,Down,89,//===----------------------------------------------------------------------===//; // Top-Down Scheduling; //===----------------------------------------------------------------------===//; /// releaseSucc - Decrement the NumPredsLeft count of a successor. Add it to; /// the PendingQueue if the count reaches zero. Also update its cycle bound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:192,Deployability,release,releaseSucc,192,//===----------------------------------------------------------------------===//; // Top-Down Scheduling; //===----------------------------------------------------------------------===//; /// releaseSucc - Decrement the NumPredsLeft count of a successor. Add it to; /// the PendingQueue if the count reaches zero. Also update its cycle bound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:319,Deployability,update,update,319,//===----------------------------------------------------------------------===//; // Top-Down Scheduling; //===----------------------------------------------------------------------===//; /// releaseSucc - Decrement the NumPredsLeft count of a successor. Add it to; /// the PendingQueue if the count reaches zero. Also update its cycle bound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:94,Energy Efficiency,Schedul,Scheduling,94,//===----------------------------------------------------------------------===//; // Top-Down Scheduling; //===----------------------------------------------------------------------===//; /// releaseSucc - Decrement the NumPredsLeft count of a successor. Add it to; /// the PendingQueue if the count reaches zero. Also update its cycle bound.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:38,Energy Efficiency,schedul,scheduled,38,"// If all the node's predecessors are scheduled, this node is ready; // to be scheduled. Ignore the special ExitSU node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:78,Energy Efficiency,schedul,scheduled,78,"// If all the node's predecessors are scheduled, this node is ready; // to be scheduled. Ignore the special ExitSU node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:7,Availability,down,down,7,// Top down: release successors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:13,Deployability,release,release,13,// Top down: release successors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:165,Availability,Avail,Available,165,"/// scheduleNodeTopDown - Add the node to the schedule. Decrement the pending; /// count of its successors. If a successor pending count is zero, add it to; /// the Available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:4,Energy Efficiency,schedul,scheduleNodeTopDown,4,"/// scheduleNodeTopDown - Add the node to the schedule. Decrement the pending; /// count of its successors. If a successor pending count is zero, add it to; /// the Available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:46,Energy Efficiency,schedul,schedule,46,"/// scheduleNodeTopDown - Add the node to the schedule. Decrement the pending; /// count of its successors. If a successor pending count is zero, add it to; /// the Available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:175,Performance,queue,queue,175,"/// scheduleNodeTopDown - Add the node to the schedule. Decrement the pending; /// count of its successors. If a successor pending count is zero, add it to; /// the Available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:67,Availability,down,down,67,/// listScheduleTopDown - The main loop of list scheduling for top-down; /// schedulers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:48,Energy Efficiency,schedul,scheduling,48,/// listScheduleTopDown - The main loop of list scheduling for top-down; /// schedulers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:77,Energy Efficiency,schedul,schedulers,77,/// listScheduleTopDown - The main loop of list scheduling for top-down; /// schedulers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:3,Deployability,Release,Release,3,// Release any successors of the special Entry node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:17,Availability,Avail,AvailableQueue,17,// All leaves to AvailableQueue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:9,Availability,avail,available,9,// It is available if it has no predecessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:9,Availability,Avail,AvailableQueue,9,"// While AvailableQueue is not empty, grab the node with the highest; // priority. If it is not ready put it back. Schedule the node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:115,Energy Efficiency,Schedul,Schedule,115,"// While AvailableQueue is not empty, grab the node with the highest; // priority. If it is not ready put it back. Schedule the node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:98,Availability,avail,available,98,"// Check to see if any of the pending instructions are ready to issue. If; // so, add them to the available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:108,Performance,queue,queue,108,"// Check to see if any of the pending instructions are ready to issue. If; // so, add them to the available queue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:32,Availability,avail,available,32,"// If there are no instructions available, don't try to issue anything, and; // don't advance the hazard recognizer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:98,Safety,hazard,hazard,98,"// If there are no instructions available, don't try to issue anything, and; // don't advance the hazard recognizer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:30,Safety,hazard,hazard,30,// Remember if this is a noop hazard.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:49,Availability,avail,available,49,// Add the nodes that aren't ready back onto the available list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:25,Energy Efficiency,schedul,schedule,25,"// If we found a node to schedule, do it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:24,Deployability,pipeline,pipeline,24,"// Otherwise, we have a pipeline stall, but no other problem, just advance; // the current cycle and try again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:86,Availability,fault,fault,86,"// Otherwise, we have no instructions to issue and we have instructions; // that will fault if we don't do this right. This is the case for; // processors without pipeline interlocks and other cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:163,Deployability,pipeline,pipeline,163,"// Otherwise, we have no instructions to issue and we have instructions; // that will fault if we don't do this right. This is the case for; // processors without pipeline interlocks and other cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:172,Safety,interlock,interlocks,172,"// Otherwise, we have no instructions to issue and we have instructions; // that will fault if we don't do this right. This is the case for; // processors without pipeline interlocks and other cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:172,Security,interlock,interlocks,172,"// Otherwise, we have no instructions to issue and we have instructions; // that will fault if we don't do this right. This is the case for; // processors without pipeline interlocks and other cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:245,Availability,down,down,245,//===----------------------------------------------------------------------===//; // Public Constructor Functions; //===----------------------------------------------------------------------===//; /// createVLIWDAGScheduler - This creates a top-down list scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp:255,Energy Efficiency,schedul,scheduler,255,//===----------------------------------------------------------------------===//; // Public Constructor Functions; //===----------------------------------------------------------------------===//; /// createVLIWDAGScheduler - This creates a top-down list scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/ScheduleDAGVLIW.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h:99,Safety,avoid,avoid,99,/// Holds the information from a dbg_value node through SDISel.; /// We do not use SDValue here to avoid including its header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h:19,Energy Efficiency,allocate,allocated,19,"// SDDbgValues are allocated by a BumpPtrAllocator, which means the destructor; // may not be called; therefore all member arrays must also be allocated by; // that BumpPtrAllocator, to ensure that they are correctly freed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h:143,Energy Efficiency,allocate,allocated,143,"// SDDbgValues are allocated by a BumpPtrAllocator, which means the destructor; // may not be called; therefore all member arrays must also be allocated by; // that BumpPtrAllocator, to ensure that they are correctly freed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h:10,Integrability,depend,dependencies,10,// SDNode dependencies will be calculated as SDNodes that appear in; // LocationOps plus these AdditionalDependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h:6,Energy Efficiency,allocate,allocate,6,"// We allocate arrays with the BumpPtrAllocator and never free or copy them,; // for LocationOps and AdditionalDependencies, as we never expect to copy or; // destroy an SDDbgValue. If we ever start copying or destroying instances, we; // should manage the allocated memory appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h:257,Energy Efficiency,allocate,allocated,257,"// We allocate arrays with the BumpPtrAllocator and never free or copy them,; // for LocationOps and AdditionalDependencies, as we never expect to copy or; // destroy an SDDbgValue. If we ever start copying or destroying instances, we; // should manage the allocated memory appropriately.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h:43,Modifiability,variab,variable,43,/// Returns the DIVariable pointer for the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h:45,Integrability,depend,depends,45,// Returns the SDNodes which this SDDbgValue depends on.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h:121,Integrability,depend,depends,121,"/// clearIsEmitted - Reset Emitted flag, for certain special cases where; /// SDDbgValue is emitted twice. DBG_INSTR_REF depends on this behaviour.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h:4,Usability,clear,clearIsEmitted,4,"/// clearIsEmitted - Reset Emitted flag, for certain special cases where; /// SDDbgValue is emitted twice. DBG_INSTR_REF depends on this behaviour.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h:99,Safety,avoid,avoid,99,/// Holds the information from a dbg_label node through SDISel.; /// We do not use SDValue here to avoid including its header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SDNodeDbgValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:310,Usability,clear,clearly,310,"//===----------------------------------------------------------------------===//; // ConstantFPSDNode Class; //===----------------------------------------------------------------------===//; /// isExactlyValue - We don't rely on operator== working on double values, as; /// it returns true for things that are clearly not equal, like -0.0 and 0.0.; /// As such, this method can be used to do an exact bit-for-bit comparison of; /// two floating point values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:58,Testability,log,logically,58,"// Return false if the node has no operands.; // This is ""logically inconsistent"" with the definition of ""all"" but; // is probably the desired behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:39,Availability,mask,mask,39,/// The operand position of the vector mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:6,Performance,perform,perform,6,"// To perform this operation, we just need to swap the L and G bits of the; // operation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:175,Integrability,depend,depend,175,"/// For an integer comparison, return 1 if the comparison is a signed operation; /// and 2 if the result is an unsigned comparison. Return zero if the operation; /// does not depend on the sign of the input (setne and seteq).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:3,Usability,Clear,Clear,3,// Clear the U bit if the N bit is set.; // Canonicalize illegal integer setcc's.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:32,Integrability,rout,routines,32,/// AddNodeIDOperands - Various routines for adding operands to the NodeID data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:32,Integrability,rout,routines,32,/// AddNodeIDOperands - Various routines for adding operands to the NodeID data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:28,Integrability,rout,routine,28,/// AddNodeIDNode - Generic routine for adding a nodes info to the NodeID; /// data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:235,Performance,perform,performed,235,//===----------------------------------------------------------------------===//; // SelectionDAG Class; //===----------------------------------------------------------------------===//; /// doNotCSE - Return true if CSE should not be performed for this node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:49,Deployability,update,update,49,"// If the root changed (e.g. it was a dead load, update the root).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:43,Performance,load,load,43,"// If the root changed (e.g. it was a dead load, update the root).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:51,Safety,safe,safe,51,"// Next, brutally remove the operand list. This is safe to do, as there are; // no cycles in the graph.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:186,Deployability,release,released,186,// Set the opcode to DELETED_NODE to help catch bugs when node; // memory is reallocated.; // FIXME: There are places in SDag that have grown a dependency on the opcode; // value in the released node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:144,Integrability,depend,dependency,144,// Set the opcode to DELETED_NODE to help catch bugs when node; // memory is reallocated.; // FIXME: There are places in SDag that have grown a dependency on the opcode; // value in the released node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:43,Safety,Abort,Aborts,43,/// VerifySDNode - Check the given SDNode. Aborts if it is invalid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:30,Energy Efficiency,allocate,allocated,30,"// NDEBUG; /// Insert a newly allocated node into the DAG.; ///; /// Handles insertion into the all nodes list and CSE map, as well as; /// verification and other common operations when a new node is allocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:200,Energy Efficiency,allocate,allocated,200,"// NDEBUG; /// Insert a newly allocated node into the DAG.; ///; /// Handles insertion into the all nodes list and CSE map, as well as; /// verification and other common operations when a new node is allocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:187,Availability,down,down,187,"// If there was already an existing matching node, use ReplaceAllUsesWith; // to replace the dead one with the existing one. This can cause; // recursive merging of other unrelated nodes down the line.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:41,Deployability,update,updated,41,"// If the node doesn't already exist, we updated it. Inform listeners.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:112,Deployability,update,update,112,"// When the node's point of use is located earlier in the instruction; // sequence than its prior point of use, update its debug info to the; // earlier location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:7,Performance,scalab,scalable,7,"// For scalable vectors, try to use a SPLAT_VECTOR_PARTS node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:155,Energy Efficiency,power,power-of-,155,// Check the temporary vector is the correct size. If this fails then; // getTypeToTransformTo() probably returned a type whose size (in bits); // isn't a power-of-2 factor of the requested type size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:219,Performance,perform,perform,219,"// The elements must be reversed when the element order is different; // to the endianness of the elements (because the BITCAST is itself a; // vector shuffle in this situation). However, we do not need any code to; // perform this reversal because getConstant() is producing a vector; // splat.; // This situation occurs in MIPS MSA.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:68,Availability,mask,mask,68,/// Swaps the values of N1 and N2. Swaps all indices in the shuffle mask M that; /// point at N1 to point at N2 and indices that point at N2 to point at N1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:32,Availability,Mask,Mask,32,// Validate that all indices in Mask are within the range of the elements; // input to the shuffle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:3,Security,Validat,Validate,3,// Validate that all indices in Mask are within the range of the elements; // input to the shuffle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:12,Availability,mask,mask,12,// Copy the mask so we can do any needed cleanup.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:66,Availability,mask,mask,66,"// Canonicalize shuffle undef, v -> v, undef. Commute the shuffle mask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:51,Availability,mask,mask,51,// Reset our undef status after accounting for the mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:16,Availability,mask,mask,16,"// Allocate the mask array for the node out of the BumpPtrAllocator, since; // SDNode doesn't have access to it. This memory will be ""leaked"" when; // the node is deallocated, but recovered when the NodeAllocator is released.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:180,Availability,recover,recovered,180,"// Allocate the mask array for the node out of the BumpPtrAllocator, since; // SDNode doesn't have access to it. This memory will be ""leaked"" when; // the node is deallocated, but recovered when the NodeAllocator is released.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:216,Deployability,release,released,216,"// Allocate the mask array for the node out of the BumpPtrAllocator, since; // SDNode doesn't have access to it. This memory will be ""leaked"" when; // the node is deallocated, but recovered when the NodeAllocator is released.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate the mask array for the node out of the BumpPtrAllocator, since; // SDNode doesn't have access to it. This memory will be ""leaked"" when; // the node is deallocated, but recovered when the NodeAllocator is released.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:180,Safety,recover,recovered,180,"// Allocate the mask array for the node out of the BumpPtrAllocator, since; // SDNode doesn't have access to it. This memory will be ""leaked"" when; // the node is deallocated, but recovered when the NodeAllocator is released.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:99,Security,access,access,99,"// Allocate the mask array for the node out of the BumpPtrAllocator, since; // SDNode doesn't have access to it. This memory will be ""leaked"" when; // the node is deallocated, but recovered when the NodeAllocator is released.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:3,Performance,Load,Load,3,// Load the actual argument out of the pointer VAList,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:20,Performance,load,loading,20,"// This defaults to loading a pointer from the input and storing it to the; // output, returning the chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:116,Availability,down,down,116,// See if we can choose a smaller ABI alignment in cases where it's an; // illegal vector type that will get broken down.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:61,Performance,scalab,scalable,61,"// The stack id gives an indication of whether the object is scalable or; // not, so it's safe to pass in the minimum size here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:90,Safety,safe,safe,90,"// The stack id gives an indication of whether the object is scalable or; // not, so it's safe to pass in the minimum size here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:125,Availability,down,downstream,125,/// SignBitIsZero - Return true if the sign bit of Op is known to be zero. We; /// use this predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:105,Usability,simpl,simplify,105,/// SignBitIsZero - Return true if the sign bit of Op is known to be zero. We; /// use this predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:4,Availability,Mask,MaskedValueIsZero,4,/// MaskedValueIsZero - Return true if 'V & Mask' is known to be zero. We use; /// this predicate to simplify operations downstream. Mask is known to be zero; /// for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:44,Availability,Mask,Mask,44,/// MaskedValueIsZero - Return true if 'V & Mask' is known to be zero. We use; /// this predicate to simplify operations downstream. Mask is known to be zero; /// for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:121,Availability,down,downstream,121,/// MaskedValueIsZero - Return true if 'V & Mask' is known to be zero. We use; /// this predicate to simplify operations downstream. Mask is known to be zero; /// for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:133,Availability,Mask,Mask,133,/// MaskedValueIsZero - Return true if 'V & Mask' is known to be zero. We use; /// this predicate to simplify operations downstream. Mask is known to be zero; /// for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:101,Usability,simpl,simplify,101,/// MaskedValueIsZero - Return true if 'V & Mask' is known to be zero. We use; /// this predicate to simplify operations downstream. Mask is known to be zero; /// for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:4,Availability,Mask,MaskedValueIsZero,4,/// MaskedValueIsZero - Return true if 'V & Mask' is known to be zero in; /// DemandedElts. We use this predicate to simplify operations downstream.; /// Mask is known to be zero for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:44,Availability,Mask,Mask,44,/// MaskedValueIsZero - Return true if 'V & Mask' is known to be zero in; /// DemandedElts. We use this predicate to simplify operations downstream.; /// Mask is known to be zero for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:137,Availability,down,downstream,137,/// MaskedValueIsZero - Return true if 'V & Mask' is known to be zero in; /// DemandedElts. We use this predicate to simplify operations downstream.; /// Mask is known to be zero for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:154,Availability,Mask,Mask,154,/// MaskedValueIsZero - Return true if 'V & Mask' is known to be zero in; /// DemandedElts. We use this predicate to simplify operations downstream.; /// Mask is known to be zero for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:117,Usability,simpl,simplify,117,/// MaskedValueIsZero - Return true if 'V & Mask' is known to be zero in; /// DemandedElts. We use this predicate to simplify operations downstream.; /// Mask is known to be zero for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:4,Availability,Mask,MaskedVectorIsZero,4,/// MaskedVectorIsZero - Return true if 'Op' is known to be zero in; /// DemandedElts. We use this predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:132,Availability,down,downstream,132,/// MaskedVectorIsZero - Return true if 'Op' is known to be zero in; /// DemandedElts. We use this predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:112,Usability,simpl,simplify,112,/// MaskedVectorIsZero - Return true if 'Op' is known to be zero in; /// DemandedElts. We use this predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:4,Availability,Mask,MaskedValueIsAllOnes,4,/// MaskedValueIsAllOnes - Return true if '(Op & Mask) == Mask'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:49,Availability,Mask,Mask,49,/// MaskedValueIsAllOnes - Return true if '(Op & Mask) == Mask'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:58,Availability,Mask,Mask,58,/// MaskedValueIsAllOnes - Return true if '(Op & Mask) == Mask'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:100,Performance,scalab,scalable,100,"/// isSplatValue - Return true if the vector V has the same value; /// across all DemandedElts. For scalable vectors, we don't know the; /// number of lanes at compile time. Instead, we use a 1 bit APInt; /// to represent a conservative value for all lanes; that is, that; /// one bit value is implicitly splatted across all lanes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:89,Performance,scalab,scalable,89,// Limit search depth.; // Deal with some common cases here that work for both fixed and scalable; // vector types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:53,Performance,scalab,scalable,53,// We don't support other cases than those above for scalable vectors at; // the moment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:20,Performance,scalab,scalable,20,// We don't support scalable vectors at the moment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:20,Performance,scalab,scalable,20,// We don't support scalable vectors at the moment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:11,Integrability,wrap,wrapper,11,/// Helper wrapper to main isSplatValue function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:34,Performance,scalab,scalable,34,"// Since the number of lanes in a scalable vector is unknown at compile time,; // we track one bit which is implicitly broadcast to all lanes. This means; // that all lanes in a scalable vector are considered demanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:178,Performance,scalab,scalable,178,"// Since the number of lanes in a scalable vector is unknown at compile time,; // we track one bit which is implicitly broadcast to all lanes. This means; // that all lanes in a scalable vector are considered demanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:34,Performance,scalab,scalable,34,"// Since the number of lanes in a scalable vector is unknown at compile time,; // we track one bit which is implicitly broadcast to all lanes. This means; // that all lanes in a scalable vector are considered demanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:178,Performance,scalab,scalable,178,"// Since the number of lanes in a scalable vector is unknown at compile time,; // we track one bit which is implicitly broadcast to all lanes. This means; // that all lanes in a scalable vector are considered demanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:46,Performance,scalab,scalable,46,"// DemandedElts and UndefElts are ignored for scalable vectors, since; // the only supported cases are SPLAT_VECTOR nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:34,Performance,scalab,scalable,34,"// Since the number of lanes in a scalable vector is unknown at compile time,; // we track one bit which is implicitly broadcast to all lanes. This means; // that all lanes in a scalable vector are considered demanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:178,Performance,scalab,scalable,178,"// Since the number of lanes in a scalable vector is unknown at compile time,; // we track one bit which is implicitly broadcast to all lanes. This means; // that all lanes in a scalable vector are considered demanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:26,Testability,test,test,26,// Split DemandedElts and test each of the demanded subvectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:53,Performance,scalab,scalable,53,// Bail until we can represent demanded elements for scalable vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:215,Availability,avail,available,215,"// The boolean result conforms to getBooleanContents.; // If we know the result of a setcc has the top bits zero, use this info.; // We know that we have an integer-based boolean since these operations; // are only available for integer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:44,Performance,load,loaded,44,// Determine any common known bits from the loaded constant pool value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:51,Performance,load,loaded,51,// If this is a ZEXTLoad and we are looking at the loaded value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:20,Modifiability,extend,extending,20,// TODO: Handle for extending loads,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:30,Performance,load,loads,30,// TODO: Handle for extending loads,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:27,Performance,load,load,27,"// Handle the case where a load has a vector type, but scalar memory; // with an attached range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:62,Modifiability,extend,extend,62,"// If the sign bit is known to be zero or one, then sext will extend; // it to the top bits, else it will just zext.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:62,Modifiability,extend,extend,62,"// If the sign bit is known to be zero or one, then sext will extend; // it to the top bits, else it will just zext.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:128,Usability,clear,clearing,128,"// TODO: Should use maximum with source; // If a node is guaranteed to be aligned, set low zero bits accordingly as; // well as clearing one bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:33,Availability,mask,mask,33,// Remove low part of known bits mask,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:33,Availability,mask,mask,33,// Remove high part of known bit mask,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:44,Performance,scalab,scalable,44,// computeKnownBits not yet implemented for scalable vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:94,Modifiability,extend,extended,94,// If BitWidth > EltBitWidth the value is anyext:ed. So we do not know; // anything about the extended bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:215,Availability,avail,available,215,"// The boolean result conforms to getBooleanContents.; // If we know the result of a setcc has the top bits zero, use this info.; // We know that we have an integer-based boolean since these operations; // are only available for integer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:28,Performance,load,loaded,28,// If we are looking at the loaded value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:99,Deployability,patch,patch,99,// TODO: Probably okay to remove after audit; here to reduce change size; // in initial enablement patch for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:54,Energy Efficiency,reduce,reduce,54,// TODO: Probably okay to remove after audit; here to reduce change size; // in initial enablement patch for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:109,Performance,scalab,scalable,109,// TODO: Probably okay to remove after audit; here to reduce change size; // in initial enablement patch for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:39,Security,audit,audit,39,// TODO: Probably okay to remove after audit; here to reduce change size; // in initial enablement patch for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:27,Energy Efficiency,power,power,27,// Is the constant a known power of 2?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:16,Testability,log,logical,16,"// Similarly, a logical right-shift of a constant sign-bit will have exactly; // one bit set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:47,Energy Efficiency,power,powers,47,// Are all operands of a build vector constant powers of two?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:47,Energy Efficiency,power,power,47,// Is the operand of a splat vector a constant power of two?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:10,Energy Efficiency,power,power-of-two,10,// vscale(power-of-two) is a power-of-two for some targets,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:29,Energy Efficiency,power,power-of-two,29,// vscale(power-of-two) is a power-of-two for some targets,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:34,Performance,scalab,scalable,34,"// Since the number of lanes in a scalable vector is unknown at compile time,; // we track one bit which is implicitly broadcast to all lanes. This means; // that all lanes in a scalable vector are considered demanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:178,Performance,scalab,scalable,178,"// Since the number of lanes in a scalable vector is unknown at compile time,; // we track one bit which is implicitly broadcast to all lanes. This means; // that all lanes in a scalable vector are considered demanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:39,Availability,down,down,39,// Check if the sign bits of source go down as far as the truncated value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:33,Usability,simpl,simply,33,// Fast case - sign splat can be simply split across the small elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:42,Modifiability,extend,extends,42,// Slow case - determine how far the sign extends into each sub-element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:34,Modifiability,extend,extends,34,// Max of the input and what this extends.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:28,Testability,Log,Logical,28,// NOT is handled here.; // Logical binary ops preserve the number of sign bits at the worst.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:205,Availability,avail,available,205,"// The boolean result conforms to getBooleanContents. Fall through.; // If setcc returns 0/-1, all bits are sign bits.; // We know that we have an integer-based boolean since these operations; // are only available for integer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:63,Usability,clear,clear,63,"// If the input is known to be positive (the sign bit is known clear),; // the output of the NEG has the same number of sign bits as the input.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:39,Availability,down,down,39,// Check if the sign bits of source go down as far as the truncated value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:46,Performance,scalab,scalable,46,// ComputeNumSignBits not yet implemented for scalable vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:53,Performance,scalab,scalable,53,// Bail until we can represent demanded elements for scalable vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:28,Performance,load,loaded,28,// If we are looking at the loaded value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:28,Performance,load,loaded,28,// If we are looking at the loaded value of the SDNode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:10,Performance,LOAD,LOADX,10,// Handle LOADX separately here. EXTLOAD case will fallthrough.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:101,Deployability,patch,patch,101,// TODO: This can probably be removed once target code is audited. This; // is here purely to reduce patch size and review complexity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:94,Energy Efficiency,reduce,reduce,94,// TODO: This can probably be removed once target code is audited. This; // is here purely to reduce patch size and review complexity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:58,Security,audit,audited,58,// TODO: This can probably be removed once target code is audited. This; // is here purely to reduce patch size and review complexity.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:103,Performance,LOAD,LOAD,103,// TODO: Search for noundef attributes from library functions.; // TODO: Pointers dereferenced by ISD::LOAD/STORE ops are noundef.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:20,Availability,Mask,Mask,20,"// Only bits set in Mask must be negated, other bits may be arbitrary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:55,Availability,Mask,Mask,55,"// Handle any_extend (not (truncate X)) pattern, where Mask only sets; // bits in the non-extended part.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:90,Modifiability,extend,extended,90,"// Handle any_extend (not (truncate X)) pattern, where Mask only sets; // bits in the non-extended part.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:9,Availability,mask,masked,9,// Match masked merge pattern (X & ~M) op (Y & M); // Including degenerate case (X & ~M) op M,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:11,Usability,simpl,simplify,11,"/// Try to simplify vector concatenation to an input value, undef, or build; /// vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:67,Usability,simpl,simplified,67,// A CONCAT_VECTOR with all UNDEF/BUILD_VECTOR operands can be; // simplified to one big BUILD_VECTOR.; // FIXME: Add support for SCALAR_TO_VECTOR as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:90,Modifiability,extend,extend,90,"// BUILD_VECTOR requires all inputs to be of the same type, find the; // maximum type and extend them all.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:33,Performance,perform,perform,33,// FIXME: Entirely reasonable to perform folding of other unary; // operations here as the need arises.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:14,Usability,simpl,simplify,14,// Attempt to simplify BUILD_VECTOR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:60,Modifiability,extend,extend,60,"// If the source is smaller than the dest, we still need an extend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:42,Modifiability,extend,extend,42,// Some targets like RISCV prefer to sign extend some types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:93,Modifiability,flexible,flexible,93,"// This can return overflow, underflow, or inexact; we don't care.; // FIXME need to be more flexible about rounding mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:93,Modifiability,flexible,flexible,93,"// This can return overflow, underflow, or inexact; we don't care.; // FIXME need to be more flexible about rounding mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:25,Modifiability,flexible,flexible,25,// FIXME need to be more flexible about rounding mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:93,Modifiability,flexible,flexible,93,"// This can return overflow, underflow, or inexact; we don't care.; // FIXME need to be more flexible about rounding mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:129,Integrability,depend,depending,129,"// If we are comparing vectors, then the result needs to be a i1 boolean that; // is then extended back to the legal result type depending on how booleans; // are represented.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:90,Modifiability,extend,extended,90,"// If we are comparing vectors, then the result needs to be a i1 boolean that; // is then extended back to the legal result type depending on how booleans; // are represented.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:7,Performance,scalab,scalable,7,// For scalable vector types we know we're dealing with SPLAT_VECTORs. We; // only have one operand to check. For fixed-length vector types we may have; // a combination of BUILD_VECTOR and SPLAT_VECTOR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:93,Modifiability,flexible,flexible,93,"// This can return overflow, underflow, or inexact; we don't care.; // FIXME need to be more flexible about rounding mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:139,Performance,optimiz,optimizer,139,"// If both operands are undef, the result is undef. If 1 operand is undef,; // the result is NaN. This should match the behavior of the IR optimizer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:22,Testability,assert,assert,22,// There's no need to assert on a byte-aligned pointer. All pointers are at; // least byte aligned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:14,Usability,simpl,simplify,14,// Attempt to simplify BUILD_VECTOR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:8,Testability,assert,assertion,8,// noop assertion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:16,Modifiability,extend,extending,16,// Not actually extending,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:93,Performance,scalab,scalable,93,// EXTRACT_VECTOR_ELT of out-of-bounds element is an UNDEF for fixed length; // vectors. For scalable vectors we will provide appropriate support for; // dealing with arbitrary indices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:143,Modifiability,extend,extended,143,"// If the vector element type is not legal, the BUILD_VECTOR operands; // are promoted and implicitly truncated, and the result implicitly; // extended. Make that explicit here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:393,Performance,scalab,scalable,393,"// EXTRACT_VECTOR_ELT of v1iX EXTRACT_SUBVECTOR could be formed; // when vector types are scalarized and v1iX is legal.; // vextract (v1iX extract_subvector(vNiX, Idx)) -> vextract(vNiX,Idx).; // Here we are completely ignoring the extract element index (N2),; // which is fine for fixed width vectors, since any index other than 0; // is undefined anyway. However, this cannot be ignored for scalable; // vectors - in theory we could support this, but we don't want to do this; // without a profitability check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:45,Usability,simpl,simplified,45,// EXTRACT_SUBVECTOR of CONCAT_VECTOR can be simplified if the pieces of; // the concat have the same type as the extract.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:3,Performance,Perform,Perform,3,// Perform trivial constant folding.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:3,Performance,Perform,Perform,3,// Perform various simplifications.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:19,Usability,simpl,simplifications,19,// Perform various simplifications.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:14,Usability,simpl,simplify,14,// Attempt to simplify BUILD_VECTOR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:20,Usability,simpl,simplify,20,// Use FoldSetCC to simplify SETCC's.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:76,Performance,scalab,scalable,76,"// INSERT_VECTOR_ELT into out-of-bounds element is an UNDEF, except; // for scalable vectors where we will generate appropriate code to; // deal with out-of-bounds cases correctly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:109,Performance,load,loaded,109,/// getStackArgumentTokenFactor - Compute a TokenFactor to force all; /// the incoming stack arguments to be loaded from the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:44,Modifiability,extend,extend,44,// Use a multiplication with 0x010101... to extend the input to the; // required length.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:87,Performance,load,load,87,"// If the ""cost"" of materializing the integer immediate is less than the cost; // of a load, then it is cost effective to turn the load into the immediate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:131,Performance,load,load,131,"// If the ""cost"" of materializing the integer immediate is less than the cost; // of a load, then it is cost effective to turn the load into the immediate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:24,Performance,optimiz,optimize,24,"// On Darwin, -Os means optimize for size without hurting performance, so; // only really optimize for size when -Oz (MinSize) is used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:58,Performance,perform,performance,58,"// On Darwin, -Os means optimize for size without hurting performance, so; // only really optimize for size when -Oz (MinSize) is used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:90,Performance,optimiz,optimize,90,"// On Darwin, -Os means optimize for size without hurting performance, so; // only really optimize for size when -Oz (MinSize) is used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:17,Performance,load,loads,17,// Chain for all loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:32,Performance,load,load,32,"// Expand memcpy to a series of load and store ops if the size operand falls; // below a certain threshold.; // TODO: In the AlwaysInline case, if the size is big then generate a loop; // rather than maybe a humongous number of loads and stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:228,Performance,load,loads,228,"// Expand memcpy to a series of load and store ops if the size operand falls; // below a certain threshold.; // TODO: In the AlwaysInline case, if the size is big then generate a loop; // rather than maybe a humongous number of loads and stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:26,Performance,perform,perform,26,"// If marked as volatile, perform a copy even when marked as constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:106,Performance,optimiz,optimizations,106,// Don't promote to an alignment that would require dynamic stack; // realignment which may conflict with optimizations such as tail call; // optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:142,Performance,optimiz,optimization,142,// Don't promote to an alignment that would require dynamic stack; // realignment which may conflict with optimizations such as tail call; // optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:22,Performance,load,loads,22,// Prepare AAInfo for loads/stores after lowering this memcpy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:24,Performance,load,load,24,// Issuing an unaligned load / store pair that overlaps with the previous; // pair. Adjust the offset accordingly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:107,Performance,load,load,107,// It's unlikely a store of a vector immediate can be done in a single; // instruction. It would require a load from a constantpool first.; // We only handle zero vectors here.; // FIXME: Handle other cases where store of vector immediate is done in; // a single instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:28,Security,access,access,28,// This is an out-of-bounds access and hence UB. Pretend we read zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:171,Performance,Load,LoadExt,171,"// The type might not be legal for the target. This should only happen; // if the type is smaller than a legal type, as on PPC, so the right; // thing to do is generate a LoadExt/StoreTrunc pair. These simplify; // to Load/Store if NVT==VT.; // FIXME does the case above also need this?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:218,Performance,Load,Load,218,"// The type might not be legal for the target. This should only happen; // if the type is smaller than a legal type, as on PPC, so the right; // thing to do is generate a LoadExt/StoreTrunc pair. These simplify; // to Load/Store if NVT==VT.; // FIXME does the case above also need this?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:202,Usability,simpl,simplify,202,"// The type might not be legal for the target. This should only happen; // if the type is smaller than a legal type, as on PPC, so the right; // thing to do is generate a LoadExt/StoreTrunc pair. These simplify; // to Load/Store if NVT==VT.; // FIXME does the case above also need this?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:117,Performance,load,loads,117,"// It may be that memcpy might be converted to memset if it's memcpy; // of constants. In such a case, we won't have loads and stores, but; // just stores. In the absence of loads, there is nothing to gang up.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:174,Performance,load,loads,174,"// It may be that memcpy might be converted to memset if it's memcpy; // of constants. In such a case, we won't have loads and stores, but; // just stores. In the absence of loads, there is nothing to gang up.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:33,Performance,load,load,33,// Expand memmove to a series of load and store ops if the size operand falls; // below a certain threshold.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:106,Performance,optimiz,optimizations,106,// Don't promote to an alignment that would require dynamic stack; // realignment which may conflict with optimizations such as tail call; // optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:142,Performance,optimiz,optimization,142,// Don't promote to an alignment that would require dynamic stack; // realignment which may conflict with optimizations such as tail call; // optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:22,Performance,load,loads,22,// Prepare AAInfo for loads/stores after lowering this memmove.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:236,Integrability,depend,dependency,236,"/// Lower the call to 'memset' intrinsic function into a series of store; /// operations.; ///; /// \param DAG Selection DAG where lowered code is placed.; /// \param dl Link to corresponding IR location.; /// \param Chain Control flow dependency.; /// \param Dst Pointer to destination memory location.; /// \param Src Value of byte to write into the memory.; /// \param Size Number of bytes to write.; /// \param Alignment Alignment of the destination in bytes.; /// \param isVol True if destination is volatile.; /// \param AlwaysInline Makes sure no function call is generated.; /// \param DstPtrInfo IR information on the memory pointer.; /// \returns New head in the control flow, if lowering was successful, empty; /// SDValue otherwise.; ///; /// The function tries to replace 'llvm.memset' intrinsic with several store; /// operations and value calculation code. This is usually profitable for small; /// memory size or when the semantic requires inlining.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:32,Performance,load,load,32,// Expand memset to a series of load/store ops if the size operand; // falls below a certain threshold.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:106,Performance,optimiz,optimizations,106,// Don't promote to an alignment that would require dynamic stack; // realignment which may conflict with optimizations such as tail call; // optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:142,Performance,optimiz,optimization,142,// Don't promote to an alignment that would require dynamic stack; // realignment which may conflict with optimizations such as tail call; // optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:22,Performance,load,loads,22,// Prepare AAInfo for loads/stores after lowering this memset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:24,Performance,load,load,24,// Issuing an unaligned load / store pair that overlaps with the previous; // pair. Adjust the offset accordingly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:49,Performance,load,loads,49,"// Check to see if we should lower the memcpy to loads and stores first.; // For cases within the target-specified limits, this is the best choice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:113,Performance,load,loads,113,"// If we really need inline code and the target declined to provide it,; // use a (potentially long) sequence of loads and stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:108,Safety,safe,safe,108,"// FIXME: If the memcpy is volatile (isVol), lowering it to a plain libc; // memcpy is not guaranteed to be safe. libc memcpys aren't required to; // respect volatile, so they may do things like read or write memory; // beyond the given memory regions. But fixing this isn't easy, and most; // people don't care.; // Emit a library call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:50,Performance,load,loads,50,"// Check to see if we should lower the memmove to loads and stores first.; // For cases within the target-specified limits, this is the best choice.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:87,Safety,safe,safe,87,"// FIXME: If the memmove is volatile, lowering it to plain libc memmove may; // not be safe. See memcpy above for more details.; // Emit a library call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:113,Performance,load,loads,113,"// If we really need inline code and the target declined to provide it,; // use a (potentially long) sequence of loads and stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:69,Usability,simpl,simplify,69,"// If we don't have a PtrInfo, infer the trivial frame index case to simplify; // clients.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:3,Modifiability,Extend,Extending,3,// Extending load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:13,Performance,load,load,13,// Extending load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:69,Usability,simpl,simplify,69,"// If we don't have a PtrInfo, infer the trivial frame index case to simplify; // clients.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:69,Usability,simpl,simplify,69,"// If we don't have a PtrInfo, infer the trivial frame index case to simplify; // clients.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:21,Usability,simpl,simplify,21,// TODO: This should simplify VSELECT with non-zero constant condition using; // something like this (but check boolean contents to be complete?):,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:93,Safety,avoid,avoid,93,"// shift X, C >= bitwidth(X) --> undef; // All vector elements must be too big (or undef) to avoid partial undefs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:87,Testability,log,logic,87,// Copy from an SDUse array into an SDValue array for use with; // the regular getNode logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:14,Usability,simpl,simplify,14,// Attempt to simplify BUILD_VECTOR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:26,Availability,mask,mask,26,// If it is VP_ADD/VP_SUB mask operation then turn it to VP_XOR,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:19,Availability,mask,mask,19,// If it is VP_MUL mask operation then turn it to VP_AND,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:26,Availability,mask,mask,26,// If it is VP_REDUCE_MUL mask operation then turn it to VP_REDUCE_AND,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:26,Availability,mask,mask,26,// If it is VP_REDUCE_ADD mask operation then turn it to VP_REDUCE_XOR,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:42,Availability,mask,mask,42,// If it is VP_REDUCE_SMAX/VP_REDUCE_UMIN mask operation then turn it to; // VP_REDUCE_AND.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:42,Availability,mask,mask,42,// If it is VP_REDUCE_SMIN/VP_REDUCE_UMAX mask operation then turn it to; // VP_REDUCE_OR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:28,Safety,safe,safely,28,// FIXME: figure out how to safely handle things like; // int foo(int x) { return 1 << (x & 255); }; // int bar() { return foo(256); },MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:22,Availability,mask,masking,22,"// If the and is only masking out bits that cannot effect the shift,; // eliminate the and.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:4,Deployability,Update,UpdateNodeOperands,4,"/// UpdateNodeOperands - *Mutate* the specified node in-place to have the; /// specified operands. If the resultant node already exists in the DAG,; /// this does not modify the specified node, instead it returns the node that; /// already exists. If the resultant node does not exist in the DAG, the; /// input node is returned. As a degenerate case, if you specify the same; /// input operands as the node already has, the input node is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:10,Deployability,update,update,10,// Now we update the operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:10,Deployability,update,update,10,// Now we update the operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:10,Deployability,update,update,10,// Now we update the operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:19,Deployability,Release,Release,19,/// DropOperands - Release the operands and set this node to have; /// zero operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:19,Safety,avoid,avoid,19,// Check if we can avoid allocating by storing a single reference directly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:29,Integrability,wrap,wrappers,29,/// SelectNodeTo - These are wrappers around MorphNodeTo that accept a; /// machine opcode.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:4,Deployability,Update,UpdateSDLocOnMergeSDNode,4,"/// UpdateSDLocOnMergeSDNode - If the opt level is -O0 then it throws away; /// the line number information on the merged node since it is not possible to; /// preserve the information that operation is associated with multiple lines.; /// This will make the debugger working better at -O0, were there is a higher; /// probability having other instructions associated with that line.; ///; /// For IROrder, we keep the smaller of the two",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:825,Deployability,update,updated,825,"/// MorphNodeTo - This *mutates* the specified node to have the specified; /// return type, opcode, and operands.; ///; /// Note that MorphNodeTo returns the resultant node. If there is already a; /// node of the specified opcode and operands, it returns that node instead of; /// the current one. Note that the SDLoc need not be the same.; ///; /// Using MorphNodeTo is faster than creating a new node and swapping it in; /// with ReplaceAllUsesWith both because it often avoids allocating a new; /// node, and because it doesn't require CSE recalculation for any of; /// the node's users.; ///; /// However, note that MorphNodeTo recursively deletes dead nodes from the DAG.; /// As a consequence it isn't appropriate to use from within the DAG combiner or; /// the legalizer which maintain worklists that would need to be updated when; /// deleting things.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:473,Safety,avoid,avoids,473,"/// MorphNodeTo - This *mutates* the specified node to have the specified; /// return type, opcode, and operands.; ///; /// Note that MorphNodeTo returns the resultant node. If there is already a; /// node of the specified opcode and operands, it returns that node instead of; /// the current one. Note that the SDLoc need not be the same.; ///; /// Using MorphNodeTo is faster than creating a new node and swapping it in; /// with ReplaceAllUsesWith both because it often avoids allocating a new; /// node, and because it doesn't require CSE recalculation for any of; /// the node's users.; ///; /// However, note that MorphNodeTo recursively deletes dead nodes from the DAG.; /// As a consequence it isn't appropriate to use from within the DAG combiner or; /// the legalizer which maintain worklists that would need to be updated when; /// deleting things.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:3,Usability,Clear,Clear,3,"// Clear the operands list, updating used nodes to remove this from their; // use list. Keep track of any operands that become dead as a result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:141,Deployability,update,updates,141,"// MorphNodeTo can operate in two ways: if an existing node with the; // specified operands exists, it can just return it. Otherwise, it; // updates the node in place to have the requested operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:9,Deployability,update,updated,9,"// If we updated the node in place, reset the node ID. To the isel,; // this should be just like a newly allocated machine node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:105,Energy Efficiency,allocate,allocated,105,"// If we updated the node in place, reset the node ID. To the isel,; // this should be just like a newly allocated machine node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate a new MachineSDNode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:61,Availability,avail,available,61,"/// getNodeIfExists - Get the specified node if it's already available, or; /// else return NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:20,Integrability,depend,dependencies,20,/// FrameIndex with dependencies,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:43,Availability,Redundant,Redundant,43,"// PR35338; // TODO: assert(From != To && ""Redundant dbg value transfer"");; // TODO: assert(FromNode != ToNode && ""Intranode dbg value transfer"");",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:43,Safety,Redund,Redundant,43,"// PR35338; // TODO: assert(From != To && ""Redundant dbg value transfer"");; // TODO: assert(FromNode != ToNode && ""Intranode dbg value transfer"");",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:21,Testability,assert,assert,21,"// PR35338; // TODO: assert(From != To && ""Redundant dbg value transfer"");; // TODO: assert(FromNode != ToNode && ""Intranode dbg value transfer"");",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:85,Testability,assert,assert,85,"// PR35338; // TODO: assert(From != To && ""Redundant dbg value transfer"");; // TODO: assert(FromNode != ToNode && ""Intranode dbg value transfer"");",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:9,Testability,assert,assert,9,"// TODO: assert(!Dbg->isInvalidated() && ""Transfer of invalid dbg value"");; // Create a new location ops vector that is equal to the old vector, but; // with each instance of FromLocOp replaced with ToLocOp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:31,Deployability,update,update,31,"// If a fragment is requested, update the expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:39,Modifiability,extend,extended,39,"// When splitting a larger (e.g., sign-extended) value whose; // lower bits are described with an SDDbgValue, do not attempt; // to transfer the SDDbgValue to the upper bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:3,Modifiability,Rewrite,Rewrite,3,"// Rewrite an ADD constant node into a DIExpression. Since we are; // performing arithmetic to compute the variable's *value* in the; // DIExpression, we need to mark the expression with a; // DW_OP_stack_value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:107,Modifiability,variab,variable,107,"// Rewrite an ADD constant node into a DIExpression. Since we are; // performing arithmetic to compute the variable's *value* in the; // DIExpression, we need to mark the expression with a; // DW_OP_stack_value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:70,Performance,perform,performing,70,"// Rewrite an ADD constant node into a DIExpression. Since we are; // performing arithmetic to compute the variable's *value* in the; // DIExpression, we need to mark the expression with a; // DW_OP_stack_value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:145,Modifiability,variab,variable,145,"// Convert to a variadic expression (if not already).; // convertToVariadicExpression() returns a const pointer, so we use; // a temporary const variable here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:117,Safety,avoid,avoid,117,"// Iterate over all the existing uses of From. New uses will be added; // to the beginning of the use list, which we avoid visiting.; // This specifically avoids visiting uses of From that arise while the; // replacement is happening, because any such uses would be the result; // of CSE: If an existing node looks like From after one of its operands; // is replaced by To, we don't want to replace of all its users with To; // too. See PR3018 for more info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:155,Safety,avoid,avoids,155,"// Iterate over all the existing uses of From. New uses will be added; // to the beginning of the use list, which we avoid visiting.; // This specifically avoids visiting uses of From that arise while the; // replacement is happening, because any such uses would be the result; // of CSE: If an existing node looks like From after one of its operands; // is replaced by To, we don't want to replace of all its users with To; // too. See PR3018 for more info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:142,Energy Efficiency,reduce,reduce,142,"// A user can appear in a use list multiple times, and when this; // happens the uses are usually next to each other in the list.; // To help reduce the number of CSE recomputations, process all; // the uses of this user that we can find this way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:142,Energy Efficiency,reduce,reduce,142,"// A user can appear in a use list multiple times, and when this; // happens the uses are usually next to each other in the list.; // To help reduce the number of CSE recomputations, process all; // the uses of this user that we can find this way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:26,Energy Efficiency,efficient,efficiently,26,// Handle the simple case efficiently.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:14,Usability,simpl,simple,14,// Handle the simple case efficiently.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:138,Energy Efficiency,reduce,reduce,138,"// A user can appear in a use list multiple times, and when this happens the; // uses are usually next to each other in the list. To help reduce the; // number of CSE and divergence recomputations, process all the uses of this; // user that we can find this way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:49,Energy Efficiency,efficient,efficiently,49,"// Handle the really simple, really trivial case efficiently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:21,Usability,simpl,simple,21,"// Handle the really simple, really trivial case efficiently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:36,Energy Efficiency,efficient,efficiently,36,"// Handle the simple, trivial, case efficiently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:14,Usability,simpl,simple,14,"// Handle the simple, trivial, case efficiently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:142,Energy Efficiency,reduce,reduce,142,"// A user can appear in a use list multiple times, and when this; // happens the uses are usually next to each other in the list.; // To help reduce the number of CSE recomputations, process all; // the uses of this user that we can find this way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:35,Energy Efficiency,efficient,efficiently,35,"// Handle the simple, trivial case efficiently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:14,Usability,simpl,simple,14,"// Handle the simple, trivial case efficiently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:81,Deployability,update,update,81,"// We know that this user uses some value of From. If it is the right; // value, update it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:49,Deployability,update,updates,49,"// If the node has been deleted by recursive CSE updates when updating; // another node, then just skip this entry.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:114,Energy Efficiency,reduce,reduce,114,"// The Uses array is sorted, so all the uses for a given User; // are next to each other in the list.; // To help reduce the number of CSE recomputations, process all; // the uses of this user that we can find this way.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:3,Deployability,Update,Update,3,// Update P's outstanding operand count.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:178,Deployability,update,update,178,// The new memory operation must have the same position as the old load in; // terms of memory dependency. Create a TokenFactor for the old load and new; // memory operation and update uses of the old load's output chain to use that; // TokenFactor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:95,Integrability,depend,dependency,95,// The new memory operation must have the same position as the old load in; // terms of memory dependency. Create a TokenFactor for the old load and new; // memory operation and update uses of the old load's output chain to use that; // TokenFactor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:67,Performance,load,load,67,// The new memory operation must have the same position as the old load in; // terms of memory dependency. Create a TokenFactor for the old load and new; // memory operation and update uses of the old load's output chain to use that; // TokenFactor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:140,Performance,load,load,140,// The new memory operation must have the same position as the old load in; // terms of memory dependency. Create a TokenFactor for the old load and new; // memory operation and update uses of the old load's output chain to use that; // TokenFactor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:201,Performance,load,load,201,// The new memory operation must have the same position as the old load in; // terms of memory dependency. Create a TokenFactor for the old load and new; // memory operation and update uses of the old load's output chain to use that; // TokenFactor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:55,Integrability,depend,depending,55,"// Neutral element for fminnum is NaN, Inf or FLT_MAX, depending on FMF.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:269,Performance,scalab,scalable,269,// We check here that the size of the memory operand fits within the size of; // the MMO. This is because the MMO might indicate only a possible address; // range instead of specifying the affected memory addresses precisely.; // TODO: Make MachineMemOperands aware of scalable vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:291,Energy Efficiency,efficient,efficient,291,"/// reachesChainWithoutSideEffects - Return true if this operand (which must; /// be a chain) reaches the specified operand without crossing any; /// side-effecting instructions on any chain path. In practice, this looks; /// through token factors and non-volatile loads. In order to remain efficient,; /// this only looks a couple of nodes in, it does not do an exhaustive search.; ///; /// Note that we only need to examine chains when we're searching for; /// side-effects; SelectionDAG requires that all side-effects are represented; /// by chains, even if another operand would force a specific ordering. This; /// constraint is necessary to allow transformations like splitting loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:265,Performance,load,loads,265,"/// reachesChainWithoutSideEffects - Return true if this operand (which must; /// be a chain) reaches the specified operand without crossing any; /// side-effecting instructions on any chain path. In practice, this looks; /// through token factors and non-volatile loads. In order to remain efficient,; /// this only looks a couple of nodes in, it does not do an exhaustive search.; ///; /// Note that we only need to examine chains when we're searching for; /// side-effects; SelectionDAG requires that all side-effects are represented; /// by chains, even if another operand would force a specific ordering. This; /// constraint is necessary to allow transformations like splitting loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:684,Performance,load,loads,684,"/// reachesChainWithoutSideEffects - Return true if this operand (which must; /// be a chain) reaches the specified operand without crossing any; /// side-effecting instructions on any chain path. In practice, this looks; /// through token factors and non-volatile loads. In order to remain efficient,; /// this only looks a couple of nodes in, it does not do an exhaustive search.; ///; /// Note that we only need to examine chains when we're searching for; /// side-effects; SelectionDAG requires that all side-effects are represented; /// by chains, even if another operand would force a specific ordering. This; /// constraint is necessary to allow transformations like splitting loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:171,Usability,simpl,simple,171,"// We found the chain we want as an operand of this TokenFactor.; // Essentially, we reach the chain without side-effects if we could; // serialize the TokenFactor into a simple chain of operations with; // Dest as the last operation. This is automatically true if the; // chain has one use: there are no other ordering constraints.; // If the chain has more than one use, we give up: some other; // use of Dest might force a side-effect between Dest and the current; // node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:3,Performance,Load,Loads,3,"// Loads don't have side effects, look through them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:264,Availability,mask,mask,264,"// At each stage, we're looking for something that looks like:; // %s = shufflevector <8 x i32> %op, <8 x i32> undef,; // <8 x i32> <i32 2, i32 3, i32 undef, i32 undef,; // i32 undef, i32 undef, i32 undef, i32 undef>; // %a = binop <8 x i32> %op, %s; // Where the mask changes according to the stage. E.g. for a 3-stage pyramid,; // we expect something like:; // <4,5,6,7,u,u,u,u>; // <2,3,u,u,u,u,u,u>; // <1,u,u,u,u,u,u,u>; // While a partial reduction match would be:; // <2,3,u,u,u,u,u,u>; // <1,u,u,u,u,u,u,u>",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:70,Availability,mask,mask,70,// Verify the shuffle has the expected (at this stage of the pyramid) mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:45,Performance,load,load,45,/// InferPtrAlignment - Infer alignment of a load / store address. Return; /// std::nullopt if it cannot be inferred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:91,Integrability,depend,dependent,91,"/// GetDependentSplitDestVTs - Compute the VTs needed for the low/hi parts of a; /// type, dependent on an enveloping VT that has been split into two identical; /// pieces. Sets the HiIsEmpty flag when hi type has zero storage size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:7,Performance,scalab,scalable,7,"// For scalable vectors it is safe to use LoVT.getVectorMinNumElements(); // (rather than having to use ElementCount), because EXTRACT_SUBVECTOR scales; // IDX with the runtime scaling factor of the result vector type. For; // fixed-width result vectors, that runtime scaling factor is 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:30,Safety,safe,safe,30,"// For scalable vectors it is safe to use LoVT.getVectorMinNumElements(); // (rather than having to use ElementCount), because EXTRACT_SUBVECTOR scales; // IDX with the runtime scaling factor of the result vector type. For; // fixed-width result vectors, that runtime scaling factor is 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:36,Energy Efficiency,power,power,36,/// Widen the vector up to the next power of two using INSERT_SUBVECTOR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:144,Usability,clear,cleared,144,"// Get the bits. Bits with undefined values (when the corresponding element; // of the vector is an ISD::UNDEF value) are set in SplatUndef and cleared; // in SplatValue. If any of the values are not constant, give up and return; // false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:320,Energy Efficiency,power,power-of-,320,// FIXME: The loop above only tries to split in halves. But if the input; // vector for example is <3 x i16> it wouldn't be able to detect a; // SplatBitSize of 16. No idea if that is a design flaw currently limiting; // optimizations. I guess that back in the days when this helper was created; // vectors normally was power-of-2 sized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:221,Performance,optimiz,optimizations,221,// FIXME: The loop above only tries to split in halves. But if the input; // vector for example is <3 x i16> it wouldn't be able to detect a; // SplatBitSize of 16. No idea if that is a design flaw currently limiting; // optimizations. I guess that back in the days when this helper was created; // vectors normally was power-of-2 sized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:132,Safety,detect,detect,132,// FIXME: The loop above only tries to split in halves. But if the input; // vector for example is <3 x i16> it wouldn't be able to detect a; // SplatBitSize of 16. No idea if that is a design flaw currently limiting; // optimizations. I guess that back in the days when this helper was created; // vectors normally was power-of-2 sized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:49,Availability,mask,mask,49,// Find the first non-undef value in the shuffle mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:112,Usability,simpl,simplified,112,"// If all elements are undefined, this shuffle can be considered a splat; // (although it should eventually get simplified away completely).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:55,Integrability,depend,depending,55,"// Neutral element for fminnum is NaN, Inf or FLT_MAX, depending on FMF.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:51,Integrability,depend,depending,51,"// Neutral element for fminimum is Inf or FLT_MAX, depending on FMF.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:548,Performance,load,load,548,"/// Helper used to make a call to a library function that has one argument of; /// pointer type.; ///; /// Such functions include 'fegetmode', 'fesetenv' and some others, which are; /// used to get or set floating-point state. They have one argument of pointer; /// type, which points to the memory region containing bits of the; /// floating-point state. The value returned by such function is ignored in the; /// created call.; ///; /// \param LibFunc Reference to library function (value of RTLIB::Libcall).; /// \param Ptr Pointer used to save/load state.; /// \param InChain Ingoing token chain.; /// \returns Outgoing chain token.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:144,Integrability,depend,depends,144,"// No deep copy required for the types of extra info set.; //; // FIXME: Investigate if other types of extra info also need deep copy. This; // depends on the types of nodes they can be attached to: if some extra info; // is only ever attached to nodes where a replacement To node is always the; // node where later use and propagation of the extra info has the intended; // semantics, no deep copy is required.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:481,Safety,avoid,avoids,481,"// We need to copy NodeExtraInfo to all _new_ nodes that are being introduced; // through the replacement of From with To. Otherwise, replacements of a node; // (From) with more complex nodes (To and its operands) may result in lost; // extra info where the root node (To) is insignificant in further propagating; // and using extra info when further lowering to MIR.; //; // In the first step pre-populate the visited set with the nodes reachable; // from the old From node. This avoids copying NodeExtraInfo to parts of the; // DAG that is not new and should be left untouched.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:158,Performance,perform,performance,158,"// We first try with a lower MaxDepth, assuming that the path to common; // operands between From and To is relatively short. This significantly; // improves performance in the common case. The initial MaxDepth is big; // enough to avoid retry in the common case; the last MaxDepth is large; // enough to avoid having to use the fallback below (and protects from; // potential stack exhaustion from recursion).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:232,Safety,avoid,avoid,232,"// We first try with a lower MaxDepth, assuming that the path to common; // operands between From and To is relatively short. This significantly; // improves performance in the common case. The initial MaxDepth is big; // enough to avoid retry in the common case; the last MaxDepth is large; // enough to avoid having to use the fallback below (and protects from; // potential stack exhaustion from recursion).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:305,Safety,avoid,avoid,305,"// We first try with a lower MaxDepth, assuming that the path to common; // operands between From and To is relatively short. This significantly; // improves performance in the common case. The initial MaxDepth is big; // enough to avoid retry in the common case; the last MaxDepth is large; // enough to avoid having to use the fallback below (and protects from; // potential stack exhaustion from recursion).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp:27,Testability,assert,assertions,27,// Best-effort fallback if assertions disabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAG.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp:123,Performance,load,load,123,"// If the size of memory access is unknown, do not use it to analysis.; // One example of unknown size memory access is to load/store scalable; // vector objects on the stack.; // BasePtr1 is PtrDiff away from BasePtr0. They alias if none of the; // following situations arise:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp:134,Performance,scalab,scalable,134,"// If the size of memory access is unknown, do not use it to analysis.; // One example of unknown size memory access is to load/store scalable; // vector objects on the stack.; // BasePtr1 is PtrDiff away from BasePtr0. They alias if none of the; // following situations arise:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp:25,Security,access,access,25,"// If the size of memory access is unknown, do not use it to analysis.; // One example of unknown size memory access is to load/store scalable; // vector objects on the stack.; // BasePtr1 is PtrDiff away from BasePtr0. They alias if none of the; // following situations arise:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp:110,Security,access,access,110,"// If the size of memory access is unknown, do not use it to analysis.; // One example of unknown size memory access is to load/store scalable; // vector objects on the stack.; // BasePtr1 is PtrDiff away from BasePtr0. They alias if none of the; // following situations arise:",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp:370,Modifiability,variab,variables,370,"// It doesn't make sense to access one global value using another globals; // values address, so we can assume that there is no aliasing in case of; // two different globals (unless we have symbols that may indirectly point; // to each other).; // FIXME: This is perhaps a bit too defensive. We could try to follow the; // chain with aliasee information for GlobalAlias variables to find out if; // we indirect symbols may alias or not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp:28,Security,access,access,28,"// It doesn't make sense to access one global value using another globals; // values address, so we can assume that there is no aliasing in case of; // two different globals (unless we have symbols that may indirectly point; // to each other).; // FIXME: This is perhaps a bit too defensive. We could try to follow the; // chain with aliasee information for GlobalAlias variables to find out if; // we indirect symbols may alias or not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp:48,Availability,mask,masking,48,// Consume constant adds & ors with appropriate masking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGAddressAnalysis.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:399,Integrability,rout,routines,399,"//===- SelectionDAGBuilder.cpp - Selection-DAG building -------------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements routines for translating from LLVM IR into SelectionDAG IR.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:150,Performance,load,load,150,"// Limit the width of DAG chains. This is important in general to prevent; // DAG-based analysis from blowing up. For example, alias analysis and; // load clustering may not complete in reasonable time. It is difficult to; // recognize and avoid this situation within each individual analysis, and; // future analyses are likely to have the same behavior. Limiting DAG width is; // the safe approach and will be especially important with global DAGs.; //; // MaxParallelChains default is arbitrarily high to avoid affecting; // optimization, but could be lowered to improve compile time. Any ld-ld-st-st; // sequence over this should have been converted to llvm.memcpy by the; // frontend. It is easy to induce this behavior with .ll code such as:; // %buffer = alloca [4096 x i8]; // %data = load [4096 x i8]* %argPtr; // store [4096 x i8] %data, [4096 x i8]* %buffer",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:528,Performance,optimiz,optimization,528,"// Limit the width of DAG chains. This is important in general to prevent; // DAG-based analysis from blowing up. For example, alias analysis and; // load clustering may not complete in reasonable time. It is difficult to; // recognize and avoid this situation within each individual analysis, and; // future analyses are likely to have the same behavior. Limiting DAG width is; // the safe approach and will be especially important with global DAGs.; //; // MaxParallelChains default is arbitrarily high to avoid affecting; // optimization, but could be lowered to improve compile time. Any ld-ld-st-st; // sequence over this should have been converted to llvm.memcpy by the; // frontend. It is easy to induce this behavior with .ll code such as:; // %buffer = alloca [4096 x i8]; // %data = load [4096 x i8]* %argPtr; // store [4096 x i8] %data, [4096 x i8]* %buffer",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:793,Performance,load,load,793,"// Limit the width of DAG chains. This is important in general to prevent; // DAG-based analysis from blowing up. For example, alias analysis and; // load clustering may not complete in reasonable time. It is difficult to; // recognize and avoid this situation within each individual analysis, and; // future analyses are likely to have the same behavior. Limiting DAG width is; // the safe approach and will be especially important with global DAGs.; //; // MaxParallelChains default is arbitrarily high to avoid affecting; // optimization, but could be lowered to improve compile time. Any ld-ld-st-st; // sequence over this should have been converted to llvm.memcpy by the; // frontend. It is easy to induce this behavior with .ll code such as:; // %buffer = alloca [4096 x i8]; // %data = load [4096 x i8]* %argPtr; // store [4096 x i8] %data, [4096 x i8]* %buffer",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:240,Safety,avoid,avoid,240,"// Limit the width of DAG chains. This is important in general to prevent; // DAG-based analysis from blowing up. For example, alias analysis and; // load clustering may not complete in reasonable time. It is difficult to; // recognize and avoid this situation within each individual analysis, and; // future analyses are likely to have the same behavior. Limiting DAG width is; // the safe approach and will be especially important with global DAGs.; //; // MaxParallelChains default is arbitrarily high to avoid affecting; // optimization, but could be lowered to improve compile time. Any ld-ld-st-st; // sequence over this should have been converted to llvm.memcpy by the; // frontend. It is easy to induce this behavior with .ll code such as:; // %buffer = alloca [4096 x i8]; // %data = load [4096 x i8]* %argPtr; // store [4096 x i8] %data, [4096 x i8]* %buffer",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:386,Safety,safe,safe,386,"// Limit the width of DAG chains. This is important in general to prevent; // DAG-based analysis from blowing up. For example, alias analysis and; // load clustering may not complete in reasonable time. It is difficult to; // recognize and avoid this situation within each individual analysis, and; // future analyses are likely to have the same behavior. Limiting DAG width is; // the safe approach and will be especially important with global DAGs.; //; // MaxParallelChains default is arbitrarily high to avoid affecting; // optimization, but could be lowered to improve compile time. Any ld-ld-st-st; // sequence over this should have been converted to llvm.memcpy by the; // frontend. It is easy to induce this behavior with .ll code such as:; // %buffer = alloca [4096 x i8]; // %data = load [4096 x i8]* %argPtr; // store [4096 x i8] %data, [4096 x i8]* %buffer",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:508,Safety,avoid,avoid,508,"// Limit the width of DAG chains. This is important in general to prevent; // DAG-based analysis from blowing up. For example, alias analysis and; // load clustering may not complete in reasonable time. It is difficult to; // recognize and avoid this situation within each individual analysis, and; // future analyses are likely to have the same behavior. Limiting DAG width is; // the safe approach and will be especially important with global DAGs.; //; // MaxParallelChains default is arbitrarily high to avoid affecting; // optimization, but could be lowered to improve compile time. Any ld-ld-st-st; // sequence over this should have been converted to llvm.memcpy by the; // frontend. It is easy to induce this behavior with .ll code such as:; // %buffer = alloca [4096 x i8]; // %data = load [4096 x i8]* %argPtr; // store [4096 x i8] %data, [4096 x i8]* %buffer",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:291,Modifiability,extend,extended,291,/// getCopyFromParts - Create a value that contains the specified legal parts; /// combined into the value they represent. If the parts combine to a type; /// larger than ValueVT then AssertOp can be used to specify whether the extra; /// bits are known to be zero (ISD::AssertZext) or sign extended from ValueVT; /// (ISD::AssertSext).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:184,Testability,Assert,AssertOp,184,/// getCopyFromParts - Create a value that contains the specified legal parts; /// combined into the value they represent. If the parts combine to a type; /// larger than ValueVT then AssertOp can be used to specify whether the extra; /// bits are known to be zero (ISD::AssertZext) or sign extended from ValueVT; /// (ISD::AssertSext).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:271,Testability,Assert,AssertZext,271,/// getCopyFromParts - Create a value that contains the specified legal parts; /// combined into the value they represent. If the parts combine to a type; /// larger than ValueVT then AssertOp can be used to specify whether the extra; /// bits are known to be zero (ISD::AssertZext) or sign extended from ValueVT; /// (ISD::AssertSext).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:324,Testability,Assert,AssertSext,324,/// getCopyFromParts - Create a value that contains the specified legal parts; /// combined into the value they represent. If the parts combine to a type; /// larger than ValueVT then AssertOp can be used to specify whether the extra; /// bits are known to be zero (ISD::AssertZext) or sign extended from ValueVT; /// (ISD::AssertSext).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:16,Energy Efficiency,power,power,16,// Assemble the power of 2 part.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:29,Energy Efficiency,power,power-of-,29,// Assemble the trailing non-power-of-2 part.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:297,Modifiability,extend,extended,297,/// getCopyFromPartsVector - Create a value that contains the specified legal; /// parts combined into the value they represent. If the parts combine to a; /// type larger than ValueVT then AssertOp can be used to specify whether the; /// extra bits are known to be zero (ISD::AssertZext) or sign extended from; /// ValueVT (ISD::AssertSext).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:190,Testability,Assert,AssertOp,190,/// getCopyFromPartsVector - Create a value that contains the specified legal; /// parts combined into the value they represent. If the parts combine to a; /// type larger than ValueVT then AssertOp can be used to specify whether the; /// extra bits are known to be zero (ISD::AssertZext) or sign extended from; /// ValueVT (ISD::AssertSext).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:277,Testability,Assert,AssertZext,277,/// getCopyFromPartsVector - Create a value that contains the specified legal; /// parts combined into the value they represent. If the parts combine to a; /// type larger than ValueVT then AssertOp can be used to specify whether the; /// extra bits are known to be zero (ISD::AssertZext) or sign extended from; /// ValueVT (ISD::AssertSext).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:330,Testability,Assert,AssertSext,330,/// getCopyFromPartsVector - Create a value that contains the specified legal; /// parts combined into the value they represent. If the parts combine to a; /// type larger than ValueVT then AssertOp can be used to specify whether the; /// extra bits are known to be zero (ISD::AssertZext) or sign extended from; /// ValueVT (ISD::AssertSext).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:174,Modifiability,Extend,ExtendKind,174,"/// getCopyToParts - Create a series of nodes that contain the specified value; /// split into legal parts. If the parts contain more bits than Val, then, for; /// integers, ExtendKind can be used to specify how to generate the extra bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:38,Modifiability,extend,extended,38,"// FP values need to be bitcast, then extended if they are being put; // into a larger container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:32,Energy Efficiency,power,power,32,// The number of parts is not a power of 2. Split off and copy the tail.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:28,Energy Efficiency,power,power,28,// The number of parts is a power of 2. Repeatedly bisect the value using; // EXTRACT_ELEMENT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:80,Performance,scalab,scalable,80,"// We only support widening vectors with equivalent element types and; // fixed/scalable properties. If a target needs to widen a fixed-length type; // to a scalable one, it should be possible to use INSERT_SUBVECTOR below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:157,Performance,scalab,scalable,157,"// We only support widening vectors with equivalent element types and; // fixed/scalable properties. If a target needs to widen a fixed-length type; // to a scalable one, it should be possible to use INSERT_SUBVECTOR below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:14,Performance,scalab,scalable,14,// Widening a scalable vector to another scalable vector is done by inserting; // the vector into a larger undef one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:41,Performance,scalab,scalable,41,// Widening a scalable vector to another scalable vector is done by inserting; // the vector into a larger undef one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:36,Performance,scalab,scalable,36,// This does something sensible for scalable vectors - see the; // definition of EXTRACT_SUBVECTOR for further details.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:84,Testability,assert,assert,84,"// If the source register was virtual and if we know something about it,; // add an assert node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:90,Performance,optimiz,optimizations,90,// The current value is a zero.; // Explicitly express that as it would be easier for; // optimizations to kick in.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:101,Testability,assert,assertzext,101,"// FIXME: We capture more information than the dag can represent. For; // now, just use the tightest assertzext/assertsext possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:112,Testability,assert,assertsext,112,"// FIXME: We capture more information than the dag can represent. For; // now, just use the tightest assertzext/assertsext possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:10,Testability,assert,assertion,10,// Add an assertion node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:160,Energy Efficiency,schedul,scheduling,160,"// If NumRegs > 1 && Glue is used then the use of the last CopyToReg is; // flagged to it. That is the CopyToReg nodes and the user are considered; // a single scheduling unit. If we create a TokenFactor and return it as; // chain, then the TokenFactor is both a predecessor (operand) of the; // user as well as a successor (the TF operands are flagged to the user).; // c1, f1 = CopyToReg; // c2, f2 = CopyToReg; // c3 = TokenFactor c1, c2; // ...; // = op c3, ..., f2",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:191,Testability,log,logic,191,"// Clobbers should always have a 1:1 mapping with registers, and may; // reference registers that have illegal (e.g. vector) types. Hence, we; // shouldn't try to apply any sort of splitting logic to them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update DAG root to include dependencies on Pending chains.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:30,Integrability,depend,dependencies,30,// Update DAG root to include dependencies on Pending chains.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:71,Integrability,depend,depend,71,"// Add current root to PendingChains, unless we already indirectly; // depend on it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:47,Integrability,depend,depend,47,// Don't add the root if we already indirectly depend on it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:77,Performance,load,loads,77,"// Chain up all pending constrained intrinsics together with all; // pending loads, by simply appending them to PendingLoads and; // then calling getMemoryRoot().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:87,Usability,simpl,simply,87,"// Chain up all pending constrained intrinsics together with all; // pending loads, by simply appending them to PendingLoads and; // then calling getMemoryRoot().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:200,Availability,redundant,redundant,200,"// We must early-exit here to prevent any DPValues from being emitted below,; // as we have just emitted the debug values resulting from assignment; // tracking analysis, making any existing DPValues redundant (and probably; // less correct).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:200,Safety,redund,redundant,200,"// We must early-exit here to prevent any DPValues from being emitted below,; // as we have just emitted the debug values resulting from assignment; // tracking analysis, making any existing DPValues redundant (and probably; // less correct).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:86,Availability,recover,recover,86,// For variadic dbg_values we will now insert an undef.; // FIXME: We can potentially recover these!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:86,Safety,recover,recover,86,// For variadic dbg_values we will now insert an undef.; // FIXME: We can potentially recover these!,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:360,Safety,avoid,avoid,360,"// FIXME: I doubt that it is correct to resolve a dangling DbgValue as a; // FuncArgumentDbgValue (it would be hoisted to the function entry, and if; // we couldn't resolve it directly when examining the DbgValue intrinsic; // in the first place we should not be more successful here). Unless we; // have some test case that prove this to be correct we should avoid; // calling EmitFuncArgumentDbgValue here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:310,Testability,test,test,310,"// FIXME: I doubt that it is correct to resolve a dangling DbgValue as a; // FuncArgumentDbgValue (it would be hoisted to the function entry, and if; // we couldn't resolve it directly when examining the DbgValue intrinsic; // in the first place we should not be more successful here). Unless we; // have some test case that prove this to be correct we should avoid; // calling EmitFuncArgumentDbgValue here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:194,Energy Efficiency,Schedul,ScheduleDAGSDNodes,194,// Increase the SDNodeOrder for the DbgValue here to make sure it is; // inserted after the definition of Val when emitting the instructions; // after ISel. An alternative could be to teach; // ScheduleDAGSDNodes::EmitSchedule to delay the insertion properly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:188,Availability,recover,recover,188,"// Attempt to salvage back through as many instructions as possible. Bail if; // a non-instruction is seen, such as a constant expression or global; // variable. FIXME: Further work could recover those too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:152,Modifiability,variab,variable,152,"// Attempt to salvage back through as many instructions as possible. Bail if; // a non-instruction is seen, such as a constant expression or global; // variable. FIXME: Further work could recover those too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:188,Safety,recover,recover,188,"// Attempt to salvage back through as many instructions as possible. Bail if; // a non-instruction is seen, such as a constant expression or global; // variable. FIXME: Further work could recover those too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:16,Usability,simpl,simplification,16,// Some kind of simplification occurred: check whether the operand of the; // salvaged debug expression can be encoded in this DAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:169,Modifiability,variab,variable,169,"// This was the final opportunity to salvage this debug information, and it; // couldn't be done. Place an undef DBG_VALUE at this location to terminate; // any earlier variable location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:407,Modifiability,variab,variables,407,"// Construct a FrameIndexDbgValue for FrameIndexSDNodes so we can; // describe stack slot locations.; //; // Consider ""int x = 0; int *px = &x;"". There are two kinds of; // interesting debug values here after optimization:; //; // dbg.value(i32* %px, !""int *px"", !DIExpression()), and; // dbg.value(i32* %px, !""int x"", !DIExpression(DW_OP_deref)); //; // Both describe the direct values of their associated variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:209,Performance,optimiz,optimization,209,"// Construct a FrameIndexDbgValue for FrameIndexSDNodes so we can; // describe stack slot locations.; //; // Consider ""int x = 0; int *px = &x;"". There are two kinds of; // interesting debug values here after optimization:; //; // dbg.value(i32* %px, !""int *px"", !DIExpression()), and; // dbg.value(i32* %px, !""int x"", !DIExpression(DW_OP_deref)); //; // Both describe the direct values of their associated variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:61,Modifiability,variab,variables,61,"// Special rules apply for the first dbg.values of parameter variables in a; // function. Identify them by the fact they reference Argument Values, that; // they're parameters, and they are parameters of the current function. We; // need to let them dangle until they get an SDNode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:16,Performance,scalab,scalable,16,// TODO: handle scalable vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:14,Usability,simpl,simple,14,// We can use simple vreg locations for variadic dbg_values as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:52,Energy Efficiency,allocate,allocated,52,/// getCopyFromRegs - If there was virtual register allocated for the value V; /// emit CopyFromReg of the specified type Ty. Return empty SDValue() otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:33,Energy Efficiency,allocate,allocated,33,"// If there's a virtual register allocated and initialized for this; // value, use it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update machine-CFG edge.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:43,Performance,optimiz,optimizations,43,"// If this is not a fall-through branch or optimizations are switched off,; // emit the branch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:753,Usability,simpl,simpler,753,"// In wasm EH, even though a catchpad may not catch an exception if a tag does; // not match, it is OK to add only the first unwind destination catchpad to the; // successors, because there will be at least one invoke instruction within the; // catch scope that points to the next unwind destination, if one exists, so; // CFGSort cannot mess up with BB sorting order.; // (All catchpads with 'catch (type)' clauses have a 'llvm.rethrow' intrinsic; // call within them, and catchpads only consisting of 'catch (...)' have a; // '__cxa_end_catch' call within them, both of which generate invokes in case; // the next unwind destination exists, i.e., the next unwind destination is not; // the caller.); //; // Having at most one EH pad successor is also simpler and helps later; // transformations.; //; // For example,; // current:; // invoke void @foo to ... unwind label %catch.dispatch; // catch.dispatch:; // %0 = catchswitch within ... [label %catch.start] unwind label %next; // catch.start:; // ...; // ... in this BB or some other child BB dominated by this BB there will be an; // invoke that points to 'next' BB as an unwind destination; //; // next: ; We don't need to add this to 'current' BB's successor; // ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update successor info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:120,Performance,load,load,120,// Emit a store of the return value through the virtual register.; // Leave Outs empty so that LowerReturn won't try to load return; // registers the usual way.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:36,Integrability,wrap,wrap,36,"// An aggregate return value cannot wrap around the address space, so; // offsets to its parts don't wrap either.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:101,Integrability,wrap,wrap,101,"// An aggregate return value cannot wrap around the address space, so; // offsets to its parts don't wrap either.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update the DAG with the new chain value resulting from return lowering.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:17,Availability,avail,available,17,"// If BPI is not available, set the default probability as 1 / N, where N is; // the number of successors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update machine-CFG edges.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update machine-CFG edges.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:43,Performance,optimiz,optimizations,43,"// If this is not a fall-through branch or optimizations are switched off,; // emit the branch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:359,Performance,perform,performance,359,"// If this is a series of conditions that are or'd or and'd together, emit; // this as a sequence of branches instead of setcc's with and/or operations.; // As long as jumps are not expensive (exceptions for multi-use logic ops,; // unpredictable branches, and vector extracts because those jumps are likely; // expensive for any target), this should improve performance.; // For example, instead of something like:; // cmp A, B; // C = seteq; // cmp D, E; // F = setle; // or C, F; // jnz foo; // Emit:; // cmp A, B; // je foo; // cmp D, E; // jle foo",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:218,Testability,log,logic,218,"// If this is a series of conditions that are or'd or and'd together, emit; // this as a sequence of branches instead of setcc's with and/or operations.; // As long as jumps are not expensive (exceptions for multi-use logic ops,; // unpredictable branches, and vector extracts because those jumps are likely; // expensive for any target), this should improve performance.; // For example, instead of something like:; // cmp A, B; // C = seteq; // cmp D, E; // F = setle; // or C, F; // jnz foo; // Emit:; // cmp A, B; // je foo; // cmp D, E; // jle foo",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:66,Usability,clear,clear,66,"// Okay, we decided not to do this, remove any inserted MBB's and clear; // SwitchCases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:91,Modifiability,extend,extended,91,// If a pointer's DAG type is larger than its memory type then the DAG; // values are zero-extended. This breaks signed comparisons so truncate; // back to the underlying type before doing the compare.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update successor info,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:107,Performance,optimiz,optimizations,107,"// Insert the false branch. Do this even if it's a fall through branch,; // this makes it easier to do DAG optimizations which require inverting; // the branch condition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Safety,Avoid,Avoid,3,// Avoid emitting unnecessary branches to the next block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Safety,Avoid,Avoid,3,// Avoid emitting unnecessary branches to the next block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:85,Modifiability,variab,variable,85,"/// Create a LOAD_STACK_GUARD node, and let it carry the target specific global; /// variable if there exists one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:20,Performance,load,loads,20,// First create the loads to the guard/stack slot for the comparison.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:20,Performance,load,load,20,// Generate code to load the content of the guard slot.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:49,Security,validat,validate,49,// The target provides a guard check function to validate the guard value.; // Generate a call to that function with the content of the guard slot as; // argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:100,Performance,load,load,100,"// If useLoadStackGuardNode returns true, generate LOAD_STACK_GUARD.; // Otherwise, emit a volatile load to retrieve the stack guard value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Performance,Perform,Perform,3,// Perform the comparison via a getsetcc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:50,Availability,failure,failure,50,"// If the guard/stackslot do not equal, branch to failure MBB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:16,Availability,failure,failure,16,/// Codegen the failure basic block for a stack protector check.; ///; /// A failure stack protector machine basic block consists simply of a call to; /// __stack_chk_fail().; ///; /// For a high level explanation of how this fits into the stack protector; /// generation see the comment on the declaration of class; /// StackProtectorDescriptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:77,Availability,failure,failure,77,/// Codegen the failure basic block for a stack protector check.; ///; /// A failure stack protector machine basic block consists simply of a call to; /// __stack_chk_fail().; ///; /// For a high level explanation of how this fits into the stack protector; /// generation see the comment on the declaration of class; /// StackProtectorDescriptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:130,Usability,simpl,simply,130,/// Codegen the failure basic block for a stack protector check.; ///; /// A failure stack protector machine basic block consists simply of a call to; /// __stack_chk_fail().; ///; /// For a high level explanation of how this fits into the stack protector; /// generation see the comment on the declaration of class; /// StackProtectorDescriptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:100,Testability,test,tests,100,"/// visitBitTestHeader - This function emits necessary code to produce value; /// suitable for ""bit tests""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:29,Testability,test,test,29,// Determine the type of the test operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:54,Availability,mask,masks,54,"// Switch table case range are encoded into series of masks.; // Just use pointer type, it's guaranteed to fit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Safety,Avoid,Avoid,3,// Avoid emitting unnecessary branches to the next block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:55,Testability,test,test,55,"/// visitBitTestCase - this function produces one ""bit test""",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Testability,Test,Testing,3,// Testing for a single bit; just compare the shift count with what it; // would need to be to shift a 1 bit in that position.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:44,Testability,test,test,44,"// There is only one zero bit in the range, test for it directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:12,Testability,test,tests,12,// Emit bit tests and jumps,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Safety,Avoid,Avoid,3,// Avoid emitting unnecessary branches to the next block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:81,Availability,avail,available,81,"// If the value of the invoke is used outside of its defining block, make it; // available as a virtual register.; // We already took care of the exported value for the statepoint instruction; // during call to the LowerStatepoint.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update successor info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update successor info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update JTCases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update BitTestCases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update machine-CFG edges with unique successors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:97,Performance,optimiz,optimization,97,// Coerce the shift amount to the right type if we can. This exposes the; // truncate or zext to optimization early.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:61,Security,expose,exposes,61,// Coerce the shift amount to the right type if we can. This exposes the; // truncate or zext to optimization early.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:91,Modifiability,extend,extended,91,// If a pointer's DAG type is larger than its memory type then the DAG values; // are zero-extended. This breaks signed comparisons so truncate back to the; // underlying type before doing the compare.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:14,Integrability,depend,depends,14,"// What to do depends on the size of the integer and the size of the pointer.; // We can either truncate, zero extend, or no-op, accordingly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:111,Modifiability,extend,extend,111,"// What to do depends on the size of the integer and the size of the pointer.; // We can either truncate, zero extend, or no-op, accordingly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:14,Integrability,depend,depends,14,"// What to do depends on the size of the integer and the size of the pointer.; // We can either truncate, zero extend, or no-op, accordingly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:111,Modifiability,extend,extend,111,"// What to do depends on the size of the integer and the size of the pointer.; // We can either truncate, zero extend, or no-op, accordingly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:38,Performance,scalab,scalable,38,"// For now, we only handle splats for scalable vectors.; // The DAGCombiner will perform a BUILD_VECTOR -> SPLAT_VECTOR transformation; // for targets that support a SPLAT_VECTOR for non-scalable vector types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:81,Performance,perform,perform,81,"// For now, we only handle splats for scalable vectors.; // The DAGCombiner will perform a BUILD_VECTOR -> SPLAT_VECTOR transformation; // for targets that support a SPLAT_VECTOR for non-scalable vector types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:187,Performance,scalab,scalable,187,"// For now, we only handle splats for scalable vectors.; // The DAGCombiner will perform a BUILD_VECTOR -> SPLAT_VECTOR transformation; // for targets that support a SPLAT_VECTOR for non-scalable vector types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:38,Availability,mask,mask,38,// Normalize the shuffle vector since mask and vector length don't match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Availability,Mask,Mask,3,// Mask is longer than the source vectors. We can use concatenate vector to; // make the mask and vectors lengths match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:89,Availability,mask,mask,89,// Mask is longer than the source vectors. We can use concatenate vector to; // make the mask and vectors lengths match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Availability,Mask,Mask,3,// Mask length is a multiple of the source vector length.; // Check if the shuffle is some kind of concatenation of the input; // vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:68,Availability,mask,mask,68,// Pad both vectors with undefs to make them the same length as the mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:12,Availability,mask,mask,12,// Readjust mask for new input vector length.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:15,Security,access,access,15,// Analyze the access pattern of the vector to see if we can extract; // two subvectors and do the shuffle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:41,Availability,Mask,MaskNumElts,41,// If all the indices come from the same MaskNumElts sized portion of; // the sources we can use extract. Also make sure the extract wouldn't; // extract past the end of the source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:23,Deployability,update,update,23,// Make sure we always update StartIdx as we use it to track if all; // elements are undef.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:17,Availability,mask,mask,17,// Calculate new mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:20,Availability,mask,mask,20,// We intentionally mask away the high bits here; ElementSize may not; // fit in IdxTy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:64,Modifiability,extend,extend,64,"// If the index is smaller or larger than intptr_t, truncate or extend; // it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:30,Energy Efficiency,power,power,30,"// If this is a multiply by a power of two, turn it into a shl; // immediately. This is a very common case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:75,Energy Efficiency,allocate,allocate,75,"// If this is a fixed sized alloca in the entry block of the function,; // allocate it statically on the stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Availability,Mask,Mask,3,// Mask out the low bits for alignment purposes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:270,Safety,safe,safe,270,"// If !noundef is not present, then !range violation results in a poison; // value rather than immediate undefined behavior. In theory, transferring; // these annotations to SDAG is fine, but in practice there are key SDAG; // transforms that are known not to be poison-safe, such as folding logical; // and/or to bitwise and/or. For now, only transfer !range if !noundef is; // also present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:292,Testability,log,logical,292,"// If !noundef is not present, then !range violation results in a poison; // value rather than immediate undefined behavior. In theory, transferring; // these annotations to SDAG is fine, but in practice there are key SDAG; // transforms that are known not to be poison-safe, such as folding logical; // and/or to bitwise and/or. For now, only transfer !range if !noundef is; // also present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:22,Performance,load,loads,22,// Serialize volatile loads with other side effects.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:35,Performance,load,loads,35,// Do not serialize (non-volatile) loads of constant memory with anything.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:33,Performance,load,loads,33,// Do not serialize non-volatile loads against each other.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:161,Availability,recover,recover,161,"// Serializing loads here may result in excessive register pressure, and; // TokenFactor places arbitrary choke points on the scheduler. SD scheduling; // could recover a bit by hoisting nodes upward in the chain by recognizing; // they are side-effect free or do not alias. The optimizer should really; // avoid this case by converting large object/array copies to llvm.memcpy; // (MaxParallelChains should always remain as failsafe).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:126,Energy Efficiency,schedul,scheduler,126,"// Serializing loads here may result in excessive register pressure, and; // TokenFactor places arbitrary choke points on the scheduler. SD scheduling; // could recover a bit by hoisting nodes upward in the chain by recognizing; // they are side-effect free or do not alias. The optimizer should really; // avoid this case by converting large object/array copies to llvm.memcpy; // (MaxParallelChains should always remain as failsafe).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:140,Energy Efficiency,schedul,scheduling,140,"// Serializing loads here may result in excessive register pressure, and; // TokenFactor places arbitrary choke points on the scheduler. SD scheduling; // could recover a bit by hoisting nodes upward in the chain by recognizing; // they are side-effect free or do not alias. The optimizer should really; // avoid this case by converting large object/array copies to llvm.memcpy; // (MaxParallelChains should always remain as failsafe).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:15,Performance,load,loads,15,"// Serializing loads here may result in excessive register pressure, and; // TokenFactor places arbitrary choke points on the scheduler. SD scheduling; // could recover a bit by hoisting nodes upward in the chain by recognizing; // they are side-effect free or do not alias. The optimizer should really; // avoid this case by converting large object/array copies to llvm.memcpy; // (MaxParallelChains should always remain as failsafe).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:279,Performance,optimiz,optimizer,279,"// Serializing loads here may result in excessive register pressure, and; // TokenFactor places arbitrary choke points on the scheduler. SD scheduling; // could recover a bit by hoisting nodes upward in the chain by recognizing; // they are side-effect free or do not alias. The optimizer should really; // avoid this case by converting large object/array copies to llvm.memcpy; // (MaxParallelChains should always remain as failsafe).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:161,Safety,recover,recover,161,"// Serializing loads here may result in excessive register pressure, and; // TokenFactor places arbitrary choke points on the scheduler. SD scheduling; // could recover a bit by hoisting nodes upward in the chain by recognizing; // they are side-effect free or do not alias. The optimizer should really; // avoid this case by converting large object/array copies to llvm.memcpy; // (MaxParallelChains should always remain as failsafe).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:307,Safety,avoid,avoid,307,"// Serializing loads here may result in excessive register pressure, and; // TokenFactor places arbitrary choke points on the scheduler. SD scheduling; // could recover a bit by hoisting nodes upward in the chain by recognizing; // they are side-effect free or do not alias. The optimizer should really; // avoid this case by converting large object/array copies to llvm.memcpy; // (MaxParallelChains should always remain as failsafe).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:35,Deployability,update,update,35,"// Create a virtual register, then update the virtual register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:8,Availability,mask,masked,8,"// llvm.masked.store.*(Src0, Ptr, alignment, Mask)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:45,Availability,Mask,Mask,45,"// llvm.masked.store.*(Src0, Ptr, alignment, Mask)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:8,Availability,mask,masked,8,"// llvm.masked.compressstore.*(Src0, Ptr, Mask)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:42,Availability,Mask,Mask,42,"// llvm.masked.compressstore.*(Src0, Ptr, Mask)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:540,Availability,mask,masked,540,"// Get a uniform base for the Gather/Scatter intrinsic.; // The first argument of the Gather/Scatter intrinsic is a vector of pointers.; // We try to represent it as a base pointer + vector of indices.; // Usually, the vector of pointers comes from a 'getelementptr' instruction.; // The first operand of the GEP may be a single pointer or a vector of pointers; // Example:; // %gep.ptr = getelementptr i32, <8 x i32*> %vptr, <8 x i32> %ind; // or; // %gep.ptr = getelementptr i32, i32* %ptr, <8 x i32> %ind; // %res = call <8 x i32> @llvm.masked.gather.v8i32(<8 x i32*> %gep.ptr, ..; //; // When the first GEP operand is a single pointer - it is the uniform base we; // are looking for. If first operand of the GEP is a splat vector - we; // extract the splat value and use it as a uniform base.; // In all other cases the function returns 'false'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:8,Availability,mask,masked,8,"// llvm.masked.scatter.*(Src0, Ptrs, alignment, Mask)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:48,Availability,Mask,Mask,48,"// llvm.masked.scatter.*(Src0, Ptrs, alignment, Mask)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:42,Performance,scalab,scalable,42,// TODO: Make MachineMemOperands aware of scalable; // vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:9,Availability,mask,masked,9,"// @llvm.masked.load.*(Ptr, alignment, Mask, Src0)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:39,Availability,Mask,Mask,39,"// @llvm.masked.load.*(Ptr, alignment, Mask, Src0)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:16,Performance,load,load,16,"// @llvm.masked.load.*(Ptr, alignment, Mask, Src0)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:9,Availability,mask,masked,9,"// @llvm.masked.expandload.*(Ptr, Mask, Src0)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:34,Availability,Mask,Mask,34,"// @llvm.masked.expandload.*(Ptr, Mask, Src0)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:20,Availability,mask,masked,20,// Do not serialize masked loads of constant memory with anything.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:27,Performance,load,loads,27,// Do not serialize masked loads of constant memory with anything.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:9,Availability,mask,masked,9,"// @llvm.masked.gather.*(Ptrs, alignment, Mask, Src0)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:42,Availability,Mask,Mask,42,"// @llvm.masked.gather.*(Ptrs, alignment, Mask, Src0)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:42,Performance,scalab,scalable,42,// TODO: Make MachineMemOperands aware of scalable; // vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:30,Performance,load,loads,30,// We don't need to serialize loads against other loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:50,Performance,load,loads,50,// We don't need to serialize loads against other loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:11,Testability,assert,assertalign,11,// Insert `assertalign` node if there's an alignment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:141,Availability,error,error,141,"// For floating-point precision of 6:; //; // TwoToFractionalPartOfX =; // 0.997535578f +; // (0.735607626f + 0.252464424f * x) * x;; //; // error 0.0144103317, which is 6 bits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:170,Availability,error,error,170,"// For floating-point precision of 12:; //; // TwoToFractionalPartOfX =; // 0.999892986f +; // (0.696457318f +; // (0.224338339f + 0.792043434e-1f * x) * x) * x;; //; // error 0.000107046256, which is 13 to 14 bits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:269,Availability,error,error,269,"// LimitFloatPrecision <= 18; // For floating-point precision of 18:; //; // TwoToFractionalPartOfX =; // 0.999999982f +; // (0.693148872f +; // (0.240227044f +; // (0.554906021e-1f +; // (0.961591928e-2f +; // (0.136028312e-2f + 0.157059148e-3f *x)*x)*x)*x)*x)*x;; // error 2.47208000*10^(-7), which is better than 18 bits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:24,Testability,log,log,24,/// expandLog - Lower a log intrinsic. Handles the special sequences for; /// limited-precision mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:25,Testability,log,log,25,// Scale the exponent by log(2).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:128,Availability,error,error,128,"// For floating-point precision of 6:; //; // LogofMantissa =; // -1.1609546f +; // (1.4034025f - 0.23903021f * x) * x;; //; // error 0.0034276066, which is better than 8 bits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:46,Testability,Log,LogofMantissa,46,"// For floating-point precision of 6:; //; // LogofMantissa =; // -1.1609546f +; // (1.4034025f - 0.23903021f * x) * x;; //; // error 0.0034276066, which is better than 8 bits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:180,Availability,error,error,180,"// For floating-point precision of 12:; //; // LogOfMantissa =; // -1.7417939f +; // (2.8212026f +; // (-1.4699568f +; // (0.44717955f - 0.56570851e-1f * x) * x) * x) * x;; //; // error 0.000061011436, which is 14 bits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:47,Testability,Log,LogOfMantissa,47,"// For floating-point precision of 12:; //; // LogOfMantissa =; // -1.7417939f +; // (2.8212026f +; // (-1.4699568f +; // (0.44717955f - 0.56570851e-1f * x) * x) * x) * x;; //; // error 0.000061011436, which is 14 bits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:256,Availability,error,error,256,"// LimitFloatPrecision <= 18; // For floating-point precision of 18:; //; // LogOfMantissa =; // -2.1072184f +; // (4.2372794f +; // (-3.7029485f +; // (2.2781945f +; // (-0.87823314f +; // (0.19073739f - 0.17809712e-1f * x) * x) * x) * x) * x)*x;; //; // error 0.0000023660568, which is better than 18 bits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:77,Testability,Log,LogOfMantissa,77,"// LimitFloatPrecision <= 18; // For floating-point precision of 18:; //; // LogOfMantissa =; // -2.1072184f +; // (4.2372794f +; // (-3.7029485f +; // (2.2781945f +; // (-0.87823314f +; // (0.19073739f - 0.17809712e-1f * x) * x) * x) * x) * x)*x;; //; // error 0.0000023660568, which is better than 18 bits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:120,Availability,error,error,120,"// For floating-point precision of 6:; //; // Log2ofMantissa = -1.6749035f + (2.0246817f - .34484768f * x) * x;; //; // error 0.0049451742, which is more than 7 bits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:185,Availability,error,error,185,"// For floating-point precision of 12:; //; // Log2ofMantissa =; // -2.51285454f +; // (4.07009056f +; // (-2.12067489f +; // (.645142248f - 0.816157886e-1f * x) * x) * x) * x;; //; // error 0.0000876136000, which is better than 13 bits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:262,Availability,error,error,262,"// LimitFloatPrecision <= 18; // For floating-point precision of 18:; //; // Log2ofMantissa =; // -3.0400495f +; // (6.1129976f +; // (-5.3420409f +; // (3.2865683f +; // (-1.2669343f +; // (0.27515199f -; // 0.25691327e-1f * x) * x) * x) * x) * x) * x;; //; // error 0.0000018516, which is better than 18 bits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:132,Availability,error,error,132,"// For floating-point precision of 6:; //; // Log10ofMantissa =; // -0.50419619f +; // (0.60948995f - 0.10380950f * x) * x;; //; // error 0.0014886165, which is 6 bits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:161,Availability,error,error,161,"// For floating-point precision of 12:; //; // Log10ofMantissa =; // -0.64831180f +; // (0.91751397f +; // (-0.31664806f + 0.47637168e-1f * x) * x) * x;; //; // error 0.00019228036, which is better than 12 bits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:238,Availability,error,error,238,"// LimitFloatPrecision <= 18; // For floating-point precision of 18:; //; // Log10ofMantissa =; // -0.84299375f +; // (1.5327582f +; // (-1.0688956f +; // (0.49102474f +; // (-0.12539807f + 0.13508273e-1f * x) * x) * x) * x) * x;; //; // error 0.0000037995730, which is better than 18 bits",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:14,Usability,simpl,simple,14,"// We use the simple binary decomposition method to generate the multiply; // sequence. There are more optimal ways to do this (for example,; // powi(x,15) generates one more multiply than it should), but this has; // the benefit of being both really simple and much better than a libcall.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:251,Usability,simpl,simple,251,"// We use the simple binary decomposition method to generate the multiply; // sequence. There are more optimal ways to do this (for example,; // powi(x,15) generates one more multiply than it should), but this has; // the benefit of being both really simple and much better than a libcall.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Testability,Log,Logically,3,// Logically starts equal to 1.0,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:427,Safety,avoid,avoiding,427,"// If the type is legal but the operation isn't, this node might survive all; // the way to operation legalization. If we end up there and we do not have; // the ability to widen the type (if VT*2 is not legal), we cannot expand the; // node.; // Coax the legalizer into expanding the node during type legalization instead; // by bumping the size by one bit. This will force it to Promote, enabling the; // early expansion and avoiding the need to expand later.; // We don't have to do this if Scale is 0; that can always be expanded, unless; // it's a saturating signed operation. Those can experience true integer; // division overflow, a case which we must avoid.; // FIXME: We wouldn't have to do this (or any of the early; // expansion/promotion) if it was possible to expand a libcall of an; // illegal type during operation legalization. But it's not, so things; // get a bit hacky.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:660,Safety,avoid,avoid,660,"// If the type is legal but the operation isn't, this node might survive all; // the way to operation legalization. If we end up there and we do not have; // the ability to widen the type (if VT*2 is not legal), we cannot expand the; // node.; // Coax the legalizer into expanding the node during type legalization instead; // by bumping the size by one bit. This will force it to Promote, enabling the; // early expansion and avoiding the need to expand later.; // We don't have to do this if Scale is 0; that can always be expanded, unless; // it's a saturating signed operation. Those can experience true integer; // division overflow, a case which we must avoid.; // FIXME: We wouldn't have to do this (or any of the early; // expansion/promotion) if it was possible to expand a libcall of an; // illegal type during operation legalization. But it's not, so things; // get a bit hacky.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:113,Availability,down,down,113,"// For saturating operations, we need to shift up the LHS to get the; // proper saturation width, and then shift down again afterwards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:50,Integrability,depend,depending,50,"// Helper to create DBG_INSTR_REFs or DBG_VALUEs, depending on what kind; // we've been asked to pursue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:110,Deployability,patch,patched,110,"// For VRegs, in instruction referencing mode, create a DBG_INSTR_REF; // pointing at the VReg, which will be patched up later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:150,Modifiability,variab,variable,150,"// ArgDbgValues are hoisted to the beginning of the entry block. So we; // should only emit as ArgDbgValue if the dbg.value intrinsic describes a; // variable that also is a param.; //; // Although, if we are at the top of the entry block already, we can still; // emit using ArgDbgValue. This might catch some situations when the; // dbg.value refers to an argument that isn't used in the entry block, so; // any CopyToReg node would be optimized out and the only way to express; // this DBG_VALUE is by using the physical reg (or FI) as done in this; // method. ArgDbgValues are hoisted to the beginning of the entry block. So; // we should only emit as ArgDbgValue if the Variable is an argument to the; // current function, and the dbg.value intrinsic is found in the entry; // block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:675,Modifiability,Variab,Variable,675,"// ArgDbgValues are hoisted to the beginning of the entry block. So we; // should only emit as ArgDbgValue if the dbg.value intrinsic describes a; // variable that also is a param.; //; // Although, if we are at the top of the entry block already, we can still; // emit using ArgDbgValue. This might catch some situations when the; // dbg.value refers to an argument that isn't used in the entry block, so; // any CopyToReg node would be optimized out and the only way to express; // this DBG_VALUE is by using the physical reg (or FI) as done in this; // method. ArgDbgValues are hoisted to the beginning of the entry block. So; // we should only emit as ArgDbgValue if the Variable is an argument to the; // current function, and the dbg.value intrinsic is found in the entry; // block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:438,Performance,optimiz,optimized,438,"// ArgDbgValues are hoisted to the beginning of the entry block. So we; // should only emit as ArgDbgValue if the dbg.value intrinsic describes a; // variable that also is a param.; //; // Although, if we are at the top of the entry block already, we can still; // emit using ArgDbgValue. This might catch some situations when the; // dbg.value refers to an argument that isn't used in the entry block, so; // any CopyToReg node would be optimized out and the only way to express; // this DBG_VALUE is by using the physical reg (or FI) as done in this; // method. ArgDbgValues are hoisted to the beginning of the entry block. So; // we should only emit as ArgDbgValue if the Variable is an argument to the; // current function, and the dbg.value intrinsic is found in the entry; // block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:27,Availability,avail,available,27,// Check if frame index is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:87,Modifiability,extend,extend,87,"// If the expression is already a fragment, the current register; // offset+size might extend beyond the fragment. In this case, only; // the register bits that are inside the fragment are relevant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:57,Modifiability,variab,variable,57,"// If a valid fragment expression cannot be created, the variable's; // correct value cannot be determined and so it is set as Undef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:407,Modifiability,variab,variables,407,"// Construct a FrameIndexDbgValue for FrameIndexSDNodes so we can describe; // stack slot locations.; //; // Consider ""int x = 0; int *px = &x;"". There are two kinds of interesting; // debug values here after optimization:; //; // dbg.value(i32* %px, !""int *px"", !DIExpression()), and; // dbg.value(i32* %px, !""int x"", !DIExpression(DW_OP_deref)); //; // Both describe the direct values of their associated variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:209,Performance,optimiz,optimization,209,"// Construct a FrameIndexDbgValue for FrameIndexSDNodes so we can describe; // stack slot locations.; //; // Consider ""int x = 0; int *px = &x;"". There are two kinds of interesting; // debug values here after optimization:; //; // dbg.value(i32* %px, !""int *px"", !DIExpression()), and; // dbg.value(i32* %px, !""int x"", !DIExpression(DW_OP_deref)); //; // Both describe the direct values of their associated variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:58,Performance,load,loading,58,"// If SET_FPENV is custom or legal, use it. Otherwise use loading; // environment from memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate space in stack, copy environment bits into it and use this; // memory in SET_FPENV_MEM.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:51,Performance,load,loads,51,"// Chain the prefetch in parallel with any pending loads, to stay out of; // the way of later optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:94,Performance,optimiz,optimizations,94,"// Chain the prefetch in parallel with any pending loads, to stay out of; // the way of later optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:38,Safety,avoid,avoid,38,// Create a MCSymbol for the label to avoid any target lowering; // that would make this PC relative.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:133,Safety,safe,safely,133,// Information this intrinsic contained has been transferred to; // MachineFunction in SelectionDAGISel::PrepareEHLandingPad. We can safely; // delete it now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:114,Availability,mask,mask,114,// We only have 2 actual args: one for the SGPRs and one for the VGPRs.; // We'll also tack the value of the EXEC mask at the end.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Modifiability,Extend,Extend,3,// Extend the trip count to at least the result VT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:105,Performance,load,loads,105,"// We do not need to serialize constrained FP intrinsics against; // each other or against (nonvolatile) loads, so they can be; // chained like loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:144,Performance,load,loads,144,"// We do not need to serialize constrained FP intrinsics against; // each other or against (nonvolatile) loads, so they can be; // chained like loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:86,Integrability,depend,depend,86,"// The only reason why ebIgnore nodes still need to be chained is that; // they might depend on the current rounding mode, and therefore must; // not be moved across instruction that may change that mode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:101,Availability,mask,masks,101,// These must not be moved across calls or instructions that may change; // floating-point exception masks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:101,Availability,mask,masks,101,"// These must not be moved across calls or instructions that may change; // floating-point exception masks or read floating-point exception flags.; // In addition, they cannot be optimized out even if unused.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:179,Performance,optimiz,optimized,179,"// These must not be moved across calls or instructions that may change; // floating-point exception masks or read floating-point exception flags.; // In addition, they cannot be optimized out even if unused.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:20,Modifiability,variab,variable-length,20,// Do not serialize variable-length loads of constant memory with; // anything.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:36,Performance,load,loads,36,// Do not serialize variable-length loads of constant memory with; // anything.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:88,Safety,detect,detect,88,// Insert a label before the invoke call to mark the try range. This can be; // used to detect deletion of the invoke via the MachineModuleInfo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:95,Safety,detect,detect,95,// Insert a label at the end of the invoke call to mark the try range. This; // can be used to detect deletion of the invoke via the MachineModuleInfo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:107,Deployability,update,updated,107,"// As a special case, a null chain means that a tail call has been emitted; // and the DAG root is already updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Safety,Avoid,Avoid,3,// Avoid emitting tail calls in functions with the disable-tail-calls; // attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:79,Integrability,depend,dependent,79,// Check if target-independent constraints permit a tail call here.; // Target-dependent constraints are checked within TLI->LowerCallTo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:84,Deployability,update,updated,84,// Disable tail calls if there is an swifterror argument. Targets have not; // been updated to support tail calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:119,Deployability,update,update,119,// The last element of CLI.InVals has the SDValue for swifterror return.; // Here we copy it to a virtual register and update SwiftErrorMap for; // book-keeping.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:24,Performance,load,load,24,"// Check to see if this load can be trivially constant folded, e.g. if the; // input is from a string literal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:46,Performance,load,load,46,// Cast pointer to the type we really want to load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:34,Performance,load,load,34,"// Otherwise, we have to emit the load. If the pointer is to unfoldable but; // still constant memory, the input chain can be the entry node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:35,Performance,load,loads,35,// Do not serialize (non-volatile) loads of constant memory with anything.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:33,Performance,load,loads,33,// Do not serialize non-volatile loads against each other.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:51,Performance,optimiz,optimized,51,"/// See if we can lower a memcmp/bcmp call into an optimized form. If so, return; /// true and lower it. Otherwise return false, and it will be lowered like a; /// normal call.; /// The caller already checked that \p I calls the appropriate LibFunc with a; /// correct prototype.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:87,Performance,load,load,87,"// If the target has a fast compare for the given size, it will return a; // preferred load type for that size. Require that the load VT is legal and; // that the target supports unaligned loads of that type. Otherwise, return; // INVALID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:129,Performance,load,load,129,"// If the target has a fast compare for the given size, it will return a; // preferred load type for that size. Require that the load VT is legal and; // that the target supports unaligned loads of that type. Otherwise, return; // INVALID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:189,Performance,load,loads,189,"// If the target has a fast compare for the given size, it will return a; // preferred load type for that size. Require that the load VT is legal and; // that the target supports unaligned loads of that type. Otherwise, return; // INVALID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:107,Performance,load,loads,107,// TODO: Handle 5 byte compare as 4-byte + 1 byte.; // TODO: Handle 8 byte compare on x86-32 as two 32-bit loads.; // TODO: Check alignment of src and dest ptrs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:29,Performance,load,loads,29,// This turns into unaligned loads. We only do this if the target natively; // supports the MVT we'll be loading or if it is small enough (<= 4) that; // we'll only produce a small number of byte loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:105,Performance,load,loading,105,// This turns into unaligned loads. We only do this if the target natively; // supports the MVT we'll be loading or if it is small enough (<= 4) that; // we'll only produce a small number of byte loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:196,Performance,load,loads,196,// This turns into unaligned loads. We only do this if the target natively; // supports the MVT we'll be loading or if it is small enough (<= 4) that; // we'll only produce a small number of byte loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:41,Performance,load,loads,41,// Bitcast to a wide integer type if the loads are vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:46,Performance,optimiz,optimized,46,"/// See if we can lower a memchr call into an optimized form. If so, return; /// true and lower it. Otherwise return false, and it will be lowered like a; /// normal call.; /// The caller already checked that \p I calls the appropriate LibFunc with a; /// correct prototype.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:47,Performance,optimiz,optimized,47,"/// See if we can lower a mempcpy call into an optimized form. If so, return; /// true and lower it. Otherwise return false, and it will be lowered like a; /// normal call.; /// The caller already checked that \p I calls the appropriate LibFunc with a; /// correct prototype.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:42,Modifiability,extend,extended,42,// Check if Size needs to be truncated or extended.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:46,Performance,optimiz,optimized,46,"/// See if we can lower a strcpy call into an optimized form. If so, return; /// true and lower it, otherwise return false and it will be lowered like a; /// normal call.; /// The caller already checked that \p I calls the appropriate LibFunc with a; /// correct prototype.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:46,Performance,optimiz,optimized,46,"/// See if we can lower a strcmp call into an optimized form. If so, return; /// true and lower it, otherwise return false and it will be lowered like a; /// normal call.; /// The caller already checked that \p I calls the appropriate LibFunc with a; /// correct prototype.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:46,Performance,optimiz,optimized,46,"/// See if we can lower a strlen call into an optimized form. If so, return; /// true and lower it, otherwise return false and it will be lowered like a; /// normal call.; /// The caller already checked that \p I calls the appropriate LibFunc with a; /// correct prototype.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:47,Performance,optimiz,optimized,47,"/// See if we can lower a strnlen call into an optimized form. If so, return; /// true and lower it, otherwise return false and it will be lowered like a; /// normal call.; /// The caller already checked that \p I calls the appropriate LibFunc with a; /// correct prototype.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:31,Performance,perform,perform,31,"// Check if we can potentially perform a tail call. More detailed checking; // is be done within LowerCallTo, after more information about the call is; // known.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:32,Security,access,accesses,32,/// Whether or not this operand accesses memory,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:20,Security,access,accesses,20,// Indirect operand accesses access memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:29,Security,access,access,29,// Indirect operand accesses access memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:179,Availability,error,error,179,// end anonymous namespace; /// Make sure that the output operand \p OpInfo and its corresponding input; /// operand \p MatchingOpInfo have compatible constraint types (otherwise error; /// out).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:10,Availability,error,error,10,// FIXME: error out in a more elegant fashion,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:159,Deployability,update,updated,159,"/// Get a direct memory input to behave well as an indirect operand.; /// This may introduce stores, hence the need for a \p Chain.; /// \return The (possibly updated) chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:23,Availability,failure,failure,23,// RC is unset only on failure. Return immediately.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:78,Performance,perform,perform,78,// Exclude indirect inputs while they are unsupported because the code; // to perform the load is missing and thus OpInfo.CallOperand still; // refers to the input address rather than the pointed-to value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:90,Performance,load,load,90,// Exclude indirect inputs while they are unsupported because the code; // to perform the load is missing and thus OpInfo.CallOperand still; // refers to the input address rather than the pointed-to value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:14,Energy Efficiency,allocate,allocate,14,// No need to allocate a matching input constraint since the constraint it's; // matching to has already been allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:110,Energy Efficiency,allocate,allocated,110,// No need to allocate a matching input constraint since the constraint it's; // matching to has already been allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:85,Security,access,access,85,"// In normal ""call dllimport func"" instruction (non-inlineasm) it force; // indirect access by specifing call opcode. And usually specially print; // asm with indirect symbol (i.g: ""*"") according to opcode. Inline asm can; // not do in this way now. (In fact, this is similar with ""Data Access""; // action). So here we ignore dllimport function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:287,Security,Access,Access,287,"// In normal ""call dllimport func"" instruction (non-inlineasm) it force; // indirect access by specifing call opcode. And usually specially print; // asm with indirect symbol (i.g: ""*"") according to opcode. Inline asm can; // not do in this way now. (In fact, this is similar with ""Data Access""; // action). So here we ignore dllimport function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:34,Performance,load,loads,34,// We won't need to flush pending loads if this asm doesn't touch; // memory and is nonvolatile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:225,Availability,error,error,225,"// If this is an output operand with a matching input operand, look up the; // matching input. If their types mismatch, e.g. one is an integer, the; // other is floating point, or their sizes are different, flag it as an; // error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:163,Modifiability,variab,variable,163,"// In Linux PIC model, there are 4 cases about value/label addressing:; //; // 1: Function call or Label jmp inside the module.; // 2: Data access (such as global variable, static variable) inside module.; // 3: Function call or Label jmp outside the module.; // 4: Data access (such as global variable) outside the module.; //; // Due to current llvm inline asm architecture designed to not ""recognize""; // the asm code, there are quite troubles for us to treat mem addressing; // differently for same value/adress used in different instuctions.; // For example, in pic model, call a func may in plt way or direclty; // pc-related, but lea/mov a function adress may use got.; //; // Here we try to ""recognize"" function call for the case 1 and case 3 in; // inline asm. And try to adjust the constraint for them.; //; // TODO: Due to current inline asm didn't encourage to jmp to the outsider; // label, so here we don't handle jmp function label now, but we need to; // enhance it (especilly in PIC model) if we meet meaningful requirements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:180,Modifiability,variab,variable,180,"// In Linux PIC model, there are 4 cases about value/label addressing:; //; // 1: Function call or Label jmp inside the module.; // 2: Data access (such as global variable, static variable) inside module.; // 3: Function call or Label jmp outside the module.; // 4: Data access (such as global variable) outside the module.; //; // Due to current llvm inline asm architecture designed to not ""recognize""; // the asm code, there are quite troubles for us to treat mem addressing; // differently for same value/adress used in different instuctions.; // For example, in pic model, call a func may in plt way or direclty; // pc-related, but lea/mov a function adress may use got.; //; // Here we try to ""recognize"" function call for the case 1 and case 3 in; // inline asm. And try to adjust the constraint for them.; //; // TODO: Due to current inline asm didn't encourage to jmp to the outsider; // label, so here we don't handle jmp function label now, but we need to; // enhance it (especilly in PIC model) if we meet meaningful requirements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:294,Modifiability,variab,variable,294,"// In Linux PIC model, there are 4 cases about value/label addressing:; //; // 1: Function call or Label jmp inside the module.; // 2: Data access (such as global variable, static variable) inside module.; // 3: Function call or Label jmp outside the module.; // 4: Data access (such as global variable) outside the module.; //; // Due to current llvm inline asm architecture designed to not ""recognize""; // the asm code, there are quite troubles for us to treat mem addressing; // differently for same value/adress used in different instuctions.; // For example, in pic model, call a func may in plt way or direclty; // pc-related, but lea/mov a function adress may use got.; //; // Here we try to ""recognize"" function call for the case 1 and case 3 in; // inline asm. And try to adjust the constraint for them.; //; // TODO: Due to current inline asm didn't encourage to jmp to the outsider; // label, so here we don't handle jmp function label now, but we need to; // enhance it (especilly in PIC model) if we meet meaningful requirements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:971,Modifiability,enhance,enhance,971,"// In Linux PIC model, there are 4 cases about value/label addressing:; //; // 1: Function call or Label jmp inside the module.; // 2: Data access (such as global variable, static variable) inside module.; // 3: Function call or Label jmp outside the module.; // 4: Data access (such as global variable) outside the module.; //; // Due to current llvm inline asm architecture designed to not ""recognize""; // the asm code, there are quite troubles for us to treat mem addressing; // differently for same value/adress used in different instuctions.; // For example, in pic model, call a func may in plt way or direclty; // pc-related, but lea/mov a function adress may use got.; //; // Here we try to ""recognize"" function call for the case 1 and case 3 in; // inline asm. And try to adjust the constraint for them.; //; // TODO: Due to current inline asm didn't encourage to jmp to the outsider; // label, so here we don't handle jmp function label now, but we need to; // enhance it (especilly in PIC model) if we meet meaningful requirements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:140,Security,access,access,140,"// In Linux PIC model, there are 4 cases about value/label addressing:; //; // 1: Function call or Label jmp inside the module.; // 2: Data access (such as global variable, static variable) inside module.; // 3: Function call or Label jmp outside the module.; // 4: Data access (such as global variable) outside the module.; //; // Due to current llvm inline asm architecture designed to not ""recognize""; // the asm code, there are quite troubles for us to treat mem addressing; // differently for same value/adress used in different instuctions.; // For example, in pic model, call a func may in plt way or direclty; // pc-related, but lea/mov a function adress may use got.; //; // Here we try to ""recognize"" function call for the case 1 and case 3 in; // inline asm. And try to adjust the constraint for them.; //; // TODO: Due to current inline asm didn't encourage to jmp to the outsider; // label, so here we don't handle jmp function label now, but we need to; // enhance it (especilly in PIC model) if we meet meaningful requirements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:271,Security,access,access,271,"// In Linux PIC model, there are 4 cases about value/label addressing:; //; // 1: Function call or Label jmp inside the module.; // 2: Data access (such as global variable, static variable) inside module.; // 3: Function call or Label jmp outside the module.; // 4: Data access (such as global variable) outside the module.; //; // Due to current llvm inline asm architecture designed to not ""recognize""; // the asm code, there are quite troubles for us to treat mem addressing; // differently for same value/adress used in different instuctions.; // For example, in pic model, call a func may in plt way or direclty; // pc-related, but lea/mov a function adress may use got.; //; // Here we try to ""recognize"" function call for the case 1 and case 3 in; // inline asm. And try to adjust the constraint for them.; //; // TODO: Due to current inline asm didn't encourage to jmp to the outsider; // label, so here we don't handle jmp function label now, but we need to; // enhance it (especilly in PIC model) if we meet meaningful requirements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:23,Testability,test,testsuite,23,// This happens on gcc/testsuite/gcc.dg/pr8788-1.c,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:326,Energy Efficiency,allocate,allocated,326,"// If the type of the inline asm call site return value is different but has; // same size as the type of the asm output bitcast it. One example of this; // is for vectors with different width / number of elements. This can; // happen for register classes that can contain multiple different value; // types. The preg or vreg allocated may not have the same VT as was; // expected.; //; // This can also happen for a return value that disagrees with the register; // class it is put in, eg. a double in a general-purpose register on a; // 32-bit machine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:8,Deployability,Update,Update,8,// Only Update Root if inline assembly has a memory effect.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:984,Availability,avail,available,984,"/// Add a stack map intrinsic call's live variable operands to a stackmap; /// or patchpoint target node's operand list.; ///; /// Constants are converted to TargetConstants purely as an optimization to; /// avoid constant materialization and register allocation.; ///; /// FrameIndex operands are converted to TargetFrameIndex so that ISEL does not; /// generate addess computation nodes, and so FinalizeISel can convert the; /// TargetFrameIndex into a DirectMemRefOp StackMap location. This avoids; /// address materialization and register allocation, but may also be required; /// for correctness. If a StackMap (or PatchPoint) intrinsic directly uses an; /// alloca in the entry block, then the runtime may assume that the alloca's; /// StackMap location can be read immediately after compilation and that the; /// location is valid at any point during execution (this is similar to the; /// assumption made by the llvm.gcroot intrinsic). If the alloca's location were; /// only available in a register, then the runtime would need to trap when; /// execution reaches the StackMap in order to read the alloca's location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:82,Deployability,patch,patchpoint,82,"/// Add a stack map intrinsic call's live variable operands to a stackmap; /// or patchpoint target node's operand list.; ///; /// Constants are converted to TargetConstants purely as an optimization to; /// avoid constant materialization and register allocation.; ///; /// FrameIndex operands are converted to TargetFrameIndex so that ISEL does not; /// generate addess computation nodes, and so FinalizeISel can convert the; /// TargetFrameIndex into a DirectMemRefOp StackMap location. This avoids; /// address materialization and register allocation, but may also be required; /// for correctness. If a StackMap (or PatchPoint) intrinsic directly uses an; /// alloca in the entry block, then the runtime may assume that the alloca's; /// StackMap location can be read immediately after compilation and that the; /// location is valid at any point during execution (this is similar to the; /// assumption made by the llvm.gcroot intrinsic). If the alloca's location were; /// only available in a register, then the runtime would need to trap when; /// execution reaches the StackMap in order to read the alloca's location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:620,Deployability,Patch,PatchPoint,620,"/// Add a stack map intrinsic call's live variable operands to a stackmap; /// or patchpoint target node's operand list.; ///; /// Constants are converted to TargetConstants purely as an optimization to; /// avoid constant materialization and register allocation.; ///; /// FrameIndex operands are converted to TargetFrameIndex so that ISEL does not; /// generate addess computation nodes, and so FinalizeISel can convert the; /// TargetFrameIndex into a DirectMemRefOp StackMap location. This avoids; /// address materialization and register allocation, but may also be required; /// for correctness. If a StackMap (or PatchPoint) intrinsic directly uses an; /// alloca in the entry block, then the runtime may assume that the alloca's; /// StackMap location can be read immediately after compilation and that the; /// location is valid at any point during execution (this is similar to the; /// assumption made by the llvm.gcroot intrinsic). If the alloca's location were; /// only available in a register, then the runtime would need to trap when; /// execution reaches the StackMap in order to read the alloca's location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:42,Modifiability,variab,variable,42,"/// Add a stack map intrinsic call's live variable operands to a stackmap; /// or patchpoint target node's operand list.; ///; /// Constants are converted to TargetConstants purely as an optimization to; /// avoid constant materialization and register allocation.; ///; /// FrameIndex operands are converted to TargetFrameIndex so that ISEL does not; /// generate addess computation nodes, and so FinalizeISel can convert the; /// TargetFrameIndex into a DirectMemRefOp StackMap location. This avoids; /// address materialization and register allocation, but may also be required; /// for correctness. If a StackMap (or PatchPoint) intrinsic directly uses an; /// alloca in the entry block, then the runtime may assume that the alloca's; /// StackMap location can be read immediately after compilation and that the; /// location is valid at any point during execution (this is similar to the; /// assumption made by the llvm.gcroot intrinsic). If the alloca's location were; /// only available in a register, then the runtime would need to trap when; /// execution reaches the StackMap in order to read the alloca's location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:187,Performance,optimiz,optimization,187,"/// Add a stack map intrinsic call's live variable operands to a stackmap; /// or patchpoint target node's operand list.; ///; /// Constants are converted to TargetConstants purely as an optimization to; /// avoid constant materialization and register allocation.; ///; /// FrameIndex operands are converted to TargetFrameIndex so that ISEL does not; /// generate addess computation nodes, and so FinalizeISel can convert the; /// TargetFrameIndex into a DirectMemRefOp StackMap location. This avoids; /// address materialization and register allocation, but may also be required; /// for correctness. If a StackMap (or PatchPoint) intrinsic directly uses an; /// alloca in the entry block, then the runtime may assume that the alloca's; /// StackMap location can be read immediately after compilation and that the; /// location is valid at any point during execution (this is similar to the; /// assumption made by the llvm.gcroot intrinsic). If the alloca's location were; /// only available in a register, then the runtime would need to trap when; /// execution reaches the StackMap in order to read the alloca's location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:208,Safety,avoid,avoid,208,"/// Add a stack map intrinsic call's live variable operands to a stackmap; /// or patchpoint target node's operand list.; ///; /// Constants are converted to TargetConstants purely as an optimization to; /// avoid constant materialization and register allocation.; ///; /// FrameIndex operands are converted to TargetFrameIndex so that ISEL does not; /// generate addess computation nodes, and so FinalizeISel can convert the; /// TargetFrameIndex into a DirectMemRefOp StackMap location. This avoids; /// address materialization and register allocation, but may also be required; /// for correctness. If a StackMap (or PatchPoint) intrinsic directly uses an; /// alloca in the entry block, then the runtime may assume that the alloca's; /// StackMap location can be read immediately after compilation and that the; /// location is valid at any point during execution (this is similar to the; /// assumption made by the llvm.gcroot intrinsic). If the alloca's location were; /// only available in a register, then the runtime would need to trap when; /// execution reaches the StackMap in order to read the alloca's location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:494,Safety,avoid,avoids,494,"/// Add a stack map intrinsic call's live variable operands to a stackmap; /// or patchpoint target node's operand list.; ///; /// Constants are converted to TargetConstants purely as an optimization to; /// avoid constant materialization and register allocation.; ///; /// FrameIndex operands are converted to TargetFrameIndex so that ISEL does not; /// generate addess computation nodes, and so FinalizeISel can convert the; /// TargetFrameIndex into a DirectMemRefOp StackMap location. This avoids; /// address materialization and register allocation, but may also be required; /// for correctness. If a StackMap (or PatchPoint) intrinsic directly uses an; /// alloca in the entry block, then the runtime may assume that the alloca's; /// StackMap location can be read immediately after compilation and that the; /// location is valid at any point during execution (this is similar to the; /// assumption made by the llvm.gcroot intrinsic). If the alloca's location were; /// only available in a register, then the runtime would need to trap when; /// execution reaches the StackMap in order to read the alloca's location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:78,Modifiability,variab,variables,78,"// void @llvm.experimental.stackmap(i64 <id>, i32 <numShadowBytes>,; // [live variables...])",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:133,Deployability,patch,patchpoint,133,"// The stackmap intrinsic only records the live variables (the arguments; // passed to it) and emits NOPS (if requested). Unlike the patchpoint; // intrinsic, this won't be lowered to a function call. This means we don't; // have to worry about calling conventions and target specific lowering code.; // Instead we perform the call lowering right here.; //; // chain, flag = CALLSEQ_START(chain, 0, 0); // chain, flag = STACKMAP(id, nbytes, ..., chain, flag); // chain, flag = CALLSEQ_END(chain, 0, 0, flag); //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:48,Modifiability,variab,variables,48,"// The stackmap intrinsic only records the live variables (the arguments; // passed to it) and emits NOPS (if requested). Unlike the patchpoint; // intrinsic, this won't be lowered to a function call. This means we don't; // have to worry about calling conventions and target specific lowering code.; // Instead we perform the call lowering right here.; //; // chain, flag = CALLSEQ_START(chain, 0, 0); // chain, flag = STACKMAP(id, nbytes, ..., chain, flag); // chain, flag = CALLSEQ_END(chain, 0, 0, flag); //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:315,Performance,perform,perform,315,"// The stackmap intrinsic only records the live variables (the arguments; // passed to it) and emits NOPS (if requested). Unlike the patchpoint; // intrinsic, this won't be lowered to a function call. This means we don't; // have to worry about calling conventions and target specific lowering code.; // Instead we perform the call lowering right here.; //; // chain, flag = CALLSEQ_START(chain, 0, 0); // chain, flag = STACKMAP(id, nbytes, ..., chain, flag); // chain, flag = CALLSEQ_END(chain, 0, 0, flag); //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:16,Modifiability,variab,variables,16,// Add the live variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:28,Deployability,patch,patchpoint,28,/// Lower llvm.experimental.patchpoint directly to its target opcode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:31,Deployability,patch,patchpoint,31,"// void|i64 @llvm.experimental.patchpoint.void|i64(i64 <id>,; // i32 <numBytes>,; // i8* <target>,; // i32 <numArgs>,; // [Args...],; // [live variables...])",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:143,Modifiability,variab,variables,143,"// void|i64 @llvm.experimental.patchpoint.void|i64(i64 <id>,; // i32 <numBytes>,; // i8* <target>,; // i32 <numArgs>,; // [Args...],; // [live variables...])",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:50,Deployability,patch,patchable,50,// Replace the target specific call node with the patchable intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:21,Availability,mask,mask,21,// Push the register mask info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:13,Modifiability,variab,variables,13,// Push live variables for the stack map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:48,Deployability,PATCH,PATCHPOINT,48,// Replace the target specific call node with a PATCHPOINT node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update the NodeMap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:47,Deployability,patch,patchpoint,47,// Inform the Frame Information that we have a patchpoint in this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:202,Deployability,integrat,integrated,202,"/// TargetLowering::LowerCallTo - This is the default LowerCallTo; /// implementation, which just calls LowerCall.; /// FIXME: When all targets are; /// migrated to using LowerCall, this hook should be integrated into SDISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:202,Integrability,integrat,integrated,202,"/// TargetLowering::LowerCallTo - This is the default LowerCallTo; /// implementation, which just calls LowerCall.; /// FIXME: When all targets are; /// migrated to using LowerCall, this hook should be integrated into SDISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:21,Testability,assert,assert,21,"// FIXME: equivalent assert?; // assert(!CS.hasInAllocaArgument() &&; // ""sret demotion is incompatible with inalloca"");",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:33,Testability,assert,assert,33,"// FIXME: equivalent assert?; // assert(!CS.hasInAllocaArgument() &&; // ""sret demotion is incompatible with inalloca"");",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:85,Integrability,depend,depending,85,"// Certain targets (such as MIPS), may have a different ABI alignment; // for a type depending on the context. Give the target a chance to; // specify the alignment it wants.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:140,Energy Efficiency,allocate,allocated,140,"// Set the byval flag for CCAssignFn callbacks that don't know about; // preallocated. This way we can know how many bytes we should've; // allocated and how many bytes a callee cleanup function will pop. If; // we port preallocated to more targets, we'll have to add custom; // preallocated handling in the various CC lowering callbacks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:132,Energy Efficiency,allocate,allocated,132,"// Set the byval flag for CCAssignFn callbacks that don't know about; // inalloca. This way we can know how many bytes we should've allocated; // and how many bytes a callee cleanup function will pop. If we port; // inalloca to more targets, we'll have to add custom inalloca handling; // in the various CC lowering callbacks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:181,Modifiability,extend,extended,181,"// Before passing 'returned' to the target lowering code, ensure that; // either the register MVT and the actual EVT are the same size or that; // the return value and argument are extended in the same way; in these; // cases it's safe to pass the argument register value unchanged as the; // return register value (although it's at the target's option whether; // to do so); // TODO: allow code generation to take advantage of partially preserved; // registers rather than clobbering the entire register when the; // parameter extension method is not compatible with the return; // extension method",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:231,Safety,safe,safe,231,"// Before passing 'returned' to the target lowering code, ensure that; // either the register MVT and the actual EVT are the same size or that; // the return value and argument are extended in the same way; in these; // cases it's safe to pass the argument register value unchanged as the; // return register value (although it's at the target's option whether; // to do so); // TODO: allow code generation to take advantage of partially preserved; // registers rather than clobbering the entire register when the; // parameter extension method is not compatible with the return; // extension method",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:56,Performance,scalab,scalable,56,"// if it isn't first piece, alignment must be 1; // For scalable vectors the scalable part is currently handled; // by individual targets, so we just use the known minimum size here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:77,Performance,scalab,scalable,77,"// if it isn't first piece, alignment must be 1; // For scalable vectors the scalable part is currently handled; // by individual targets, so we just use the known minimum size here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update CLI.InVals to use outside of this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:43,Performance,load,loading,43,// The instruction result is the result of loading from the; // hidden sret parameter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:36,Integrability,wrap,wrap,36,"// An aggregate return value cannot wrap around the address space, so; // offsets to its parts don't wrap either.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:101,Integrability,wrap,wrap,101,"// An aggregate return value cannot wrap around the address space, so; // offsets to its parts don't wrap either.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:95,Performance,load,load,95,/// Try to elide argument copies from memory into a local alloca. Succeeds if; /// ArgVal is a load from a suitable fixed stack object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:22,Performance,load,load,22,// Check if this is a load from a fixed stack object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:88,Modifiability,variab,variable,88,// Perform the elision. Delete the old stack object and replace its only use; // in the variable info map. Mark the stack object as mutable and aliased.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Performance,Perform,Perform,3,// Perform the elision. Delete the old stack object and replace its only use; // in the variable info map. Mark the stack object as mutable and aliased.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Safety,Avoid,Avoid,3,// Avoid emitting code for the store implementing the copy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:55,Safety,avoid,avoid,55,// Check for uses of the argument again so that we can avoid exporting ArgVal; // if it is't used by anything other than the store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:50,Availability,down,down,50,// NOTE: Assuming that a pointer will never break down to more than one VT; // or one register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:160,Availability,avail,available,160,// Look for stores of arguments to static allocas. Mark such arguments with a; // flag to ask the target to give us the memory location of that argument if; // available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:132,Energy Efficiency,allocate,allocated,132,"// Set the byval flag for CCAssignFn callbacks that don't know about; // inalloca. This way we can know how many bytes we should've allocated; // and how many bytes a callee cleanup function will pop. If we port; // inalloca to more targets, we'll have to add custom inalloca handling; // in the various CC lowering callbacks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:140,Energy Efficiency,allocate,allocated,140,"// Set the byval flag for CCAssignFn callbacks that don't know about; // preallocated. This way we can know how many bytes we should've; // allocated and how many bytes a callee cleanup function will pop. If; // we port preallocated to more targets, we'll have to add custom; // preallocated handling in the various CC lowering callbacks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:85,Integrability,depend,depending,85,"// Certain targets (such as MIPS), may have a different ABI alignment; // for a type depending on the context. Give the target a chance to; // specify the alignment it wants.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:7,Performance,scalab,scalable,7,"// For scalable vectors, use the minimum size; individual targets; // are responsible for handling scalable vector arguments and; // return values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:99,Performance,scalab,scalable,99,"// For scalable vectors, use the minimum size; individual targets; // are responsible for handling scalable vector arguments and; // return values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update the DAG with the new chain value resulting from argument lowering.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:41,Performance,load,loaded,41,// Elide the copying store if the target loaded this argument from a; // suitable fixed stack object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:8,Availability,down,down,8,// Note down frame index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:234,Integrability,depend,depending,234,"// We want to associate the argument with the frame index, among; // involved operands, that correspond to the lowest address. The; // getCopyFromParts function, called earlier, is swapping the order of; // the operands to BUILD_PAIR depending on endianness. The result of; // that swapping is that the least significant bits of the argument will; // be in the first operand of the BUILD_PAIR node, and the most; // significant bits will be in the second operand.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:58,Testability,assert,assertion,58,// Analyses past this point are naive and don't expect an assertion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update the SwiftErrorVRegDefMap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:66,Deployability,update,update,66,"// If any argument copy elisions occurred and we have debug info, update the; // stale frame indices used in the dbg.declare variable info table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:125,Modifiability,variab,variable,125,"// If any argument copy elisions occurred and we have debug info, update the; // stale frame indices used in the dbg.declare variable info table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:59,Availability,avail,available,59,// Check PHI nodes in successors that expect a value to be available from this; // block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:24,Modifiability,extend,extend,24,// We need to zero/sign extend ConstantInt phi operands to match; // assumptions in FunctionLoweringInfo::ComputePHILiveOutRegInfo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:220,Deployability,update,update,220,"/// During lowering new call nodes can be created (such as memset, etc.).; /// Those will become new roots of the current DAG, but complications arise; /// when they are tail calls. In such cases, the call lowering will update; /// the root, but the builder still needs to know that a tail call has been; /// lowered in order to avoid generating an additional return.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:329,Safety,avoid,avoid,329,"/// During lowering new call nodes can be created (such as memset, etc.).; /// Those will become new roots of the current DAG, but complications arise; /// when they are tail calls. In such cases, the call lowering will update; /// the root, but the builder still needs to know that a tail call has been; /// lowered in order to avoid generating an additional return.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:285,Modifiability,extend,extended,285,"// If any two of the cases has the same destination, and if one value; // is the same as the other, but has one bit unset that the other has set,; // use bit manipulation to do two compares at once. For example:; // ""if (X == 6 || X == 4)"" -> ""if ((X|2) == 6)""; // TODO: This could be extended to merge any 2 cases in switches with 3; // cases.; // TODO: Handle cases where W.CaseBB != SwitchBB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,"// Update successor info.; // Both Small and Big will jump to Small.BB, so we sum up the; // probabilities.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:45,Availability,avail,available,45,// Put Cond in a virtual register to make it available from the new blocks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:10,Performance,Optimiz,Optimize,10,// FIXME: Optimize away range check based on pivot comparisons.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:142,Deployability,update,update,142,"// If the default statement is a target of the jump table, we evenly; // distribute the default probability to successors of CurMBB. Also; // update the probability on the edge from JumpMBB to Fallthrough.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:508,Availability,avail,available,508,"// If the default clause is unreachable, propagate that knowledge into; // JTH->FallthroughUnreachable which will use it to suppress the range; // check.; //; // However, don't do this if we're doing branch target enforcement,; // because a table branch _without_ a range check can be a tempting JOP; // gadget - out-of-bounds inputs that are impossible in correct; // execution become possible again if an attacker can influence the; // control flow. So if an attacker doesn't already have a BTI bypass; // available, we don't want them to be able to get one out of this; // table branch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:407,Security,attack,attacker,407,"// If the default clause is unreachable, propagate that knowledge into; // JTH->FallthroughUnreachable which will use it to suppress the range; // check.; //; // However, don't do this if we're doing branch target enforcement,; // because a table branch _without_ a range check can be a tempting JOP; // gadget - out-of-bounds inputs that are impossible in correct; // execution become possible again if an attacker can influence the; // control flow. So if an attacker doesn't already have a BTI bypass; // available, we don't want them to be able to get one out of this; // table branch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:461,Security,attack,attacker,461,"// If the default clause is unreachable, propagate that knowledge into; // JTH->FallthroughUnreachable which will use it to suppress the range; // check.; //; // However, don't do this if we're doing branch target enforcement,; // because a table branch _without_ a range check can be a tempting JOP; // gadget - out-of-bounds inputs that are impossible in correct; // execution become possible again if an attacker can influence the; // control flow. So if an attacker doesn't already have a BTI bypass; // available, we don't want them to be able to get one out of this; // table branch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:10,Performance,Optimiz,Optimize,10,// FIXME: Optimize away range check based on pivot comparisons.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:11,Testability,test,test,11,// The bit test blocks haven't been inserted yet; insert them here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:23,Testability,test,test,23,"// If the cases in bit test don't form a contiguous range, we evenly; // distribute the probability on the edge to Fallthrough to two; // successors of CurMBB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:45,Testability,test,test,45,"// If we're in the right place, emit the bit test header right now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:45,Availability,avail,available,45,// Put Cond in a virtual register to make it available from the new blocks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:45,Availability,avail,available,45,// Put Cond in a virtual register to make it available from the new blocks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:284,Deployability,update,update,284,"// Try to peel the top probability case if it exceeds the threshold.; // Return current MachineBasicBlock for the switch statement if the peeling; // does not occur.; // If the peeling is performed, return the newly created MachineBasicBlock; // for the peeled switch statement. Also update Clusters to remove the peeled; // case. PeeledCaseProb is the BranchProbability for the peeled case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:188,Performance,perform,performed,188,"// Try to peel the top probability case if it exceeds the threshold.; // Return current MachineBasicBlock for the switch statement if the peeling; // does not occur.; // If the peeling is performed, return the newly created MachineBasicBlock; // for the peeled switch statement. Also update Clusters to remove the peeled; // case. PeeledCaseProb is the BranchProbability for the peeled case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:9,Performance,perform,perform,9,// Don't perform if there is only one cluster or optimizing for size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:49,Performance,optimiz,optimizing,49,// Don't perform if there is only one cluster or optimizing for size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:75,Performance,optimiz,optimization,75,// Cluster adjacent cases with the same destination. We do this at all; // optimization levels because it's cheap to do and will make codegen faster; // if there are many clusters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:7,Performance,optimiz,optimized,7,"// For optimized builds, lower large range as a balanced binary tree.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:45,Availability,mask,mask,45,// VECTOR_SHUFFLE doesn't support a scalable mask so use a dedicated node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:36,Performance,scalab,scalable,36,// VECTOR_SHUFFLE doesn't support a scalable mask so use a dedicated node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:40,Usability,simpl,simpler,40,"// We must do this walk rather than the simpler; // setValue(&I, getCopyFromRegs(CBR, CBR->getType()));; // otherwise we will end up with copies of virtregs only valid along direct; // edges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp:3,Deployability,Update,Update,3,// Update the assigned registers to use the original defs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:399,Integrability,rout,routines,399,"//===- SelectionDAGBuilder.h - Selection-DAG building -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This implements routines for translating from LLVM IR into SelectionDAG IR.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:183,Modifiability,parameteriz,parameterized,183,//===----------------------------------------------------------------------===//; /// SelectionDAGBuilder - This is the common target-independent lowering; /// implementation that is parameterized by a TargetLowering object.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:4,Performance,Cache,Cache,4,/// Cache the module flag for whether we should use debug-info assignment; /// tracking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:4,Performance,Load,Loads,4,/// Loads are not emitted to the program immediately. We bunch them up and; /// then emit token factor nodes when possible. This allows us to get simple; /// disambiguation between loads without worrying about alias analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:181,Performance,load,loads,181,/// Loads are not emitted to the program immediately. We bunch them up and; /// then emit token factor nodes when possible. This allows us to get simple; /// disambiguation between loads without worrying about alias analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:146,Usability,simpl,simple,146,/// Loads are not emitted to the program immediately. We bunch them up and; /// then emit token factor nodes when possible. This allows us to get simple; /// disambiguation between loads without worrying about alias analysis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:15,Performance,load,loads,15,"/// Similar to loads, nodes corresponding to constrained FP intrinsics are; /// bunched up and emitted when necessary. These can be moved across each; /// other and any (normal) memory operation (load or store), but not across; /// calls or instructions having unspecified side effects. As a special; /// case, constrained FP intrinsics using fpexcept.strict may not be deleted; /// even if otherwise unused, so they need to be chained before any; /// terminator instruction (like PendingExports). We track the latter; /// set of nodes in a separate list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:196,Performance,load,load,196,"/// Similar to loads, nodes corresponding to constrained FP intrinsics are; /// bunched up and emitted when necessary. These can be moved across each; /// other and any (normal) memory operation (load or store), but not across; /// calls or instructions having unspecified side effects. As a special; /// case, constrained FP intrinsics using fpexcept.strict may not be deleted; /// even if otherwise unused, so they need to be chained before any; /// terminator instruction (like PendingExports). We track the latter; /// set of nodes in a separate list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:4,Deployability,Update,Update,4,/// Update root to include all chains from the Pending list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:65,Energy Efficiency,schedul,scheduling,65,/// Lowest valid SDNodeOrder. The special case 0 is reserved for scheduling; /// nodes without a corresponding SDNode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:4,Usability,Clear,Clear,4,/// Clear out the current SelectionDAG and the associated state and prepare; /// this SelectionDAGBuilder object to be used for a new block. This doesn't; /// clear out information about additional blocks that are needed to complete; /// switch lowering or PHI node updating; that information is cleared out as; /// it is consumed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:159,Usability,clear,clear,159,/// Clear out the current SelectionDAG and the associated state and prepare; /// this SelectionDAGBuilder object to be used for a new block. This doesn't; /// clear out information about additional blocks that are needed to complete; /// switch lowering or PHI node updating; that information is cleared out as; /// it is consumed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:296,Usability,clear,cleared,296,/// Clear out the current SelectionDAG and the associated state and prepare; /// this SelectionDAGBuilder object to be used for a new block. This doesn't; /// clear out information about additional blocks that are needed to complete; /// switch lowering or PHI node updating; that information is cleared out as; /// it is consumed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:4,Usability,Clear,Clear,4,/// Clear the dangling debug information map. This function is separated from; /// the clear so that debug information that is dangling in a basic block can; /// be properly resolved in a different basic block. This allows the; /// SelectionDAG to resolve dangling debug information attached to PHI nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:87,Usability,clear,clear,87,/// Clear the dangling debug information map. This function is separated from; /// the clear so that debug information that is dangling in a basic block can; /// be properly resolved in a different basic block. This allows the; /// SelectionDAG to resolve dangling debug information attached to PHI nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:211,Performance,load,load,211,"/// Return the current virtual root of the Selection DAG, flushing any; /// PendingLoad items. This must be done before emitting a store or any other; /// memory node that may need to be ordered after any prior load instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:34,Energy Efficiency,allocate,allocated,34,/// If there was virtual register allocated for the value V emit CopyFromReg; /// of the specified type Ty. Return empty SDValue() otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:53,Modifiability,Variab,Variable,53,"/// If we have dangling debug info that describes \p Variable, or an; /// overlapping part of variable considering the \p Expr, then this method; /// will drop that debug info as it isn't valid any longer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:94,Modifiability,variab,variable,94,"/// If we have dangling debug info that describes \p Variable, or an; /// overlapping part of variable considering the \p Expr, then this method; /// will drop that debug info as it isn't valid any longer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:45,Performance,perform,perform,45,"/// For the given dangling debuginfo record, perform last-ditch efforts to; /// resolve the debuginfo to something that is represented in this DAG. If; /// this cannot be done, produce an Undef debug value record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:86,Energy Efficiency,power,power,86,// Lower range metadata from 0 to N to assert zext to an integer of nearest; // floor power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:39,Testability,assert,assert,39,// Lower range metadata from 0 to N to assert zext to an integer of nearest; // floor power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:45,Deployability,update,update,45,"/// When an MBB was split during scheduling, update the; /// references that need to refer to the last resulting block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:33,Energy Efficiency,schedul,scheduling,33,"/// When an MBB was split during scheduling, update the; /// references that need to refer to the last resulting block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:18,Deployability,patch,patchable,18,/// The number of patchable bytes the call needs to get lowered into.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:4,Deployability,Update,Update,4,/// Update the DAG and DAG builder with the relevant information after; /// a new root node has been created which could be a tail call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:336,Performance,perform,performed,336,"/// This struct represents the registers (physical or virtual); /// that a particular set of values is assigned, and the type information about; /// the value. The most common situation is to represent one value at a time,; /// but struct or array values are handled element-wise as multiple values. The; /// splitting of aggregates is performed recursively, so that we never have; /// aggregate-typed registers. The values at this point do not necessarily have; /// legal types, so each value may require one or more registers of some legal; /// type.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:315,Availability,redundant,redundant,315,"/// The value types of the registers. This is the same size as ValueVTs and it; /// records, for each value, what the type of the assigned register or; /// registers are. (Individual values are never synthesized from more than one; /// type of register.); ///; /// With virtual registers, the contents of RegVTs is redundant with TLI's; /// getRegisterType member function, however when with physical registers; /// it is necessary to have a separate record of the types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:315,Safety,redund,redundant,315,"/// The value types of the registers. This is the same size as ValueVTs and it; /// records, for each value, what the type of the assigned register or; /// registers are. (Individual values are never synthesized from more than one; /// type of register.); ///; /// With virtual registers, the contents of RegVTs is redundant with TLI's; /// getRegisterType member function, however when with physical registers; /// it is necessary to have a separate record of the types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:56,Integrability,depend,dependant,56,"/// Records if this value needs to be treated in an ABI dependant manner,; /// different to normal type legalization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:159,Deployability,update,updates,159,"/// Emit a series of CopyFromReg nodes that copies from this value and returns; /// the result as a ValueVTs value. This uses Chain/Flag as the input and; /// updates them for the output Chain/Flag. If the Flag pointer is NULL, no; /// flag is used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:340,Availability,error,error,340,"/// Emit a series of CopyToReg nodes that copies the specified value into the; /// registers specified by this object. This uses Chain/Flag as the input and; /// updates them for the output Chain/Flag. If the Flag pointer is nullptr, no; /// flag is used. If V is not nullptr, then it is used in printing better; /// diagnostic messages on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:162,Deployability,update,updates,162,"/// Emit a series of CopyToReg nodes that copies the specified value into the; /// registers specified by this object. This uses Chain/Flag as the input and; /// updates them for the output Chain/Flag. If the Flag pointer is nullptr, no; /// flag is used. If V is not nullptr, then it is used in printing better; /// diagnostic messages on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h:328,Integrability,message,messages,328,"/// Emit a series of CopyToReg nodes that copies the specified value into the; /// registers specified by this object. This uses Chain/Flag as the input and; /// updates them for the output Chain/Flag. If the Flag pointer is nullptr, no; /// flag is used. If V is not nullptr, then it is used in printing better; /// diagnostic messages on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGDumper.cpp:35,Usability,simpl,simple,35,/// Return true if this node is so simple that we should just print it inline; /// if it appears as an operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGDumper.cpp:3,Safety,Avoid,Avoid,3,// Avoid lots of cluttering when inline printing nodes with associated; // DbgValues in verbose mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGDumper.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGDumper.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:154,Energy Efficiency,schedul,schedulers,154,//===---------------------------------------------------------------------===//; ///; /// RegisterScheduler class - Track the registration of instruction schedulers.; ///; //===---------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:138,Energy Efficiency,schedul,schedulers,138,//===---------------------------------------------------------------------===//; ///; /// ISHeuristic command line option for instruction schedulers.; ///; //===---------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:156,Performance,optimiz,optimization,156,//===--------------------------------------------------------------------===//; /// This class is used by SelectionDAGISel to temporarily override; /// the optimization level on a per-function basis.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:137,Energy Efficiency,schedul,scheduler,137,//===--------------------------------------------------------------------===//; /// createDefaultScheduler - This creates an instruction scheduler appropriate; /// for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:65,Energy Efficiency,schedul,scheduler,65,// Try first to see if the Target has its own way of selecting a scheduler,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:26,Modifiability,variab,variable,26,"// Decide what flavour of variable location debug-info will be used, before; // we change the optimisation level.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:49,Performance,optimiz,optimization,49,// Reset the target options before resetting the optimization; // level below.; // FIXME: This is a horrible hack and should be processed via; // codegen looking at the optimization level explicitly when; // it wants to look at it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:169,Performance,optimiz,optimization,169,// Reset the target options before resetting the optimization; // level below.; // FIXME: This is a horrible hack and should be processed via; // codegen looking at the optimization level explicitly when; // it wants to look at it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:8,Performance,perform,performs,8,// This performs initialization so lowering for SplitCSR will be correct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:17,Energy Efficiency,schedul,scheduled,17,"// If To is also scheduled to be replaced, find what its ultimate; // replacement is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:113,Usability,clear,clear,113,// Replace it.; // Replacing one register with another won't touch the kill flags.; // We need to conservatively clear the kill flags as a kill on the old; // register might dominate existing uses of the new register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:17,Modifiability,extend,extend,17,// Don't try and extend through copies in instruction referencing mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:26,Deployability,update,update,26,// If Reg is live-in then update debug info to track its copy in a vreg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:50,Modifiability,Variab,Variable,50,"// Use MI's debug location, which describes where Variable was; // declared, rather than whatever is attached to CopyUseMI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:90,Availability,mainten,maintenence,90,"// For debug-info, in instruction referencing mode, we need to perform some; // post-isel maintenence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:63,Performance,perform,perform,63,"// For debug-info, in instruction referencing mode, we need to perform some; // post-isel maintenence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:3,Deployability,Release,Release,3,// Release function-specific state. SDB and CurDAG are already cleared; // at this point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:63,Usability,clear,cleared,63,// Release function-specific state. SDB and CurDAG are already cleared; // at this point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:149,Availability,error,error,149,// Print the function name explicitly if we don't have a debug location (which; // makes the diagnostic less useful) or if we're going to emit a raw error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:75,Energy Efficiency,schedul,scheduled,75,// FuncInfo->InsertPt is passed by reference and set to the end of the; // scheduled instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:41,Deployability,update,updates,41,/// ISelUpdater - helper class to handle updates of the instruction selection; /// graph.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:120,Deployability,update,update,120,"/// NodeDeleted - Handle nodes deleted from the graph. If the node being; /// deleted is the current ISelPosition node, update ISelPosition.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:45,Deployability,update,updated,45,// Make sure that ISelPosition gets properly updated when nodes are deleted; // in calls made from this function. New nodes inherit relevant metadata.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:124,Modifiability,inherit,inherit,124,// Make sure that ISelPosition gets properly updated when nodes are deleted; // in calls made from this function. New nodes inherit relevant metadata.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:211,Testability,assert,assertion,211,// We rely on topological ordering of node ids for checking for; // cycles when fusing nodes during selection. All unselected nodes; // successors of an already selected node should have a negative id.; // This assertion will catch such cases. If this assertion triggers; // it is likely you using DAG-level Value/Node replacement functions; // (versus equivalent ISEL replacement) in backend-specific; // selections. See comment in EnforceNodeIdInvariant for more; // details.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:252,Testability,assert,assertion,252,// We rely on topological ordering of node ids for checking for; // cycles when fusing nodes during selection. All unselected nodes; // successors of an already selected node should have a negative id.; // This assertion will catch such cases. If this assertion triggers; // it is likely you using DAG-level Value/Node replacement functions; // (versus equivalent ISEL replacement) in backend-specific; // selections. See comment in EnforceNodeIdInvariant for more; // details.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:101,Safety,detect,detected,101,// Add a label to mark the beginning of the landing pad. Deletion of the; // landing pad can thus be detected via the MachineModuleInfo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:40,Availability,Fault,Faulty,40,// Report IP range only for blocks with Faulty inst,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:16,Modifiability,variab,variable,16,"// Check if the variable is a static alloca or a byval or inalloca; // argument passed in memory. If it is not, then we will ignore this; // intrinsic and handle this during isel like dbg.value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:97,Performance,load,load,97,"// If fast isel succeeded, skip over all the folded instructions, and; // then see if there is a load right before the selected instructions.; // Try to fold the load if so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:162,Performance,load,load,162,"// If fast isel succeeded, skip over all the folded instructions, and; // then see if there is a load right before the selected instructions.; // Try to fold the load if so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:40,Performance,load,load,40,"// If we succeeded, don't re-select the load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:19,Integrability,message,message,19,// Use a different message for terminator misses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:9,Safety,abort,abort,9,// Don't abort for terminator unless the level is really high,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:69,Deployability,update,update,69,"// Next, now that we know what the last MBB the LLVM BB expanded is, update; // PHI nodes in successors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:80,Availability,error,error,80,// The target provides a guard check function. There is no need to; // generate error handling code or to split current basic block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:7,Performance,load,load,7,// Add load and check to the basicblock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:3,Usability,Clear,Clear,3,// Clear the Per-BB State.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:11,Availability,Failure,Failure,11,// CodeGen Failure MBB if we have not codegened it yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:3,Usability,Clear,Clear,3,// Clear the Per-BB State.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:320,Performance,perform,perform,320,"// Emit the code; // If all cases cover a contiguous range, it is not necessary to jump to; // the default block after the last bit test fails. This is because the; // range check during bit test header creation has guaranteed that every; // case here doesn't go outside the range. In this case, there is no need; // to perform the last bit test, as it will always be true. Instead, make; // the second-to-last bit-test fall through to the target of the last bit; // test, and delete the last bit test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:132,Testability,test,test,132,"// Emit the code; // If all cases cover a contiguous range, it is not necessary to jump to; // the default block after the last bit test fails. This is because the; // range check during bit test header creation has guaranteed that every; // case here doesn't go outside the range. In this case, there is no need; // to perform the last bit test, as it will always be true. Instead, make; // the second-to-last bit-test fall through to the target of the last bit; // test, and delete the last bit test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:191,Testability,test,test,191,"// Emit the code; // If all cases cover a contiguous range, it is not necessary to jump to; // the default block after the last bit test fails. This is because the; // range check during bit test header creation has guaranteed that every; // case here doesn't go outside the range. In this case, there is no need; // to perform the last bit test, as it will always be true. Instead, make; // the second-to-last bit-test fall through to the target of the last bit; // test, and delete the last bit test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:341,Testability,test,test,341,"// Emit the code; // If all cases cover a contiguous range, it is not necessary to jump to; // the default block after the last bit test fails. This is because the; // range check during bit test header creation has guaranteed that every; // case here doesn't go outside the range. In this case, there is no need; // to perform the last bit test, as it will always be true. Instead, make; // the second-to-last bit-test fall through to the target of the last bit; // test, and delete the last bit test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:415,Testability,test,test,415,"// Emit the code; // If all cases cover a contiguous range, it is not necessary to jump to; // the default block after the last bit test fails. This is because the; // range check during bit test header creation has guaranteed that every; // case here doesn't go outside the range. In this case, there is no need; // to perform the last bit test, as it will always be true. Instead, make; // the second-to-last bit-test fall through to the target of the last bit; // test, and delete the last bit test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:467,Testability,test,test,467,"// Emit the code; // If all cases cover a contiguous range, it is not necessary to jump to; // the default block after the last bit test fails. This is because the; // range check during bit test header creation has guaranteed that every; // case here doesn't go outside the range. In this case, there is no need; // to perform the last bit test, as it will always be true. Instead, make; // the second-to-last bit-test fall through to the target of the last bit; // test, and delete the last bit test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:497,Testability,test,test,497,"// Emit the code; // If all cases cover a contiguous range, it is not necessary to jump to; // the default block after the last bit test fails. This is because the; // range check during bit test header creation has guaranteed that every; // case here doesn't go outside the range. In this case, there is no need; // to perform the last bit test, as it will always be true. Instead, make; // the second-to-last bit-test fall through to the target of the last bit; // test, and delete the last bit test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:22,Testability,test,test,22,// Second-to-last bit-test with contiguous range or omitted range; // check: fall through to the target of the final bit test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:121,Testability,test,test,121,// Second-to-last bit-test with contiguous range or omitted range; // check: fall through to the target of the final bit test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:20,Testability,test,test,20,"// For the last bit test, fall through to Default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:43,Testability,test,test,43,"// Otherwise, fall through to the next bit test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:46,Testability,test,test,46,"// Since we're not going to use the final bit test, remove it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:3,Deployability,Update,Update,3,// Update PHI Nodes,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:3,Deployability,Update,Update,3,// Update PHI Nodes,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:17,Availability,mask,mask,17,"// If the actual mask exactly matches, success!",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:21,Availability,mask,mask,21,"// If the actual AND mask is allowing unallowed bits, this doesn't match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:17,Availability,mask,mask,17,"// If the actual mask exactly matches, success!",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:21,Availability,mask,mask,21,"// If the actual AND mask is allowing unallowed bits, this doesn't match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:31,Security,validat,validated,31,// Ignore chain deps (they are validated by; // HandleMergeInputChains) and immediate uses,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:27,Security,validat,validated,27,// Ignore chains (they are validated by HandleMergeInputChains),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:1072,Availability,down,down,1072,"// If Root use can somehow reach N through a path that doesn't contain; // U then folding N would create a cycle. e.g. In the following; // diagram, Root can reach N through X. If N is folded into Root, then; // X is both a predecessor and a successor of U.; //; // [N*] //; // ^ ^ //; // / \ //; // [U*] [X]? //; // ^ ^ //; // \ / //; // \ / //; // [Root*] //; //; // * indicates nodes to be folded together.; //; // If Root produces glue, then it gets (even more) interesting. Since it; // will be ""glued"" together with its glue use in the scheduler, we need to; // check if it might reach N.; //; // [N*] //; // ^ ^ //; // / \ //; // [U*] [X]? //; // ^ ^ //; // \ \ //; // \ | //; // [Root*] | //; // ^ | //; // f | //; // | / //; // [Y] / //; // ^ / //; // f / //; // | / //; // [GU] //; //; // If GU (glue use) indirectly reaches N (the load), and Root folds N; // (call it Fold), then X is a predecessor of GU and a successor of; // Fold. But since Fold and GU are glued together, this will create; // a cycle in the scheduling graph.; // If the node has glue, walk down the graph to the ""lowest"" node in the; // glueged set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:542,Energy Efficiency,schedul,scheduler,542,"// If Root use can somehow reach N through a path that doesn't contain; // U then folding N would create a cycle. e.g. In the following; // diagram, Root can reach N through X. If N is folded into Root, then; // X is both a predecessor and a successor of U.; //; // [N*] //; // ^ ^ //; // / \ //; // [U*] [X]? //; // ^ ^ //; // \ / //; // \ / //; // [Root*] //; //; // * indicates nodes to be folded together.; //; // If Root produces glue, then it gets (even more) interesting. Since it; // will be ""glued"" together with its glue use in the scheduler, we need to; // check if it might reach N.; //; // [N*] //; // ^ ^ //; // / \ //; // [U*] [X]? //; // ^ ^ //; // \ \ //; // \ | //; // [Root*] | //; // ^ | //; // f | //; // | / //; // [Y] / //; // ^ / //; // f / //; // | / //; // [GU] //; //; // If GU (glue use) indirectly reaches N (the load), and Root folds N; // (call it Fold), then X is a predecessor of GU and a successor of; // Fold. But since Fold and GU are glued together, this will create; // a cycle in the scheduling graph.; // If the node has glue, walk down the graph to the ""lowest"" node in the; // glueged set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:1023,Energy Efficiency,schedul,scheduling,1023,"// If Root use can somehow reach N through a path that doesn't contain; // U then folding N would create a cycle. e.g. In the following; // diagram, Root can reach N through X. If N is folded into Root, then; // X is both a predecessor and a successor of U.; //; // [N*] //; // ^ ^ //; // / \ //; // [U*] [X]? //; // ^ ^ //; // \ / //; // \ / //; // [Root*] //; //; // * indicates nodes to be folded together.; //; // If Root produces glue, then it gets (even more) interesting. Since it; // will be ""glued"" together with its glue use in the scheduler, we need to; // check if it might reach N.; //; // [N*] //; // ^ ^ //; // / \ //; // [U*] [X]? //; // ^ ^ //; // \ \ //; // \ | //; // [Root*] | //; // ^ | //; // f | //; // | / //; // [Y] / //; // ^ / //; // f / //; // | / //; // [GU] //; //; // If GU (glue use) indirectly reaches N (the load), and Root folds N; // (call it Fold), then X is a predecessor of GU and a successor of; // Fold. But since Fold and GU are glued together, this will create; // a cycle in the scheduling graph.; // If the node has glue, walk down the graph to the ""lowest"" node in the; // glueged set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:842,Performance,load,load,842,"// If Root use can somehow reach N through a path that doesn't contain; // U then folding N would create a cycle. e.g. In the following; // diagram, Root can reach N through X. If N is folded into Root, then; // X is both a predecessor and a successor of U.; //; // [N*] //; // ^ ^ //; // / \ //; // [U*] [X]? //; // ^ ^ //; // \ / //; // \ / //; // [Root*] //; //; // * indicates nodes to be folded together.; //; // If Root produces glue, then it gets (even more) interesting. Since it; // will be ""glued"" together with its glue use in the scheduler, we need to; // check if it might reach N.; //; // [N*] //; // ^ ^ //; // / \ //; // [U*] [X]? //; // ^ ^ //; // \ \ //; // \ | //; // [Root*] | //; // ^ | //; // f | //; // | / //; // [Y] / //; // ^ / //; // f / //; // | / //; // [GU] //; //; // If GU (glue use) indirectly reaches N (the load), and Root folds N; // (call it Fold), then X is a predecessor of GU and a successor of; // Fold. But since Fold and GU are glued together, this will create; // a cycle in the scheduling graph.; // If the node has glue, walk down the graph to the ""lowest"" node in the; // glueged set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:8,Modifiability,variab,variable,8,// Live variable operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:3,Performance,Cache,Cache,3,// Cache arguments that will be moved to the end in the target node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:21,Modifiability,variab,variables,21,// Now push the live variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:88,Usability,clear,cleared,88,"// If ChainNode is null, it's because we replaced it on a previous; // iteration and we cleared it out of the map. Just skip it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:41,Integrability,depend,dependencies,41,// Skip the search if there are no chain dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:254,Availability,down,down,254,"// It is possible we're using MorphNodeTo to replace a node with no; // normal results with one that has a normal result (or we could be; // adding a chain) and the input could have glue and chains as well.; // In this case we need to shift the operands down.; // FIXME: This is a horrible hack and broken in obscure cases, no worse; // than the old isel though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:36,Integrability,rout,routine,36,// Call the underlying SelectionDAG routine to do the transmogrification. Note; // that this deletes operands of the old node that become dead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:141,Deployability,update,updates,141,"// MorphNodeTo can operate in two ways: if an existing node with the; // specified operands exists, it can just return it. Otherwise, it; // updates the node in place to have the requested operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:9,Deployability,update,updated,9,"// If we updated the node in place, reset the node ID. To the isel,; // this should be just like a newly allocated machine node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:105,Energy Efficiency,allocate,allocated,105,"// If we updated the node in place, reset the node ID. To the isel,; // this should be just like a newly allocated machine node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:11,Deployability,update,update,11,/// \A DAG update listener to keep the matching state; /// (i.e. RecordedNodes and MatchScope) uptodate if the target is allowed to; /// change the DAG while matching. X86 addressing mode matcher is an example; /// for this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:84,Deployability,update,update,84,"// Some early-returns here to avoid the search if we deleted the node or; // if the update comes from MorphNodeTo (MorphNodeTo is the last thing we; // do, so it's unnecessary to update matching state at that point).; // Neither of these can occur currently because we only install this; // update listener during matching a complex patterns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:179,Deployability,update,update,179,"// Some early-returns here to avoid the search if we deleted the node or; // if the update comes from MorphNodeTo (MorphNodeTo is the last thing we; // do, so it's unnecessary to update matching state at that point).; // Neither of these can occur currently because we only install this; // update listener during matching a complex patterns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:274,Deployability,install,install,274,"// Some early-returns here to avoid the search if we deleted the node or; // if the update comes from MorphNodeTo (MorphNodeTo is the last thing we; // do, so it's unnecessary to update matching state at that point).; // Neither of these can occur currently because we only install this; // update listener during matching a complex patterns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:291,Deployability,update,update,291,"// Some early-returns here to avoid the search if we deleted the node or; // if the update comes from MorphNodeTo (MorphNodeTo is the last thing we; // do, so it's unnecessary to update matching state at that point).; // Neither of these can occur currently because we only install this; // update listener during matching a complex patterns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:30,Safety,avoid,avoid,30,"// Some early-returns here to avoid the search if we deleted the node or; // if the update comes from MorphNodeTo (MorphNodeTo is the last thing we; // do, so it's unnecessary to update matching state at that point).; // Neither of these can occur currently because we only install this; // update listener during matching a complex patterns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:28,Deployability,update,updated,28,// Check if NodeToMatch was updated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:3,Performance,Perform,Performing,3,// Performing linear search here does not matter because we almost never; // run this code. You'd have to have a CSE during complex pattern; // matching.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:55,Availability,failure,failure,55,"// MatchScopes - Scopes used when matching, if a match failure happens, this; // indicates where to continue checking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:166,Deployability,update,updates,166,"// These are the current input chain and glue for use when generating nodes.; // Various Emit operations change these. For example, emitting a copytoreg; // uses and updates these.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:233,Deployability,update,update,233,"// ChainNodesMatched - If a pattern matches nodes that have input/output; // chains, the OPC_EmitMergeInputChains operation is emitted which indicates; // which ones they are. The result is captured into this list so that we can; // update the chain results when the pattern is complete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:129,Deployability,Update,UpdateChains,129,"// Verify that all intermediate nodes between the root and this one have; // a single use (ignoring chains, which are handled in UpdateChains).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:5,Security,validat,validate,5,/*We validate our own chains*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:54,Performance,optimiz,optimized,54,"// OPC_EmitMergeInputChains, 1, 2; // These are space-optimized forms of OPC_EmitMergeInputChains.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:72,Safety,safe,safe,72,// This is emitted right before MorphNode/EmitNode.; // So it should be safe to assume that this node has been selected,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:24,Performance,optimiz,optimize,24,"// This is hot code, so optimize the two most common cases of 1 and 2; // results.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:162,Performance,perform,perform,162,"// Check whether any matched node could raise an FP exception. Since all; // such nodes must have a chain, it suffices to check ChainNodesMatched.; // We need to perform this check before potentially modifying one of the; // nodes via MorphNode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:39,Deployability,update,update,39,"// If the node had chain/glue results, update our notion of the current; // chain and glue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:248,Performance,load,loads,248,"// If the OPFL_MemRefs glue is set on this node, slap all of the; // accumulated memrefs onto it.; //; // FIXME: This is vastly incorrect for patterns with multiple outputs; // instructions that access memory and for ComplexPatterns that match; // loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:195,Security,access,access,195,"// If the OPFL_MemRefs glue is set on this node, slap all of the; // accumulated memrefs onto it.; //; // FIXME: This is vastly incorrect for patterns with multiple outputs; // instructions that access memory and for ComplexPatterns that match; // loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:15,Performance,load,load,15,// Only attach load or store memory operands if the generated; // instruction may load or store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:82,Performance,load,load,82,// Only attach load or store memory operands if the generated; // instruction may load or store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:3,Deployability,Update,Update,3,// Update chain uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:83,Deployability,Patch,Patch,83,"// The match has been completed, and any new nodes (if any) have been; // created. Patch up references to the matched dag to use the newly; // created nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:3,Deployability,Update,Update,3,// Update chain uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:45,Deployability,update,update,45,"// If the root node defines glue, we need to update it to the glue result.; // TODO: This never happens in our tests and I think it can be removed /; // replaced with an assert, but if we do it this the way the change is; // NFC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:111,Testability,test,tests,111,"// If the root node defines glue, we need to update it to the glue result.; // TODO: This never happens in our tests and I think it can be removed /; // replaced with an assert, but if we do it this the way the change is; // NFC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:170,Testability,assert,assert,170,"// If the root node defines glue, we need to update it to the glue result.; // TODO: This never happens in our tests and I think it can be removed /; // replaced with an assert, but if we do it this the way the change is; // NFC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:52,Deployability,update,update,52,"// If we have another child in this scope to match, update FailIndex and; // try it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp:3,Safety,Detect,Detect,3,"// Detect when ""or"" is used to add an offset to a stack object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGISel.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGPrinter.cpp:314,Availability,Error,Error,314,/// Just dump dot graph to a user-provided path and title.; /// This doesn't open the dot viewer program and; /// helps visualization when outside debugging session.; /// FileName expects absolute path. If provided; /// without any path separators then the file; /// will be created in the current directory.; /// Error will be emitted if the path is insane.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGPrinter.cpp:4,Usability,clear,clearGraphAttrs,4,/// clearGraphAttrs - Clear all previously defined node graph attributes.; /// Intended to be used from a debugging tool (eg. gdb).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGPrinter.cpp:22,Usability,Clear,Clear,22,/// clearGraphAttrs - Clear all previously defined node graph attributes.; /// Intended to be used from a debugging tool (eg. gdb).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGPrinter.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/SelectionDAGPrinter.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:31,Safety,safe,safepoint,31,// Need to resize this on each safepoint - we need the two to stay in sync and; // the clear patterns of a SelectionDAGBuilder have no relation to; // FunctionLoweringInfo. Also need to ensure used bits get cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:87,Usability,clear,clear,87,// Need to resize this on each safepoint - we need the two to stay in sync and; // the clear patterns of a SelectionDAGBuilder have no relation to; // FunctionLoweringInfo. Also need to ensure used bits get cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:207,Usability,clear,cleared,207,// Need to resize this on each safepoint - we need the two to stay in sync and; // the clear patterns of a SelectionDAGBuilder have no relation to; // FunctionLoweringInfo. Also need to ensure used bits get cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:316,Availability,redundant,redundant,316,"// TODO: We can do better for PHI nodes. In cases like this:; // ptr = phi(relocated_pointer, not_relocated_pointer); // statepoint(ptr); // We will return that stack slot for ptr is unknown. And later we might; // assign different stack slots for ptr and relocated_pointer. This limits; // llvm's ability to remove redundant stores.; // Unfortunately it's hard to accomplish in current infrastructure.; // We use this function to eliminate spill store completely, while; // in example we still need to emit store, but instead of any location; // we need to use special ""preferred"" location.; // TODO: handle simple updates. If a value is modified and the original; // value is no longer live, it would be nice to put the modified value in the; // same slot. This allows folding of the memory accesses for some; // instructions types (like an increment).; // statepoint (i); // i1 = i+1; // statepoint (i1); // However we need to be careful for cases like this:; // statepoint(i); // i1 = i+1; // statepoint(i, i1); // Here we want to reserve spill slot for 'i', but not for 'i+1'. If we just; // put handling of simple modifications in this function like it's done; // for bitcasts we might end up reserving i's slot for 'i+1' because order in; // which we visit values is unspecified.; // Don't know any information about this instruction",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:616,Deployability,update,updates,616,"// TODO: We can do better for PHI nodes. In cases like this:; // ptr = phi(relocated_pointer, not_relocated_pointer); // statepoint(ptr); // We will return that stack slot for ptr is unknown. And later we might; // assign different stack slots for ptr and relocated_pointer. This limits; // llvm's ability to remove redundant stores.; // Unfortunately it's hard to accomplish in current infrastructure.; // We use this function to eliminate spill store completely, while; // in example we still need to emit store, but instead of any location; // we need to use special ""preferred"" location.; // TODO: handle simple updates. If a value is modified and the original; // value is no longer live, it would be nice to put the modified value in the; // same slot. This allows folding of the memory accesses for some; // instructions types (like an increment).; // statepoint (i); // i1 = i+1; // statepoint (i1); // However we need to be careful for cases like this:; // statepoint(i); // i1 = i+1; // statepoint(i, i1); // Here we want to reserve spill slot for 'i', but not for 'i+1'. If we just; // put handling of simple modifications in this function like it's done; // for bitcasts we might end up reserving i's slot for 'i+1' because order in; // which we visit values is unspecified.; // Don't know any information about this instruction",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:316,Safety,redund,redundant,316,"// TODO: We can do better for PHI nodes. In cases like this:; // ptr = phi(relocated_pointer, not_relocated_pointer); // statepoint(ptr); // We will return that stack slot for ptr is unknown. And later we might; // assign different stack slots for ptr and relocated_pointer. This limits; // llvm's ability to remove redundant stores.; // Unfortunately it's hard to accomplish in current infrastructure.; // We use this function to eliminate spill store completely, while; // in example we still need to emit store, but instead of any location; // we need to use special ""preferred"" location.; // TODO: handle simple updates. If a value is modified and the original; // value is no longer live, it would be nice to put the modified value in the; // same slot. This allows folding of the memory accesses for some; // instructions types (like an increment).; // statepoint (i); // i1 = i+1; // statepoint (i1); // However we need to be careful for cases like this:; // statepoint(i); // i1 = i+1; // statepoint(i, i1); // Here we want to reserve spill slot for 'i', but not for 'i+1'. If we just; // put handling of simple modifications in this function like it's done; // for bitcasts we might end up reserving i's slot for 'i+1' because order in; // which we visit values is unspecified.; // Don't know any information about this instruction",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:793,Security,access,accesses,793,"// TODO: We can do better for PHI nodes. In cases like this:; // ptr = phi(relocated_pointer, not_relocated_pointer); // statepoint(ptr); // We will return that stack slot for ptr is unknown. And later we might; // assign different stack slots for ptr and relocated_pointer. This limits; // llvm's ability to remove redundant stores.; // Unfortunately it's hard to accomplish in current infrastructure.; // We use this function to eliminate spill store completely, while; // in example we still need to emit store, but instead of any location; // we need to use special ""preferred"" location.; // TODO: handle simple updates. If a value is modified and the original; // value is no longer live, it would be nice to put the modified value in the; // same slot. This allows folding of the memory accesses for some; // instructions types (like an increment).; // statepoint (i); // i1 = i+1; // statepoint (i1); // However we need to be careful for cases like this:; // statepoint(i); // i1 = i+1; // statepoint(i, i1); // Here we want to reserve spill slot for 'i', but not for 'i+1'. If we just; // put handling of simple modifications in this function like it's done; // for bitcasts we might end up reserving i's slot for 'i+1' because order in; // which we visit values is unspecified.; // Don't know any information about this instruction",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:609,Usability,simpl,simple,609,"// TODO: We can do better for PHI nodes. In cases like this:; // ptr = phi(relocated_pointer, not_relocated_pointer); // statepoint(ptr); // We will return that stack slot for ptr is unknown. And later we might; // assign different stack slots for ptr and relocated_pointer. This limits; // llvm's ability to remove redundant stores.; // Unfortunately it's hard to accomplish in current infrastructure.; // We use this function to eliminate spill store completely, while; // in example we still need to emit store, but instead of any location; // we need to use special ""preferred"" location.; // TODO: handle simple updates. If a value is modified and the original; // value is no longer live, it would be nice to put the modified value in the; // same slot. This allows folding of the memory accesses for some; // instructions types (like an increment).; // statepoint (i); // i1 = i+1; // statepoint (i1); // However we need to be careful for cases like this:; // statepoint(i); // i1 = i+1; // statepoint(i, i1); // Here we want to reserve spill slot for 'i', but not for 'i+1'. If we just; // put handling of simple modifications in this function like it's done; // for bitcasts we might end up reserving i's slot for 'i+1' because order in; // which we visit values is unspecified.; // Don't know any information about this instruction",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:1113,Usability,simpl,simple,1113,"// TODO: We can do better for PHI nodes. In cases like this:; // ptr = phi(relocated_pointer, not_relocated_pointer); // statepoint(ptr); // We will return that stack slot for ptr is unknown. And later we might; // assign different stack slots for ptr and relocated_pointer. This limits; // llvm's ability to remove redundant stores.; // Unfortunately it's hard to accomplish in current infrastructure.; // We use this function to eliminate spill store completely, while; // in example we still need to emit store, but instead of any location; // we need to use special ""preferred"" location.; // TODO: handle simple updates. If a value is modified and the original; // value is no longer live, it would be nice to put the modified value in the; // same slot. This allows folding of the memory accesses for some; // instructions types (like an increment).; // statepoint (i); // i1 = i+1; // statepoint (i1); // However we need to be careful for cases like this:; // statepoint(i); // i1 = i+1; // statepoint(i, i1); // Here we want to reserve spill slot for 'i', but not for 'i+1'. If we just; // put handling of simple modifications in this function like it's done; // for bitcasts we might end up reserving i's slot for 'i+1' because order in; // which we visit values is unspecified.; // Don't know any information about this instruction",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:126,Modifiability,extend,extended,126,"// The largest constant describeable in the StackMap format is 64 bits.; // Potential Optimization: Constants values are sign extended by consumer,; // and thus there are many constants of static type > 64 bits whose value; // happens to be sext(Con64) and could thus be lowered directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:86,Performance,Optimiz,Optimization,86,"// The largest constant describeable in the StackMap format is 64 bits.; // Potential Optimization: Constants values are sign extended by consumer,; // and thus there are many constants of static type > 64 bits whose value; // happens to be sext(Con64) and could thus be lowered directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:180,Energy Efficiency,allocate,allocated,180,"/// Try to find existing copies of the incoming values in stack slots used for; /// statepoint spilling. If we can find a spill slot for the incoming value,; /// mark that slot as allocated, and reuse the same slot for this safepoint.; /// This helps to avoid series of loads and stores that only serve to reshuffle; /// values on the stack between calls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:270,Performance,load,loads,270,"/// Try to find existing copies of the incoming values in stack slots used for; /// statepoint spilling. If we can find a spill slot for the incoming value,; /// mark that slot as allocated, and reuse the same slot for this safepoint.; /// This helps to avoid series of loads and stores that only serve to reshuffle; /// values on the stack between calls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:224,Safety,safe,safepoint,224,"/// Try to find existing copies of the incoming values in stack slots used for; /// statepoint spilling. If we can find a spill slot for the incoming value,; /// mark that slot as allocated, and reuse the same slot for this safepoint.; /// This helps to avoid series of loads and stores that only serve to reshuffle; /// values on the stack between calls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:254,Safety,avoid,avoid,254,"/// Try to find existing copies of the incoming values in stack slots used for; /// statepoint spilling. If we can find a spill slot for the incoming value,; /// mark that slot as allocated, and reuse the same slot for this safepoint.; /// This helps to avoid series of loads and stores that only serve to reshuffle; /// values on the stack between calls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:65,Energy Efficiency,allocate,allocated,65,"// If we won't spill this, we don't need to check for previously allocated; // stack slots.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:3,Performance,Cache,Cache,3,// Cache this slot so we find it when going through the normal; // assignment loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:90,Deployability,update,update,90,"/// Extract call from statepoint, lower it and return pointer to the; /// call node. Also update NodeMap so that getValue(statepoint) will; /// reference lowered call result",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:563,Performance,LOAD,LOAD,563,"// Get a call instruction from the call sequence chain. Tail calls are not; // allowed. The following code is essentially reverse engineering X86's; // LowerCallTo.; //; // We are expecting DAG to have the following form:; //; // ch = eh_label (only in case of invoke statepoint); // ch, glue = callseq_start ch; // ch, glue = X86::Call ch, glue; // ch, glue = callseq_end ch, glue; // get_return_value ch, glue; //; // get_return_value can either be a sequence of CopyFromReg instructions; // to grab the return value from the return register(s), or it can be a LOAD; // to load a value returned by reference via a stack slot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:575,Performance,load,load,575,"// Get a call instruction from the call sequence chain. Tail calls are not; // allowed. The following code is essentially reverse engineering X86's; // LowerCallTo.; //; // We are expecting DAG to have the following form:; //; // ch = eh_label (only in case of invoke statepoint); // ch, glue = callseq_start ch; // ch, glue = X86::Call ch, glue; // ch, glue = callseq_end ch, glue; // get_return_value ch, glue; //; // get_return_value can either be a sequence of CopyFromReg instructions; // to grab the return value from the return register(s), or it can be a LOAD; // to load a value returned by reference via a stack slot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:23,Energy Efficiency,allocate,allocate,23,// Right now we always allocate spill slots that are of the same; // size as the value we're about to spill (the size of spillee can; // vary since we spill vectors of pointers too). At some point we; // can consider allowing spills of smaller values to larger slots; // (i.e. change the '==' in the assert below to a '>=').,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:300,Testability,assert,assert,300,// Right now we always allocate spill slots that are of the same; // size as the value we're about to spill (the size of spillee can; // vary since we spill vectors of pointers too). At some point we; // can consider allowing spills of smaller values to larger slots; // (i.e. change the '==' in the assert below to a '>=').,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:100,Deployability,patch,patchpoint,100,"// If this value is live in (not live-on-return, or live-through), we can; // treat it the same way patchpoint treats it's ""live in"" values. We'll; // end up folding some of these into stack references, but they'll be; // handled by the register allocator. Note that we do not have the notion; // of a late use so these values might be placed in registers which are; // clobbered by the call. This is fine for live-in. For live-through; // fix-up pass should be executed to force spilling of such registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:255,Availability,redundant,redundant,255,"/// Lower deopt state and gc pointer arguments of the statepoint. The actual; /// lowering is described in lowerIncomingStatepointValue. This function is; /// responsible for lowering everything in the right position and playing some; /// tricks to avoid redundant stack manipulation where possible. On; /// completion, 'Ops' will contain ready to use operands for machine code; /// statepoint. The chain nodes will have already been created and the DAG root; /// will be set to the last value spilled (if any were).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:249,Safety,avoid,avoid,249,"/// Lower deopt state and gc pointer arguments of the statepoint. The actual; /// lowering is described in lowerIncomingStatepointValue. This function is; /// responsible for lowering everything in the right position and playing some; /// tricks to avoid redundant stack manipulation where possible. On; /// completion, 'Ops' will contain ready to use operands for machine code; /// statepoint. The chain nodes will have already been created and the DAG root; /// will be set to the last value spilled (if any were).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:255,Safety,redund,redundant,255,"/// Lower deopt state and gc pointer arguments of the statepoint. The actual; /// lowering is described in lowerIncomingStatepointValue. This function is; /// responsible for lowering everything in the right position and playing some; /// tricks to avoid redundant stack manipulation where possible. On; /// completion, 'Ops' will contain ready to use operands for machine code; /// statepoint. The chain nodes will have already been created and the DAG root; /// will be set to the last value spilled (if any were).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:324,Modifiability,variab,variable,324,"// Lower the deopt and gc arguments for this statepoint. Layout will be:; // deopt argument length, deopt arguments.., gc arguments...; // Figure out what lowering strategy we're going to use for each part; // Note: It is conservatively correct to lower both ""live-in"" and ""live-out""; // as ""live-through"". A ""live-through"" variable is one which is ""live-in"",; // ""live-out"", and live throughout the lifetime of the call (i.e. we can find; // it from any PC within the transitive callee of the statepoint). In; // particular, if the callee spills callee preserved registers we may not; // be able to find a value placed in that register during the call. This is; // fine for live-out, but not for live-through. If we were willing to make; // assumptions about the code generator producing the callee, we could; // potentially allow live-through values in callee saved registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:193,Performance,optimiz,optimization,193,"// Before we actually start lowering (and allocating spill slots for values),; // reserve any stack slots which we judge to be profitable to reuse for a; // particular value. This is purely an optimization over the code below and; // doesn't change semantics at all. It is important for performance that we; // reserve slots for both deopt and gc values before lowering either.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:287,Performance,perform,performance,287,"// Before we actually start lowering (and allocating spill slots for values),; // reserve any stack slots which we judge to be profitable to reuse for a; // particular value. This is purely an optimization over the code below and; // doesn't change semantics at all. It is important for performance that we; // reserve slots for both deopt and gc values before lowering either.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:274,Deployability,update,updated,274,"// If there are any explicit spill slots passed to the statepoint, record; // them, but otherwise do not do anything special. These are user provided; // allocas and give control over placement to the consumer. In this case,; // it is the contents of the slot which may get updated, not the pointer to; // the alloca",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:86,Safety,safe,safepoint,86,"// The basic scheme here is that information about both the original call and; // the safepoint is encoded in the CallInst. We create a temporary call and; // lower it, then reverse engineer the calling sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:3,Usability,Clear,Clear,3,// Clear state,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:49,Deployability,update,update,49,"// Now that we've emitted the spills, we need to update the root so that the; // call sequence is ordered correctly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:403,Performance,load,loads,403,"// Build the GC_TRANSITION_START node if necessary.; //; // The operands to the GC_TRANSITION_{START,END} nodes are laid out in the; // order in which they appear in the call to the statepoint intrinsic. If; // any of the operands is a pointer-typed, that operand is immediately; // followed by a SRCVALUE for the pointer that may be used during lowering; // (e.g. to form MachinePointerInfo values for loads/stores).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:51,Availability,mask,mask,51,// Add call arguments; // Get position of register mask in the call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:16,Availability,mask,mask,16,// Add register mask from call node,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:50,Energy Efficiency,efficient,efficiently,50,// Handle multiple gc.relocates of the same input efficiently.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:181,Availability,avail,available,181,"// If we didn't relocate a value, we'll essentialy end up inserting an; // additional use of the original value when lowering the gc.relocate.; // We need to make sure the value is available at the new use, which; // might be in another block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:75,Deployability,update,update,75,"// Since we always emit CopyToRegs (even for local relocates), we must; // update root, so that they are emitted before any local uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:66,Modifiability,variab,variable,66,"// TODO: A better future implementation would be to emit a single variable; // argument, variable return value STATEPOINT node here and then hookup the; // return value of each gc.relocate to the respective output of the; // previously emitted STATEPOINT value. Unfortunately, this doesn't appear; // to actually be possible today.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:89,Modifiability,variab,variable,89,"// TODO: A better future implementation would be to emit a single variable; // argument, variable return value STATEPOINT node here and then hookup the; // return value of each gc.relocate to the respective output of the; // previously emitted STATEPOINT value. Unfortunately, this doesn't appear; // to actually be possible today.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:391,Performance,optimiz,optimizations,391,"// There may be duplication in the gc.relocate list; such as two copies of; // each relocation on normal and exceptional path for an invoke. We only; // need to spill once and record one copy in the stackmap, but we need to; // reload once per gc.relocate. (Dedupping gc.relocates is trickier and best; // handled as a CSE problem elsewhere.); // TODO: There a couple of major stackmap size optimizations we could do; // here if we wished.; // 1) If we've encountered a derived pair {B, D}, we don't need to actually; // record {B,B} if it's seen later.; // 2) Due to rematerialization, actual derived pointers are somewhat rare;; // given that, we could change the format to record base pointer relocations; // separately with half the space. This would require a format rev and a; // fairly major rework of the STATEPOINT node though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:75,Performance,perform,perform,75,// Result value will be used in a same basic block. Don't export it or; // perform any explicit register copies. The gc_result will simply grab; // this value. ,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:132,Usability,simpl,simply,132,// Result value will be used in a same basic block. Don't export it or; // perform any explicit register copies. The gc_result will simply grab; // this value. ,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:40,Usability,simpl,simply,40,"// The result value of the gc_result is simply the result of the actual; // call. We've already emitted this, so just grab the value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp:149,Security,validat,validation,149,// Consistency check; // We skip this check for relocates not in the same basic block as their; // statepoint. It would be too expensive to preserve validation info through; // different basic blocks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h:196,Energy Efficiency,schedul,scheduled,196,/// This class tracks both per-statepoint and per-selectiondag information.; /// For each statepoint it tracks locations of it's gc valuess (incoming and; /// relocated) and list of gcreloc calls scheduled for visiting (this is; /// used for a debug mode consistency check only). The spill slot tracking; /// works in concert with information in FunctionLoweringInfo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h:74,Performance,perform,performs,74,/// Reset all state tracking for a newly encountered safepoint. Also; /// performs some consistency checking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h:53,Safety,safe,safepoint,53,/// Reset all state tracking for a newly encountered safepoint. Also; /// performs some consistency checking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h:4,Usability,Clear,Clear,4,/// Clear the memory usage of this object. This is called from; /// SelectionDAGBuilder::clear. We require this is never called in the; /// midst of processing a statepoint sequence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h:89,Usability,clear,clear,89,/// Clear the memory usage of this object. This is called from; /// SelectionDAGBuilder::clear. We require this is never called in the; /// midst of processing a statepoint sequence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h:142,Testability,assert,assertion,142,"/// Record the fact that we expect to encounter a given gc_relocate; /// before the next statepoint. If we don't see it, we'll report; /// an assertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h:154,Testability,assert,assertion,154,"/// Remove this gc_relocate from the list we're expecting to see; /// before the next statepoint. If we weren't expecting to see; /// it, we'll report an assertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h:237,Energy Efficiency,allocate,allocated,237,"/// A boolean indicator for each slot listed in the FunctionInfo as to; /// whether it has been used in the current statepoint. Since we try to; /// preserve stack slots across safepoints, there can be gaps in which; /// slots have been allocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h:177,Safety,safe,safepoints,177,"/// A boolean indicator for each slot listed in the FunctionInfo as to; /// whether it has been used in the current statepoint. Since we try to; /// preserve stack slots across safepoints, there can be gaps in which; /// slots have been allocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h:56,Energy Efficiency,allocate,allocated,56,/// Points just beyond the last slot known to have been allocated,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/StatepointLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:12,Safety,safe,safe,12,// It's not safe to eliminate the sign / zero extension of the return value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:32,Performance,load,load,32,"// For now, only use non-vector load / store's for the left-over pieces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:126,Performance,load,load,126,"// If the new VT cannot cover all of the remaining bits, then consider; // issuing a (or a pair of) unaligned and overlapping load / store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:109,Deployability,update,update,109,// FIXME: Currently we cannot really respect all IEEE predicates due to libgcc; // not supporting it. We can update this code when libgcc provides such; // functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Deployability,Update,Update,3,// Update Chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:64,Performance,load,load,64,// If the address is not even local to this DSO we will have to load it from; // a got and then add the offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:85,Performance,Optimiz,Optimization,85,"//===----------------------------------------------------------------------===//; // Optimization Methods; //===----------------------------------------------------------------------===//; /// If the specified instruction has a constant integer operand and there are; /// bits set in that constant that are not demanded, then clear those bits and; /// return true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:326,Usability,clear,clear,326,"//===----------------------------------------------------------------------===//; // Optimization Methods; //===----------------------------------------------------------------------===//; /// If the specified instruction has a constant integer operand and there are; /// bits set in that constant that are not demanded, then clear those bits and; /// return true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:31,Performance,optimiz,optimization,31,// Do target-specific constant optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:110,Energy Efficiency,power,power-of-,110,"// Search for the smallest integer type with free casts to and from; // Op's type. For expedience, just check power-of-2 integer types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:34,Performance,scalab,scalable,34,"// Since the number of lanes in a scalable vector is unknown at compile time,; // we track one bit which is implicitly broadcast to all lanes. This means; // that all lanes in a scalable vector are considered demanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:178,Performance,scalab,scalable,178,"// Since the number of lanes in a scalable vector is unknown at compile time,; // we track one bit which is implicitly broadcast to all lanes. This means; // that all lanes in a scalable vector are considered demanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:33,Testability,test,test,33,// TODO - bigendian once we have test coverage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:12,Testability,test,testing,12,"// If we're testing X < 0, then this compare isn't needed - just use X!; // FIXME: We're limiting to integer types here, but this should also work; // if we don't care about FP signed-zero. The use of SETLT with FP means; // that we don't care about NaNs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:18,Modifiability,extend,extended,18,"// If none of the extended bits are demanded, eliminate the sextinreg.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:32,Modifiability,extend,extended,32,"// If the input is already sign extended, just drop the extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:50,Modifiability,extend,extended,50,"// If we only want the lowest element and none of extended bits, then we can; // return the bitcasted source vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:99,Deployability,patch,patch,99,// TODO: Probably okay to remove after audit; here to reduce change size; // in initial enablement patch for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:54,Energy Efficiency,reduce,reduce,54,// TODO: Probably okay to remove after audit; here to reduce change size; // in initial enablement patch for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:109,Performance,scalab,scalable,109,// TODO: Probably okay to remove after audit; here to reduce change size; // in initial enablement patch for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:39,Security,audit,audit,39,// TODO: Probably okay to remove after audit; here to reduce change size; // in initial enablement patch for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:34,Performance,scalab,scalable,34,"// Since the number of lanes in a scalable vector is unknown at compile time,; // we track one bit which is implicitly broadcast to all lanes. This means; // that all lanes in a scalable vector are considered demanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:178,Performance,scalab,scalable,178,"// Since the number of lanes in a scalable vector is unknown at compile time,; // we track one bit which is implicitly broadcast to all lanes. This means; // that all lanes in a scalable vector are considered demanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:21,Energy Efficiency,power,power-,21,"// Find the smallest power-2 type that is legal for this vector size and; // operation, given the original type size and the number of known sign/zero; // bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:113,Availability,down,downstream,113,"/// Look at Op. At this point, we know that only the OriginalDemandedBits of the; /// result of Op are ever used downstream. If we can use this information to; /// simplify Op, create a new simplified DAG node and return true, returning the; /// original and new nodes in Old and New. Otherwise, analyze the expression and; /// return a mask of Known bits for the expression (used to simplify the; /// caller). The Known bits may only be accurate for those bits in the; /// OriginalDemandedBits and OriginalDemandedElts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:337,Availability,mask,mask,337,"/// Look at Op. At this point, we know that only the OriginalDemandedBits of the; /// result of Op are ever used downstream. If we can use this information to; /// simplify Op, create a new simplified DAG node and return true, returning the; /// original and new nodes in Old and New. Otherwise, analyze the expression and; /// return a mask of Known bits for the expression (used to simplify the; /// caller). The Known bits may only be accurate for those bits in the; /// OriginalDemandedBits and OriginalDemandedElts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:164,Usability,simpl,simplify,164,"/// Look at Op. At this point, we know that only the OriginalDemandedBits of the; /// result of Op are ever used downstream. If we can use this information to; /// simplify Op, create a new simplified DAG node and return true, returning the; /// original and new nodes in Old and New. Otherwise, analyze the expression and; /// return a mask of Known bits for the expression (used to simplify the; /// caller). The Known bits may only be accurate for those bits in the; /// OriginalDemandedBits and OriginalDemandedElts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:190,Usability,simpl,simplified,190,"/// Look at Op. At this point, we know that only the OriginalDemandedBits of the; /// result of Op are ever used downstream. If we can use this information to; /// simplify Op, create a new simplified DAG node and return true, returning the; /// original and new nodes in Old and New. Otherwise, analyze the expression and; /// return a mask of Known bits for the expression (used to simplify the; /// caller). The Known bits may only be accurate for those bits in the; /// OriginalDemandedBits and OriginalDemandedElts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:384,Usability,simpl,simplify,384,"/// Look at Op. At this point, we know that only the OriginalDemandedBits of the; /// result of Op are ever used downstream. If we can use this information to; /// simplify Op, create a new simplified DAG node and return true, returning the; /// original and new nodes in Old and New. Otherwise, analyze the expression and; /// return a mask of Known bits for the expression (used to simplify the; /// caller). The Known bits may only be accurate for those bits in the; /// OriginalDemandedBits and OriginalDemandedElts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:12,Usability,simpl,simplify,12,// We can't simplify target constants.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:84,Usability,Simpl,SimplifyDemandedBits,84,// Collect the known bits that are shared by every demanded element.; // TODO: Call SimplifyDemandedBits for non-constant demanded elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:51,Performance,load,loaded,51,// If this is a ZEXTLoad and we are looking at the loaded value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use src if we don't need anything from it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use src if we don't need anything from it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:153,Usability,simpl,simplify,153,"// If the RHS is a constant, check to see if the LHS would be zero without; // using the bits from the RHS. Below, we use knowledge about the RHS to; // simplify the LHS, here we're using information from the LHS to simplify; // the RHS.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:216,Usability,simpl,simplify,216,"// If the RHS is a constant, check to see if the LHS would be zero without; // using the bits from the RHS. Below, we use knowledge about the RHS to; // simplify the LHS, here we're using information from the LHS to simplify; // the RHS.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:214,Availability,mask,mask,214,"// Bitwise-not (xor X, -1) is a special case: we don't usually shrink its; // constant, but if this 'and' is only clearing bits that were just set by; // the xor, then this 'and' can be eliminated by shrinking the mask of; // the xor. For example, for a 32-bit X:; // and (xor (srl X, 31), -1), 1 --> xor (srl X, 31), 1",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:114,Usability,clear,clearing,114,"// Bitwise-not (xor X, -1) is a special case: we don't usually shrink its; // constant, but if this 'and' is only clearing bits that were just set by; // the xor, then this 'and' can be eliminated by shrinking the mask of; // the xor. For example, for a 32-bit X:; // and (xor (srl X, 31), -1), 1 --> xor (srl X, 31), 1",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:43,Usability,simpl,simplify,43,"// If the RHS is a constant, see if we can simplify it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:43,Usability,simpl,simplify,43,"// If the RHS is a constant, see if we can simplify it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:139,Availability,mask,masks,139,"// (or (and X, C1), (and (or X, Y), C2)) -> (or (and X, C1|C2), (and Y, C2)); // TODO: Use SimplifyMultipleUseDemandedBits to peek through masks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:91,Usability,Simpl,SimplifyMultipleUseDemandedBits,91,"// (or (and X, C1), (and (or X, Y), C2)) -> (or (and X, C1|C2), (and Y, C2)); // TODO: Use SimplifyMultipleUseDemandedBits to peek through masks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:167,Usability,clear,cleared,167,"// If one side is a constant, and all of the set bits in the constant are; // also known set on the other side, turn this into an AND, as we know; // the bits will be cleared.; // e.g. (X | C1) ^ C2 --> (X | C1) & ~C2 iff (C1&C2) == C2; // NB: it is okay if more bits are known than are requested",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:91,Usability,simpl,simplified,91,// Don't crash on an oversized shift. We can not guarantee that a; // bogus shift has been simplified to undef.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:37,Availability,mask,mask,37,"// If the xor constant is a demanded mask, do a 'not' before the; // shift:; // xor (X << ShiftC), XorC --> (not X) << ShiftC; // xor (X >> ShiftC), XorC --> (not X) >> ShiftC",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:48,Usability,simpl,simplify,48,"// If the operands are constants, see if we can simplify them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:48,Usability,simpl,simplify,48,"// If the operands are constants, see if we can simplify them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:12,Testability,test,testing,12,"// If we're testing X < 0, then this compare isn't needed - just use X!; // FIXME: We're limiting to integer types here, but this should also work; // if we don't care about FP signed-zero. The use of SETLT with FP means; // that we don't care about NaNs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:51,Usability,simpl,simplify,51,"// If this is ((X >>u C1) << ShAmt), see if we can simplify this into a; // single shift. We can do this if the bottom bits (which are shifted; // out) are never demanded.; // TODO - support non-uniform vector amounts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:18,Performance,optimiz,optimization,18,"// Repeat the SHL optimization above in cases where an extension; // intervenes: (shl (anyext (shr x, c1)), c2) to; // (shl (anyext x), c2-c1). This requires that the bottom c1 bits; // aren't demanded (as above) and that the shifted upper c1 bits of; // x aren't demanded.; // TODO - support non-uniform vector amounts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:79,Integrability,wrap,wrap,79,// Disable the nsw and nuw flags. We can no longer guarantee that we; // won't wrap after simplification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:90,Usability,simpl,simplification,90,// Disable the nsw and nuw flags. We can no longer guarantee that we; // won't wrap after simplification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:58,Availability,mask,mask,58,"// This is a variable shift, so we can't shift the demand mask by a known; // amount. But if we are not demanding high bits, then we are not; // demanding those bits from the pre-shifted operand either.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:13,Modifiability,variab,variable,13,"// This is a variable shift, so we can't shift the demand mask by a known; // amount. But if we are not demanding high bits, then we are not; // demanding those bits from the pre-shifted operand either.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:79,Integrability,wrap,wrap,79,// Disable the nsw and nuw flags. We can no longer guarantee that we; // won't wrap after simplification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:90,Usability,simpl,simplification,90,// Disable the nsw and nuw flags. We can no longer guarantee that we; // won't wrap after simplification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:51,Usability,simpl,simplify,51,"// If this is ((X << C1) >>u ShAmt), see if we can simplify this into a; // single shift. We can do this if the top bits (which are shifted out); // are never demanded.; // TODO - support non-uniform vector amounts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:152,Modifiability,variab,variable,152,"// If this is an arithmetic shift right and only the low-bit is set, we can; // always convert this into a logical shr, even if the shift amount is; // variable. The low bit of the shift cannot be an input sign bit unless; // the shift amount is >= the size of the datatype, which is undefined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:107,Testability,log,logical,107,"// If this is an arithmetic shift right and only the low-bit is set, we can; // always convert this into a logical shr, even if the shift amount is; // variable. The low bit of the shift cannot be an input sign bit unless; // the shift amount is >= the size of the datatype, which is undefined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:119,Modifiability,extend,extended,119,"// Even if we can't convert to sext_inreg, we might be able to; // remove this shift pair if the input is already sign extended.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:49,Usability,simpl,simplify,49,"// If we're only demanding signbits, then we can simplify to OR/AND node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:13,Availability,down,down,13,"// Round NTZ down to the next byte. If we have 11 trailing zeros, then; // we need all the bits down to bit 8. Likewise, round NLZ. If we; // have 14 leading zeros, round to 8.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:96,Availability,down,down,96,"// Round NTZ down to the next byte. If we have 11 trailing zeros, then; // we need all the bits down to bit 8. Likewise, round NLZ. If we; // have 14 leading zeros, round to 8.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:40,Modifiability,extend,extended,40,// However if the input is already sign extended we expect the sign; // extension to be dropped altogether later and do not simplify.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:124,Usability,simpl,simplify,124,// However if the input is already sign extended we expect the sign; // extension to be dropped altogether later and do not simplify.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:18,Modifiability,extend,extended,18,"// If none of the extended bits are demanded, eliminate the sextinreg.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:18,Modifiability,extend,extended,18,"// Since the sign extended bits are demanded, we know that the sign; // bit is demanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:48,Usability,clear,clear,48,"// If the sign bit of the input is known set or clear, then we know the; // top bits of the result.; // If the input sign bit is known zero, convert this into a zero extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:27,Modifiability,extend,extended,27,// If we only need the non-extended bits of the bottom element; // then we can just bitcast to the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:26,Modifiability,extend,extended,26,"// Since some of the sign extended bits are demanded, we know that the sign; // bit is demanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:27,Modifiability,extend,extended,27,// If we only need the non-extended bits of the bottom element; // then we can just bitcast to the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:57,Modifiability,extend,extend,57,"// If the sign bit is known zero, convert this to a zero extend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Usability,Simpl,Simplify,3,"// Simplify the input, using demanded bit information, and compute the known; // zero/one bits live out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Testability,Assert,AssertZext,3,"// AssertZext demands all of the high bits, plus any of the low bits; // demanded by its users.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:94,Modifiability,extend,extended,94,// If BitWidth > EltBitWidth the value is anyext:ed. So we do not know; // anything about the extended bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:122,Performance,optimiz,optimizations,122,// Make a FGETSIGN + SHL to move the sign bit into the appropriate; // place. We expect the SHL to be eliminated by other optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:31,Usability,Simpl,SimplifyDemanded,31,// Bitcast from a vector using SimplifyDemanded Bits/VectorElts.; // Demand the elt/bit if any of the original elts/bits are demanded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:33,Testability,test,test,33,// TODO - bigendian once we have test coverage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:34,Performance,perform,performed,34,// See if the operation should be performed at a smaller bit width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:79,Integrability,wrap,wrap,79,// Disable the nsw and nuw flags. We can no longer guarantee that we; // won't wrap after simplification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:90,Usability,simpl,simplification,90,// Disable the nsw and nuw flags. We can no longer guarantee that we; // won't wrap after simplification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:39,Usability,simpl,simply,39,// neg x with only low bit demanded is simply x.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:79,Integrability,wrap,wrap,79,// Disable the nsw and nuw flags. We can no longer guarantee that we; // won't wrap after simplification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:90,Usability,simpl,simplification,90,// Disable the nsw and nuw flags. We can no longer guarantee that we; // won't wrap after simplification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:45,Energy Efficiency,power,power-of-,45,// Match a multiply with a disguised negated-power-of-2 and convert to a; // an equivalent shift-left amount.; // Example: (X * MulC) + Op1 --> Op1 - (X << log2(-MulC)),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:55,Energy Efficiency,power,power-of-,55,"// Don't touch opaque constants. Also, ignore zero and power-of-2; // multiplies. Those will get folded later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:99,Deployability,patch,patch,99,// TODO: Probably okay to remove after audit; here to reduce change size; // in initial enablement patch for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:54,Energy Efficiency,reduce,reduce,54,// TODO: Probably okay to remove after audit; here to reduce change size; // in initial enablement patch for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:109,Performance,scalab,scalable,109,// TODO: Probably okay to remove after audit; here to reduce change size; // in initial enablement patch for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:39,Security,audit,audit,39,// TODO: Probably okay to remove after audit; here to reduce change size; // in initial enablement patch for scalable vectors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Safety,Avoid,Avoid,3,// Avoid folding to a constant if any OpaqueConstant is involved.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:35,Usability,simpl,simplify,35,// A multi use 'all demanded elts' simplify failed to find any knownbits.; // Try again just for the original demanded elts.; // Ensure we do this AFTER constant folding above.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:307,Modifiability,refactor,refactored,307,"// If both inputs for this element are either constant or undef and match; // the element type, compute the constant/undef result for this element of; // the vector.; // TODO: Ideally we would use FoldConstantArithmetic() here, but that does; // not handle FP constants. The code within getNode() should be refactored; // to avoid the danger of creating a bogus temporary node here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:325,Safety,avoid,avoid,325,"// If both inputs for this element are either constant or undef and match; // the element type, compute the constant/undef result for this element of; // the vector.; // TODO: Ideally we would use FoldConstantArithmetic() here, but that does; // not handle FP constants. The code within getNode() should be refactored; // to avoid the danger of creating a bogus temporary node here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:49,Performance,scalab,scalable,49,// TODO: For now we assume we know nothing about scalable vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:63,Usability,Simpl,SimplifyDemandedBits,63,// We only handle vectors here.; // TODO - investigate calling SimplifyDemandedBits/ComputeKnownBits?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:134,Testability,test,test,134,"// Try calling SimplifyDemandedBits, converting demanded elts to the bits; // of the large element.; // TODO - bigendian once we have test coverage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:15,Usability,Simpl,SimplifyDemandedBits,15,"// Try calling SimplifyDemandedBits, converting demanded elts to the bits; // of the large element.; // TODO - bigendian once we have test coverage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:26,Usability,simpl,simplify,26,// Check all elements and simplify any unused elements with UNDEF.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:9,Usability,simpl,simplify,9,// Don't simplify BROADCASTS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:17,Usability,simpl,simplify,17,// See if we can simplify either vselect operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:17,Usability,simpl,simplify,17,// See if we can simplify either shuffle operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:12,Availability,mask,mask,12,// Simplify mask using undef elements from LHS/RHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Usability,Simpl,Simplify,3,// Simplify mask using undef elements from LHS/RHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:24,Availability,mask,masks,24,// Update legal shuffle masks based on demanded elements if it won't reduce; // to Identity which can cause premature removal of the shuffle mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:141,Availability,mask,mask,141,// Update legal shuffle masks based on demanded elements if it won't reduce; // to Identity which can cause premature removal of the shuffle mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Deployability,Update,Update,3,// Update legal shuffle masks based on demanded elements if it won't reduce; // to Identity which can cause premature removal of the shuffle mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:69,Energy Efficiency,reduce,reduce,69,// Update legal shuffle masks based on demanded elements if it won't reduce; // to Identity which can cause premature removal of the shuffle mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:57,Availability,mask,mask,57,"// zext - if we just need the bottom element then we can mask:; // zext(and(x,c)) -> and(x,c') iff the zext is the only user of the and.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.; // TODO - use KnownUndef to relax the demandedelts?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:57,Safety,avoid,avoid,57,// TODO: use getKnownUndefForVectorBinop?; // Attempt to avoid multi-use ops if we don't need anything from them.; // TODO - use KnownUndef to relax the demandedelts?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:116,Modifiability,Extend,Extend,116,"// If either side has a zero element, then the result element is zero, even; // if the other is an UNDEF.; // TODO: Extend getKnownUndefForVectorBinop to also deal with known zeros; // and then handle 'and' nodes with the rest of the binop opcodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:14,Safety,avoid,avoid,14,// Attempt to avoid multi-use ops if we don't need anything from them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:45,Availability,Mask,Mask,45,/// Determine which of the bits specified in Mask are known to be either zero or; /// one and return them in the Known.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:59,Security,expose,expose,59,/// This method can be implemented by targets that want to expose additional; /// information about sign bits to the DAG Combiner.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:6,Modifiability,extend,extended,6,"// An extended value of 1 is always true, unless its original type is i1,; // in which case it will be sign extended to -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:108,Modifiability,extend,extended,108,"// An extended value of 1 is always true, unless its original type is i1,; // in which case it will be sign extended to -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:51,Performance,optimiz,optimize,51,/// This helper function of SimplifySetCC tries to optimize the comparison when; /// either operand of the SetCC node is a bitwise-and instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:28,Usability,Simpl,SimplifySetCC,28,/// This helper function of SimplifySetCC tries to optimize the comparison when; /// either operand of the SetCC node is a bitwise-and instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:33,Availability,mask,mask,33,"// Try to eliminate a power-of-2 mask constant by converting to a signbit; // test in a narrow type that we can truncate to with no cost. Examples:; // (i32 X & 32768) == 0 --> (trunc X to i16) >= 0; // (i32 X & 32768) != 0 --> (trunc X to i16) < 0; // TODO: This conservatively checks for type legality on the source and; // destination types. That may inhibit optimizations, but it also; // allows setcc->shift transforms that may be more beneficial.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:22,Energy Efficiency,power,power-of-,22,"// Try to eliminate a power-of-2 mask constant by converting to a signbit; // test in a narrow type that we can truncate to with no cost. Examples:; // (i32 X & 32768) == 0 --> (trunc X to i16) >= 0; // (i32 X & 32768) != 0 --> (trunc X to i16) < 0; // TODO: This conservatively checks for type legality on the source and; // destination types. That may inhibit optimizations, but it also; // allows setcc->shift transforms that may be more beneficial.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:362,Performance,optimiz,optimizations,362,"// Try to eliminate a power-of-2 mask constant by converting to a signbit; // test in a narrow type that we can truncate to with no cost. Examples:; // (i32 X & 32768) == 0 --> (trunc X to i16) >= 0; // (i32 X & 32768) != 0 --> (trunc X to i16) < 0; // TODO: This conservatively checks for type legality on the source and; // destination types. That may inhibit optimizations, but it also; // allows setcc->shift transforms that may be more beneficial.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:78,Testability,test,test,78,"// Try to eliminate a power-of-2 mask constant by converting to a signbit; // test in a narrow type that we can truncate to with no cost. Examples:; // (i32 X & 32768) == 0 --> (trunc X to i16) >= 0; // (i32 X & 32768) != 0 --> (trunc X to i16) < 0; // TODO: This conservatively checks for type legality on the source and; // destination types. That may inhibit optimizations, but it also; // allows setcc->shift transforms that may be more beneficial.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:92,Modifiability,variab,variable,92,"// Simplify X & Y == Y to X & Y != 0 if Y has exactly one bit set.; // Note that where Y is variable and is known to have at most one bit set; // (for example, if it is Z & 1) we cannot do this; the expressions are not; // equivalent when Y == 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Usability,Simpl,Simplify,3,"// Simplify X & Y == Y to X & Y != 0 if Y has exactly one bit set.; // Note that where Y is variable and is known to have at most one bit set; // (for example, if it is Z & 1) we cannot do this; the expressions are not; // equivalent when Y == 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:182,Availability,mask,mask,182,"// If the target supports an 'and-not' or 'and-complement' logic operation,; // try to use that to make a comparison operation more efficient.; // But don't do this transform if the mask is a single bit because there are; // more efficient ways to deal with that case (for example, 'bt' on x86 or; // 'rlwinm' on PPC).; // Bail out if the compare operand that we want to turn into a zero is; // already a zero (otherwise, infinite loop).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:132,Energy Efficiency,efficient,efficient,132,"// If the target supports an 'and-not' or 'and-complement' logic operation,; // try to use that to make a comparison operation more efficient.; // But don't do this transform if the mask is a single bit because there are; // more efficient ways to deal with that case (for example, 'bt' on x86 or; // 'rlwinm' on PPC).; // Bail out if the compare operand that we want to turn into a zero is; // already a zero (otherwise, infinite loop).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:230,Energy Efficiency,efficient,efficient,230,"// If the target supports an 'and-not' or 'and-complement' logic operation,; // try to use that to make a comparison operation more efficient.; // But don't do this transform if the mask is a single bit because there are; // more efficient ways to deal with that case (for example, 'bt' on x86 or; // 'rlwinm' on PPC).; // Bail out if the compare operand that we want to turn into a zero is; // already a zero (otherwise, infinite loop).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:59,Testability,log,logic,59,"// If the target supports an 'and-not' or 'and-complement' logic operation,; // try to use that to make a comparison operation more efficient.; // But don't do this transform if the mask is a single bit because there are; // more efficient ways to deal with that case (for example, 'bt' on x86 or; // 'rlwinm' on PPC).; // Bail out if the compare operand that we want to turn into a zero is; // already a zero (otherwise, infinite loop).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Security,Validat,Validate,3,// Validate constants ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:24,Energy Efficiency,power,power-of-two,24,"// Both of them must be power-of-two, and the constant from setcc is bigger.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:12,Energy Efficiency,power,power-of-two,12,"// They are power-of-two, so which bit is set?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:13,Testability,log,logical,13,// must be a logical shift.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:12,Energy Efficiency,power,power-of-,12,// Expand a power-of-2-or-zero comparison based on ctpop:; // (ctpop x) u< 2 -> (x & x-1) == 0; // (ctpop x) u> 1 -> (x & x-1) != 0,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:12,Energy Efficiency,power,power-of-,12,// Expand a power-of-2 comparison based on ctpop,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:13,Testability,test,testing,13,"// If we are testing for all-bits-clear, we might be able to do that with; // less shifting since bit-order does not matter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:34,Usability,clear,clear,34,"// If we are testing for all-bits-clear, we might be able to do that with; // less shifting since bit-order does not matter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:32,Energy Efficiency,reduce,reduce,32,// Canonicalize fshr as fshl to reduce pattern-matching.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:11,Usability,simpl,simplify,11,"/// Try to simplify a setcc built with the specified operands and cc. If it is; /// unable to simplify it, return a null SDValue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:94,Usability,simpl,simplify,94,"/// Try to simplify a setcc built with the specified operands and cc. If it is; /// unable to simplify it, return a null SDValue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:164,Performance,scalab,scalable,164,"// Canonicalize toward having the constant on the RHS.; // TODO: Handle non-splat vector constants. All undef causes trouble.; // FIXME: We can't yet fold constant scalable vector splats, so avoid an; // infinite loop here when we encounter one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:191,Safety,avoid,avoid,191,"// Canonicalize toward having the constant on the RHS.; // TODO: Handle non-splat vector constants. All undef causes trouble.; // FIXME: We can't yet fold constant scalable vector splats, so avoid an; // infinite loop here when we encounter one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Performance,Optimiz,Optimize,3,// Optimize some CTPOP cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:29,Integrability,wrap,wrap,29,"// For equality to 0 of a no-wrap multiply, decompose and test each op:; // X * Y == 0 --> (X == 0) || (Y == 0); // X * Y != 0 --> (X != 0) && (Y != 0); // TODO: This bails out if minsize is set, but if the target doesn't have a; // single instruction multiply for this type, it would likely be; // smaller to decompose.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:58,Testability,test,test,58,"// For equality to 0 of a no-wrap multiply, decompose and test each op:; // X * Y == 0 --> (X == 0) || (Y == 0); // X * Y != 0 --> (X != 0) && (Y != 0); // TODO: This bails out if minsize is set, but if the target doesn't have a; // single instruction multiply for this type, it would likely be; // smaller to decompose.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:71,Usability,simpl,simplify,71,"// If truncating the setcc operands is not desirable, we can still; // simplify the expression in some cases:; // setcc ([sz]ext (setcc x, y, cc)), 0, setne) -> setcc (x, y, cc); // setcc ([sz]ext (setcc x, y, cc)), 0, seteq) -> setcc (x, y, inv(cc)); // setcc (zext (setcc x, y, cc)), 1, setne) -> setcc (x, y, inv(cc)); // setcc (zext (setcc x, y, cc)), 1, seteq) -> setcc (x, y, cc); // setcc (sext (setcc x, y, cc)), -1, setne) -> setcc (x, y, inv(cc)); // setcc (sext (setcc x, y, cc)), -1, seteq) -> setcc (x, y, cc)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:23,Performance,load,load,23,"// If the LHS is '(and load, const)', the RHS is 0, the test is for; // equality or unsigned, and all 1 bits of the const are in the same; // partial word, see if we can shorten the load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:182,Performance,load,load,182,"// If the LHS is '(and load, const)', the RHS is 0, the test is for; // equality or unsigned, and all 1 bits of the const are in the same; // partial word, see if we can shorten the load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:56,Testability,test,test,56,"// If the LHS is '(and load, const)', the RHS is 0, the test is for; // equality or unsigned, and all 1 bits of the const are in the same; // partial word, see if we can shorten the load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:31,Modifiability,extend,extending,31,"// We can narrow (e.g.) 16-bit extending loads on 32-bit target to; // 8 bits, but have to be careful...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:41,Performance,load,loads,41,"// We can narrow (e.g.) 16-bit extending loads on 32-bit target to; // 8 bits, but have to be careful...",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:32,Performance,perform,perform,32,"// If the LHS is a ZERO_EXTEND, perform the comparison on the input.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:71,Modifiability,extend,extended,71,"// If the comparison constant has bits in the upper part, the; // zero-extended value could never match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:21,Performance,perform,perform,21,"// Otherwise, we can perform the comparison with the low bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:9,Usability,simpl,simplifications,9,// These simplifications apply to splat vectors as well.; // TODO: Handle more splat vector cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:126,Usability,clear,clear,126,"// For all/any comparisons, replace or(x,shl(y,bw/2)) with and/or(x,y).; // For example, when high 32-bits of i64 X are known clear:; // all bits clear: (X | (Y<<32)) == 0 --> (X | Y) == 0; // all bits set: (X | (Y<<32)) == -1 --> (X & Y) == -1",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:146,Usability,clear,clear,146,"// For all/any comparisons, replace or(x,shl(y,bw/2)) with and/or(x,y).; // For example, when high 32-bits of i64 X are known clear:; // all bits clear: (X | (Y<<32)) == 0 --> (X | Y) == 0; // all bits set: (X | (Y<<32)) == -1 --> (X & Y) == -1",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:22,Usability,simpl,simplifications,22,// Back to non-vector simplifications.; // TODO: Can we do these for vector splats?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:37,Performance,Perform,Perform,37,// (X & 8) != 0 --> (X & 8) >> 3; // Perform the xform if the AND RHS is a single bit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:37,Performance,Perform,Perform,37,// (X & 8) == 8 --> (X & 8) >> 3; // Perform the xform if C1 is a single bit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:206,Safety,avoid,avoids,206,"// Otherwise, we know the RHS is not a NaN. Simplify the node to drop the; // constant if knowing that the operand is non-nan is enough. We prefer to; // have SETO(x,x) instead of SETO(x, 0.0) because this avoids having to; // materialize 0.0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:44,Usability,Simpl,Simplify,44,"// Otherwise, we know the RHS is not a NaN. Simplify the node to drop the; // constant if knowing that the operand is non-nan is enough. We prefer to; // have SETO(x,x) instead of SETO(x, 0.0) because this avoids having to; // materialize 0.0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:32,Performance,optimiz,optimization,32,// The sext(setcc()) => setcc() optimization relies on the appropriate; // constant being emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:48,Usability,simpl,simplify,48,"// Otherwise, we can't fold it. However, we can simplify it to SETUO/SETO; // if it is not already.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Usability,Simpl,Simplify,3,// Simplify (X+Y) == (X+Z) --> Y == Z,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:173,Modifiability,variab,variable,173,"// (X+Y) == X --> Y == 0 and similar folds.; // Don't do this if X is an immediate that can fold into a cmp; // instruction and X+Y has other uses. It could be an induction variable; // chain, and the transform would increase register pressure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:29,Performance,optimiz,optimizing,29,"// When division is cheap or optimizing for minimum size,; // fall through to DIVREM creation by skipping this fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:30,Performance,optimiz,optimization,30,// Default implementation: no optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Usability,Simpl,Simple,3,// Simple Integer,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Usability,Simpl,Simple,3,// Simple Integer or Relocatable Constant,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Usability,Simpl,Simple,3,// Simple Integer or Relocatable Constant,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Usability,Simpl,Simple,3,// Simple Integer,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:201,Security,access,accessible,201,"// Match (GA) or (C) or (GA+C) or (GA-C) or ((GA+C)+C) or (((GA+C)+C)+C),; // etc., since getelementpointer is variadic. We can't use; // SelectionDAG::FoldSymbolOffset because it expects the GA to be accessible; // while in this case the GA may be furthest from the root node which is; // likely an ISD::ADD.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:122,Energy Efficiency,Schedul,ScheduleDAGSDNodes,122,"// gcc prints these as sign extended. Sign extend value to 64 bits; // now; without this it would get ZExt'd later in; // ScheduleDAGSDNodes::EmitNode, which is very generic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:28,Modifiability,extend,extended,28,"// gcc prints these as sign extended. Sign extend value to 64 bits; // now; without this it would get ZExt'd later in; // ScheduleDAGSDNodes::EmitNode, which is very generic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:43,Modifiability,extend,extend,43,"// gcc prints these as sign extended. Sign extend value to 64 bits; // now; without this it would get ZExt'd later in; // ScheduleDAGSDNodes::EmitNode, which is very generic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:278,Availability,error,error,278,"/// Split up the constraint string from the inline assembly value into the; /// specific constraints and their prefixes, and also tie in the associated; /// operand values.; /// If this returns an empty vector, and if the constraint string itself; /// isn't empty, there was an error parsing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Deployability,Update,Update,3,// Update multiple alternative constraint count.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:19,Integrability,wrap,wrapped,19,// Look for vector wrapped in a struct. e.g. { <16 x i8> }.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:3,Deployability,Update,Update,3,// Update best.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:225,Availability,error,error,225,"// If this is an output operand with a matching input operand, look up the; // matching input. If their types mismatch, e.g. one is an integer, the; // other is floating point, or their sizes are different, flag it as an; // error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:1119,Availability,avail,available,1119,"/// If there are multiple different constraints that we could pick for this; /// operand (e.g. ""imr"") try to pick the 'best' one.; /// This is somewhat tricky: constraints (TargetLowering::ConstraintType) fall; /// into seven classes:; /// Register -> one specific register; /// RegisterClass -> a group of regs; /// Memory -> memory; /// Address -> a symbolic memory reference; /// Immediate -> immediate values; /// Other -> magic values (such as ""Flag Output Operands""); /// Unknown -> something we don't recognize yet and can't handle; /// Ideally, we would pick the most specific constraint possible: if we have; /// something that fits into a register, we would pick it. The problem here; /// is that if we have something that could either be in a register or in; /// memory that use of the register could cause selection of *other*; /// operands to fail: they might only succeed if we pick memory. Because of; /// this the heuristic we use is:; ///; /// 1) If there is an 'other' constraint, and if the operand is valid for; /// that constraint, use it. This makes us take advantage of 'i'; /// constraints when available.; /// 2) Otherwise, pick the most general constraint present. This prefers; /// 'm' over 'r', for example.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:18,Energy Efficiency,power,power-of-,18,"/// Build sdiv by power-of-2 with conditional move instructions; /// Ref: ""Hacker's Delight"" by Henry Warren 10-1; /// If conditional move/branch is preferred, we lower sdiv x, +/-2**k into:; /// bgez x, label; /// add x, x, 2**k-1; /// label:; /// sra res, x, k; /// neg res, res (when the divisor is negative)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:210,Energy Efficiency,Power,PowerPC,210,"/// Given an ISD::SDIV node expressing a divide by constant,; /// return a DAG expression to select that will generate the same value by; /// multiplying by a magic number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:236,Usability,Guid,Guide,236,"/// Given an ISD::SDIV node expressing a divide by constant,; /// return a DAG expression to select that will generate the same value by; /// multiplying by a magic number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:17,Usability,simpl,simple,17,// Limit this to simple scalars for now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:47,Usability,simpl,simpler,47,// If the sdiv has an 'exact' bit we can use a simpler lowering.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:25,Availability,mask,mask,25,"// Extract the sign bit, mask it and add it to the quotient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:210,Energy Efficiency,Power,PowerPC,210,"/// Given an ISD::UDIV node expressing a divide by constant,; /// return a DAG expression to select that will generate the same value by; /// multiplying by a magic number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:236,Usability,Guid,Guide,236,"/// Given an ISD::UDIV node expressing a divide by constant,; /// return a DAG expression to select that will generate the same value by; /// multiplying by a magic number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:17,Usability,simpl,simple,17,// Limit this to simple scalars for now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:47,Energy Efficiency,reduce,reduce,47,// Try to use leading zeros of the dividend to reduce the multiplier and; // avoid expensive fixups.; // TODO: Support vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:77,Safety,avoid,avoid,77,// Try to use leading zeros of the dividend to reduce the multiplier and; // avoid expensive fixups.; // TODO: Support vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:158,Safety,avoid,avoid,158,"// If all lanes are tautological (either all divisors are ones, or divisor; // is not greater than the constant we are comparing with),; // we will prefer to avoid the fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:10,Energy Efficiency,power,power-of-two,10,"// D is a power-of-two if D0 is one.; // If all divisors are power-of-two, we will prefer to avoid the fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:61,Energy Efficiency,power,power-of-two,61,"// D is a power-of-two if D0 is one.; // If all divisors are power-of-two, we will prefer to avoid the fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:93,Safety,avoid,avoid,93,"// D is a power-of-two if D0 is one.; // If all divisors are power-of-two, we will prefer to avoid the fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:63,Modifiability,extend,extend,63,"// P = inv(D0, 2^W); // 2^W requires W + 1 bits, so we have to extend and then truncate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:26,Energy Efficiency,power,powers-of-two,26,"// If this is a urem by a powers-of-two, avoid the fold since it can be; // best implemented as a bit test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:41,Safety,avoid,avoid,41,"// If this is a urem by a powers-of-two, avoid the fold since it can be; // best implemented as a bit test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:102,Testability,test,test,102,"// If this is a urem by a powers-of-two, avoid the fold since it can be; // best implemented as a bit test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:93,Performance,perform,performance,93,"// Rotate right only if any divisor was even. We avoid rotates for all-odd; // divisors as a performance improvement, since rotating by 0 is a no-op.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:49,Safety,avoid,avoid,49,"// Rotate right only if any divisor was even. We avoid rotates for all-odd; // divisors as a performance improvement, since rotating by 0 is a no-op.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:12,Safety,avoid,avoid,12,// NOTE: we avoid letting illegal types through even if we're before legalize; // ops – legalization has a hard time producing good code for this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:47,Safety,avoid,avoid,47,"// If all divisors are ones, we will prefer to avoid the fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:10,Energy Efficiency,power,power-of-two,10,"// D is a power-of-two if D0 is one. This includes INT_MIN.; // If all divisors are power-of-two, we will prefer to avoid the fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:84,Energy Efficiency,power,power-of-two,84,"// D is a power-of-two if D0 is one. This includes INT_MIN.; // If all divisors are power-of-two, we will prefer to avoid the fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:116,Safety,avoid,avoid,116,"// D is a power-of-two if D0 is one. This includes INT_MIN.; // If all divisors are power-of-two, we will prefer to avoid the fold.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:63,Modifiability,extend,extend,63,"// P = inv(D0, 2^W); // 2^W requires W + 1 bits, so we have to extend and then truncate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:31,Safety,avoid,avoid,31,"// If this is a srem by a one, avoid the fold since it can be constant-folded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:26,Energy Efficiency,power,powers-of-two,26,"// If this is a srem by a powers-of-two (including INT_MIN), avoid the fold; // since it can be best implemented as a bit test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp:61,Safety,avoid,avoid,61,"// If this is a srem by a powers-of-two (including INT_MIN), avoid the fold; // since it can be best implemented as a bit test.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp
