id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/allenai/scispacy/tree/v0.5.5/setup.py:33,Deployability,release,release,33,"""""""; Instructions for creating a release of the scispacy library. 1. Make sure your working directory is clean.; 2. Make sure that you have changed the versions in ""scispacy/version.py"".; 3. Create the distribution by running ""python setup.py sdist"" in the root of the repository.; 4. Check you can install the new distribution in a clean environment.; 5. Upload the distribution to pypi by running ""twine upload <path to the distribution> -u <username> -p <password>"".; This step will ask you for a username and password - the username is ""scispacy"" you can; get the password from LastPass.; """"""",MatchSource.CODE_COMMENT,setup.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/setup.py
https://github.com/allenai/scispacy/tree/v0.5.5/setup.py:299,Deployability,install,install,299,"""""""; Instructions for creating a release of the scispacy library. 1. Make sure your working directory is clean.; 2. Make sure that you have changed the versions in ""scispacy/version.py"".; 3. Create the distribution by running ""python setup.py sdist"" in the root of the repository.; 4. Check you can install the new distribution in a clean environment.; 5. Upload the distribution to pypi by running ""twine upload <path to the distribution> -u <username> -p <password>"".; This step will ask you for a username and password - the username is ""scispacy"" you can; get the password from LastPass.; """"""",MatchSource.CODE_COMMENT,setup.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/setup.py
https://github.com/allenai/scispacy/tree/v0.5.5/setup.py:458,Security,password,password,458,"""""""; Instructions for creating a release of the scispacy library. 1. Make sure your working directory is clean.; 2. Make sure that you have changed the versions in ""scispacy/version.py"".; 3. Create the distribution by running ""python setup.py sdist"" in the root of the repository.; 4. Check you can install the new distribution in a clean environment.; 5. Upload the distribution to pypi by running ""twine upload <path to the distribution> -u <username> -p <password>"".; This step will ask you for a username and password - the username is ""scispacy"" you can; get the password from LastPass.; """"""",MatchSource.CODE_COMMENT,setup.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/setup.py
https://github.com/allenai/scispacy/tree/v0.5.5/setup.py:513,Security,password,password,513,"""""""; Instructions for creating a release of the scispacy library. 1. Make sure your working directory is clean.; 2. Make sure that you have changed the versions in ""scispacy/version.py"".; 3. Create the distribution by running ""python setup.py sdist"" in the root of the repository.; 4. Check you can install the new distribution in a clean environment.; 5. Upload the distribution to pypi by running ""twine upload <path to the distribution> -u <username> -p <password>"".; This step will ask you for a username and password - the username is ""scispacy"" you can; get the password from LastPass.; """"""",MatchSource.CODE_COMMENT,setup.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/setup.py
https://github.com/allenai/scispacy/tree/v0.5.5/setup.py:568,Security,password,password,568,"""""""; Instructions for creating a release of the scispacy library. 1. Make sure your working directory is clean.; 2. Make sure that you have changed the versions in ""scispacy/version.py"".; 3. Create the distribution by running ""python setup.py sdist"" in the root of the repository.; 4. Check you can install the new distribution in a clean environment.; 5. Upload the distribution to pypi by running ""twine upload <path to the distribution> -u <username> -p <password>"".; This step will ask you for a username and password - the username is ""scispacy"" you can; get the password from LastPass.; """"""",MatchSource.CODE_COMMENT,setup.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/setup.py
https://github.com/allenai/scispacy/tree/v0.5.5/setup.py:47,Modifiability,variab,variables,47,"# version.py defines VERSION and VERSION_SHORT variables.; # We use exec here to read it so that we don't import scispacy; # whilst setting up the package.
",MatchSource.CODE_COMMENT,setup.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/setup.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/abbreviation.py:33,Safety,detect,detection,33,"""""""; Implements the abbreviation detection algorithm in ""A simple algorithm; for identifying abbreviation definitions in biomedical text."", (Schwartz & Hearst, 2003). The algorithm works by enumerating the characters in the short form of the abbreviation,; checking that they can be matched against characters in a candidate text for the long form; in order, as well as requiring that the first letter of the abbreviated form matches the; _beginning_ letter of a word. Parameters; ----------; long_form_candidate: Span, required.; The spaCy span for the long form candidate of the definition.; short_form_candidate: Span, required.; The spaCy span for the abbreviation candidate. Returns; -------; A Tuple[Span, Optional[Span]], representing the short form abbreviation and the; span corresponding to the long form expansion, or None if a match is not found.; """"""",MatchSource.CODE_COMMENT,scispacy/abbreviation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/abbreviation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/abbreviation.py:59,Usability,simpl,simple,59,"""""""; Implements the abbreviation detection algorithm in ""A simple algorithm; for identifying abbreviation definitions in biomedical text."", (Schwartz & Hearst, 2003). The algorithm works by enumerating the characters in the short form of the abbreviation,; checking that they can be matched against characters in a candidate text for the long form; in order, as well as requiring that the first letter of the abbreviated form matches the; _beginning_ letter of a word. Parameters; ----------; long_form_candidate: Span, required.; The spaCy span for the long form candidate of the definition.; short_form_candidate: Span, required.; The spaCy span for the abbreviation candidate. Returns; -------; A Tuple[Span, Optional[Span]], representing the short form abbreviation and the; span corresponding to the long form expansion, or None if a match is not found.; """"""",MatchSource.CODE_COMMENT,scispacy/abbreviation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/abbreviation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/abbreviation.py:5,Safety,Detect,Detects,5,"""""""; Detects abbreviations using the algorithm in ""A simple algorithm for identifying; abbreviation definitions in biomedical text."", (Schwartz & Hearst, 2003). This class sets the `._.abbreviations` attribute on spaCy Doc. The abbreviations attribute is a `List[Span]` where each Span has the `Span._.long_form`; attribute set to the long form definition of the abbreviation. Note that this class does not replace the spans, or merge them. Parameters; ----------. nlp: `Language`, a required argument for spacy to use this as a factory; name: `str`, a required argument for spacy to use this as a factory; make_serializable: `bool`, a required argument for whether we want to use the serializable; or non serializable version.; """"""",MatchSource.CODE_COMMENT,scispacy/abbreviation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/abbreviation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/abbreviation.py:53,Usability,simpl,simple,53,"""""""; Detects abbreviations using the algorithm in ""A simple algorithm for identifying; abbreviation definitions in biomedical text."", (Schwartz & Hearst, 2003). This class sets the `._.abbreviations` attribute on spaCy Doc. The abbreviations attribute is a `List[Span]` where each Span has the `Span._.long_form`; attribute set to the long form definition of the abbreviation. Note that this class does not replace the spans, or merge them. Parameters; ----------. nlp: `Language`, a required argument for spacy to use this as a factory; name: `str`, a required argument for spacy to use this as a factory; make_serializable: `bool`, a required argument for whether we want to use the serializable; or non serializable version.; """"""",MatchSource.CODE_COMMENT,scispacy/abbreviation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/abbreviation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/abbreviation.py:182,Safety,detect,detector,182,"""""""; Converts the abbreviations into a short form that is serializable to enable multiprocessing. Parameters; ----------; abbreviation: Span; The abbreviation span identified by the detector; """"""",MatchSource.CODE_COMMENT,scispacy/abbreviation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/abbreviation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py:5,Performance,Load,Load,5,"""""""; Load an approximate nearest neighbours index from disk. Parameters; ----------; linker_paths: LinkerPaths, required.; Contains the paths to the data required for the entity linker.; ef_search: int, optional (default = 200); Controls speed performance at query time. Max value is 2000,; but reducing to around ~100 will increase query speed by an order; of magnitude for a small performance hit.; """"""",MatchSource.CODE_COMMENT,scispacy/candidate_generation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py:244,Performance,perform,performance,244,"""""""; Load an approximate nearest neighbours index from disk. Parameters; ----------; linker_paths: LinkerPaths, required.; Contains the paths to the data required for the entity linker.; ef_search: int, optional (default = 200); Controls speed performance at query time. Max value is 2000,; but reducing to around ~100 will increase query speed by an order; of magnitude for a small performance hit.; """"""",MatchSource.CODE_COMMENT,scispacy/candidate_generation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py:383,Performance,perform,performance,383,"""""""; Load an approximate nearest neighbours index from disk. Parameters; ----------; linker_paths: LinkerPaths, required.; Contains the paths to the data required for the entity linker.; ef_search: int, optional (default = 200); Controls speed performance at query time. Max value is 2000,; but reducing to around ~100 will increase query speed by an order; of magnitude for a small performance hit.; """"""",MatchSource.CODE_COMMENT,scispacy/candidate_generation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py:94,Availability,avail,available,94,"""""""; A candidate generator for entity linking to a KnowledgeBase. Currently, two defaults are available:; - Unified Medical Language System (UMLS).; - Medical Subject Headings (MESH). To use these configured default KBs, pass the `name` parameter, either 'umls' or 'mesh'. It uses a sklearn.TfidfVectorizer to embed mention text into a sparse embedding of character 3-grams.; These are then compared via cosine distance in a pre-indexed approximate nearest neighbours index of; a subset of all entities and aliases in the KB. Once the K nearest neighbours have been retrieved, they are canonicalized to their KB canonical ids.; This step is required because the index also includes entity aliases, which map to a particular canonical; entity. This point is important for two reasons:. 1. K nearest neighbours will return a list of Y possible neighbours, where Y < K, because the entity ids; are canonicalized. 2. A single string may be an alias for multiple canonical entities. For example, ""Jefferson County"" may be an; alias for both the canonical ids ""Jefferson County, Iowa"" and ""Jefferson County, Texas"". These are completely; valid and important aliases to include, but it means that using the candidate generator to implement a naive; k-nn baseline linker results in very poor performance, because there are multiple entities for some strings; which have an exact char3-gram match, as these entities contain the same alias string. This situation results; in multiple entities returned with a distance of 0.0, because they exactly match an alias, making a k-nn; baseline effectively a random choice between these candidates. However, this doesn't matter if you have a; classifier on top of the candidate generator, as is intended!. Parameters; ----------; ann_index: FloatIndex; An nmslib approximate nearest neighbours index.; tfidf_vectorizer: TfidfVectorizer; The vectorizer used to encode mentions.; ann_concept_aliases_list: List[str]; A list of strings, mapping the indices used in the ann",MatchSource.CODE_COMMENT,scispacy/candidate_generation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py:197,Modifiability,config,configured,197,"""""""; A candidate generator for entity linking to a KnowledgeBase. Currently, two defaults are available:; - Unified Medical Language System (UMLS).; - Medical Subject Headings (MESH). To use these configured default KBs, pass the `name` parameter, either 'umls' or 'mesh'. It uses a sklearn.TfidfVectorizer to embed mention text into a sparse embedding of character 3-grams.; These are then compared via cosine distance in a pre-indexed approximate nearest neighbours index of; a subset of all entities and aliases in the KB. Once the K nearest neighbours have been retrieved, they are canonicalized to their KB canonical ids.; This step is required because the index also includes entity aliases, which map to a particular canonical; entity. This point is important for two reasons:. 1. K nearest neighbours will return a list of Y possible neighbours, where Y < K, because the entity ids; are canonicalized. 2. A single string may be an alias for multiple canonical entities. For example, ""Jefferson County"" may be an; alias for both the canonical ids ""Jefferson County, Iowa"" and ""Jefferson County, Texas"". These are completely; valid and important aliases to include, but it means that using the candidate generator to implement a naive; k-nn baseline linker results in very poor performance, because there are multiple entities for some strings; which have an exact char3-gram match, as these entities contain the same alias string. This situation results; in multiple entities returned with a distance of 0.0, because they exactly match an alias, making a k-nn; baseline effectively a random choice between these candidates. However, this doesn't matter if you have a; classifier on top of the candidate generator, as is intended!. Parameters; ----------; ann_index: FloatIndex; An nmslib approximate nearest neighbours index.; tfidf_vectorizer: TfidfVectorizer; The vectorizer used to encode mentions.; ann_concept_aliases_list: List[str]; A list of strings, mapping the indices used in the ann",MatchSource.CODE_COMMENT,scispacy/candidate_generation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py:1284,Performance,perform,performance,1284,"It uses a sklearn.TfidfVectorizer to embed mention text into a sparse embedding of character 3-grams.; These are then compared via cosine distance in a pre-indexed approximate nearest neighbours index of; a subset of all entities and aliases in the KB. Once the K nearest neighbours have been retrieved, they are canonicalized to their KB canonical ids.; This step is required because the index also includes entity aliases, which map to a particular canonical; entity. This point is important for two reasons:. 1. K nearest neighbours will return a list of Y possible neighbours, where Y < K, because the entity ids; are canonicalized. 2. A single string may be an alias for multiple canonical entities. For example, ""Jefferson County"" may be an; alias for both the canonical ids ""Jefferson County, Iowa"" and ""Jefferson County, Texas"". These are completely; valid and important aliases to include, but it means that using the candidate generator to implement a naive; k-nn baseline linker results in very poor performance, because there are multiple entities for some strings; which have an exact char3-gram match, as these entities contain the same alias string. This situation results; in multiple entities returned with a distance of 0.0, because they exactly match an alias, making a k-nn; baseline effectively a random choice between these candidates. However, this doesn't matter if you have a; classifier on top of the candidate generator, as is intended!. Parameters; ----------; ann_index: FloatIndex; An nmslib approximate nearest neighbours index.; tfidf_vectorizer: TfidfVectorizer; The vectorizer used to encode mentions.; ann_concept_aliases_list: List[str]; A list of strings, mapping the indices used in the ann_index to possible KB mentions.; This is essentially used a lookup between the ann index and actual mention strings.; kb: KnowledgeBase; A class representing canonical concepts from the knowledge graph.; verbose: bool; Setting to true will print extra information about th",MatchSource.CODE_COMMENT,scispacy/candidate_generation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py:2608,Performance,load,load,2608,"ecause the index also includes entity aliases, which map to a particular canonical; entity. This point is important for two reasons:. 1. K nearest neighbours will return a list of Y possible neighbours, where Y < K, because the entity ids; are canonicalized. 2. A single string may be an alias for multiple canonical entities. For example, ""Jefferson County"" may be an; alias for both the canonical ids ""Jefferson County, Iowa"" and ""Jefferson County, Texas"". These are completely; valid and important aliases to include, but it means that using the candidate generator to implement a naive; k-nn baseline linker results in very poor performance, because there are multiple entities for some strings; which have an exact char3-gram match, as these entities contain the same alias string. This situation results; in multiple entities returned with a distance of 0.0, because they exactly match an alias, making a k-nn; baseline effectively a random choice between these candidates. However, this doesn't matter if you have a; classifier on top of the candidate generator, as is intended!. Parameters; ----------; ann_index: FloatIndex; An nmslib approximate nearest neighbours index.; tfidf_vectorizer: TfidfVectorizer; The vectorizer used to encode mentions.; ann_concept_aliases_list: List[str]; A list of strings, mapping the indices used in the ann_index to possible KB mentions.; This is essentially used a lookup between the ann index and actual mention strings.; kb: KnowledgeBase; A class representing canonical concepts from the knowledge graph.; verbose: bool; Setting to true will print extra information about the generated candidates.; ef_search: int; The efs search parameter used in the index. This substantially effects runtime speed; (higher is slower but slightly more accurate). Note that this parameter is ignored; if a preconstructed ann_index is passed.; name: str, optional (default = None); The name of the pretrained entity linker to load. Must be one of 'umls' or 'mesh'.; """"""",MatchSource.CODE_COMMENT,scispacy/candidate_generation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py:93,Integrability,wrap,wrapper,93,"""""""; ann_index.knnQueryBatch crashes if any of the vectors is all zeros.; This function is a wrapper around `ann_index.knnQueryBatch` that solves this problem. It works as follows:; - remove empty vectors from `vectors`.; - call `ann_index.knnQueryBatch` with the non-empty vectors only. This returns `neighbors`,; a list of list of neighbors. `len(neighbors)` equals the length of the non-empty vectors.; - extend the list `neighbors` with `None`s in place of empty vectors.; - return the extended list of neighbors and distances.; """"""",MatchSource.CODE_COMMENT,scispacy/candidate_generation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py:408,Modifiability,extend,extend,408,"""""""; ann_index.knnQueryBatch crashes if any of the vectors is all zeros.; This function is a wrapper around `ann_index.knnQueryBatch` that solves this problem. It works as follows:; - remove empty vectors from `vectors`.; - call `ann_index.knnQueryBatch` with the non-empty vectors only. This returns `neighbors`,; a list of list of neighbors. `len(neighbors)` equals the length of the non-empty vectors.; - extend the list `neighbors` with `None`s in place of empty vectors.; - return the extended list of neighbors and distances.; """"""",MatchSource.CODE_COMMENT,scispacy/candidate_generation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py:490,Modifiability,extend,extended,490,"""""""; ann_index.knnQueryBatch crashes if any of the vectors is all zeros.; This function is a wrapper around `ann_index.knnQueryBatch` that solves this problem. It works as follows:; - remove empty vectors from `vectors`.; - call `ann_index.knnQueryBatch` with the non-empty vectors only. This returns `neighbors`,; a list of list of neighbors. `len(neighbors)` equals the length of the non-empty vectors.; - extend the list `neighbors` with `None`s in place of empty vectors.; - return the extended list of neighbors and distances.; """"""",MatchSource.CODE_COMMENT,scispacy/candidate_generation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py:111,Integrability,wrap,wrapper,111,"# `ann_index.knnQueryBatch` crashes if one of the vectors is all zeros.; # `nmslib_knn_with_zero_vectors` is a wrapper around `ann_index.knnQueryBatch` that addresses this issue.
",MatchSource.CODE_COMMENT,scispacy/candidate_generation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py:519,Integrability,bridg,bridges,519,"# nmslib hyperparameters (very important); # guide: https://github.com/nmslib/nmslib/blob/master/manual/methods.md; # Default values resulted in very low recall.; # set to the maximum recommended value. Improves recall at the expense of longer indexing time.; # We use the HNSW (Hierarchical Navigable Small World Graph) representation which is constructed; # by consecutive insertion of elements in a random order by connecting them to M closest neighbours; # from the previously inserted elements. These later become bridges between the network hubs that; # improve overall graph connectivity. (bigger M -> higher recall, slower creation); # For more details see: https://arxiv.org/pdf/1603.09320.pdf?
",MatchSource.CODE_COMMENT,scispacy/candidate_generation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py:45,Usability,guid,guide,45,"# nmslib hyperparameters (very important); # guide: https://github.com/nmslib/nmslib/blob/master/manual/methods.md; # Default values resulted in very low recall.; # set to the maximum recommended value. Improves recall at the expense of longer indexing time.; # We use the HNSW (Hierarchical Navigable Small World Graph) representation which is constructed; # by consecutive insertion of elements in a random order by connecting them to M closest neighbours; # from the previously inserted elements. These later become bridges between the network hubs that; # improve overall graph connectivity. (bigger M -> higher recall, slower creation); # For more details see: https://arxiv.org/pdf/1603.09320.pdf?
",MatchSource.CODE_COMMENT,scispacy/candidate_generation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_sentence_segmenter.py:80,Deployability,pipeline,pipeline,80,"""""""Adds sentence boundaries to a Doc.; Intended to be used as a pipe in a spaCy pipeline.; Uses https://github.com/nipunsadvilkar/pySBD to get proper sentence and; respective char_spans. Handle special cases:; New lines cannot be end of sentence tokens.; New lines that separate sentences will be added to the; beginning of the next sentence. @param doc: the spaCy document to be annotated with sentence boundaries; """"""",MatchSource.CODE_COMMENT,scispacy/custom_sentence_segmenter.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_sentence_segmenter.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py:154,Deployability,pipeline,pipeline,154,"""""""Used to preprocess away new lines in the middle of words. This function; is intended to be called on a raw string before it is passed through a; spaCy pipeline. @param text: a string of text to be processed; """"""",MatchSource.CODE_COMMENT,scispacy/custom_tokenizer.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py:115,Testability,test,tests,115,"""""""Helper function that returns the prefix pattern for the tokenizer.; It is a helper function to accomodate spacy tests that only test; prefixes.; """"""",MatchSource.CODE_COMMENT,scispacy/custom_tokenizer.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py:131,Testability,test,test,131,"""""""Helper function that returns the prefix pattern for the tokenizer.; It is a helper function to accomodate spacy tests that only test; prefixes.; """"""",MatchSource.CODE_COMMENT,scispacy/custom_tokenizer.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py:16,Testability,assert,assertions,16,"# add lookahead assertions for brackets (may not work properly for unbalanced brackets)
",MatchSource.CODE_COMMENT,scispacy/custom_tokenizer.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py:142,Deployability,pipeline,pipeline,142,"""""""Creates a custom tokenizer on top of spaCy's default tokenizer. The; intended use of this function is to replace the tokenizer in a spaCy; pipeline like so:. nlp = spacy.load(""some_spacy_model""); nlp.tokenizer = combined_rule_tokenizer(nlp). @param nlp: a loaded spaCy model; """"""",MatchSource.CODE_COMMENT,scispacy/custom_tokenizer.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py:173,Performance,load,load,173,"""""""Creates a custom tokenizer on top of spaCy's default tokenizer. The; intended use of this function is to replace the tokenizer in a spaCy; pipeline like so:. nlp = spacy.load(""some_spacy_model""); nlp.tokenizer = combined_rule_tokenizer(nlp). @param nlp: a loaded spaCy model; """"""",MatchSource.CODE_COMMENT,scispacy/custom_tokenizer.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py:259,Performance,load,loaded,259,"""""""Creates a custom tokenizer on top of spaCy's default tokenizer. The; intended use of this function is to replace the tokenizer in a spaCy; pipeline like so:. nlp = spacy.load(""some_spacy_model""); nlp.tokenizer = combined_rule_tokenizer(nlp). @param nlp: a loaded spaCy model; """"""",MatchSource.CODE_COMMENT,scispacy/custom_tokenizer.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py:17,Testability,assert,assertions,17,"# add lookbehind assertions for brackets (may not work properly for unbalanced brackets)
",MatchSource.CODE_COMMENT,scispacy/custom_tokenizer.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py:55,Modifiability,variab,variable,55,"# These lookbehinds are commented out because they are variable width lookbehinds, and as of spacy 2.1,; # spacy uses the re package instead of the regex package. The re package does not support variable width; # lookbehinds. Hacking spacy internals to allow us to use the regex package is doable, but would require; # creating our own instance of the language class, with our own Tokenizer class, with the from_bytes method; # using the regex package instead of the re package; # suffix_punct = suffix_punct.replace(r""\)"", r""(?<!\S+\([^\)\s]+)\)""); # suffix_punct = suffix_punct.replace(r""\]"", r""(?<!\S+\[[^\]\s]+)\]""); # suffix_punct = suffix_punct.replace(r""\}"", r""(?<!\S+\{[^\}\s]+)\}"")
",MatchSource.CODE_COMMENT,scispacy/custom_tokenizer.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py:195,Modifiability,variab,variable,195,"# These lookbehinds are commented out because they are variable width lookbehinds, and as of spacy 2.1,; # spacy uses the re package instead of the regex package. The re package does not support variable width; # lookbehinds. Hacking spacy internals to allow us to use the regex package is doable, but would require; # creating our own instance of the language class, with our own Tokenizer class, with the from_bytes method; # using the regex package instead of the re package; # suffix_punct = suffix_punct.replace(r""\)"", r""(?<!\S+\([^\)\s]+)\)""); # suffix_punct = suffix_punct.replace(r""\]"", r""(?<!\S+\[[^\]\s]+)\]""); # suffix_punct = suffix_punct.replace(r""\}"", r""(?<!\S+\{[^\}\s]+)\}"")
",MatchSource.CODE_COMMENT,scispacy/custom_tokenizer.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py:40,Modifiability,variab,variable,40,"# this is another place where we used a variable width lookbehind; # so now things like 'H3g' will be tokenized as ['H3', 'g']; # previously the lookbehind was (^[0-9]+)
",MatchSource.CODE_COMMENT,scispacy/custom_tokenizer.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py:2,Deployability,Update,Update,2,"# Update exclusions to include these abbreviations so the period is not split off
",MatchSource.CODE_COMMENT,scispacy/custom_tokenizer.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:50,Performance,cache,cache,50,"""""""; Utilities for working with the local dataset cache.; """"""",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:102,Availability,down,download,102,"""""""; Given something that might be a URL (or might be a local path),; determine which. If it's a URL, download the file and cache it, and; return the path to the cached file. If it's already a local path,; make sure the file exists and then return the path.; """"""",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:124,Performance,cache,cache,124,"""""""; Given something that might be a URL (or might be a local path),; determine which. If it's a URL, download the file and cache it, and; return the path to the cached file. If it's already a local path,; make sure the file exists and then return the path.; """"""",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:162,Performance,cache,cached,162,"""""""; Given something that might be a URL (or might be a local path),; determine which. If it's a URL, download the file and cache it, and; return the path to the cached file. If it's already a local path,; make sure the file exists and then return the path.; """"""",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:33,Availability,down,downloading,33,"# URL, so get it from the cache (downloading if necessary)
",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:26,Performance,cache,cache,26,"# URL, so get it from the cache (downloading if necessary)
",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:26,Security,hash,hashed,26,"""""""; Convert `url` into a hashed filename in a repeatable way.; If `etag` is specified, append its hash to the url's, delimited; by a period.; """"""",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:99,Security,hash,hash,99,"""""""; Convert `url` into a hashed filename in a repeatable way.; If `etag` is specified, append its hash to the url's, delimited; by a period.; """"""",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:18,Availability,alive,alive,18,"# filter out keep-alive new chunks
",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:93,Availability,down,download,93,"""""""; Given a URL, look for the corresponding dataset in the local cache.; If it's not there, download it. Then return the path to the cached file.; """"""",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:66,Performance,cache,cache,66,"""""""; Given a URL, look for the corresponding dataset in the local cache.; If it's not there, download it. Then return the path to the cached file.; """"""",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:134,Performance,cache,cached,134,"""""""; Given a URL, look for the corresponding dataset in the local cache.; If it's not there, download it. Then return the path to the cached file.; """"""",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:6,Performance,cache,cache,6,"# get cache path to put the file
",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:2,Availability,Down,Download,2,"# Download to temporary file, then copy to cache dir once finished.; # Otherwise you get corrupt cache entries if the download gets interrupted.
",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:118,Availability,down,download,118,"# Download to temporary file, then copy to cache dir once finished.; # Otherwise you get corrupt cache entries if the download gets interrupted.
",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:43,Performance,cache,cache,43,"# Download to temporary file, then copy to cache dir once finished.; # Otherwise you get corrupt cache entries if the download gets interrupted.
",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:97,Performance,cache,cache,97,"# Download to temporary file, then copy to cache dir once finished.; # Otherwise you get corrupt cache entries if the download gets interrupted.
",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py:57,Safety,avoid,avoid,57,"# we are copying the file before closing it, so flush to avoid truncation
",MatchSource.CODE_COMMENT,scispacy/file_cache.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hearst_patterns.py:1344,Integrability,CONTRACT,CONTRACT,1344,"""""""; BSD 3-Clause License. Copyright (c) 2020, Fourthought; All rights reserved. Redistribution and use in source and binary forms, with or without; modification, are permitted provided that the following conditions are met:. 1. Redistributions of source code must retain the above copyright notice, this; list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice,; this list of conditions and the following disclaimer in the documentation; and/or other materials provided with the distribution. 3. Neither the name of the copyright holder nor the names of its; contributors may be used to endorse or promote products derived from; this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; """"""",MatchSource.CODE_COMMENT,scispacy/hearst_patterns.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hearst_patterns.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hyponym_detector.py:630,Modifiability,config,config,630,"""""""; A spaCy pipe for detecting hyponyms using Hearst patterns.; This class sets the following attributes:. - `Doc._.hearst_patterns`: A List[Tuple[str, Span, Span]] corresonding to; the matching predicate, extracted general term and specific term; that matched a Hearst pattern. Parts of the implementation taken from; https://github.com/mmichelsonIF/hearst_patterns_python/blob/master/hearstPatterns/hearstPatterns.py; and; https://github.com/Fourthought/CNDPipeline/blob/master/cndlib/hpspacy.py. The pipe can be used with an instantiated spacy model like so:; ```; # add the hyponym detector; nlp.add_pipe('hyponym_detector', config={'extended': True}, last=True). Parameters; ----------. nlp: `Language`, a required argument for spacy to use this as a factory; name: `str`, a required argument for spacy to use this as a factory; extended: `bool`, whether to use the extended Hearts patterns or not; """"""",MatchSource.CODE_COMMENT,scispacy/hyponym_detector.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hyponym_detector.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hyponym_detector.py:639,Modifiability,extend,extended,639,"""""""; A spaCy pipe for detecting hyponyms using Hearst patterns.; This class sets the following attributes:. - `Doc._.hearst_patterns`: A List[Tuple[str, Span, Span]] corresonding to; the matching predicate, extracted general term and specific term; that matched a Hearst pattern. Parts of the implementation taken from; https://github.com/mmichelsonIF/hearst_patterns_python/blob/master/hearstPatterns/hearstPatterns.py; and; https://github.com/Fourthought/CNDPipeline/blob/master/cndlib/hpspacy.py. The pipe can be used with an instantiated spacy model like so:; ```; # add the hyponym detector; nlp.add_pipe('hyponym_detector', config={'extended': True}, last=True). Parameters; ----------. nlp: `Language`, a required argument for spacy to use this as a factory; name: `str`, a required argument for spacy to use this as a factory; extended: `bool`, whether to use the extended Hearts patterns or not; """"""",MatchSource.CODE_COMMENT,scispacy/hyponym_detector.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hyponym_detector.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hyponym_detector.py:835,Modifiability,extend,extended,835,"""""""; A spaCy pipe for detecting hyponyms using Hearst patterns.; This class sets the following attributes:. - `Doc._.hearst_patterns`: A List[Tuple[str, Span, Span]] corresonding to; the matching predicate, extracted general term and specific term; that matched a Hearst pattern. Parts of the implementation taken from; https://github.com/mmichelsonIF/hearst_patterns_python/blob/master/hearstPatterns/hearstPatterns.py; and; https://github.com/Fourthought/CNDPipeline/blob/master/cndlib/hpspacy.py. The pipe can be used with an instantiated spacy model like so:; ```; # add the hyponym detector; nlp.add_pipe('hyponym_detector', config={'extended': True}, last=True). Parameters; ----------. nlp: `Language`, a required argument for spacy to use this as a factory; name: `str`, a required argument for spacy to use this as a factory; extended: `bool`, whether to use the extended Hearts patterns or not; """"""",MatchSource.CODE_COMMENT,scispacy/hyponym_detector.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hyponym_detector.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hyponym_detector.py:872,Modifiability,extend,extended,872,"""""""; A spaCy pipe for detecting hyponyms using Hearst patterns.; This class sets the following attributes:. - `Doc._.hearst_patterns`: A List[Tuple[str, Span, Span]] corresonding to; the matching predicate, extracted general term and specific term; that matched a Hearst pattern. Parts of the implementation taken from; https://github.com/mmichelsonIF/hearst_patterns_python/blob/master/hearstPatterns/hearstPatterns.py; and; https://github.com/Fourthought/CNDPipeline/blob/master/cndlib/hpspacy.py. The pipe can be used with an instantiated spacy model like so:; ```; # add the hyponym detector; nlp.add_pipe('hyponym_detector', config={'extended': True}, last=True). Parameters; ----------. nlp: `Language`, a required argument for spacy to use this as a factory; name: `str`, a required argument for spacy to use this as a factory; extended: `bool`, whether to use the extended Hearts patterns or not; """"""",MatchSource.CODE_COMMENT,scispacy/hyponym_detector.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hyponym_detector.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hyponym_detector.py:22,Safety,detect,detecting,22,"""""""; A spaCy pipe for detecting hyponyms using Hearst patterns.; This class sets the following attributes:. - `Doc._.hearst_patterns`: A List[Tuple[str, Span, Span]] corresonding to; the matching predicate, extracted general term and specific term; that matched a Hearst pattern. Parts of the implementation taken from; https://github.com/mmichelsonIF/hearst_patterns_python/blob/master/hearstPatterns/hearstPatterns.py; and; https://github.com/Fourthought/CNDPipeline/blob/master/cndlib/hpspacy.py. The pipe can be used with an instantiated spacy model like so:; ```; # add the hyponym detector; nlp.add_pipe('hyponym_detector', config={'extended': True}, last=True). Parameters; ----------. nlp: `Language`, a required argument for spacy to use this as a factory; name: `str`, a required argument for spacy to use this as a factory; extended: `bool`, whether to use the extended Hearts patterns or not; """"""",MatchSource.CODE_COMMENT,scispacy/hyponym_detector.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hyponym_detector.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hyponym_detector.py:587,Safety,detect,detector,587,"""""""; A spaCy pipe for detecting hyponyms using Hearst patterns.; This class sets the following attributes:. - `Doc._.hearst_patterns`: A List[Tuple[str, Span, Span]] corresonding to; the matching predicate, extracted general term and specific term; that matched a Hearst pattern. Parts of the implementation taken from; https://github.com/mmichelsonIF/hearst_patterns_python/blob/master/hearstPatterns/hearstPatterns.py; and; https://github.com/Fourthought/CNDPipeline/blob/master/cndlib/hpspacy.py. The pipe can be used with an instantiated spacy model like so:; ```; # add the hyponym detector; nlp.add_pipe('hyponym_detector', config={'extended': True}, last=True). Parameters; ----------. nlp: `Language`, a required argument for spacy to use this as a factory; name: `str`, a required argument for spacy to use this as a factory; extended: `bool`, whether to use the extended Hearts patterns or not; """"""",MatchSource.CODE_COMMENT,scispacy/hyponym_detector.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hyponym_detector.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hyponym_detector.py:52,Usability,simpl,simple,52,"""""""; Expand a token to it's noun phrase based; on a simple POS tag heuristic.; """"""",MatchSource.CODE_COMMENT,scispacy/hyponym_detector.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hyponym_detector.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/linking.py:13,Deployability,pipeline,pipeline,13,"""""""; A spacy pipeline component which identifies entities in text which appear; in a knowledge base. Currently, there are five defaults: the Unified Medical Language System (UMLS),; the Medical Subject Headings (MeSH) dictionary, the RxNorm ontology, the Gene; Ontology, and the Human Phenotype Ontology. To use these configured default KBs, pass the `name` parameter ('umls','mesh',; 'rxnorm','go','hpo'). Currently this implementation just compares string similarity, returning; entities above a given threshold. This class sets the `._.kb_ents` attribute on spacy Spans, which consists of a; List[Tuple[str, float]] corresponding to the KB concept_id and the associated score; for a list of `max_entities_per_mention` number of entities. You can look up more information for a given id using the kb attribute of this class:. print(linker.kb.cui_to_entity[concept_id]). A Note on Definitions:; Only 187767 entities, or 6.74% of the UMLS KB have definitions. However,; the MedMentions dataset links to entities which have definitions 82.9% of the time. So by; default, we only link to entities which have definitions (typically they are more salient / cleaner),; but this might not suit your use case. YMMV. Parameters; ----------. nlp: `Language`, a required argument for spacy to use this as a factory; name: `str`, a required argument for spacy to use this as a factory; candidate_generator : `CandidateGenerator`, optional, (default = None); A CandidateGenerator to generate entity candidates for mentions.; If no candidate generator is passed, the default pretrained one is used.; resolve_abbreviations : bool = True, optional (default = False); Whether to resolve abbreviations identified in the Doc before performing linking.; This parameter has no effect if there is no `AbbreviationDetector` in the spacy; pipeline.; k : int, optional, (default = 30); The number of nearest neighbours to look up from the candidate generator per mention.; threshold : float, optional, (default = 0.7); The th",MatchSource.CODE_COMMENT,scispacy/linking.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/linking.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/linking.py:1816,Deployability,pipeline,pipeline,1816," given id using the kb attribute of this class:. print(linker.kb.cui_to_entity[concept_id]). A Note on Definitions:; Only 187767 entities, or 6.74% of the UMLS KB have definitions. However,; the MedMentions dataset links to entities which have definitions 82.9% of the time. So by; default, we only link to entities which have definitions (typically they are more salient / cleaner),; but this might not suit your use case. YMMV. Parameters; ----------. nlp: `Language`, a required argument for spacy to use this as a factory; name: `str`, a required argument for spacy to use this as a factory; candidate_generator : `CandidateGenerator`, optional, (default = None); A CandidateGenerator to generate entity candidates for mentions.; If no candidate generator is passed, the default pretrained one is used.; resolve_abbreviations : bool = True, optional (default = False); Whether to resolve abbreviations identified in the Doc before performing linking.; This parameter has no effect if there is no `AbbreviationDetector` in the spacy; pipeline.; k : int, optional, (default = 30); The number of nearest neighbours to look up from the candidate generator per mention.; threshold : float, optional, (default = 0.7); The threshold that a entity candidate must reach to be added to the mention in the Doc; as a mention candidate.; no_definition_threshold : float, optional, (default = 0.95); The threshold that a entity candidate must reach to be added to the mention in the Doc; as a mention candidate if the entity candidate does not have a definition.; filter_for_definitions: bool, default = True; Whether to filter entities that can be returned to only include those with definitions; in the knowledge base.; max_entities_per_mention : int, optional, default = 5; The maximum number of entities which will be returned for a given mention, regardless of; how many are nearest neighbours are found.; linker_name: str, optional (default = None); The name of the pretrained entity linker to load.; """"""",MatchSource.CODE_COMMENT,scispacy/linking.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/linking.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/linking.py:318,Modifiability,config,configured,318,"""""""; A spacy pipeline component which identifies entities in text which appear; in a knowledge base. Currently, there are five defaults: the Unified Medical Language System (UMLS),; the Medical Subject Headings (MeSH) dictionary, the RxNorm ontology, the Gene; Ontology, and the Human Phenotype Ontology. To use these configured default KBs, pass the `name` parameter ('umls','mesh',; 'rxnorm','go','hpo'). Currently this implementation just compares string similarity, returning; entities above a given threshold. This class sets the `._.kb_ents` attribute on spacy Spans, which consists of a; List[Tuple[str, float]] corresponding to the KB concept_id and the associated score; for a list of `max_entities_per_mention` number of entities. You can look up more information for a given id using the kb attribute of this class:. print(linker.kb.cui_to_entity[concept_id]). A Note on Definitions:; Only 187767 entities, or 6.74% of the UMLS KB have definitions. However,; the MedMentions dataset links to entities which have definitions 82.9% of the time. So by; default, we only link to entities which have definitions (typically they are more salient / cleaner),; but this might not suit your use case. YMMV. Parameters; ----------. nlp: `Language`, a required argument for spacy to use this as a factory; name: `str`, a required argument for spacy to use this as a factory; candidate_generator : `CandidateGenerator`, optional, (default = None); A CandidateGenerator to generate entity candidates for mentions.; If no candidate generator is passed, the default pretrained one is used.; resolve_abbreviations : bool = True, optional (default = False); Whether to resolve abbreviations identified in the Doc before performing linking.; This parameter has no effect if there is no `AbbreviationDetector` in the spacy; pipeline.; k : int, optional, (default = 30); The number of nearest neighbours to look up from the candidate generator per mention.; threshold : float, optional, (default = 0.7); The th",MatchSource.CODE_COMMENT,scispacy/linking.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/linking.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/linking.py:1714,Performance,perform,performing,1714,"he associated score; for a list of `max_entities_per_mention` number of entities. You can look up more information for a given id using the kb attribute of this class:. print(linker.kb.cui_to_entity[concept_id]). A Note on Definitions:; Only 187767 entities, or 6.74% of the UMLS KB have definitions. However,; the MedMentions dataset links to entities which have definitions 82.9% of the time. So by; default, we only link to entities which have definitions (typically they are more salient / cleaner),; but this might not suit your use case. YMMV. Parameters; ----------. nlp: `Language`, a required argument for spacy to use this as a factory; name: `str`, a required argument for spacy to use this as a factory; candidate_generator : `CandidateGenerator`, optional, (default = None); A CandidateGenerator to generate entity candidates for mentions.; If no candidate generator is passed, the default pretrained one is used.; resolve_abbreviations : bool = True, optional (default = False); Whether to resolve abbreviations identified in the Doc before performing linking.; This parameter has no effect if there is no `AbbreviationDetector` in the spacy; pipeline.; k : int, optional, (default = 30); The number of nearest neighbours to look up from the candidate generator per mention.; threshold : float, optional, (default = 0.7); The threshold that a entity candidate must reach to be added to the mention in the Doc; as a mention candidate.; no_definition_threshold : float, optional, (default = 0.95); The threshold that a entity candidate must reach to be added to the mention in the Doc; as a mention candidate if the entity candidate does not have a definition.; filter_for_definitions: bool, default = True; Whether to filter entities that can be returned to only include those with definitions; in the knowledge base.; max_entities_per_mention : int, optional, default = 5; The maximum number of entities which will be returned for a given mention, regardless of; how many are nearest ne",MatchSource.CODE_COMMENT,scispacy/linking.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/linking.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/linking.py:2769,Performance,load,load,2769," given id using the kb attribute of this class:. print(linker.kb.cui_to_entity[concept_id]). A Note on Definitions:; Only 187767 entities, or 6.74% of the UMLS KB have definitions. However,; the MedMentions dataset links to entities which have definitions 82.9% of the time. So by; default, we only link to entities which have definitions (typically they are more salient / cleaner),; but this might not suit your use case. YMMV. Parameters; ----------. nlp: `Language`, a required argument for spacy to use this as a factory; name: `str`, a required argument for spacy to use this as a factory; candidate_generator : `CandidateGenerator`, optional, (default = None); A CandidateGenerator to generate entity candidates for mentions.; If no candidate generator is passed, the default pretrained one is used.; resolve_abbreviations : bool = True, optional (default = False); Whether to resolve abbreviations identified in the Doc before performing linking.; This parameter has no effect if there is no `AbbreviationDetector` in the spacy; pipeline.; k : int, optional, (default = 30); The number of nearest neighbours to look up from the candidate generator per mention.; threshold : float, optional, (default = 0.7); The threshold that a entity candidate must reach to be added to the mention in the Doc; as a mention candidate.; no_definition_threshold : float, optional, (default = 0.95); The threshold that a entity candidate must reach to be added to the mention in the Doc; as a mention candidate if the entity candidate does not have a definition.; filter_for_definitions: bool, default = True; Whether to filter entities that can be returned to only include those with definitions; in the knowledge base.; max_entities_per_mention : int, optional, default = 5; The maximum number of entities which will be returned for a given mention, regardless of; how many are nearest neighbours are found.; linker_name: str, optional (default = None); The name of the pretrained entity linker to load.; """"""",MatchSource.CODE_COMMENT,scispacy/linking.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/linking.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/linking_utils.py:343,Performance,load,load,343,"""""""; A class representing two commonly needed views of a Knowledge Base:; 1. A mapping from concept_id to an Entity NamedTuple with more information.; 2. A mapping from aliases to the sets of concept ids for which they are aliases. Parameters; ----------; file_path: str, required.; The file path to the json/jsonl representation of the KB to load.; """"""",MatchSource.CODE_COMMENT,scispacy/linking_utils.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/linking_utils.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/per_class_scorer.py:22,Safety,predict,predicted,22,"# These spans weren't predicted.
",MatchSource.CODE_COMMENT,scispacy/per_class_scorer.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/per_class_scorer.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_semantic_type_tree.py:134,Energy Efficiency,efficient,efficient,134,"# We'll store the nodes as a flattened list too, because; # we don't just care about the leaves of the tree - sometimes; # we'll need efficient access to intermediate nodes, and the tree; # is tiny anyway.
",MatchSource.CODE_COMMENT,scispacy/umls_semantic_type_tree.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_semantic_type_tree.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_semantic_type_tree.py:144,Security,access,access,144,"# We'll store the nodes as a flattened list too, because; # we don't just care about the leaves of the tree - sometimes; # we'll need efficient access to intermediate nodes, and the tree; # is tiny anyway.
",MatchSource.CODE_COMMENT,scispacy/umls_semantic_type_tree.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_semantic_type_tree.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py:54,Deployability,release,release,54,"""""""; Read the file descriptor MRFILES.RRF from a UMLS release and get column headers (names); for the given file. MRFILES.RRF file format: a pipe-separated values; Useful columns:; column 0: name of one of the files in the META directory; column 2: column names of that file. Args:; meta_path: path to the META directory of an UMLS release; filename: name of the file to get its column headers; Returns:; a list of column names; """"""",MatchSource.CODE_COMMENT,scispacy/umls_utils.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py:332,Deployability,release,release,332,"""""""; Read the file descriptor MRFILES.RRF from a UMLS release and get column headers (names); for the given file. MRFILES.RRF file format: a pipe-separated values; Useful columns:; column 0: name of one of the files in the META directory; column 2: column names of that file. Args:; meta_path: path to the META directory of an UMLS release; filename: name of the file to get its column headers; Returns:; a list of column names; """"""",MatchSource.CODE_COMMENT,scispacy/umls_utils.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py:52,Deployability,release,release,52,"""""""; Read the concepts file MRCONSO.RRF from a UMLS release and store it in; concept_details dictionary. Each concept is represented with; - concept_id; - canonical_name; - aliases; - types; - definition; This function fills the first three. If a canonical name is not found, it is left empty. MRFILES.RRF file format: a pipe-separated values; Useful columns: CUI, LAT, SUPPRESS, STR, ISPREF, TS, STT. Args:; meta_path: path to the META directory of an UMLS release; concept_details: a dictionary to be filled with concept informations; source: An optional source identifier, used as a filter to extract only a; specific source from UMLS.; lang: An optional language identifier, used to filter terms by language; non_suppressed: flag to indicate whether only non-suppressed concepts should be kept; """"""",MatchSource.CODE_COMMENT,scispacy/umls_utils.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py:458,Deployability,release,release,458,"""""""; Read the concepts file MRCONSO.RRF from a UMLS release and store it in; concept_details dictionary. Each concept is represented with; - concept_id; - canonical_name; - aliases; - types; - definition; This function fills the first three. If a canonical name is not found, it is left empty. MRFILES.RRF file format: a pipe-separated values; Useful columns: CUI, LAT, SUPPRESS, STR, ISPREF, TS, STT. Args:; meta_path: path to the META directory of an UMLS release; concept_details: a dictionary to be filled with concept informations; source: An optional source identifier, used as a filter to extract only a; specific source from UMLS.; lang: An optional language identifier, used to filter terms by language; non_suppressed: flag to indicate whether only non-suppressed concepts should be kept; """"""",MatchSource.CODE_COMMENT,scispacy/umls_utils.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py:47,Deployability,release,release,47,"""""""; Read the types file MRSTY.RRF from a UMLS release and store it in; concept_details dictionary. This function adds the `types` field; to the information of each concept. MRSTY.RRF file format: a pipe-separated values; Useful columns: CUI, TUI. Args:; meta_path: path to the META directory of an UMLS release; concept_details: a dictionary to be filled with concept informations; """"""",MatchSource.CODE_COMMENT,scispacy/umls_utils.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py:304,Deployability,release,release,304,"""""""; Read the types file MRSTY.RRF from a UMLS release and store it in; concept_details dictionary. This function adds the `types` field; to the information of each concept. MRSTY.RRF file format: a pipe-separated values; Useful columns: CUI, TUI. Args:; meta_path: path to the META directory of an UMLS release; concept_details: a dictionary to be filled with concept informations; """"""",MatchSource.CODE_COMMENT,scispacy/umls_utils.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py:47,Deployability,release,release,47,"""""""; Read the types file MRDEF.RRF from a UMLS release and store it in; concept_details dictionary. This function adds the `definition` field; to the information of each concept. MRDEF.RRF file format: a pipe-separated values; Useful columns: CUI, SAB, SUPPRESS, DEF. Args:; meta_path: path to the META directory of an UMLS release; concept_details: a dictionary to be filled with concept informations; """"""",MatchSource.CODE_COMMENT,scispacy/umls_utils.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py:324,Deployability,release,release,324,"""""""; Read the types file MRDEF.RRF from a UMLS release and store it in; concept_details dictionary. This function adds the `definition` field; to the information of each concept. MRDEF.RRF file format: a pipe-separated values; Useful columns: CUI, SAB, SUPPRESS, DEF. Args:; meta_path: path to the META directory of an UMLS release; concept_details: a dictionary to be filled with concept informations; """"""",MatchSource.CODE_COMMENT,scispacy/umls_utils.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py
https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/util.py:225,Performance,load,load,225,"""""""; Spacy doesn't assume that text is tokenised. Sometimes this; is annoying, like when you have gold data which is pre-tokenised,; but Spacy's tokenisation doesn't match the gold. This can be used; as follows:; nlp = spacy.load(""en_core_web_md""); # hack to replace tokenizer with a whitespace tokenizer; nlp.tokenizer = WhitespaceTokenizer(nlp.vocab); ... use nlp(""here is some text"") as normal.; """"""",MatchSource.CODE_COMMENT,scispacy/util.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/util.py
https://github.com/allenai/scispacy/tree/v0.5.5/scripts/evaluate_ner.py:29,Performance,load,loading,29,"# need to import code before loading a spacy model
",MatchSource.CODE_COMMENT,scripts/evaluate_ner.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scripts/evaluate_ner.py
https://github.com/allenai/scispacy/tree/v0.5.5/scripts/export_umls_json.py:20,Deployability,release,release,20,""""""". Convert a umls release to a jsonl file of concepts. """"""",MatchSource.CODE_COMMENT,scripts/export_umls_json.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scripts/export_umls_json.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/conftest.py:164,Deployability,configurat,configuration,164,"""""""; In order to avoid loading spacy models repeatedly,; we'll save references to them, keyed by the options; we used to create the spacy model, so any particular; configuration only gets loaded once.; """"""",MatchSource.CODE_COMMENT,tests/conftest.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/conftest.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/conftest.py:164,Modifiability,config,configuration,164,"""""""; In order to avoid loading spacy models repeatedly,; we'll save references to them, keyed by the options; we used to create the spacy model, so any particular; configuration only gets loaded once.; """"""",MatchSource.CODE_COMMENT,tests/conftest.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/conftest.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/conftest.py:23,Performance,load,loading,23,"""""""; In order to avoid loading spacy models repeatedly,; we'll save references to them, keyed by the options; we used to create the spacy model, so any particular; configuration only gets loaded once.; """"""",MatchSource.CODE_COMMENT,tests/conftest.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/conftest.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/conftest.py:188,Performance,load,loaded,188,"""""""; In order to avoid loading spacy models repeatedly,; we'll save references to them, keyed by the options; we used to create the spacy model, so any particular; configuration only gets loaded once.; """"""",MatchSource.CODE_COMMENT,tests/conftest.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/conftest.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/conftest.py:17,Safety,avoid,avoid,17,"""""""; In order to avoid loading spacy models repeatedly,; we'll save references to them, keyed by the options; we used to create the spacy model, so any particular; configuration only gets loaded once.; """"""",MatchSource.CODE_COMMENT,tests/conftest.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/conftest.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/test_abbreviation_detection.py:2,Testability,test,test,2,"# test for <short> (<long>) pattern
",MatchSource.CODE_COMMENT,tests/test_abbreviation_detection.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/test_abbreviation_detection.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/test_abbreviation_detection.py:50,Safety,detect,detector,50,"# test some troublesome cases in the abbreviation detector
",MatchSource.CODE_COMMENT,tests/test_abbreviation_detection.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/test_abbreviation_detection.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/test_abbreviation_detection.py:2,Testability,test,test,2,"# test some troublesome cases in the abbreviation detector
",MatchSource.CODE_COMMENT,tests/test_abbreviation_detection.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/test_abbreviation_detection.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/test_candidate_generation.py:2,Testability,Test,Test,2,"# Test we don't crash with zero vectors
",MatchSource.CODE_COMMENT,tests/test_candidate_generation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/test_candidate_generation.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/test_linking.py:130,Safety,detect,detector,130,"# replace abbreivation with ""CNN"" so spacy recognizes at as en entity; # and also prefix the term with ""CNN"" so that abbreviation detector passes
",MatchSource.CODE_COMMENT,tests/test_linking.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/test_linking.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/test_linking.py:38,Security,access,accessible,38,"# Just checking that the type tree is accessible from the linker
",MatchSource.CODE_COMMENT,tests/test_linking.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/test_linking.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_all_model.py:25,Deployability,pipeline,pipeline,25,"# This line requires the pipeline to be serializable, so the test should fail here
",MatchSource.CODE_COMMENT,tests/custom_tests/test_all_model.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_all_model.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_all_model.py:61,Testability,test,test,61,"# This line requires the pipeline to be serializable, so the test should fail here
",MatchSource.CODE_COMMENT,tests/custom_tests/test_all_model.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_all_model.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_all_model.py:381,Deployability,pipeline,pipeline,381,"# Below is the test version to be used once we move to spacy v3.1.0 or higher; # def test_full_pipe_not_serializable(combined_all_model_fixture_non_serializable_abbrev):; # text = ""Induction of cytokine expression in leukocytes (CEIL) by binding of thrombin-stimulated platelets. BACKGROUND: Activated platelets tether and activate myeloid leukocytes.""; # # This line requires the pipeline to be serializable (because it uses 2 processes), so the test should fail here; # with pytest.raises(TypeError):; # list(combined_all_model_fixture_non_serializable_abbrev.pipe([text, text], n_process = 2))",MatchSource.CODE_COMMENT,tests/custom_tests/test_all_model.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_all_model.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_all_model.py:15,Testability,test,test,15,"# Below is the test version to be used once we move to spacy v3.1.0 or higher; # def test_full_pipe_not_serializable(combined_all_model_fixture_non_serializable_abbrev):; # text = ""Induction of cytokine expression in leukocytes (CEIL) by binding of thrombin-stimulated platelets. BACKGROUND: Activated platelets tether and activate myeloid leukocytes.""; # # This line requires the pipeline to be serializable (because it uses 2 processes), so the test should fail here; # with pytest.raises(TypeError):; # list(combined_all_model_fixture_non_serializable_abbrev.pipe([text, text], n_process = 2))",MatchSource.CODE_COMMENT,tests/custom_tests/test_all_model.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_all_model.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_all_model.py:447,Testability,test,test,447,"# Below is the test version to be used once we move to spacy v3.1.0 or higher; # def test_full_pipe_not_serializable(combined_all_model_fixture_non_serializable_abbrev):; # text = ""Induction of cytokine expression in leukocytes (CEIL) by binding of thrombin-stimulated platelets. BACKGROUND: Activated platelets tether and activate myeloid leukocytes.""; # # This line requires the pipeline to be serializable (because it uses 2 processes), so the test should fail here; # with pytest.raises(TypeError):; # list(combined_all_model_fixture_non_serializable_abbrev.pipe([text, text], n_process = 2))",MatchSource.CODE_COMMENT,tests/custom_tests/test_all_model.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_all_model.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_custom_segmentation.py:22,Testability,test,testing,22,"# this is really just testing that we handle the case where pysbd crashes
",MatchSource.CODE_COMMENT,tests/custom_tests/test_custom_segmentation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_custom_segmentation.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_custom_segmentation.py:22,Testability,test,testing,22,"# this is really just testing that we handle the case where pysbd crashes
",MatchSource.CODE_COMMENT,tests/custom_tests/test_custom_segmentation.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_custom_segmentation.py
https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_whitespace.py:3,Testability,Test,Test,3,"""""""Test that tokens are created correctly for whitespace.""""""",MatchSource.CODE_COMMENT,tests/custom_tests/test_whitespace.py,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/test_whitespace.py
