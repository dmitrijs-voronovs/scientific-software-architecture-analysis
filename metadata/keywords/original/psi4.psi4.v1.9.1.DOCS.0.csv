id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/psi4/psi4/tree/v1.9.1/README.md:5212,Availability,avail,available,5212,"html (for the CMake adept, see [CMakeLists.txt](CMakeLists.txt#L27). * **Manual** [http://bit.ly/psi4manual](https://psicode.org/psi4manual/master/index.html) (built nightly from master branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release). * **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/ma",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:5332,Availability,down,downloads,5332,"Manual** [http://bit.ly/psi4manual](https://psicode.org/psi4manual/master/index.html) (built nightly from master branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release). * **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball*",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:5445,Availability,down,downloads,5445,"er branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release). * **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?pro",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:5624,Availability,down,download-site,5624," job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensourc",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:497,Deployability,release,release,497,"# <img src=""https://github.com/psi4/psi4media/blob/master/logos-psi4/psi4square.png"" height=150>. | **Status** | [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:540,Deployability,release,release,540,"# <img src=""https://github.com/psi4/psi4media/blob/master/logos-psi4/psi4square.png"" height=150>. | **Status** | [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:593,Deployability,release,releases,593,"# <img src=""https://github.com/psi4/psi4media/blob/master/logos-psi4/psi4square.png"" height=150>. | **Status** | [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:620,Deployability,release,release,620,"# <img src=""https://github.com/psi4/psi4media/blob/master/logos-psi4/psi4square.png"" height=150>. | **Status** | [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:723,Deployability,release,releases,723,"# <img src=""https://github.com/psi4/psi4media/blob/master/logos-psi4/psi4square.png"" height=150>. | **Status** | [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:2121,Deployability,install,installs,2121,"e.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo** | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb) |. <!-- -->; <!-- [![Last release date](https://img.shields.io/github/release-date/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) -->; <!-- [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/version.svg)](https://anaconda.org/psi4/psi4) -->. <!--<a href=""https://psi4.slack.com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-80",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:2617,Deployability,release,release,2617,"rms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo** | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb) |. <!-- -->; <!-- [![Last release date](https://img.shields.io/github/release-date/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) -->; <!-- [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/version.svg)](https://anaconda.org/psi4/psi4) -->. <!--<a href=""https://psi4.slack.com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/i",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:2661,Deployability,release,release-date,2661,"%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo** | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb) |. <!-- -->; <!-- [![Last release date](https://img.shields.io/github/release-date/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) -->; <!-- [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/version.svg)](https://anaconda.org/psi4/psi4) -->. <!--<a href=""https://psi4.slack.com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:2719,Deployability,release,releases,2719,"](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo** | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb) |. <!-- -->; <!-- [![Last release date](https://img.shields.io/github/release-date/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) -->; <!-- [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/version.svg)](https://anaconda.org/psi4/psi4) -->. <!--<a href=""https://psi4.slack.com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github.com/psi4/psi4/pulls); -->. Psi4 is an open-source suite of *ab initio* quan",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:3229,Deployability,install,installer,3229,"da-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo** | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb) |. <!-- -->; <!-- [![Last release date](https://img.shields.io/github/release-date/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) -->; <!-- [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/version.svg)](https://anaconda.org/psi4/psi4) -->. <!--<a href=""https://psi4.slack.com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github.com/psi4/psi4/pulls); -->. Psi4 is an open-source suite of *ab initio* quantum chemistry programs; designed for efficient, high-accuracy simulations of; molecular properties. We routinely perform computations with >2500 basis functions on multi-core machines. With computationally demanding portions written in C++, exports; of many C++ classes into Python via Pybind11, and a flexible Python driver, Psi4; strives to be friendly to both users and developers. * **Users' Website** www.psicode.org. * **Downloading and Installing Psi4** https://psicode.org/ps",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:4504,Deployability,release,release,4504,"psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github.com/psi4/psi4/pulls); -->. Psi4 is an open-source suite of *ab initio* quantum chemistry programs; designed for efficient, high-accuracy simulations of; molecular properties. We routinely perform computations with >2500 basis functions on multi-core machines. With computationally demanding portions written in C++, exports; of many C++ classes into Python via Pybind11, and a flexible Python driver, Psi4; strives to be friendly to both users and developers. * **Users' Website** www.psicode.org. * **Downloading and Installing Psi4** https://psicode.org/psi4manual/master/build_faq.html (for the CMake adept, see [CMakeLists.txt](CMakeLists.txt#L27). * **Manual** [http://bit.ly/psi4manual](https://psicode.org/psi4manual/master/index.html) (built nightly from master branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release). * **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:5573,Deployability,install,install-a-,5573," job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensourc",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:5614,Deployability,install,installer-download-site,5614," job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensourc",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:6358,Deployability,release,releases,6358,"anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0); =======. Psi4: an open-source quantum chemistry software package. Copyright (c) 2007-2023 The Psi4 Developers. The copyrights for code used from other parties are included in; the corresponding files. Psi4 is free software; you can redistribute it and/or modify; it under the terms of the GNU Lesser General Public License as published by; the Free Software Foundation, version 3. Psi4 is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along; with Psi4; if not, write to the Fr",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:8844,Deployability,release,releases,8844,"e Software Foundation, version 3. Psi4 is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along; with Psi4; if not, write to the Free Software Foundation, Inc.,; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. The full text of the GNU Lesser General Public License (version 3) is included in the; COPYING.LESSER file of this repository, and can also be found; [here](https://www.gnu.org/licenses/lgpl.txt). Citation [![doi](https://img.shields.io/badge/doi-10.1063/5.0006002-5077AB.svg)](https://doi.org/10.1063/5.0006002); ========. The journal article reference describing Psi4 is:. D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish,; M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio,; A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer,; R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni,; J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein,; B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov,; K. Patkowski, A. E. DePrince III, U. Bozkaya, R. A. King,; F. A. Evangelista, J. M. Turney, T. D. Crawford, C. D. Sherrill,; ""Psi4 1.4: Open-Source Software for High-Throughput Quantum Chemistry"",; J. Chem. Phys. 152(18) 184108 (2020). * [![doi](https://img.shields.io/badge/doi-10.1021/acs.jctc.7b00174-5077AB.svg)](https://doi.org/10.1021/acs.jctc.7b00174) for Psi4 v1.1; * [![doi](https://img.shields.io/badge/doi-10.1021/acs.jctc.8b00286-5077AB.svg)](https://doi.org/10.1021/acs.jctc.8b00286) for Psi4NumPy; * [![doi](https://img.shields.io/badge/doi-10.1002/wcms.93-5077AB.svg)](https://doi.org/10.1002/wcms.93) for Psi4 alpha releases; * [![doi](https://img.shields.io/badge/doi-10.1002/jcc.20573-5077AB.svg)](https://doi.org/10.1002/jcc.20573) for Psi3; ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:2081,Energy Efficiency,green,green,2081,"dge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo** | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb) |. <!-- -->; <!-- [![Last release date](https://img.shields.io/github/release-date/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) -->; <!-- [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/version.svg)](https://anaconda.org/psi4/psi4) -->. <!--<a href=""https://psi4.slack.com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:3781,Energy Efficiency,efficient,efficient,3781,"s://anaconda.org/psi4/psi4/badges/version.svg)](https://anaconda.org/psi4/psi4) -->. <!--<a href=""https://psi4.slack.com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github.com/psi4/psi4/pulls); -->. Psi4 is an open-source suite of *ab initio* quantum chemistry programs; designed for efficient, high-accuracy simulations of; molecular properties. We routinely perform computations with >2500 basis functions on multi-core machines. With computationally demanding portions written in C++, exports; of many C++ classes into Python via Pybind11, and a flexible Python driver, Psi4; strives to be friendly to both users and developers. * **Users' Website** www.psicode.org. * **Downloading and Installing Psi4** https://psicode.org/psi4manual/master/build_faq.html (for the CMake adept, see [CMakeLists.txt](CMakeLists.txt#L27). * **Manual** [http://bit.ly/psi4manual](https://psicode.org/psi4manual/master/index.html) (built nightly from master branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release). * **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https:/",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:2890,Integrability,message,messages,2890,"03.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo** | [![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/psi4/psi4/56fbc7787af67dabdf1897d0dfe4263d8d97e241?urlpath=lab%2Ftree%2Fdoc%2Fsphinxman%2Fsource%2Fpsiapi.ipynb) |. <!-- -->; <!-- [![Last release date](https://img.shields.io/github/release-date/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) -->; <!-- [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/version.svg)](https://anaconda.org/psi4/psi4) -->. <!--<a href=""https://psi4.slack.com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github.com/psi4/psi4/pulls); -->. Psi4 is an open-source suite of *ab initio* quantum chemistry programs; designed for efficient, high-accuracy simulations of; molecular properties. We routinely perform computations with >2500 basis functions ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:3847,Integrability,rout,routinely,3847,".com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github.com/psi4/psi4/pulls); -->. Psi4 is an open-source suite of *ab initio* quantum chemistry programs; designed for efficient, high-accuracy simulations of; molecular properties. We routinely perform computations with >2500 basis functions on multi-core machines. With computationally demanding portions written in C++, exports; of many C++ classes into Python via Pybind11, and a flexible Python driver, Psi4; strives to be friendly to both users and developers. * **Users' Website** www.psicode.org. * **Downloading and Installing Psi4** https://psicode.org/psi4manual/master/build_faq.html (for the CMake adept, see [CMakeLists.txt](CMakeLists.txt#L27). * **Manual** [http://bit.ly/psi4manual](https://psicode.org/psi4manual/master/index.html) (built nightly from master branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release). * **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (author",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:4046,Modifiability,flexible,flexible,4046,"ject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github.com/psi4/psi4/pulls); -->. Psi4 is an open-source suite of *ab initio* quantum chemistry programs; designed for efficient, high-accuracy simulations of; molecular properties. We routinely perform computations with >2500 basis functions on multi-core machines. With computationally demanding portions written in C++, exports; of many C++ classes into Python via Pybind11, and a flexible Python driver, Psi4; strives to be friendly to both users and developers. * **Users' Website** www.psicode.org. * **Downloading and Installing Psi4** https://psicode.org/psi4manual/master/build_faq.html (for the CMake adept, see [CMakeLists.txt](CMakeLists.txt#L27). * **Manual** [http://bit.ly/psi4manual](https://psicode.org/psi4manual/master/index.html) (built nightly from master branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release). * **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:3857,Performance,perform,perform,3857,".com/messages""> <img src=""https://img.shields.io/badge/dev_chat-on_slack-808493.svg"" /></a>; <a href=""mailto:psi4aiqc+slackinvite@gmail.com?subject=request slack invite (incl. who, where, email)""> <img src=""https://img.shields.io/badge/dev_chat-invite-808493.svg"" /></a> -->. <!--[![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/installer/conda.svg)](https://anaconda.org/psi4/psi4) ; [![Anaconda-Server Badge](https://anaconda.org/psi4/psi4/badges/platforms.svg)](https://anaconda.org/psi4/psi4) -->. <!--; | **PR Activity** | ; [![commit activity](https://img.shields.io/github/commit-activity/y/psi4/psi4.svg)](https://github.com/psi4/psi4/graphs/contributors) ; [![issues-pr-closed](https://img.shields.io/github/issues-pr-closed-raw/psi4/psi4.svg)](https://github.com/psi4/psi4/pulls); -->. Psi4 is an open-source suite of *ab initio* quantum chemistry programs; designed for efficient, high-accuracy simulations of; molecular properties. We routinely perform computations with >2500 basis functions on multi-core machines. With computationally demanding portions written in C++, exports; of many C++ classes into Python via Pybind11, and a flexible Python driver, Psi4; strives to be friendly to both users and developers. * **Users' Website** www.psicode.org. * **Downloading and Installing Psi4** https://psicode.org/psi4manual/master/build_faq.html (for the CMake adept, see [CMakeLists.txt](CMakeLists.txt#L27). * **Manual** [http://bit.ly/psi4manual](https://psicode.org/psi4manual/master/index.html) (built nightly from master branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release). * **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (author",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:58,Testability,log,logos-,58,"# <img src=""https://github.com/psi4/psi4media/blob/master/logos-psi4/psi4square.png"" height=150>. | **Status** | [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:223,Testability,log,logo,223,"# <img src=""https://github.com/psi4/psi4media/blob/master/logos-psi4/psi4square.png"" height=150>. | **Status** | [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:375,Testability,log,logo,375,"# <img src=""https://github.com/psi4/psi4media/blob/master/logos-psi4/psi4square.png"" height=150>. | **Status** | [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:388,Testability,log,logoColor,388,"# <img src=""https://github.com/psi4/psi4media/blob/master/logos-psi4/psi4square.png"" height=150>. | **Status** | [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:1099,Testability,log,logo,1099,zure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.c,MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:1246,Testability,log,logo,1246,psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](,MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:1261,Testability,log,logoColor,1261,psi4/psi4/_build?definitionId=1) [![Codecov coverage](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](,MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:1386,Testability,log,logo,1386,=white)](https://codecov.io/gh/psi4/psi4) |; | :------ | :------- |; | **Latest Release** | [![Last release tag](https://img.shields.io/github/release/psi4/psi4.svg)](https://github.com/psi4/psi4/releases) [![Commits since release](https://img.shields.io/github/commits-since/psi4/psi4/v1.8.svg)](https://github.com/psi4/psi4/releases/tag/v1.8) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Communication** | [![User site](https://img.shields.io/badge/home-Psi4-5077AB.svg)](https://psicode.org/) [![docs latest](https://img.shields.io/badge/docs-latest-5077AB.svg?logo=read%20the%20docs)](https://psicode.org/psi4manual/master/index.html) [![chat on forum](https://img.shields.io/badge/chat-on_forum-808493.svg?logo=Discourse&logoColor=white)](http://forum.psicode.org/) [![dev chat on slack](https://img.shields.io/badge/dev_chat-on_slack-808493.svg?logo=slack)](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q) |; | **Foundation** | [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0) [![platforms](https://img.shields.io/badge/Platforms-Linux%2C%20MacOS%2C%20MacOS%20Silicon%2C%20Windows%2C%20Windows%20WSL-orange.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) [![python](https://img.shields.io/badge/python-3.8%2C%203.9%2C%203.10%2C%203.11%2C%203.12-blue.svg)](https://psicode.org/psi4manual/master/introduction.html#supported-systems) |; | **Installation** | [![obtain latest](https://img.shields.io/badge/obtain-latest-green.svg)](https://psicode.netlify.com/installs/latest) [![Conda](https://img.shields.io/conda/v/conda-forge/psi4.svg)](https://anaconda.org/conda-forge/psi4) [![Anaconda-Server Badge](https://anaconda.org/conda-forge/psi4/badges/latest_release_relative_date.svg)](https://anaconda.org/conda-forge/psi4) |; | **Demo,MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:5064,Testability,log,logo,5064,"ives to be friendly to both users and developers. * **Users' Website** www.psicode.org. * **Downloading and Installing Psi4** https://psicode.org/psi4manual/master/build_faq.html (for the CMake adept, see [CMakeLists.txt](CMakeLists.txt#L27). * **Manual** [http://bit.ly/psi4manual](https://psicode.org/psi4manual/master/index.html) (built nightly from master branch) or https://psicode.org/psi4manual/1.4.0/index.html (last release). * **Tutorial** https://psicode.org/psi4manual/master/tutorial.html for Psithon (``psi4 job.in``), https://psicode.org/psi4manual/master/psiapi.html for PsiAPI (``python job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:5715,Testability,test,test,5715," job.py``). * **Forum** http://forum.psicode.org. * **Communication & Support** https://psicode.org/psi4manual/master/introduction.html#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0); =======. Psi4: an open-source quantum chemistry software ",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:5793,Testability,log,logo,5793,"tml#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0); =======. Psi4: an open-source quantum chemistry software package. Copyright (c) 2007-2023 The Psi4 Developers. The copyrights for code used from other parties are included in; the correspon",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:5806,Testability,log,logoColor,5806,"tml#technical-support. * **GitHub** https://github.com/psi4/psi4 (authoritative repository). * **Continuous Integration Status** [![Azure DevOps builds](https://img.shields.io/azure-devops/build/psi4/e80489d7-9619-4512-8e7b-255e355b3ab8/1/master.svg?logo=azure%20devops)](https://dev.azure.com/psi4/psi4/_build?definitionId=1) on Linux and Windows. * **Anaconda** https://anaconda.org/psi4 (binary available for Linux, Mac, Mac Silicon, Windows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0); =======. Psi4: an open-source quantum chemistry software package. Copyright (c) 2007-2023 The Psi4 Developers. The copyrights for code used from other parties are included in; the correspon",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:6258,Testability,test,testsuite,6258,"indows, and WSL Windows [![Binstar Badge](https://anaconda.org/psi4/psi4/badges/downloads.svg)](https://anaconda.org/psi4/psi4) ) [![Binstar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0); =======. Psi4: an open-source quantum chemistry software package. Copyright (c) 2007-2023 The Psi4 Developers. The copyrights for code used from other parties are included in; the corresponding files. Psi4 is free software; you can redistribute it and/or modify; it under the terms of the GNU Lesser General Public License as published by; the Free Software Foundation, version 3. Psi4 is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU Lesser General Public License for more details. You should",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/README.md:6403,Testability,test,testboard,6403,"ar Badge](https://anaconda.org/conda-forge/psi4/badges/downloads.svg)](https://anaconda.org/conda-forge/psi4) ) [instructions](https://psicode.org/psi4manual/master/conda.html#how-to-install-a-psi4-binary-with-the-psi4conda-installer-download-site). * **Coverage** Python and C++ source code lines hit by running most of the test suite. [![codecov](https://img.shields.io/codecov/c/github/psi4/psi4.svg?logo=Codecov&logoColor=white)](https://codecov.io/gh/psi4/psi4). * **Interested Developers** https://psicode.org/developers.php (replacement page needed) (welcome to fork psi4/psi4 and follow [GitHub contribution procedure](https://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow)) [![PRs welcome](https://img.shields.io/badge/PRs-welcome-yellow.svg)](http://makeapullrequest.com). * **Sample Inputs** http://www.psicode.org/psi4manual/master/testsuite.html (also in [`samples/`](samples)). * **Download Tarball** https://github.com/psi4/psi4/releases . <!--* **Build Dashboard** https://testboard.org/cdash/index.php?project=Psi. * **YouTube Channel** https://www.youtube.com/psitutorials-->. License [![license](https://img.shields.io/github/license/psi4/psi4.svg)](https://opensource.org/licenses/LGPL-3.0); =======. Psi4: an open-source quantum chemistry software package. Copyright (c) 2007-2023 The Psi4 Developers. The copyrights for code used from other parties are included in; the corresponding files. Psi4 is free software; you can redistribute it and/or modify; it under the terms of the GNU Lesser General Public License as published by; the Free Software Foundation, version 3. Psi4 is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along; with Psi4; if not, write to the Free Software Foundation, Inc.,; 51 F",MatchSource.DOCS,README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/README.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:2533,Deployability,continuous,continuous,2533,"g.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR). ",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:2545,Deployability,integrat,integration,2545,"g.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR). ",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:2545,Integrability,integrat,integration,2545,"g.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR). ",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:1882,Security,validat,validated,1882," [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-forkpsi4public).; and [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](ht",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:1926,Testability,test,test,1926," [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-forkpsi4public).; and [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](ht",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:1970,Testability,test,tests,1970," [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-forkpsi4public).; and [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](ht",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:2060,Testability,test,test,2060,"manual/master/build_obtaining.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:2179,Testability,test,test,2179,"g.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR). ",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:328,Usability,learn,learn,328,"# How to contribute. We welcome contributions from external contributors, and this document; describes how to merge code changes into Psi4. As of February 2016, the; procedure for contributing code is exactly the same for the core development; team and for external contributors. **Working on your first Pull Request?** You can learn how from; this *free* series [How to Contribute to an Open Source Project on; GitHub](https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github). ## Getting Started. * Make sure you have a [GitHub account](https://github.com/signup/free).; * [Fork](https://help.github.com/articles/fork-a-repo/) the; [psi4/psi4](https://github.com/psi4/psi4) repository on GitHub.; * On your local machine,; [clone](https://help.github.com/articles/cloning-a-repository/) your fork of; the Psi4 repository.; * More detailed instructions for interacting with your Psi4 fork can be found; [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-forkpsi4public).; and [here](http://psicode.org/psi4manual/master/build_obtaining.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the P",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:2881,Usability,guid,guide,2881,"g.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR). ",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:2949,Usability,guid,guide,2949,"g.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR). ",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md:3009,Usability,learn,learn,3009,"g.html#faq-githubworkflow). ## Making Changes. * Add some really awesome code to your local fork. It's usually a [good; idea](http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/); to make changes on a; [branch](https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/); with the branch name relating to the feature you are going to add.; * When you are ready for others to examine and comment on your new feature,; navigate to your fork of Psi4 on GitHub and open a [pull; request](https://help.github.com/articles/using-pull-requests/) (PR). Note that; after you launch a PR from one of your fork's branches, all; subsequent commits to that branch will be added to the open pull request; automatically. Each commit added to the PR will be validated for; mergability, compilation and test suite compliance; the results of these tests; will be visible on the PR page.; * If you're providing a new feature, you must add test cases and documentation.; * When the code is ready to go, make sure you run the full or relevant portion of the; [test suite](http://psicode.org/psi4manual/master/build_planning.html#faq-subsettests); on your local machine to check that nothing is broken.; * When you're ready to be considered for merging, check the ""Ready to go""; box on the PR page to let the Psi4 team know that the changes are complete.; The code will not be merged until this box is checked, the continuous; integration (Travis for Linux and Distelli for Mac) returns checkmarks,; and multiple core developers give ""Approved"" reviews. # Additional Resources. * [General GitHub documentation](https://help.github.com/); * [PR best practices](http://codeinthehole.com/writing/pull-requests-and-other-good-practices-for-teams-using-github/); * [A guide to contributing to software packages](http://www.contribution-guide.org); * [Thinkful PR example](http://www.thinkful.com/learn/github-pull-request-tutorial/#Time-to-Submit-Your-First-PR). ",MatchSource.DOCS,.github/CONTRIBUTING.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/CONTRIBUTING.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/PULL_REQUEST_TEMPLATE.md:213,Deployability,release,release,213,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge; ",MatchSource.DOCS,.github/PULL_REQUEST_TEMPLATE.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/PULL_REQUEST_TEMPLATE.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/PULL_REQUEST_TEMPLATE.md:662,Testability,test,tests,662,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge; ",MatchSource.DOCS,.github/PULL_REQUEST_TEMPLATE.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/PULL_REQUEST_TEMPLATE.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/PULL_REQUEST_TEMPLATE.md:753,Testability,test,tests,753,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge; ",MatchSource.DOCS,.github/PULL_REQUEST_TEMPLATE.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/PULL_REQUEST_TEMPLATE.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/SUPPORT.md:71,Availability,reliab,reliability,71,"The Psi4 package is distributed for free and without any; guarantee of reliability, accuracy, or suitability for any; particular purpose. No obligation to provide technical support is; expressed or implied. As time allows, the developers will attempt; to answer inquiries on the [forum](http://forum.psicode.org>) or; [GitHub](https://github.com/psi4/psi4/issues/new). For bug reports,; specific and detailed information, with example inputs and `psi4; --version`, would be appreciated. #### Where-to-post summary. * How do I? -- [ask the forum](http://forum.psicode.org). * I got this error, why? -- [ask the forum](http://forum.psicode.org). * I got this error and I'm sure it's a bug -- [file a GitHub issue](https://github.com/psi4/psi4/issues/new). * Can I open a discussion on this bit of code? -- [file a GitHub issue](https://github.com/psi4/psi4/issues/new). * I have an idea/request and a plan -- [file a GitHub issue](https://github.com/psi4/psi4/issues/new). * I have an idea/request -- [ask the forum](http://forum.psicode.org). * Why do you? -- [ask the forum](http://forum.psicode.org). * When will you? -- [ask the forum](http://forum.psicode.org). * I have an experience that can improve the documentation -- [inform the forum](http://forum.psicode.org) or [edit the docs via the little pencil](http://psicode.org/psi4manual/master/index.html) or [add to the documentation itself](doc/sphinxman/source). * Anything you want to share privately -- psi4aiqc+help at gmail.com. ",MatchSource.DOCS,.github/SUPPORT.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/SUPPORT.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/SUPPORT.md:586,Availability,error,error,586,"The Psi4 package is distributed for free and without any; guarantee of reliability, accuracy, or suitability for any; particular purpose. No obligation to provide technical support is; expressed or implied. As time allows, the developers will attempt; to answer inquiries on the [forum](http://forum.psicode.org>) or; [GitHub](https://github.com/psi4/psi4/issues/new). For bug reports,; specific and detailed information, with example inputs and `psi4; --version`, would be appreciated. #### Where-to-post summary. * How do I? -- [ask the forum](http://forum.psicode.org). * I got this error, why? -- [ask the forum](http://forum.psicode.org). * I got this error and I'm sure it's a bug -- [file a GitHub issue](https://github.com/psi4/psi4/issues/new). * Can I open a discussion on this bit of code? -- [file a GitHub issue](https://github.com/psi4/psi4/issues/new). * I have an idea/request and a plan -- [file a GitHub issue](https://github.com/psi4/psi4/issues/new). * I have an idea/request -- [ask the forum](http://forum.psicode.org). * Why do you? -- [ask the forum](http://forum.psicode.org). * When will you? -- [ask the forum](http://forum.psicode.org). * I have an experience that can improve the documentation -- [inform the forum](http://forum.psicode.org) or [edit the docs via the little pencil](http://psicode.org/psi4manual/master/index.html) or [add to the documentation itself](doc/sphinxman/source). * Anything you want to share privately -- psi4aiqc+help at gmail.com. ",MatchSource.DOCS,.github/SUPPORT.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/SUPPORT.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/SUPPORT.md:657,Availability,error,error,657,"The Psi4 package is distributed for free and without any; guarantee of reliability, accuracy, or suitability for any; particular purpose. No obligation to provide technical support is; expressed or implied. As time allows, the developers will attempt; to answer inquiries on the [forum](http://forum.psicode.org>) or; [GitHub](https://github.com/psi4/psi4/issues/new). For bug reports,; specific and detailed information, with example inputs and `psi4; --version`, would be appreciated. #### Where-to-post summary. * How do I? -- [ask the forum](http://forum.psicode.org). * I got this error, why? -- [ask the forum](http://forum.psicode.org). * I got this error and I'm sure it's a bug -- [file a GitHub issue](https://github.com/psi4/psi4/issues/new). * Can I open a discussion on this bit of code? -- [file a GitHub issue](https://github.com/psi4/psi4/issues/new). * I have an idea/request and a plan -- [file a GitHub issue](https://github.com/psi4/psi4/issues/new). * I have an idea/request -- [ask the forum](http://forum.psicode.org). * Why do you? -- [ask the forum](http://forum.psicode.org). * When will you? -- [ask the forum](http://forum.psicode.org). * I have an experience that can improve the documentation -- [inform the forum](http://forum.psicode.org) or [edit the docs via the little pencil](http://psicode.org/psi4manual/master/index.html) or [add to the documentation itself](doc/sphinxman/source). * Anything you want to share privately -- psi4aiqc+help at gmail.com. ",MatchSource.DOCS,.github/SUPPORT.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/SUPPORT.md
https://github.com/psi4/psi4/tree/v1.9.1/media/README.md:341,Safety,avoid,avoid,341,"[LAB 10-19-2016]. * Majority of logos detached from main Psi4 repo into https://github.com/psi4/psi4media . [LAB 9-29-2016]. * See doc/sphinxman/source/psi4doc/themes/psi4doc/theme.conf; for Psi4 colors and customary icon linking. [LAB 2-18-2015]. * Text ""SI"" in ""PSI4"" changed to 82% size of ""P"" & ""4""; 54 pt for banner; files. This should avoid the ""Public School 14"" issue, while not looking; so lopsided as genuine small-caps font. [LAB 11-18-2014]. * Text ""Ab Initio"" changed to ""Open-Source"". [LAB 4-20-2012]. * Text ""PSI4"" is Optima Regular at 66 pt in CMYK = [100, 95, 0, 0]. * Text ""Ab Initio Quantum Chemistry"" is Optima Bold at 16 pt; in CMYK = [0, 0, 0, 100] with 100 (AI units) spacing stretch. * The difference between ""vector"" and other files in this directory is in; the trimming of self-interference at the tips of the psi graphic. This; process turns the psi into a raster object, so the color and 3D effects; are no longer editable. * All transparencies are set such that these can be placed over any color; background. ",MatchSource.DOCS,media/README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/media/README.md
https://github.com/psi4/psi4/tree/v1.9.1/media/README.md:32,Testability,log,logos,32,"[LAB 10-19-2016]. * Majority of logos detached from main Psi4 repo into https://github.com/psi4/psi4media . [LAB 9-29-2016]. * See doc/sphinxman/source/psi4doc/themes/psi4doc/theme.conf; for Psi4 colors and customary icon linking. [LAB 2-18-2015]. * Text ""SI"" in ""PSI4"" changed to 82% size of ""P"" & ""4""; 54 pt for banner; files. This should avoid the ""Public School 14"" issue, while not looking; so lopsided as genuine small-caps font. [LAB 11-18-2014]. * Text ""Ab Initio"" changed to ""Open-Source"". [LAB 4-20-2012]. * Text ""PSI4"" is Optima Regular at 66 pt in CMYK = [100, 95, 0, 0]. * Text ""Ab Initio Quantum Chemistry"" is Optima Bold at 16 pt; in CMYK = [0, 0, 0, 100] with 100 (AI units) spacing stretch. * The difference between ""vector"" and other files in this directory is in; the trimming of self-interference at the tips of the psi graphic. This; process turns the psi into a raster object, so the color and 3D effects; are no longer editable. * All transparencies are set such that these can be placed over any color; background. ",MatchSource.DOCS,media/README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/media/README.md
https://github.com/psi4/psi4/tree/v1.9.1/.github/workflows/README.md:1729,Availability,down,download,1729,"# GHA for Psi4. ## [docs.yml](./docs.yml). * Since: April 2021; * Runs on: push to master; * Goals:; * get CI warning if doxygen docs compile broken; * get CI warning if sphinx docs compile broken, or compile with warnings, or compile with unreachable links, or can't compile nit-picky""; * publish nightly-build docs promptly and automatically; * get CI warning if psi4 compile broken with conda-forge environment (as opposed to the usual defaults-based environment); * Results:; * automated commit of built HTML docs to psi4/psi4docs:master, which in turn is served up by netlify to https://psi4manual.netlify.app/, which in turn is [redirected by psicode](https://github.com/psi4/psicode-hugo-website/blob/master/netlify.toml) into https://psicode.org/psi4manual/master/index.html. ----. ## [ecosystem.yml](./ecosystem.yml). * Since: March 2022; * Runs on: PR, push to master; * Goals:; * get CI warning if PR breaks addons hosted by psi4 channel or by conda-forge chanel; * show CI model of how to build Psi4 on Linux, macOS, and Windows platforms, including tweaks to the build environment, and emphasizing the minor differences between platforms; * show how to run with the maximal ecosystem (less proprietary addons, gpu addons, and addons I haven't packaged), as the environment can be tricky; * show what addon packages to get from what channel, especially during shift from defaults-based to conda-forge-based; * Results:; * None. ----. ## [docs-pr.yml](./docs-pr.yml). * Since: June 2022; * Runs on: PR; * Goals; * provide CI warning to author if PR changes break sphinx docs compile, or compile with warnings, or compile with unreachable links, or can't compile nit-picky""; * Results; * archived tarball of HTML docs (download from Actions, Archives, then unpack and view in browser). ",MatchSource.DOCS,.github/workflows/README.md,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/.github/workflows/README.md
https://github.com/psi4/psi4/tree/v1.9.1/cmake/math/README.rst:187,Modifiability,variab,variable,187,". Where does CMake search math libraries if you specify --blas/lapack=auto?; -------------------------------------------------------------------------. CMake will look in the environment variable MATH_ROOT. For instance my .bashrc contains::. source /opt/intel/bin/compilervars.sh intel64; export MATH_ROOT=/opt/intel/mkl. Order of math libraries; -----------------------. Order is set by MATH_LIB_SEARCH_ORDER in MathLibs.cmake.; You can override this order by setting BLAS_TYPE and/or LAPACK_TYPE; for example to ATLAS or some other library that you prefer. What to edit if your math library is not found although you have set MATH_ROOT?; -------------------------------------------------------------------------------. Normally you only need to edit MathLibs.cmake to add new libraries; or edit existing ones. Since a vendor can provide libraries with different ""fingerprints""; (example MKL), you can define different combinations (up to 9), for instance::. set(MKL_BLAS_LIBS ...); set(MKL_BLAS_LIBS2 ...); set(MKL_BLAS_LIBS3 ...); set(MKL_BLAS_LIBS4 ...); set(MKL_BLAS_LIBS5 ...). Then CMake will first try MKL_BLAS_LIBS, then MKL_BLAS_LIBS2, etc.; The first pattern that will match will be linked against.; ",MatchSource.DOCS,cmake/math/README.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/cmake/math/README.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:4351,Availability,avail,available,4351,"ve; depend on the ADC level employed. With this also the computational cost changes.; The key computational step, namely the formation of the matrix-vector products; scales as :math:`{\cal O}(N^5)` for ADC(2) and :math:`{\cal O}(N^6)`; for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]_; and the `adcc theory documentation <https://adc-connect.org/latest/theory.html>`_. Available ADC methods; ---------------------; .. sectionauthor:: Michael F. Herbst. Several ADC methods are available in |PSIfour| for the computation of excited states,; see :ref:`table:adcsummary`.; The methods are available via an interface to the `adcc <https://adc-connect.org>`_ python module.; After a more general introduction, specific aspects of the implementation will be highlighted; in section :ref:`sec:interfaceadcc`. .. _`table:adcsummary`:. .. table:: ADC capabilities of Psi4. +---------------+------------+---------------+-------+------------------------------------+; | Method | References | Exc. Energies | Props | Supported values for kind keyword |; +===============+============+===============+=======+====================================+; | ADC(1) | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+-------+------------------------------------+; | ADC(2) | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+-------+------------------------------------+; | ADC(2)-x | RHF, UHF | yes | yes | any, singlet,",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:4460,Availability,avail,available,4460,"putational step, namely the formation of the matrix-vector products; scales as :math:`{\cal O}(N^5)` for ADC(2) and :math:`{\cal O}(N^6)`; for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]_; and the `adcc theory documentation <https://adc-connect.org/latest/theory.html>`_. Available ADC methods; ---------------------; .. sectionauthor:: Michael F. Herbst. Several ADC methods are available in |PSIfour| for the computation of excited states,; see :ref:`table:adcsummary`.; The methods are available via an interface to the `adcc <https://adc-connect.org>`_ python module.; After a more general introduction, specific aspects of the implementation will be highlighted; in section :ref:`sec:interfaceadcc`. .. _`table:adcsummary`:. .. table:: ADC capabilities of Psi4. +---------------+------------+---------------+-------+------------------------------------+; | Method | References | Exc. Energies | Props | Supported values for kind keyword |; +===============+============+===============+=======+====================================+; | ADC(1) | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+-------+------------------------------------+; | ADC(2) | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+-------+------------------------------------+; | ADC(2)-x | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+-------+---------------------",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:6694,Availability,avail,available,6694," RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2)-x | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(3) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+. The leftmost column of table :ref:`table:adcsummary` provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function :py:func:`~psi4.driver.energy`.; For example, ``energy('adc(2)-x')`` will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function :py:func:`~psi4.driver.properties`; with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like ``properties('adc(2)', properties=[""oscillator_strength""])``. Running ADC calculations; ------------------------; .. sectionauthor:: Michael F. Herbst. Running an ADC calculation with |PSIfour| requires; the call to :py:func:`~psi4.driver.properties` as discussed above; as well as one or more mandatory keyword arguments. The most important keyword argument is |adc__roots_per_irrep|,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a single; element only. For example one can run an ADC(2) calculation for 10; (singlet) excited states using::. set roots_per_irrep",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:8381,Availability,avail,available,8381," are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a single; element only. For example one can run an ADC(2) calculation for 10; (singlet) excited states using::. set roots_per_irrep [10]; properties('adc(2)', properties=[""oscillator_strength""]). where the ``molecule`` section was dropped for brevity. **Selecting the excitation manifold.**; To select between the possible excitation manifolds,; use the |adc__kind| keyword. For restricted references; by default only singlet excited states are computed,; corresponding to the keyword value ``'singlet'``.; To compute triplet states, select ``'triplet'``.; To compute both without making a spin distinction, select ``'any'``.; The latter is default for unrestricted references. The special |adc__kind| value ``'spin_flip'`` selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for ``CVS-ADC(n)`` methods,; see table :ref:`table:adcsummary`. **Using the core-valence separation.**; For tackling core-valence excitations using the ``CVS-ADC(n)``; methods, the keyword argument |adc__num_core_orbitals|; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of ``2`` indicates, for example,; that the two lowest-energy :math:`\alpha` and the two; lowest-energy :math:`\beta` orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space. *Example:* Consider furane, :math:`C_4H_4O`. In order to tackle; the oxygen 1s edge, *i.e* simulate a O 1s XAS spectrum, one may; just set |adc__num_core_orbitals| to ``1``. This will select the; oxygen 1s orbital for the core space as it is energetical",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:10824,Availability,avail,available,10824,"autodir_options_c/adc__cutoff_amps_print.rst. The full list is provided in appendix :ref:`apdx:adc_psivar`; and many more sample input files can be found in the adc and adcc; subfolders of :source:`samples`.; Note, that not all keywords are supported by all backends. .. _`sec:interfaceadcc`:. Interface to adcc; -----------------; .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. For most implemented ADC methods |PSIfour| relies; on an interface to the `adcc <https://adc-connect.org>`_ python package.; The approach of adcc is to directly diagonalise the; ADC matrix :math:`\mathbf{A}` in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-vector product are precomputed and stored; in memory. This approach is general in the sense; that it can be applied to a large range of ADC methods and variants.; So far levels up to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; |globals__freeze_core| and |globals__num_frozen_uocc|; are supported with all ADC methods using the adcc backend. Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed. More detailed documentation about adcc and its features can be found; at `<https://adc-connect.org>`_,; especially the `theory section <https://adc-connect.org/latest/theory.html>`_.; If you are using adcc from |PSIfour| for your calculations,; please cite both |PSIfour| as well as adcc [Herbst2020]_; in your published work. **The ADC wavefunction object.**; After running the ADC calculation in adcc, the interface code sets; a nu",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:3736,Energy Efficiency,reduce,reduce,3736," to the single and *D* to the double excitation manifolds.; This matrix is typically sparse and thus may be diagonalised iteratively,; for example using Davidson's method [Dreuw:2014:82]_. An alternative viewpoint; has been addressed for example in [Haettig:2002]_, where ADC(2) is related; to other response theories such as CC2-LR, CIS(D) and CIS(D\ :math:`_n`).; In this sense one may consider the ADC matrix the correlated response matrix; to a response problem based on CIS; and apply the simultaneous expansion method (SEM),; in which the |sigma|-vectors (ADC matrix-vector products); are constructed several times. The structure and order of the blocks in the equation above; depend on the ADC level employed. With this also the computational cost changes.; The key computational step, namely the formation of the matrix-vector products; scales as :math:`{\cal O}(N^5)` for ADC(2) and :math:`{\cal O}(N^6)`; for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]_; and the `adcc theory documentation <https://adc-connect.org/latest/theory.html>`_. Available ADC methods; ---------------------; .. sectionauthor:: Michael F. Herbst. Several ADC methods are available in |PSIfour| for the computation of excited states,; see :ref:`table:adcsummary`.; The methods are available via an interface to the `adcc <https://adc-connect.org>`_ python module.; After a more general introduction, specific aspects of the implementation will be highlighted; in section :ref:`sec:interfaceadcc`. .. _`table:adcsummary`:. .. ta",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:6513,Energy Efficiency,energy,energy,6513,"HF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+--------------------------------------------+; | CVS-ADC(1) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2)-x | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(3) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+. The leftmost column of table :ref:`table:adcsummary` provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function :py:func:`~psi4.driver.energy`.; For example, ``energy('adc(2)-x')`` will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function :py:func:`~psi4.driver.properties`; with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like ``properties('adc(2)', properties=[""oscillator_strength""])``. Running ADC calculations; ------------------------; .. sectionauthor:: Michael F. Herbst. Running an ADC calculation with |PSIfour| requires; the call to :py:func:`~psi4.driver.properties` as discussed above; as well as one or more mandatory keyword arguments. The most important keyword argument is |adc__roots_per_irrep|,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most ",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:6538,Energy Efficiency,energy,energy,6538," |; +---------------+------------+---------------+--------------------------------------------+; | CVS-ADC(1) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2)-x | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(3) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+. The leftmost column of table :ref:`table:adcsummary` provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function :py:func:`~psi4.driver.energy`.; For example, ``energy('adc(2)-x')`` will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function :py:func:`~psi4.driver.properties`; with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like ``properties('adc(2)', properties=[""oscillator_strength""])``. Running ADC calculations; ------------------------; .. sectionauthor:: Michael F. Herbst. Running an ADC calculation with |PSIfour| requires; the call to :py:func:`~psi4.driver.properties` as discussed above; as well as one or more mandatory keyword arguments. The most important keyword argument is |adc__roots_per_irrep|,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a single; element o",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:8899,Energy Efficiency,energy,energy,8899,"ord. For restricted references; by default only singlet excited states are computed,; corresponding to the keyword value ``'singlet'``.; To compute triplet states, select ``'triplet'``.; To compute both without making a spin distinction, select ``'any'``.; The latter is default for unrestricted references. The special |adc__kind| value ``'spin_flip'`` selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for ``CVS-ADC(n)`` methods,; see table :ref:`table:adcsummary`. **Using the core-valence separation.**; For tackling core-valence excitations using the ``CVS-ADC(n)``; methods, the keyword argument |adc__num_core_orbitals|; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of ``2`` indicates, for example,; that the two lowest-energy :math:`\alpha` and the two; lowest-energy :math:`\beta` orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space. *Example:* Consider furane, :math:`C_4H_4O`. In order to tackle; the oxygen 1s edge, *i.e* simulate a O 1s XAS spectrum, one may; just set |adc__num_core_orbitals| to ``1``. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the |adc__num_core_orbitals| value needs; to be set to ``5``, such that both the O 1s and all four C 1s orbitals; are part of the core space. **Other keywords and examples.**; Apart from the mentioned keywords, the following are common:. .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__cutoff_amps_pr",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:8941,Energy Efficiency,energy,energy,8941,"ord. For restricted references; by default only singlet excited states are computed,; corresponding to the keyword value ``'singlet'``.; To compute triplet states, select ``'triplet'``.; To compute both without making a spin distinction, select ``'any'``.; The latter is default for unrestricted references. The special |adc__kind| value ``'spin_flip'`` selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for ``CVS-ADC(n)`` methods,; see table :ref:`table:adcsummary`. **Using the core-valence separation.**; For tackling core-valence excitations using the ``CVS-ADC(n)``; methods, the keyword argument |adc__num_core_orbitals|; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of ``2`` indicates, for example,; that the two lowest-energy :math:`\alpha` and the two; lowest-energy :math:`\beta` orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space. *Example:* Consider furane, :math:`C_4H_4O`. In order to tackle; the oxygen 1s edge, *i.e* simulate a O 1s XAS spectrum, one may; just set |adc__num_core_orbitals| to ``1``. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the |adc__num_core_orbitals| value needs; to be set to ``5``, such that both the O 1s and all four C 1s orbitals; are part of the core space. **Other keywords and examples.**; Apart from the mentioned keywords, the following are common:. .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__cutoff_amps_pr",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:9058,Energy Efficiency,energy,energy,9058," ``'triplet'``.; To compute both without making a spin distinction, select ``'any'``.; The latter is default for unrestricted references. The special |adc__kind| value ``'spin_flip'`` selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for ``CVS-ADC(n)`` methods,; see table :ref:`table:adcsummary`. **Using the core-valence separation.**; For tackling core-valence excitations using the ``CVS-ADC(n)``; methods, the keyword argument |adc__num_core_orbitals|; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of ``2`` indicates, for example,; that the two lowest-energy :math:`\alpha` and the two; lowest-energy :math:`\beta` orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space. *Example:* Consider furane, :math:`C_4H_4O`. In order to tackle; the oxygen 1s edge, *i.e* simulate a O 1s XAS spectrum, one may; just set |adc__num_core_orbitals| to ``1``. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the |adc__num_core_orbitals| value needs; to be set to ``5``, such that both the O 1s and all four C 1s orbitals; are part of the core space. **Other keywords and examples.**; Apart from the mentioned keywords, the following are common:. .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__cutoff_amps_print.rst. The full list is provided in appendix :ref:`apdx:adc_psivar`; and many more sample input files can be found in the adc and adcc; subfolders of :source:`samples`.",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:12115,Energy Efficiency,energy,energy,12115,"ide adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed. More detailed documentation about adcc and its features can be found; at `<https://adc-connect.org>`_,; especially the `theory section <https://adc-connect.org/latest/theory.html>`_.; If you are using adcc from |PSIfour| for your calculations,; please cite both |PSIfour| as well as adcc [Herbst2020]_; in your published work. **The ADC wavefunction object.**; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned :py:class:`~psi4.core.Wavefunction`; in case they are computed.; In the following the ``<method>`` prefix refers to the ADC method (such as ``adc(1)``,; ``adc(3)``, ``cvs-adc(2)-x``). * Ground state energy terms like ``MP2 correlation energy``, ``MP3 correlation energy``,; ``MP2 total energy``, ``MP3 total energy``, ``current correlation energy`` and ``current energy``.; * ``MP2 dipole X`` and the other components: Ground state dipole moments at MP(2) level.; * ``number of iterations``: The number of iterations the iterative solver required to converge.; * ``number of excited states``: The number of excited states, which were computed.; * More variables are summarized in :ref:`apdx:psivariables_alpha`. The following attribute is set on returned wavefunctions:. * ``adcc_state``: The `adcc.ExcitedStates <https://adc-connect.org/q/excitedstates>`_; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example ``adcc_state.plot_spectrum()`` plots a broadened excited states spectrum; in matplotlib. See the `adcc calculations documentation <https://adc-connect.org/latest/calculations.html>`_; for details. **Tips for convergence ",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:12151,Energy Efficiency,energy,energy,12151,"ide adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed. More detailed documentation about adcc and its features can be found; at `<https://adc-connect.org>`_,; especially the `theory section <https://adc-connect.org/latest/theory.html>`_.; If you are using adcc from |PSIfour| for your calculations,; please cite both |PSIfour| as well as adcc [Herbst2020]_; in your published work. **The ADC wavefunction object.**; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned :py:class:`~psi4.core.Wavefunction`; in case they are computed.; In the following the ``<method>`` prefix refers to the ADC method (such as ``adc(1)``,; ``adc(3)``, ``cvs-adc(2)-x``). * Ground state energy terms like ``MP2 correlation energy``, ``MP3 correlation energy``,; ``MP2 total energy``, ``MP3 total energy``, ``current correlation energy`` and ``current energy``.; * ``MP2 dipole X`` and the other components: Ground state dipole moments at MP(2) level.; * ``number of iterations``: The number of iterations the iterative solver required to converge.; * ``number of excited states``: The number of excited states, which were computed.; * More variables are summarized in :ref:`apdx:psivariables_alpha`. The following attribute is set on returned wavefunctions:. * ``adcc_state``: The `adcc.ExcitedStates <https://adc-connect.org/q/excitedstates>`_; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example ``adcc_state.plot_spectrum()`` plots a broadened excited states spectrum; in matplotlib. See the `adcc calculations documentation <https://adc-connect.org/latest/calculations.html>`_; for details. **Tips for convergence ",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:12179,Energy Efficiency,energy,energy,12179,"ide adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed. More detailed documentation about adcc and its features can be found; at `<https://adc-connect.org>`_,; especially the `theory section <https://adc-connect.org/latest/theory.html>`_.; If you are using adcc from |PSIfour| for your calculations,; please cite both |PSIfour| as well as adcc [Herbst2020]_; in your published work. **The ADC wavefunction object.**; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned :py:class:`~psi4.core.Wavefunction`; in case they are computed.; In the following the ``<method>`` prefix refers to the ADC method (such as ``adc(1)``,; ``adc(3)``, ``cvs-adc(2)-x``). * Ground state energy terms like ``MP2 correlation energy``, ``MP3 correlation energy``,; ``MP2 total energy``, ``MP3 total energy``, ``current correlation energy`` and ``current energy``.; * ``MP2 dipole X`` and the other components: Ground state dipole moments at MP(2) level.; * ``number of iterations``: The number of iterations the iterative solver required to converge.; * ``number of excited states``: The number of excited states, which were computed.; * More variables are summarized in :ref:`apdx:psivariables_alpha`. The following attribute is set on returned wavefunctions:. * ``adcc_state``: The `adcc.ExcitedStates <https://adc-connect.org/q/excitedstates>`_; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example ``adcc_state.plot_spectrum()`` plots a broadened excited states spectrum; in matplotlib. See the `adcc calculations documentation <https://adc-connect.org/latest/calculations.html>`_; for details. **Tips for convergence ",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:12202,Energy Efficiency,energy,energy,12202,"ide adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed. More detailed documentation about adcc and its features can be found; at `<https://adc-connect.org>`_,; especially the `theory section <https://adc-connect.org/latest/theory.html>`_.; If you are using adcc from |PSIfour| for your calculations,; please cite both |PSIfour| as well as adcc [Herbst2020]_; in your published work. **The ADC wavefunction object.**; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned :py:class:`~psi4.core.Wavefunction`; in case they are computed.; In the following the ``<method>`` prefix refers to the ADC method (such as ``adc(1)``,; ``adc(3)``, ``cvs-adc(2)-x``). * Ground state energy terms like ``MP2 correlation energy``, ``MP3 correlation energy``,; ``MP2 total energy``, ``MP3 total energy``, ``current correlation energy`` and ``current energy``.; * ``MP2 dipole X`` and the other components: Ground state dipole moments at MP(2) level.; * ``number of iterations``: The number of iterations the iterative solver required to converge.; * ``number of excited states``: The number of excited states, which were computed.; * More variables are summarized in :ref:`apdx:psivariables_alpha`. The following attribute is set on returned wavefunctions:. * ``adcc_state``: The `adcc.ExcitedStates <https://adc-connect.org/q/excitedstates>`_; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example ``adcc_state.plot_spectrum()`` plots a broadened excited states spectrum; in matplotlib. See the `adcc calculations documentation <https://adc-connect.org/latest/calculations.html>`_; for details. **Tips for convergence ",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:12224,Energy Efficiency,energy,energy,12224,"ide adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed. More detailed documentation about adcc and its features can be found; at `<https://adc-connect.org>`_,; especially the `theory section <https://adc-connect.org/latest/theory.html>`_.; If you are using adcc from |PSIfour| for your calculations,; please cite both |PSIfour| as well as adcc [Herbst2020]_; in your published work. **The ADC wavefunction object.**; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned :py:class:`~psi4.core.Wavefunction`; in case they are computed.; In the following the ``<method>`` prefix refers to the ADC method (such as ``adc(1)``,; ``adc(3)``, ``cvs-adc(2)-x``). * Ground state energy terms like ``MP2 correlation energy``, ``MP3 correlation energy``,; ``MP2 total energy``, ``MP3 total energy``, ``current correlation energy`` and ``current energy``.; * ``MP2 dipole X`` and the other components: Ground state dipole moments at MP(2) level.; * ``number of iterations``: The number of iterations the iterative solver required to converge.; * ``number of excited states``: The number of excited states, which were computed.; * More variables are summarized in :ref:`apdx:psivariables_alpha`. The following attribute is set on returned wavefunctions:. * ``adcc_state``: The `adcc.ExcitedStates <https://adc-connect.org/q/excitedstates>`_; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example ``adcc_state.plot_spectrum()`` plots a broadened excited states spectrum; in matplotlib. See the `adcc calculations documentation <https://adc-connect.org/latest/calculations.html>`_; for details. **Tips for convergence ",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:12256,Energy Efficiency,energy,energy,12256,"ide adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed. More detailed documentation about adcc and its features can be found; at `<https://adc-connect.org>`_,; especially the `theory section <https://adc-connect.org/latest/theory.html>`_.; If you are using adcc from |PSIfour| for your calculations,; please cite both |PSIfour| as well as adcc [Herbst2020]_; in your published work. **The ADC wavefunction object.**; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned :py:class:`~psi4.core.Wavefunction`; in case they are computed.; In the following the ``<method>`` prefix refers to the ADC method (such as ``adc(1)``,; ``adc(3)``, ``cvs-adc(2)-x``). * Ground state energy terms like ``MP2 correlation energy``, ``MP3 correlation energy``,; ``MP2 total energy``, ``MP3 total energy``, ``current correlation energy`` and ``current energy``.; * ``MP2 dipole X`` and the other components: Ground state dipole moments at MP(2) level.; * ``number of iterations``: The number of iterations the iterative solver required to converge.; * ``number of excited states``: The number of excited states, which were computed.; * More variables are summarized in :ref:`apdx:psivariables_alpha`. The following attribute is set on returned wavefunctions:. * ``adcc_state``: The `adcc.ExcitedStates <https://adc-connect.org/q/excitedstates>`_; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example ``adcc_state.plot_spectrum()`` plots a broadened excited states spectrum; in matplotlib. See the `adcc calculations documentation <https://adc-connect.org/latest/calculations.html>`_; for details. **Tips for convergence ",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:12279,Energy Efficiency,energy,energy,12279,"ide adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed. More detailed documentation about adcc and its features can be found; at `<https://adc-connect.org>`_,; especially the `theory section <https://adc-connect.org/latest/theory.html>`_.; If you are using adcc from |PSIfour| for your calculations,; please cite both |PSIfour| as well as adcc [Herbst2020]_; in your published work. **The ADC wavefunction object.**; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned :py:class:`~psi4.core.Wavefunction`; in case they are computed.; In the following the ``<method>`` prefix refers to the ADC method (such as ``adc(1)``,; ``adc(3)``, ``cvs-adc(2)-x``). * Ground state energy terms like ``MP2 correlation energy``, ``MP3 correlation energy``,; ``MP2 total energy``, ``MP3 total energy``, ``current correlation energy`` and ``current energy``.; * ``MP2 dipole X`` and the other components: Ground state dipole moments at MP(2) level.; * ``number of iterations``: The number of iterations the iterative solver required to converge.; * ``number of excited states``: The number of excited states, which were computed.; * More variables are summarized in :ref:`apdx:psivariables_alpha`. The following attribute is set on returned wavefunctions:. * ``adcc_state``: The `adcc.ExcitedStates <https://adc-connect.org/q/excitedstates>`_; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example ``adcc_state.plot_spectrum()`` plots a broadened excited states spectrum; in matplotlib. See the `adcc calculations documentation <https://adc-connect.org/latest/calculations.html>`_; for details. **Tips for convergence ",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:3388,Integrability,depend,depend,3388,"bf{A}`, the eigenproblem can be written; in terms of several blocks. .. math:: \begin{pmatrix}; \mathbf{A_{SS}} & \mathbf{A_{SD}}\\; \mathbf{A_{DS}} & \mathbf{A_{DD}}; \end{pmatrix}; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}; =\omega; \begin{pmatrix}; \mathbf{X_S}\\; \mathbf{X_D}; \end{pmatrix}. where *S* refers to the single and *D* to the double excitation manifolds.; This matrix is typically sparse and thus may be diagonalised iteratively,; for example using Davidson's method [Dreuw:2014:82]_. An alternative viewpoint; has been addressed for example in [Haettig:2002]_, where ADC(2) is related; to other response theories such as CC2-LR, CIS(D) and CIS(D\ :math:`_n`).; In this sense one may consider the ADC matrix the correlated response matrix; to a response problem based on CIS; and apply the simultaneous expansion method (SEM),; in which the |sigma|-vectors (ADC matrix-vector products); are constructed several times. The structure and order of the blocks in the equation above; depend on the ADC level employed. With this also the computational cost changes.; The key computational step, namely the formation of the matrix-vector products; scales as :math:`{\cal O}(N^5)` for ADC(2) and :math:`{\cal O}(N^6)`; for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]_; and the `adcc theory documentation <https://adc-connect.org/latest/theory.html>`_. Available ADC methods; ---------------------; .. sectionauthor:: Michael F. Herbst. Several ADC methods are available in |PSIfour| ",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:4477,Integrability,interface,interface,4477,"putational step, namely the formation of the matrix-vector products; scales as :math:`{\cal O}(N^5)` for ADC(2) and :math:`{\cal O}(N^6)`; for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]_; and the `adcc theory documentation <https://adc-connect.org/latest/theory.html>`_. Available ADC methods; ---------------------; .. sectionauthor:: Michael F. Herbst. Several ADC methods are available in |PSIfour| for the computation of excited states,; see :ref:`table:adcsummary`.; The methods are available via an interface to the `adcc <https://adc-connect.org>`_ python module.; After a more general introduction, specific aspects of the implementation will be highlighted; in section :ref:`sec:interfaceadcc`. .. _`table:adcsummary`:. .. table:: ADC capabilities of Psi4. +---------------+------------+---------------+-------+------------------------------------+; | Method | References | Exc. Energies | Props | Supported values for kind keyword |; +===============+============+===============+=======+====================================+; | ADC(1) | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+-------+------------------------------------+; | ADC(2) | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+-------+------------------------------------+; | ADC(2)-x | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+-------+---------------------",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:4660,Integrability,interface,interfaceadcc,4660,"l O}(N^6)`; for ADC(2)-x and ADC(3). Several additional approximations,; such as frozen-core, frozen-virtual; may be applied to reduce the cost of the problem.; Using the core-valence separation (CVS) approximation; one may specifically target core-valence-excitations; at a substantial reduction in cost.; With the spin-flip modification few-reference ground states can; be tackled starting from a triplet reference by simultaneously; exciting an electron and flipping its spin.; A more detailed overview of such modifications gives [Dreuw:2014:82]_; and the `adcc theory documentation <https://adc-connect.org/latest/theory.html>`_. Available ADC methods; ---------------------; .. sectionauthor:: Michael F. Herbst. Several ADC methods are available in |PSIfour| for the computation of excited states,; see :ref:`table:adcsummary`.; The methods are available via an interface to the `adcc <https://adc-connect.org>`_ python module.; After a more general introduction, specific aspects of the implementation will be highlighted; in section :ref:`sec:interfaceadcc`. .. _`table:adcsummary`:. .. table:: ADC capabilities of Psi4. +---------------+------------+---------------+-------+------------------------------------+; | Method | References | Exc. Energies | Props | Supported values for kind keyword |; +===============+============+===============+=======+====================================+; | ADC(1) | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+-------+------------------------------------+; | ADC(2) | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+-------+------------------------------------+; | ADC(2)-x | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+-------+------------------------------------+; | ADC(3) | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:10158,Integrability,interface,interfaceadcc,10158,"e core space. *Example:* Consider furane, :math:`C_4H_4O`. In order to tackle; the oxygen 1s edge, *i.e* simulate a O 1s XAS spectrum, one may; just set |adc__num_core_orbitals| to ``1``. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the |adc__num_core_orbitals| value needs; to be set to ``5``, such that both the O 1s and all four C 1s orbitals; are part of the core space. **Other keywords and examples.**; Apart from the mentioned keywords, the following are common:. .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__cutoff_amps_print.rst. The full list is provided in appendix :ref:`apdx:adc_psivar`; and many more sample input files can be found in the adc and adcc; subfolders of :source:`samples`.; Note, that not all keywords are supported by all backends. .. _`sec:interfaceadcc`:. Interface to adcc; -----------------; .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. For most implemented ADC methods |PSIfour| relies; on an interface to the `adcc <https://adc-connect.org>`_ python package.; The approach of adcc is to directly diagonalise the; ADC matrix :math:`\mathbf{A}` in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-vector product are precomputed and stored; in memory. This approach is general in the sense; that it can be applied to a large range of ADC methods and variants.; So far levels up to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; |globals__freeze_core| and |globals__num_frozen_uocc|; are supported with all ADC methods using the adcc backend. Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computa",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:10343,Integrability,interface,interface,10343,"ls| to ``1``. This will select the; oxygen 1s orbital for the core space as it is energetically the lowest.; For C 1s core excitations the |adc__num_core_orbitals| value needs; to be set to ``5``, such that both the O 1s and all four C 1s orbitals; are part of the core space. **Other keywords and examples.**; Apart from the mentioned keywords, the following are common:. .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__cutoff_amps_print.rst. The full list is provided in appendix :ref:`apdx:adc_psivar`; and many more sample input files can be found in the adc and adcc; subfolders of :source:`samples`.; Note, that not all keywords are supported by all backends. .. _`sec:interfaceadcc`:. Interface to adcc; -----------------; .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. For most implemented ADC methods |PSIfour| relies; on an interface to the `adcc <https://adc-connect.org>`_ python package.; The approach of adcc is to directly diagonalise the; ADC matrix :math:`\mathbf{A}` in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-vector product are precomputed and stored; in memory. This approach is general in the sense; that it can be applied to a large range of ADC methods and variants.; So far levels up to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; |globals__freeze_core| and |globals__num_frozen_uocc|; are supported with all ADC methods using the adcc backend. Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful executio",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:11857,Integrability,interface,interface,11857," as; |globals__freeze_core| and |globals__num_frozen_uocc|; are supported with all ADC methods using the adcc backend. Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed. More detailed documentation about adcc and its features can be found; at `<https://adc-connect.org>`_,; especially the `theory section <https://adc-connect.org/latest/theory.html>`_.; If you are using adcc from |PSIfour| for your calculations,; please cite both |PSIfour| as well as adcc [Herbst2020]_; in your published work. **The ADC wavefunction object.**; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned :py:class:`~psi4.core.Wavefunction`; in case they are computed.; In the following the ``<method>`` prefix refers to the ADC method (such as ``adc(1)``,; ``adc(3)``, ``cvs-adc(2)-x``). * Ground state energy terms like ``MP2 correlation energy``, ``MP3 correlation energy``,; ``MP2 total energy``, ``MP3 total energy``, ``current correlation energy`` and ``current energy``.; * ``MP2 dipole X`` and the other components: Ground state dipole moments at MP(2) level.; * ``number of iterations``: The number of iterations the iterative solver required to converge.; * ``number of excited states``: The number of excited states, which were computed.; * More variables are summarized in :ref:`apdx:psivariables_alpha`. The following attribute is set on returned wavefunctions:. * ``adcc_state``: The `adcc.ExcitedStates <https://adc-connect.org/q/excitedstates>`_; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the for",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:11890,Modifiability,variab,variables,11890," as; |globals__freeze_core| and |globals__num_frozen_uocc|; are supported with all ADC methods using the adcc backend. Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed. More detailed documentation about adcc and its features can be found; at `<https://adc-connect.org>`_,; especially the `theory section <https://adc-connect.org/latest/theory.html>`_.; If you are using adcc from |PSIfour| for your calculations,; please cite both |PSIfour| as well as adcc [Herbst2020]_; in your published work. **The ADC wavefunction object.**; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned :py:class:`~psi4.core.Wavefunction`; in case they are computed.; In the following the ``<method>`` prefix refers to the ADC method (such as ``adc(1)``,; ``adc(3)``, ``cvs-adc(2)-x``). * Ground state energy terms like ``MP2 correlation energy``, ``MP3 correlation energy``,; ``MP2 total energy``, ``MP3 total energy``, ``current correlation energy`` and ``current energy``.; * ``MP2 dipole X`` and the other components: Ground state dipole moments at MP(2) level.; * ``number of iterations``: The number of iterations the iterative solver required to converge.; * ``number of excited states``: The number of excited states, which were computed.; * More variables are summarized in :ref:`apdx:psivariables_alpha`. The following attribute is set on returned wavefunctions:. * ``adcc_state``: The `adcc.ExcitedStates <https://adc-connect.org/q/excitedstates>`_; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the for",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:12568,Modifiability,variab,variables,12568,"adc-connect.org/latest/theory.html>`_.; If you are using adcc from |PSIfour| for your calculations,; please cite both |PSIfour| as well as adcc [Herbst2020]_; in your published work. **The ADC wavefunction object.**; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned :py:class:`~psi4.core.Wavefunction`; in case they are computed.; In the following the ``<method>`` prefix refers to the ADC method (such as ``adc(1)``,; ``adc(3)``, ``cvs-adc(2)-x``). * Ground state energy terms like ``MP2 correlation energy``, ``MP3 correlation energy``,; ``MP2 total energy``, ``MP3 total energy``, ``current correlation energy`` and ``current energy``.; * ``MP2 dipole X`` and the other components: Ground state dipole moments at MP(2) level.; * ``number of iterations``: The number of iterations the iterative solver required to converge.; * ``number of excited states``: The number of excited states, which were computed.; * More variables are summarized in :ref:`apdx:psivariables_alpha`. The following attribute is set on returned wavefunctions:. * ``adcc_state``: The `adcc.ExcitedStates <https://adc-connect.org/q/excitedstates>`_; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example ``adcc_state.plot_spectrum()`` plots a broadened excited states spectrum; in matplotlib. See the `adcc calculations documentation <https://adc-connect.org/latest/calculations.html>`_; for details. **Tips for convergence issues.**; If you encounter convergence issues inside adcc, the following parameters; are worth tweaking:. * |adc__max_num_vecs|: Specifies the maximal number of subspace vectors; in the Jacobi-Davidson scheme before a restart occurs. The defaults are usually; good, but do not be shy to increase this value if you encounter convergence problems.; * |adc__num_guesses|: By default adcc uses twice as",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:8357,Performance,perform,performed,8357,"roots_per_irrep|,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only supported at C1 symmetry at the moment, such that; this option should in most cases be set to an array with a single; element only. For example one can run an ADC(2) calculation for 10; (singlet) excited states using::. set roots_per_irrep [10]; properties('adc(2)', properties=[""oscillator_strength""]). where the ``molecule`` section was dropped for brevity. **Selecting the excitation manifold.**; To select between the possible excitation manifolds,; use the |adc__kind| keyword. For restricted references; by default only singlet excited states are computed,; corresponding to the keyword value ``'singlet'``.; To compute triplet states, select ``'triplet'``.; To compute both without making a spin distinction, select ``'any'``.; The latter is default for unrestricted references. The special |adc__kind| value ``'spin_flip'`` selects; a spin-flip computation where a simultaneous flip of spin; and excitation is performed. This is only available; for unrestricted references and not for ``CVS-ADC(n)`` methods,; see table :ref:`table:adcsummary`. **Using the core-valence separation.**; For tackling core-valence excitations using the ``CVS-ADC(n)``; methods, the keyword argument |adc__num_core_orbitals|; is additionally required. It is used to specify the number of; (spatial) orbitals to put into the core space and thus select; as target orbitals for a core-valence excitation process.; A value of ``2`` indicates, for example,; that the two lowest-energy :math:`\alpha` and the two; lowest-energy :math:`\beta` orbitals are placed in the core space.; Since the implemented ADC procedures tackle the; lowest-energy excitations, the value should be specified; such that the targeted core orbital is just inside the core space. *Example:* Consider furane, :math:`C_4H_4O`. In order to tackle; the oxygen 1s edge, *i.e* simulate a O 1s XAS spectrum,",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:11022,Performance,perform,performing,11022,".; Note, that not all keywords are supported by all backends. .. _`sec:interfaceadcc`:. Interface to adcc; -----------------; .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. For most implemented ADC methods |PSIfour| relies; on an interface to the `adcc <https://adc-connect.org>`_ python package.; The approach of adcc is to directly diagonalise the; ADC matrix :math:`\mathbf{A}` in an iterative diagonalisation; procedure, usually a Jacobi-preconditioned Davidson. Expensive parts; of the ADC matrix-vector product are precomputed and stored; in memory. This approach is general in the sense; that it can be applied to a large range of ADC methods and variants.; So far levels up to ADC(3) and CVS-ADC(3) are available; and additional approximations such as; |globals__freeze_core| and |globals__num_frozen_uocc|; are supported with all ADC methods using the adcc backend. Currently adcc is only capable of performing in-core calculations,; for which, however, permutational symmetry and spin symmetry is taken; into account for both tensor computations and tensor storage.; Inside adcc some heuristic checks for overly excessive memory requirements; are implemented, resulting in a warning in case a; successful execution is unlikely. There are no guarantees for the memory; to be sufficient in case such a warning is not displayed. More detailed documentation about adcc and its features can be found; at `<https://adc-connect.org>`_,; especially the `theory section <https://adc-connect.org/latest/theory.html>`_.; If you are using adcc from |PSIfour| for your calculations,; please cite both |PSIfour| as well as adcc [Herbst2020]_; in your published work. **The ADC wavefunction object.**; After running the ADC calculation in adcc, the interface code sets; a number of variables in the returned :py:class:`~psi4.core.Wavefunction`; in case they are computed.; In the following the ``<method>`` prefix refers to the ADC method (such as ``adc(1)``,; ``adc(3)``, ``cvs-a",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:12905,Security,access,access,12905,"unning the ADC calculation in adcc, the interface code sets; a number of variables in the returned :py:class:`~psi4.core.Wavefunction`; in case they are computed.; In the following the ``<method>`` prefix refers to the ADC method (such as ``adc(1)``,; ``adc(3)``, ``cvs-adc(2)-x``). * Ground state energy terms like ``MP2 correlation energy``, ``MP3 correlation energy``,; ``MP2 total energy``, ``MP3 total energy``, ``current correlation energy`` and ``current energy``.; * ``MP2 dipole X`` and the other components: Ground state dipole moments at MP(2) level.; * ``number of iterations``: The number of iterations the iterative solver required to converge.; * ``number of excited states``: The number of excited states, which were computed.; * More variables are summarized in :ref:`apdx:psivariables_alpha`. The following attribute is set on returned wavefunctions:. * ``adcc_state``: The `adcc.ExcitedStates <https://adc-connect.org/q/excitedstates>`_; object used by adcc to store the ADC(n) excitation energies and all precomputed data; in the format used by adcc.; Provides direct access to analysis and plotting capabilities from adcc.; For example ``adcc_state.plot_spectrum()`` plots a broadened excited states spectrum; in matplotlib. See the `adcc calculations documentation <https://adc-connect.org/latest/calculations.html>`_; for details. **Tips for convergence issues.**; If you encounter convergence issues inside adcc, the following parameters; are worth tweaking:. * |adc__max_num_vecs|: Specifies the maximal number of subspace vectors; in the Jacobi-Davidson scheme before a restart occurs. The defaults are usually; good, but do not be shy to increase this value if you encounter convergence problems.; * |adc__num_guesses|: By default adcc uses twice as many guess vectors as; states to be computed. Sometimes increasing this value by a few vectors can be helpful.; If you encounter a convergence to zero eigenvalues, than decreasing this parameter might; solve the problems.; ",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst:6428,Usability,simpl,simply,6428,"-----------+-------+------------------------------------+; | ADC(3) | RHF, UHF | yes | yes | any, singlet, triplet, spin_flip |; +---------------+------------+---------------+--------------------------------------------+; | CVS-ADC(1) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(2)-x | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+; | CVS-ADC(3) | RHF, UHF | yes | yes | any, singlet, triplet |; +---------------+------------+---------------+-------+------------------------------------+. The leftmost column of table :ref:`table:adcsummary` provides the supported ADC methods.; If only excitation energies are desired, one can simply pass one; of the listed method strings to the function :py:func:`~psi4.driver.energy`.; For example, ``energy('adc(2)-x')`` will compute; excitation energies at ADC(2)-x level.; Properties such as oscillator strengths, transition or state dipole moments; are available by calling the function :py:func:`~psi4.driver.properties`; with appropriate arguments.; Most commonly users will want to compute at least oscillator strengths; along with the excitation energies,; resulting in a call like ``properties('adc(2)', properties=[""oscillator_strength""])``. Running ADC calculations; ------------------------; .. sectionauthor:: Michael F. Herbst. Running an ADC calculation with |PSIfour| requires; the call to :py:func:`~psi4.driver.properties` as discussed above; as well as one or more mandatory keyword arguments. The most important keyword argument is |adc__roots_per_irrep|,; which is an array with the number of excited states desired; for each irreducible representation. Most ADC methods; are only sup",MatchSource.DOCS,doc/sphinxman/source/adc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2323,Availability,avail,available,2323,"r>`. .. image:: https://img.shields.io/badge/home-adcc-informational.svg; :target: https://code.adc-connect.org. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://adc-connect.org/latest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for ",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:1712,Deployability,configurat,configuration,1712,"r General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: adcc, ADC. .. _`sec:adcc`:. Interface to adcc by M. F. Herbst and M. Scheurer; =================================================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:adc>`, :ref:`PSI Variables <apdx:adc_psivar>`. .. image:: https://img.shields.io/badge/home-adcc-informational.svg; :target: https://code.adc-connect.org. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://adc-connect.org/latest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makev",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2026,Deployability,install,installation,2026," .. include:: autodoc_abbr_options_c.rst. .. index:: adcc, ADC. .. _`sec:adcc`:. Interface to adcc by M. F. Herbst and M. Scheurer; =================================================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:adc>`, :ref:`PSI Variables <apdx:adc_psivar>`. .. image:: https://img.shields.io/badge/home-adcc-informational.svg; :target: https://code.adc-connect.org. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://adc-connect.org/latest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2085,Deployability,install,installation,2085,"_`sec:adcc`:. Interface to adcc by M. F. Herbst and M. Scheurer; =================================================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:adc>`, :ref:`PSI Variables <apdx:adc_psivar>`. .. image:: https://img.shields.io/badge/home-adcc-informational.svg; :target: https://code.adc-connect.org. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://adc-connect.org/latest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connec",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2444,Deployability,install,installed,2444,"get: https://code.adc-connect.org. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://adc-connect.org/latest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_prin",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2560,Deployability,install,installed,2560,"atest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2652,Deployability,install,install,2652,"dule developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. i",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2975,Deployability,install,installation,2975,"nformation and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__roots_per_irrep.rst. .. _`cmake:adcc`:. How to configure adcc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies*",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:3216,Deployability,install,installed,3216,"mg.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__roots_per_irrep.rst. .. _`cmake:adcc`:. How to configure adcc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use |PSIfour| as the backend for; self-consistent field calculations and required integrals. * Downstream Dependencies |w---w| |PSIfo",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:3324,Deployability,install,install,3324,"mg.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__roots_per_irrep.rst. .. _`cmake:adcc`:. How to configure adcc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use |PSIfour| as the backend for; self-consistent field calculations and required integrals. * Downstream Dependencies |w---w| |PSIfo",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:4446,Deployability,install,installs,4446,"can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__roots_per_irrep.rst. .. _`cmake:adcc`:. How to configure adcc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use |PSIfour| as the backend for; self-consistent field calculations and required integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) adcc. * Upstream Dependencies |w---w| adcc (\ |dr| optional) |PSIfour|. **CMake Variables**. * :makevar:`ENABLE_adcc` |w---w| CMake variable toggling whether Psi4 automatically installs adcc. **Examples**. A. Build and install adcc if needed. .. code-block:: bash. >>> cmake -DENABLE_adcc=ON. B. Build *without* adcc. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:4488,Deployability,install,install,4488,"can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__roots_per_irrep.rst. .. _`cmake:adcc`:. How to configure adcc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use |PSIfour| as the backend for; self-consistent field calculations and required integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) adcc. * Upstream Dependencies |w---w| adcc (\ |dr| optional) |PSIfour|. **CMake Variables**. * :makevar:`ENABLE_adcc` |w---w| CMake variable toggling whether Psi4 automatically installs adcc. **Examples**. A. Build and install adcc if needed. .. code-block:: bash. >>> cmake -DENABLE_adcc=ON. B. Build *without* adcc. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:1613,Integrability,interface,interface,1613,"arranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: adcc, ADC. .. _`sec:adcc`:. Interface to adcc by M. F. Herbst and M. Scheurer; =================================================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:adc>`, :ref:`PSI Variables <apdx:adc_psivar>`. .. image:: https://img.shields.io/badge/home-adcc-informational.svg; :target: https://code.adc-connect.org. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://adc-connect.org/latest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can b",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2790,Integrability,depend,dependent,2790," the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_op",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:1712,Modifiability,config,configuration,1712,"r General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: adcc, ADC. .. _`sec:adcc`:. Interface to adcc by M. F. Herbst and M. Scheurer; =================================================. .. codeauthor:: Michael F. Herbst; .. sectionauthor:: Michael F. Herbst. *Module:* :ref:`Keywords <apdx:adc>`, :ref:`PSI Variables <apdx:adc_psivar>`. .. image:: https://img.shields.io/badge/home-adcc-informational.svg; :target: https://code.adc-connect.org. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://adc-connect.org/latest. |PSIfour| contains code to interface to the adcc python module developed; by M. F. Herbst *et. al.*. No additional licence or configuration; is required to use adcc. The module serves as the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makev",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:3883,Modifiability,config,configure,3883,"can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__roots_per_irrep.rst. .. _`cmake:adcc`:. How to configure adcc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use |PSIfour| as the backend for; self-consistent field calculations and required integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) adcc. * Upstream Dependencies |w---w| adcc (\ |dr| optional) |PSIfour|. **CMake Variables**. * :makevar:`ENABLE_adcc` |w---w| CMake variable toggling whether Psi4 automatically installs adcc. **Examples**. A. Build and install adcc if needed. .. code-block:: bash. >>> cmake -DENABLE_adcc=ON. B. Build *without* adcc. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:4401,Modifiability,variab,variable,4401,"can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_options_c/adc__reference.rst; .. include:: autodir_options_c/adc__roots_per_irrep.rst. .. _`cmake:adcc`:. How to configure adcc for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, adcc provides additional quantum-chemical methods; (a wide range of ADC methods). In turn adcc can use |PSIfour| as the backend for; self-consistent field calculations and required integrals. * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) adcc. * Upstream Dependencies |w---w| adcc (\ |dr| optional) |PSIfour|. **CMake Variables**. * :makevar:`ENABLE_adcc` |w---w| CMake variable toggling whether Psi4 automatically installs adcc. **Examples**. A. Build and install adcc if needed. .. code-block:: bash. >>> cmake -DENABLE_adcc=ON. B. Build *without* adcc. .. code-block:: bash. >>> cmake. ",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst:2765,Safety,detect,detect,2765," the backend for; most algebraic-diagrammatic construction methods for correlated; excited states in |PSIfour|. For more details on ADC methods,; see :ref:`sec:adc`. Installation; ~~~~~~~~~~~~. For up to date information and more details,; see the `adcc installation documentation <https://adc-connect.org/latest/installation.html>`_. **Binary**. * .. image:: https://anaconda.org/adcc/adcc/badges/version.svg; :target: https://anaconda.org/adcc/adcc. * .. image:: https://img.shields.io/pypi/v/adcc; :target: https://pypi.org/project/adcc. * adcc is available as a conda package for Linux and macOS; and on pypi. .. * If using the |PSIfour| binary, adcc has already been installed alongside.; ..; .. * If using |PSIfour| built from source, and anaconda or miniconda has; .. already been installed (instructions at :ref:`sec:quickconda`),; .. adcc can be obtained through ``conda install adcc -c adcc``.; .. Then enable it as a feature with :makevar:`ENABLE_adcc`; .. and rebuild |PSIfour| to detect adcc and activate dependent code.; ..; .. * Previous bullet had details. To build |PSIfour| from source and use; .. adcc from conda without thinking, consult :ref:`sec:condapsi4dev`. * To remove a conda installation, ``conda remove adcc``. **Source**. * .. image:: https://img.shields.io/github/tag-date/adc-connect/adcc.svg?maxAge=2592000; :target: https://github.com/adc-connect/adcc. * If using |PSIfour| built from source and you want adcc installed as well,; enable it as a feature with :makevar:`ENABLE_adcc`,; and let the build system fetch and install it. Keywords for adcc; ~~~~~~~~~~~~~~~~~. .. include:: autodir_options_c/adc__cutoff_amps_print.rst; .. include:: autodir_options_c/adc__kind.rst; .. include:: autodir_options_c/adc__max_num_vecs.rst; .. include:: autodir_options_c/adc__maxiter.rst; .. include:: autodir_options_c/adc__num_core_orbitals.rst; .. include:: autodir_options_c/adc__num_guesses.rst; .. include:: autodir_options_c/adc__r_convergence.rst; .. include:: autodir_op",MatchSource.DOCS,doc/sphinxman/source/adcc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/adcc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2161,Availability,mainten,maintenance,2161," A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :sourc",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2786,Availability,error,error,2786,"With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventu",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4967,Availability,error,error,4967," based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4987,Availability,failure,failure,4987," based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5001,Availability,down,down,5001," simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; ====================",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5218,Availability,robust,robust,5218," focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:9500,Availability,error,error,9500,"lecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""gr",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:16010,Availability,failure,failure,16010,"ts/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. aut",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1571,Deployability,install,installed,1571,"it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speakin",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3527,Deployability,install,installation,3527,"ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from lit",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3881,Deployability,install,installation,3881," to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4225,Deployability,integrat,integration,4225,"o fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS li",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15445,Deployability,install,installed,15445,"t opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5305,Energy Efficiency,energy,energy,5305,"e test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMak",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5801,Energy Efficiency,energy,energy,5801," the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_s",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8344,Energy Efficiency,energy,energy,8344,"ring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing st",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8687,Energy Efficiency,energy,energy,8687,"against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8781,Energy Efficiency,energy,energy,8781,"by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your tes",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8849,Energy Efficiency,energy,energy,8849,"by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your tes",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8911,Energy Efficiency,energy,energy,8911,"by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your tes",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8935,Energy Efficiency,energy,energy,8935,"by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your tes",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4225,Integrability,integrat,integration,4225,"o fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS li",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:9506,Integrability,message,message,9506,"lecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""gr",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2112,Modifiability,refactor,refactoring,2112," A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :sourc",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2915,Modifiability,variab,variables,2915,"With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventu",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8891,Modifiability,variab,variable,8891,"by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your tes",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:9226,Modifiability,variab,variables,9226,"``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14073,Modifiability,parameteriz,parameterized,14073,"s additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFI",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14563,Modifiability,parameteriz,parameterized,14563,"erent ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point i",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7959,Performance,load,load-balancing,7959,"added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modification",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1987,Safety,detect,detect,1987,"# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.;",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:9637,Security,validat,validation,9637,"""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with undersc",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1121,Testability,test,test,1121,"; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying librari",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1220,Testability,test,tests,1220,"; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================.",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1338,Testability,test,test,1338,"erms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1550,Testability,test,test,1550,"it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speakin",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1682,Testability,test,tests,1682,"al Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to che",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:1810,Testability,test,tests,1810,"# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`faq:add_tests`:. ==========; Test Suite; ==========. A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.;",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2080,Testability,test,test,2080," A test suite plays a vital role in open-source software use and development. * For a |PSIfour| user, tests provide models of inputs that should work; ""as-is"" and a searchable collection of syntax and capabilities.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :sourc",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2280,Testability,test,test,2280,"ies.; The test suite also allows high-quality development snapshots of the; codebase to be built automatically for users. * For a user who has |PSIfour| as part of a complex computational molecular software environment, a test suite alongside installed |PSIfour| can be used to show that the |PSIfour| piece is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 20",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2604,Testability,test,test,2604," is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test director",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2646,Testability,test,tests,2646," is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test director",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2671,Testability,test,tests,2671," is working. * For a feature developer, adding tests provides confidence that you; can leave your code untouched and still advertise that the feature works; years later. With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test director",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2715,Testability,test,test,2715,"With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventu",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:2781,Testability,test,test,2781,"With tests, proposed changes to |PSIfour| that break your; code fall upon the change proposer to fix, rather than being merged; silently and lying in wait for a concientious user to detect and report; and then likely falling upon *you* to fix. * For a general developer, the test suite allows confidence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventu",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3092,Testability,test,test,3092,"ence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both wil",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3121,Testability,test,tests,3121,"ence in refactoring, switching out underlying libraries, maintenance, and upgrading. CTest and pytest, PSIthon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both wil",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3195,Testability,test,test,3195,"Ithon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3267,Testability,test,test,3267,"Ithon and PsiAPI; ====================================. In designing a test, sometimes you want it to be a model input for the user in a single file or you don't want a lot of ``psi4.`` or Python syntax cluttering the input.; In this case, follow :ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3370,Testability,test,test,3370,"ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from lit",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3467,Testability,test,tests,3467,"ref:`faq:add_psithon_tests` to prepare as PSIthon (``psi4 input.dat``) for, roughly speaking, running through :program:`ctest`.; The PSIthon/CTest test suite occupies the whole of :source:`tests` *except* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from lit",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3622,Testability,test,test,3622,"ept* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the an",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3682,Testability,test,tests,3682,"ept* :source:`tests/pytests`. At other times you want the test to check several variations of a template job or you want to test error handling or you want to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the an",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3775,Testability,test,tests,3775," to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3828,Testability,test,tested,3828," to focus on PsiAPI rather than PSIthon or you want to control the compute conditions with environment variables.; In this case, follow :ref:`faq:add_psiapi_tests` to prepare as PsiAPI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:3922,Testability,test,test,3922,"PI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4211,Testability,test,tests,4211,"o fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS li",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4237,Testability,test,tests,4237,"o fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS li",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4349,Testability,test,tests,4349," two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteri",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4393,Testability,test,test,4393," two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteri",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4412,Testability,test,tests,4412,"since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence setting",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4633,Testability,test,test,4633,"since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence setting",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4831,Testability,assert,asserted,4831,"ngle command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4848,Testability,assert,assert,4848,"ngle command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4920,Testability,test,testing,4920," based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5051,Testability,test,test,5051,"tinue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a sub",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5208,Testability,test,test,5208," focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5580,Testability,test,test,5580," run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the fo",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5742,Testability,test,test,5742," the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_s",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:5835,Testability,test,tests,5835,"trices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure. Deep down, they're NumPy functions. * In preparing the test case reference values, aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6036,Testability,test,test,6036,"aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this i",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6079,Testability,test,tests,6079,"aim for the converged value rather than many digits from your computer under default convergence conditions.; This will make the test more robust for different OS, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this i",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6243,Testability,test,tests,6243,"S, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6261,Testability,test,tests,6261,"S, different BLAS libraries, and variations in SCF cycles.; Turn energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6303,Testability,test,tests,6303,"n energy, density, amplitude, and geometry convergence criteria to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thor",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6340,Testability,test,test,6340," to very tight levels, and use these results for reference energies, reference geometries, reference cube files, *etc.*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test req",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6482,Testability,test,test,6482,".*.; Then, either remove or relax the convergence settings, if these are not a vital part of the test.; In choosing the number of digits for :py:func:`~psi4.compare_values` and other compare_* functions, select a number looser than the convergence set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking sh",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6760,Testability,test,test-labels,6760,"nce set in the test; or the default convergence for the calculation type (energy, gradient, *etc.*). * Keep tests as short as possible without sacrificing coverage and variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6881,Testability,test,tests,6881,"d variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../test",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:6899,Testability,test,test,6899,"d variety. Under 30 seconds is a good aim. .. _`faq:add_psithon_tests`:. Adding PSIthon Test Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../test",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7009,Testability,test,test-specific,7009,"est Cases; =========================. To create a new test case, first make a folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parall",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7035,Testability,test,tested,7035,"folder in :source:`tests` or, for an addon, a subfolder under the addon folder.; Use hyphens, not spaces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as sh",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7111,Testability,test,test,7111,"aces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; --------",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7169,Testability,test,tests,7169,"aces or underscores, in the directory name.; Add the directory name to the list of tests in :source:`tests/CMakeLists.txt` or, for an addon, ``tests/<addon>/CMakeLists.txt``.; The test directory will need at least two files, ``CMakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; --------",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7358,Testability,test,test,7358,"MakeLists.txt`` and ``input.dat``. ``CMakeLists.txt``; ------------------. This file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7430,Testability,test,test,7430,"file adds the test case to the suite. It should have at least the following two uncommented lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy =",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7518,Testability,test,test,7518,"nted lines::. include(TestingMacros). # if extra files needed; # file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetr",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7601,Testability,test,test,7601,"# file(COPY grid.dat DESTINATION ${CMAKE_CURRENT_BINARY_DIR}). add_regression_test(directory_name ""psi;semicolon_separated-list-of-applicable-test-labels""). # if minutes long; # set_tests_properties(isapt1 PROPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7771,Testability,test,tests,7771,"OPERTIES COST 300). The labels specify which groups of tests include the test case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thi",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7889,Testability,test,tests,7889,"t case for ``ctest -L label`` purposes. The ``psi`` label should always be added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('s",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:7928,Testability,test,test,7928,"added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modification",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8008,Testability,test,test,8008,"added, but the other labels are test-specific. The method tested should always be included, and this is often sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modification",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8125,Testability,test,test,8125,"en sufficient. If adding a test for an already existing module, the labels for other tests of the module will suggest other labels to add.; Labels have been added as developers needed, so they are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be des",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8294,Testability,test,test,8294," are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values functi",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:9341,Testability,test,testing,9341," with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the dir",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:9535,Testability,test,test,9535,"lecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""gr",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:9764,Testability,test,tests,9764,"""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with undersc",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:9838,Testability,test,test,9838,"are_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no fur",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10008,Testability,test,testing,10008,"arting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10190,Testability,test,tests,10190,"e values are often assigned to variables for later use.; The compare_values function (along with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10254,Testability,test,test,10254,"long with several relatives in :source:`psi4/driver/p4util/testing.py` for comparing strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLi",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10370,Testability,test,tests,10370,"g strings, matrices, etc.) checks that the computed values match these reference values to suitable precision. This function prints an error message and signals that the test failed to the make system, if the values don't match. Any lines of the input associated with the validation process should be flagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10672,Testability,test,test,10672,"lagged with ``#TEST`` at the end of each line, so that they can be removed when copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTes",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10764,Testability,test,test,10764,"en copying from the tests to the samples directory. ``output.ref``; --------------. When your test case is in final form, run it locally, rename the output to ``output.ref``, and check it into the repository alongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10919,Testability,test,tests,10919,"ongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new ma",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:11113,Testability,test,test,11113,"-----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:11840,Testability,test,test,11840," with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` dir",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:11893,Testability,test,test,11893," with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` dir",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12056,Testability,test,tests,12056,"eeded from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, regi",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12154,Testability,test,tests,12154,"second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test con",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12161,Testability,test,test-name,12161,"second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test con",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12217,Testability,test,tests,12217,"les *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Pytho",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12224,Testability,test,test-name,12224,"les *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Pytho",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12263,Testability,test,tests,12263,"he label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't wor",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12334,Testability,test,tests,12334,"he label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't wor",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12341,Testability,test,test-name,12341,"he label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't wor",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12432,Testability,log,log,12432,"ying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between ev",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12537,Testability,test,test,12537,"i`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12615,Testability,test,tests,12615,"i`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12662,Testability,test,tests,12662,"d of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12779,Testability,test,test,12779,"rates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.ma",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12806,Testability,test,tests,12806,"rates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new marks should be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.ma",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:12967,Testability,test,test,12967,"hould be added to :source:`pytest.ini`. Running for Debugging; ---------------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast wit",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13034,Testability,test,test,13034,"-----------------. * PSIthon tests that don't need extra files to run are easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13066,Testability,test,test,13066,"re easily run from ``<objdir>`` via ``stage/bin/psi4 ../tests/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so tha",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13158,Testability,test,test,13158,"ts/<test-name>/input.dat, with the output appearing in ``../tests/<test-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13183,Testability,test,testing,13183,"-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13231,Testability,assert,assert,13231,"-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13241,Testability,assert,assert,13241,"-name>/input.out``.; * All PSIthon tests are runable through CTest, and output files appear in ``<objdir>/tests/<test-name>/output.dat`` and stdout results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13375,Testability,test,tests,13375,"t results appear in ``<objdir>/Testing/Temporary/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * T",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13440,Testability,test,test,13440,"y/LastTest.log*``. .. _`faq:add_psiapi_tests`:. Adding PsiAPI Test Cases; ========================. To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13502,Testability,test,test,13502,". To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator fo",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13525,Testability,test,tests,13525,". To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator fo",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13579,Testability,test,test,13579,". To create a new test case, either create a new file or add to an existing file under :source:`tests/pytests`. * Test must be in the :source:`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator fo",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13597,Testability,test,tests,13597,":`tests/pytests/` directory.; * Test file name must start with ``test_``. This is how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests t",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13743,Testability,test,test,13743," how pytest knows to collect it.; * A test file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13773,Testability,test,test,13773," file may contain many tests, each of which is an ordinary Python function with name starting ``test_``. This is how pytest knows to collect it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those ove",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13877,Testability,test,test,13877," it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13920,Testability,test,test,13920," it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:13971,Testability,test,tests,13971," it.; * No registration required to bring a test to pytest's attention.; * No registration required to bring a test to CMake's attention. If a test needs additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14054,Testability,test,tests,14054,"s additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFI",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14087,Testability,test,tests,14087,"s additional files, register them in :source:`psi4/CMakeLists.txt`. A few notes on test contents:. * Import testing functions from ``utils`` and use Python assert: ``assert compare_values(expected, computed, ...)``.; * Don't worry about cleaning up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFI",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14290,Testability,log,logic,14290,"g up files or resetting options. A function in :source:`tests/pytests/conftest.py` does this automatically between every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``py",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14431,Testability,test,tests,14431,"n every test.; * Especially if using data or functions from outside a test, run a variety of tests at different ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pyte",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14530,Testability,test,test,14530,"erent ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point i",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14577,Testability,test,test,14577,"erent ``pytest -n <N>`` levels to mix up test ordering. If tests fail that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point i",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14604,Testability,test,test,14604,"il that pass when run alone, you've got a function of the same name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14653,Testability,test,tests,14653,"e name changing state or some similar correctable phenomenon. A few notes on test labels:. * For every new test file, add ``pytestmark = [pytest.mark.psi, pytest.mark.api]`` at the top.; This ensures that every test has the ``psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14930,Testability,test,test,14930,"psi`` mark and every PsiAPI test has the ``api`` mark to contrast with PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:14957,Testability,test,tests,14957,"PSIthon tests with ``cli`` mark. * There are individual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easi",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15032,Testability,test,tests,15032,"idual ""marks"" that can be added to whole tests or parts; of parameterized tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger fail",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15107,Testability,test,tests,15107,"ed tests so that they can be run by category (``pytest -m <mark>``; vs. ``ctest -L <mark>``) rather than just by name (``pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15158,Testability,test,test,15158,"pytest -k <name_fragment>``; vs. ``ctest -R <name_fragment>``). Far more complicated logic is allowed than for; CTest: ``pytest -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15328,Testability,test,tests,15328,"t -m ""dftd3 and not api and not long""``. * The most important marks are ""quick"" and ""long"" that opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15465,Testability,test,test,15465,"t opt tests into the quick CI suite or out of; the normal full suite. Mark with a decorator for the full test or the; marks argument in a parameterized test. Search ""mark"" in the test suite; for examples. Use ""quick"" freely for tests that cover functionality and; are under 15s. Use ""long"" sparingly to winnow out the longest examples,; particularly those over a minute. Running for Debugging; ---------------------. There are many ways to run pytest, :ref:`faq:pytest`, and three different copies of the test file; (i.e., :source:`tests/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15953,Testability,test,test,15953,"ts/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. aut",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:15976,Testability,assert,assert,15976,"ts/pytests/test_mp2.py`, ``<objdir>/stage/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``,; ``CMAKE_INSTALL_PREFIX/lib/PYMOD_INSTALL_LIBDIR/psi4/tests/test_mp2.py``).; But for developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. aut",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:16156,Testability,test,tests,16156,"r developing a pytest test, you probably want to use the first so you can edit it in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function::",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:16202,Testability,test,test,16202," in place rather than running ``cmake --build`` after each change. * Easiest is from <objdir>, run ``pytest ../tests``. Add any filters (``-k; test_name_fragment``) or parallelism (``-n <N>`` or ``-n auto`` if ``pytest-xdist``; installed) or print test names (``-v``) or print warnings (``-rws``).; * An important point is that because they're PsiAPI, ``import psi4`` is happening,; so the <objdir> |PSIfour| module must be in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function:: psi4.compare_vectors(expected, computed, atol_exponent, label [, *, check_name=F",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:16635,Testability,test,testing,16635,"e in :envvar:`PYTHONPATH`. Also, any call; to QCEngine is using ``which psi4``, so the <objdir> |PSIfour| executable must be in; :envvar:`PATH`. The easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function:: psi4.compare_vectors(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_vectors(expected, computed [, label, *, check_name=False, **kwargs]). .. function:: psi4.compare_wavefunctions(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_wavefunctions(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_molrecs(expected, comput",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:16784,Testability,test,testing,16784,"easiest way to prepare your local environment is to; execute the printout of ``<objdir>/stage/bin/psi4 --psiapi``.; * To see stdout output from an otherwise passing test, easiest to add ``assert 0``; at its end to trigger failure.; * If stdout printing is insufficient, and you really need to see ``output.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function:: psi4.compare_vectors(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_vectors(expected, computed [, label, *, check_name=False, **kwargs]). .. function:: psi4.compare_wavefunctions(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_wavefunctions(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_molrecs(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_molrecs; :noindex:. File Formats; ------------. .. autofu",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:17086,Testability,test,testing,17086,"put.dat`` or other files,; comment out their deletion in :source:`tests/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function:: psi4.compare_vectors(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_vectors(expected, computed [, label, *, check_name=False, **kwargs]). .. function:: psi4.compare_wavefunctions(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_wavefunctions(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_molrecs(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_molrecs; :noindex:. File Formats; ------------. .. autofunction:: psi4.compare_cubes(expected, computed[, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_fchkfiles. .. autofunction:: psi4.compare_fcidumps. .. autofunction:: psi4.compare_moldenfiles. .. autofunction:: qcdb.compare_vibinfos. Extra QCA Functions; -------------------. .. ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:17715,Testability,test,testing,17715,"/pytests/conftest.py` and run the single test, deleting; the file each time (since it appends). .. _`faq:comparison_functions`:. Comparison Functions; ====================. Plain Old Data; --------------. .. function:: psi4.compare_values(expected, computed, atol_exponent, label [, *, **kwargs]); :noindex:. .. autofunction:: psi4.compare_values(expected, computed [, label, *, **kwargs]). .. comment compare_arrays covered by compare_values. .. autofunction:: qcelemental.testing.compare_values; :noindex:. .. autofunction:: psi4.compare_integers(expected, computed [, label, *, **kwargs]). .. autofunction:: qcelemental.testing.compare; :noindex:. Objects; -------. .. function:: psi4.compare_matrices(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_matrices(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_recursive; :noindex:. .. function:: psi4.compare_vectors(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_vectors(expected, computed [, label, *, check_name=False, **kwargs]). .. function:: psi4.compare_wavefunctions(expected, computed, atol_exponent, label [, *, check_name=False, **kwargs]); :noindex:. .. autofunction:: psi4.compare_wavefunctions(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_molrecs(expected, computed [, label, *, check_name=False, **kwargs]). .. autofunction:: qcelemental.testing.compare_molrecs; :noindex:. File Formats; ------------. .. autofunction:: psi4.compare_cubes(expected, computed[, label, *, check_name=False, **kwargs]). .. autofunction:: psi4.compare_fchkfiles. .. autofunction:: psi4.compare_fcidumps. .. autofunction:: psi4.compare_moldenfiles. .. autofunction:: qcdb.compare_vibinfos. Extra QCA Functions; -------------------. .. autofunction:: psi4.compare. .. autofunction:: psi4.compare_recursive. ",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:4014,Usability,simpl,simple,4014,"PI (``import psi4``) for, roughly speaking, running through :program:`pytest`.; The PsiAPI/pytest test suite occupies :source:`tests/pytests`. The above description sounds as if there are two disjoint test suites, and you have to run both ``ctest`` and ``pytest`` to fully test |PSIfour|.; This has indeed been the case until March 2022.; The difficulty has been that (1) two test suites is unexpected so some developers don't know to run both; and (2) there are important tests in the PSIthon suite that can't be run on a |PSIfour| installation since CTest only works in a build directory.; Now, by adding an extra file to the test directory (:ref:`faq:psithon_through_pytest`), PSIthon tests can also be run through :program:`pytest`.; This hasn't rolled out to all ~500 PSIthon tests (help wanted), but eventually |PSIfour| can be tested with a single command from a build or from an installation.; Therefore, in designing a test, choose its mode based on whether PSIthon or PsiAPI suits it better and whether it's a simple model for users (probably PSIthon) or for expert users (probably PsiAPI).; Both will continue to work in future, and neither have limitations. Test Contents; =============. * Most |PSIfour| tests will be integration tests focusing on non-regression of user input to answers, and we insist on having these.; But if you find unit tests helpful, by all means add them to the test suite. * Most tests should store reference results (from literature or another implementation or a carefully run |PSIfour| calculation),; run quantum chemistry, then apply one or more of the :ref:`faq:comparison_functions` so that the test will fail if the answer is unexpected.; The functions are the same in CTest and pytest, but in the former they are, for example, ``compare_matrices(refmat, mat, ...)`` while in the latter it's asserted, like ``assert compare_matrices(refmat, mat, ...)``.; The main advantage of the testing functions is that they provide helpful error printing upon failure",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:8265,Usability,simpl,simple,8265," are not systematic or thorough. If you see labels to add or rename, please do. A test requiring over 15 minutes should be labeled ``longtests``. A short test under 30 seconds used for general bug checking should be labeled ``quicktests``. A test that confirms |PSIfour| is operational should be labeled ``smoketests``. If a test needs extra input files like ``grid.dat`` or extra reference files for checking against, like ``fchk``, specify these in the ``CMakeLists.txt`` as shown above. Such tests must be run through ``ctest`` and don't usually work when run ""by hand"" from the objdir via ``stage/bin/psi4 ../tests/directory_name/input.dat``. If a test is multiple minutes long, load-balancing a parallel CTest run requires the test to be started early. Use the ``COST`` line as shown above to set a weighting to about the number of seconds the test takes. ``input.dat``; -------------. The other necessary file is the input file itself, ``input.dat``. The input file should be just a simple input file to run the test, with small additions. ::. #! RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxiliary basis.; #! Also a bit more to force a second line. nucenergy = 8.801466202085710 #TEST; refenergy = -76.05098402733282 #TEST. molecule h2o {; symmetry c1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pVTZ; scf_type df; df_basis_scf cc-pVTZ-RI; e_convergence 10; }. thisenergy = energy(""hf""). compare_values(nucenergy, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST; compare_values(refenergy, thisenergy, 9, ""Reference energy"") #TEST; compare_values(refenergy, variable('scf total energy'), 9, ""Reference energy"") #TEST. Of those small modifications, first, note the special comment at the top (starting with the ``#!`` comment marker). This should be descriptive since it is inlined into the manual (unless ``!nosample`` in the comment) as a sample input. Reference values are often assigned to variables for later use.; The compare_values functi",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst:10939,Usability,simpl,simple,10939,"ongside ``input.dat``.; While this isn't used for any testing machinery, it can be handy for users or developers to consult. .. _`faq:psithon_through_pytest`:. ``test_input.py``; -----------------. Starting March 2022, one can also run tests designed as above for CTest through pytest.; To bring the test to pytest's notice, add a file to the directory named ``test_input.py``.; Below is an example for the :source:`tests/ci-property/test_input.py` ::. from addons import *. @ctest_labeler(""quick;ci;cas;properties;cart;noc1""); def test_ci_property():; ctest_runner(__file__, [""grid.dat""]). This file contains much the same information as the ``CMakeLists.txt``.; The ``def test_ci_property`` contains the name of the test, now with underscores rather than hyphens.; ``def test_`` identifies it to pytest as a test.; That part of the function name and the name of the file, ``test_input.py`` are required, but no further registration with CMake is necessary.; Most tests need only the simple form of the runner line ``ctest_runner(__file__)``.; This uses QCEngine machinery to execute ``python psi4 input.dat``.; If additional input files are needed from the test directory, their names can be added to the the second argument list as shown above.; Those additional input files *do* need to be registered in :source:`psi4/CMakeLists.txt`. Finally, the label string passed to CTest is here handed to pytest, with a few changes:. * ``psi`` added automatically, so exclude it when copying from CTest ``CMakeLists.txt``; * ``cli`` added automatically to distinguish CTest origin from deliberate pytest origin, which have ``api`` added; * ``smoke`` used instead of CTest ``smoketests``; * ``quick`` used instead of CTest ``quicktests``; * ``long`` used instead of CTest ``longtests``; * ``addon`` and ``<name-of-addon>`` added automatically when ``@uusing(""<name-of-addon>"")`` decorates the test or ``marks=using(""<name-of-addon>"")`` marks the test. CTest ""labels"" are called ""marks"" in pytest.; Any new ma",MatchSource.DOCS,doc/sphinxman/source/add_tests.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/add_tests.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/appendices.rst:1530,Testability,test,testsuite,1530,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:appendices`:. ==========; Appendices; ==========. Keywords; ========. .. toctree::; :maxdepth: 2. autodoc_glossary_options_c; autodoc_options_c_bymodule. Basis Sets; ==========. .. toctree::; :maxdepth: 2. basissets_tables; basissets_byelement; basissets_byfamily. .. _`sec:appendices:qcvars`:. QCVariables (aka PSI Variables); ===============================. .. toctree::; :maxdepth: 2. glossary_psivariables; autodoc_psivariables_bymodule. Miscellaneous; =============. .. toctree::; :maxdepth: 2. testsuite; dft_byfunctional; autodoc_psifiles; autodoc_physconst; bibliography. ",MatchSource.DOCS,doc/sphinxman/source/appendices.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/appendices.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:2113,Availability,avail,available,2113,"===. Basis sets in |PSIfour| are Gaussian functions (not Slater-type functions or plane waves),; all-electron [no effective core potentials (ECPs)],; and of Gaussian94 format (for ease of export from `EMSL <https://bse.pnl.gov/bse/portal>`_).; Both spherical harmonic (5D/7F) and Cartesian (6D/10F) Gaussian functions are supported,; but their mixtures are not, neither within a basis set (*e.g.*, 6D/7F) nor within a calculation; (*e.g.*, cartesian for the orbital basis and spherical for the fitting basis).; For built-in basis sets, the correct ``spherical``/``cartesian`` value for |globals__puream|; is set internally from the orbital basis. * :ref:`sec:basisBuiltIn`; * :ref:`Specifying basis sets <sec:jobControl>`; * :ref:`Built-in basis sets by family <apdx:basisTables>`; * :ref:`Built-in basis sets by element <apdx:basisElement>`; * :ref:`User-Defined basis sets <sec:basisUserDefined>`; * :ref:`Auxiliary bases for built-in orbital basis sets <apdx:basisFamily>`. .. index:: basis set; available by family; .. _`sec:basisBuiltIn`:. Built-In Basis Sets; ===================. A wide range of orbital basis sets are built into |PSIfour|. These are; summarized in Tables :ref:`Pople <table:basisPopleOrbital>`,; :ref:`Dunning <table:basisDunningOrbital>`, ; :ref:`Dunning (Douglas-Kroll) <table:basisDunningDK>`, ; :ref:`Karlsruhe <table:basisKarlsruhe>`,; :ref:`Jensen <table:basisJensen>`,; and :ref:`Other <table:basisOther>` in Appendix :ref:`apdx:basisTables`.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the :math:`X\;=\zeta` levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar's [Papajak:2011:10]_ calendar; truncations described in Table :ref:`Months Bases <table:basisMonths>`. Fi",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:2815,Availability,avail,available,2815,"ls__puream|; is set internally from the orbital basis. * :ref:`sec:basisBuiltIn`; * :ref:`Specifying basis sets <sec:jobControl>`; * :ref:`Built-in basis sets by family <apdx:basisTables>`; * :ref:`Built-in basis sets by element <apdx:basisElement>`; * :ref:`User-Defined basis sets <sec:basisUserDefined>`; * :ref:`Auxiliary bases for built-in orbital basis sets <apdx:basisFamily>`. .. index:: basis set; available by family; .. _`sec:basisBuiltIn`:. Built-In Basis Sets; ===================. A wide range of orbital basis sets are built into |PSIfour|. These are; summarized in Tables :ref:`Pople <table:basisPopleOrbital>`,; :ref:`Dunning <table:basisDunningOrbital>`, ; :ref:`Dunning (Douglas-Kroll) <table:basisDunningDK>`, ; :ref:`Karlsruhe <table:basisKarlsruhe>`,; :ref:`Jensen <table:basisJensen>`,; and :ref:`Other <table:basisOther>` in Appendix :ref:`apdx:basisTables`.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the :math:`X\;=\zeta` levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar's [Papajak:2011:10]_ calendar; truncations described in Table :ref:`Months Bases <table:basisMonths>`. Fitting bases ; in Tables :ref:`JKFIT <table:basisDunningJKFIT>`,; :ref:`RI <table:basisDunningMP2FIT>`, and :ref:`DUAL <table:basisDunningDUAL>`; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting :math:`(oo|`\ -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting :math:`(ov|`\ -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at :source:`psi4/share/psi4/b",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:3263,Availability,avail,available,3263,"is sets are built into |PSIfour|. These are; summarized in Tables :ref:`Pople <table:basisPopleOrbital>`,; :ref:`Dunning <table:basisDunningOrbital>`, ; :ref:`Dunning (Douglas-Kroll) <table:basisDunningDK>`, ; :ref:`Karlsruhe <table:basisKarlsruhe>`,; :ref:`Jensen <table:basisJensen>`,; and :ref:`Other <table:basisOther>` in Appendix :ref:`apdx:basisTables`.; These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the :math:`X\;=\zeta` levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar's [Papajak:2011:10]_ calendar; truncations described in Table :ref:`Months Bases <table:basisMonths>`. Fitting bases ; in Tables :ref:`JKFIT <table:basisDunningJKFIT>`,; :ref:`RI <table:basisDunningMP2FIT>`, and :ref:`DUAL <table:basisDunningDUAL>`; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting :math:`(oo|`\ -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting :math:`(ov|`\ -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at :source:`psi4/share/psi4/basis` in the source. For basis set availability by; element and the default value for keyword |globals__puream|, consult; Appendix :ref:`apdx:basisElement`. |PSIfour| uses the angular momentum convention below that; skips the letter ``J``. Note that Gaussian94 convention is; *not* to skip this letter.; |PSIfour| can use either convention for ``.gbs`` import (assuming; angular momentum levels are not skipped), but it will always output; in the ``HIK`` sequence. Another portion of the G94 format, labeling; angular mom",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:3742,Availability,avail,availability,3742,"`X\;=\zeta` levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar's [Papajak:2011:10]_ calendar; truncations described in Table :ref:`Months Bases <table:basisMonths>`. Fitting bases ; in Tables :ref:`JKFIT <table:basisDunningJKFIT>`,; :ref:`RI <table:basisDunningMP2FIT>`, and :ref:`DUAL <table:basisDunningDUAL>`; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting :math:`(oo|`\ -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting :math:`(ov|`\ -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at :source:`psi4/share/psi4/basis` in the source. For basis set availability by; element and the default value for keyword |globals__puream|, consult; Appendix :ref:`apdx:basisElement`. |PSIfour| uses the angular momentum convention below that; skips the letter ``J``. Note that Gaussian94 convention is; *not* to skip this letter.; |PSIfour| can use either convention for ``.gbs`` import (assuming; angular momentum levels are not skipped), but it will always output; in the ``HIK`` sequence. Another portion of the G94 format, labeling; angular momentum with :samp:`L={l}` syntax is newly (August 2020); implemented, and this is preferred for ``L=7`` and above to; avoid ambiguity. ::. L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... .. index:: basis set; multiple within molecule; .. _`sec:psithonBasissets`:. Mixing Basis Sets; =================. While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis ""block"" can be used. We use a snippet from the :srcsample:`mints2` sample; input file, which p",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:6265,Energy Efficiency,energy,energy,6265,"belled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled ``C1``. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable. In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from :math:`D_{6h}` to :math:`C_{2v}`; |PSIfour| will detect this; automatically and run in the appropriate point group. Basis blocks can also be named, *e.g.*, :samp:`basis; {optional_basis_name} \\{...\\}` and the basis defined by it later; applied to another molecule. ::. # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the ``basis {...}`` block may also be used; for defining basis sets, as detailed in :ref:`sec:basisUserDefined`. .. index:: basis set; auxiliary. Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the |mints__basis| keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to :ref:`apdx:basisFamily`,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:6292,Energy Efficiency,energy,energy,6292,"belled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled ``C1``. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable. In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from :math:`D_{6h}` to :math:`C_{2v}`; |PSIfour| will detect this; automatically and run in the appropriate point group. Basis blocks can also be named, *e.g.*, :samp:`basis; {optional_basis_name} \\{...\\}` and the basis defined by it later; applied to another molecule. ::. # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the ``basis {...}`` block may also be used; for defining basis sets, as detailed in :ref:`sec:basisUserDefined`. .. index:: basis set; auxiliary. Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the |mints__basis| keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to :ref:`apdx:basisFamily`,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:6415,Energy Efficiency,energy,energy,6415,"belled ``C1``. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable. In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from :math:`D_{6h}` to :math:`C_{2v}`; |PSIfour| will detect this; automatically and run in the appropriate point group. Basis blocks can also be named, *e.g.*, :samp:`basis; {optional_basis_name} \\{...\\}` and the basis defined by it later; applied to another molecule. ::. # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the ``basis {...}`` block may also be used; for defining basis sets, as detailed in :ref:`sec:basisUserDefined`. .. index:: basis set; auxiliary. Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the |mints__basis| keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to :ref:`apdx:basisFamily`,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to |PSIfour|,; the auxiliary basis will fall back on `def2 quad-zeta fitting bases; :source:`psi4/driver/qcdb/libmintsbasisset.p",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:6484,Energy Efficiency,energy,energy,6484,"ntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable. In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from :math:`D_{6h}` to :math:`C_{2v}`; |PSIfour| will detect this; automatically and run in the appropriate point group. Basis blocks can also be named, *e.g.*, :samp:`basis; {optional_basis_name} \\{...\\}` and the basis defined by it later; applied to another molecule. ::. # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the ``basis {...}`` block may also be used; for defining basis sets, as detailed in :ref:`sec:basisUserDefined`. .. index:: basis set; auxiliary. Calculations requesting density fitting (on by default for many methods); require auxiliary fitting basis set(s) in addition to the primary; orbital one associated with the |mints__basis| keyword.; When most popular basis sets are being used, including Dunning and; Pople-style, the SCF, DF-MP2, and SAPT codes will chose the appropriate; auxiliary basis set automatically according to :ref:`apdx:basisFamily`,; unless instructed otherwise by setting the auxiliary basis set in the; input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to |PSIfour|,; the auxiliary basis will fall back on `def2 quad-zeta fitting bases; :source:`psi4/driver/qcdb/libmintsbasisset.py#L762`.; Note that if |mints__basis| is known to be larger than quad-zet",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:8419,Integrability,depend,dependence,8419,".py#L762`.; Note that if |mints__basis| is known to be larger than quad-zeta,; |PSIfour| *will not* attempt to fall back on the def2 fitting bases. The same basis ""block"" syntax can be; used to specify basis sets other than that used to define orbitals. For; example, ::. set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used::. df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. .. _`sec:basisDecontracted`:. Decontracted Basis Sets; =======================. Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add ""-decon"" to the name; of the primary basis set (*e.g.* :srcsample:`decontract`). ::. 	set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the :ref:`X2C Hamiltonian <sec:relativistic>`. .. index::; pair: basis set; adding new. .. _`sec:basisUserDefined`: . User-Defined Basis Sets; =======================. .. note:: No recompile of the PSI program is necessary for changes made to; files in ``$PSIDATADIR``, including those described below. There are three routes by which a basis set in G94 format can be introduced to |PSIfours| notice. .. rubric:: (1) Install new basis set file into |PSIfour| basis library. Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word ``spherical`` or ``cartesian`` to indicate; whether the basis set will run in (5D/7F) or (6D/10F). ::. cartesian; ****; H 0; S 3 1.00",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:8965,Integrability,rout,routes,8965,"tracted Basis Sets; =======================. Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add ""-decon"" to the name; of the primary basis set (*e.g.* :srcsample:`decontract`). ::. 	set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the :ref:`X2C Hamiltonian <sec:relativistic>`. .. index::; pair: basis set; adding new. .. _`sec:basisUserDefined`: . User-Defined Basis Sets; =======================. .. note:: No recompile of the PSI program is necessary for changes made to; files in ``$PSIDATADIR``, including those described below. There are three routes by which a basis set in G94 format can be introduced to |PSIfours| notice. .. rubric:: (1) Install new basis set file into |PSIfour| basis library. Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word ``spherical`` or ``cartesian`` to indicate; whether the basis set will run in (5D/7F) or (6D/10F). ::. cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a ``.gbs`` extension,; after applying the following transformations. * All letters lowercase; * Replace all ``*`` with ``s``; * Replace all ``+`` with ``p``; * Replace all ``(`` ``)`` ``,`` with ``_`` (underscores replace parentheses and commas). For example, basis 6-3",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:10528,Modifiability,variab,variable,10528,".15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Name the file with the name of the basis set and a ``.gbs`` extension,; after applying the following transformations. * All letters lowercase; * Replace all ``*`` with ``s``; * Replace all ``+`` with ``p``; * Replace all ``(`` ``)`` ``,`` with ``_`` (underscores replace parentheses and commas). For example, basis 6-31++G** is stored in :source:`psi4/share/psi4/basis/6-31ppgss.gbs`,; and cc-pV(D+d)Z is stored in :source:`psi4/share/psi4/basis/cc-pv_dpd_z.gbs`.; Only one basis set may be specified per file.; Copy the new basis set file into :source:`psi4/share/psi4/basis`.; Request the new basis set in an input file in the usual manner. ::. set basis new_basis_name. .. rubric:: (2) Use new basis set file in arbitrary location. Prepare a basis set file exactly as above. Append the directory; containing the basis set file to the environment variable; :envvar:`PSIPATH`. If the directory is the current working directory,; |PSIfour| will find it automatically, and the directory does not need; to be added to :envvar:`PSIPATH`. Request the new basis set in an input file in the usual manner. ::. set basis new_basis_name. .. rubric:: (3) Include new basis set in input file. Construct for a basis set a section like the one below that includes; ``[basis name]``, |globals__puream| value, and element basis set; specifications. Hash signs denote comments. This format is exactly like; the stand-alone basis file except for the addition of the basis name in; brackets. ::. [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a |PSIf",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:4794,Performance,perform,performs,4794,"or keyword |globals__puream|, consult; Appendix :ref:`apdx:basisElement`. |PSIfour| uses the angular momentum convention below that; skips the letter ``J``. Note that Gaussian94 convention is; *not* to skip this letter.; |PSIfour| can use either convention for ``.gbs`` import (assuming; angular momentum levels are not skipped), but it will always output; in the ``HIK`` sequence. Another portion of the G94 format, labeling; angular momentum with :samp:`L={l}` syntax is newly (August 2020); implemented, and this is preferred for ``L=7`` and above to; avoid ambiguity. ::. L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... .. index:: basis set; multiple within molecule; .. _`sec:psithonBasissets`:. Mixing Basis Sets; =================. While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis ""block"" can be used. We use a snippet from the :srcsample:`mints2` sample; input file, which performs a benzene SCF computation, to demonstrate this; feature. ::. basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as ``H1`` are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled ``C1``. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable. In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from :math:`D_{6h}` to :math:`C_{2v}`; |",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:8603,Performance,perform,performing,8603,"ets other than that used to define orbitals. For; example, ::. set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used::. df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. .. _`sec:basisDecontracted`:. Decontracted Basis Sets; =======================. Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add ""-decon"" to the name; of the primary basis set (*e.g.* :srcsample:`decontract`). ::. 	set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the :ref:`X2C Hamiltonian <sec:relativistic>`. .. index::; pair: basis set; adding new. .. _`sec:basisUserDefined`: . User-Defined Basis Sets; =======================. .. note:: No recompile of the PSI program is necessary for changes made to; files in ``$PSIDATADIR``, including those described below. There are three routes by which a basis set in G94 format can be introduced to |PSIfours| notice. .. rubric:: (1) Install new basis set file into |PSIfour| basis library. Copy the basis set definitions for all elements into a blank file. Exclamation points denote comments.; As the first line of the file, add the word ``spherical`` or ``cartesian`` to indicate; whether the basis set will run in (5D/7F) or (6D/10F). ::. cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:12151,Performance,perform,performs,12151,"or the addition of the basis name in; brackets. ::. [ sto-3g ]; cartesian; ****; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a |PSIfour| input file and surround it with the; command ``basis {...}``, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use ``assign`` statements to actually request the basis set. This; ``basis {...}`` section replaces the usual ``set basis XXX`` line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax ``basis mybas {...}``,; and then the basis can be recalled later as ``set basis mybas``.; To use a custom basis set as described in this section, it must be ; defined prior to its use in a function that performs a computation. ::. basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case :srcsample:`mints2` provides a complete example of ; user-specified basis sets. .. _`sec:basissets-ecps`:. Inputting effective core potentials (ECPs); ==========================================. For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; :ref:`sec:scf-ecps` for more information about usin",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:4345,Safety,avoid,avoid,4345,"ilable for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting :math:`(oo|`\ -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting :math:`(ov|`\ -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at :source:`psi4/share/psi4/basis` in the source. For basis set availability by; element and the default value for keyword |globals__puream|, consult; Appendix :ref:`apdx:basisElement`. |PSIfour| uses the angular momentum convention below that; skips the letter ``J``. Note that Gaussian94 convention is; *not* to skip this letter.; |PSIfour| can use either convention for ``.gbs`` import (assuming; angular momentum levels are not skipped), but it will always output; in the ``HIK`` sequence. Another portion of the G94 format, labeling; angular momentum with :samp:`L={l}` syntax is newly (August 2020); implemented, and this is preferred for ``L=7`` and above to; avoid ambiguity. ::. L: 0123456789...; Psi4: SPDFGHIKLM...; G94: SPDFGHIJKL... .. index:: basis set; multiple within molecule; .. _`sec:psithonBasissets`:. Mixing Basis Sets; =================. While the above syntax will suffice for specifying basis sets in most cases,; the user may need to assign basis sets to specific atoms. To achieve this, a; basis ""block"" can be used. We use a snippet from the :srcsample:`mints2` sample; input file, which performs a benzene SCF computation, to demonstrate this; feature. ::. basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as ``H1`` are given the STO-3G basis set, leaving t",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:5804,Safety,detect,detect,5804,"e:`mints2` sample; input file, which performs a benzene SCF computation, to demonstrate this; feature. ::. basis {; assign DZ; assign C 3-21G; assign H1 sto-3g; assign C1 sto-3g; }. The first line in this block assigns the DZ basis set to all atoms for the primary/orbital basis. The next; line then assigns 3-21G to all carbon atoms, leaving the hydrogens with the DZ; basis set. On the third line, the hydrogen atoms which have been specifically; labelled as ``H1`` are given the STO-3G basis set, leaving the unlabelled hydrogen; atoms with the DZ basis set. Likewise, the fourth line assigns the STO-3G; basis set to just the carbon atoms labelled ``C1``. This bizarre example was; constructed to demonstrate the syntax, but the flexibility of the basis set; specification is advantageous, for example, when selectively omitting diffuse; functions to make computations more tractable. In the above example the basis sets have been assigned asymmetrically, reducing; the effective symmetry from :math:`D_{6h}` to :math:`C_{2v}`; |PSIfour| will detect this; automatically and run in the appropriate point group. Basis blocks can also be named, *e.g.*, :samp:`basis; {optional_basis_name} \\{...\\}` and the basis defined by it later; applied to another molecule. ::. # sets basis keyword; basis mybas {; assign aug-cc-pvtz; assign f cc-pvtz; }. # re-sets basis keyword; set basis aug-cc-pvtz. molecule hf {; H; F 1 1.0; }. molecule h2o {; O; H 1 1.0; H 1 1.0 2 90.0; }. # runs HF and H2O with aug-cc-pvtz; energy('hf', molecule=hf); energy('hf', molecule=h2o). # re-re-sets basis keyword; set basis mybas. # runs HF with cc-pvtz on F and aug-cc-pvtz on H; energy('hf', molecule=hf). # runs H2O with aug-cc-pvtz, effectively; energy('hf', molecule=h2o). Finally, we note that the ``basis {...}`` block may also be used; for defining basis sets, as detailed in :ref:`sec:basisUserDefined`. .. index:: basis set; auxiliary. Calculations requesting density fitting (on by default for many methods); requ",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:12982,Safety,detect,detected,12982,"32814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a |PSIfour| input file and surround it with the; command ``basis {...}``, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use ``assign`` statements to actually request the basis set. This; ``basis {...}`` section replaces the usual ``set basis XXX`` line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax ``basis mybas {...}``,; and then the basis can be recalled later as ``set basis mybas``.; To use a custom basis set as described in this section, it must be ; defined prior to its use in a function that performs a computation. ::. basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case :srcsample:`mints2` provides a complete example of ; user-specified basis sets. .. _`sec:basissets-ecps`:. Inputting effective core potentials (ECPs); ==========================================. For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; :ref:`sec:scf-ecps` for more information about using ECPs and the; :source:`Def2-TZVP <psi4/share/psi4/basis/def2-tzvp.gbs>` basis set definition; for an example of their input syntax.; ",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:12397,Testability,test,test,12397,"32814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a |PSIfour| input file and surround it with the; command ``basis {...}``, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use ``assign`` statements to actually request the basis set. This; ``basis {...}`` section replaces the usual ``set basis XXX`` line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax ``basis mybas {...}``,; and then the basis can be recalled later as ``set basis mybas``.; To use a custom basis set as described in this section, it must be ; defined prior to its use in a function that performs a computation. ::. basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case :srcsample:`mints2` provides a complete example of ; user-specified basis sets. .. _`sec:basissets-ecps`:. Inputting effective core potentials (ECPs); ==========================================. For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; :ref:`sec:scf-ecps` for more information about using ECPs and the; :source:`Def2-TZVP <psi4/share/psi4/basis/def2-tzvp.gbs>` basis set definition; for an example of their input syntax.; ",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:8153,Usability,simpl,simply,8153," input.; Should needed elements be missing from the best; auxiliary basis or should the orbital basis be unknown to |PSIfour|,; the auxiliary basis will fall back on `def2 quad-zeta fitting bases; :source:`psi4/driver/qcdb/libmintsbasisset.py#L762`.; Note that if |mints__basis| is known to be larger than quad-zeta,; |PSIfour| *will not* attempt to fall back on the def2 fitting bases. The same basis ""block"" syntax can be; used to specify basis sets other than that used to define orbitals. For; example, ::. set df_basis_mp2 cc-pvdz-ri. or. df_basis_mp2 {; assign cc-pVDZ-RI; }. are both equivalent ways to set the auxiliary basis set for density fitted MP2; computations. To assign the aug-cc-pVDZ-RI to carbon atoms, the following; command is used::. df_basis_mp2 {; assign C aug-cc-pVDZ-RI; }. .. _`sec:basisDecontracted`:. Decontracted Basis Sets; =======================. Decontraction of the basis set can be useful in certain situations. In; order to decontract a given basis set, simply add ""-decon"" to the name; of the primary basis set (*e.g.* :srcsample:`decontract`). ::. 	set basis cc-pvdz-decon. Obviously this will add significantly to the computational cost of any given calculation, however it can; be useful when checking the basis set dependence of a particular calculated property or in certain situations; where a large basis set is critical. Currently it is recommended that a decontracted basis is always used when performing relativistic calculations using the :ref:`X2C Hamiltonian <sec:relativistic>`. .. index::; pair: basis set; adding new. .. _`sec:basisUserDefined`: . User-Defined Basis Sets; =======================. .. note:: No recompile of the PSI program is necessary for changes made to; files in ``$PSIDATADIR``, including those described below. There are three routes by which a basis set in G94 format can be introduced to |PSIfours| notice. .. rubric:: (1) Install new basis set file into |PSIfour| basis library. Copy the basis set definitions for all ele",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst:12704,Usability,simpl,simply,12704,"32814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****. Copy the section into a |PSIfour| input file and surround it with the; command ``basis {...}``, as shown below. Multiple basis sets can be; specified by adding additional sections within the surrounding brackets.; Use ``assign`` statements to actually request the basis set. This; ``basis {...}`` section replaces the usual ``set basis XXX`` line.; In a more complex input, if the user needs to call the user-defined; basis by name, this can be achieved using the syntax ``basis mybas {...}``,; and then the basis can be recalled later as ``set basis mybas``.; To use a custom basis set as described in this section, it must be ; defined prior to its use in a function that performs a computation. ::. basis {. # assign basset to all atoms and addl to hydrogens; assign basset; assign H addl. # basis set section like in snippet above goes here; [basset]; ... # additional basis set sections follow; [addl]; ...; }. The test case :srcsample:`mints2` provides a complete example of ; user-specified basis sets. .. _`sec:basissets-ecps`:. Inputting effective core potentials (ECPs); ==========================================. For ECP containing basis sets, all of the above mechanisms may still be used to; input the basis set; simply place the ECP definitions (in G94 format) in the; same file or input section as the orbital basis definition. Because the ECP; appears in the same section as the orbital basis, it will be parsed; automatically and the number of core electrons the ECP represents will be; detected, so no further input is required to use a core potential. See; :ref:`sec:scf-ecps` for more information about using ECPs and the; :source:`Def2-TZVP <psi4/share/psi4/basis/def2-tzvp.gbs>` basis set definition; for an example of their input syntax.; ",MatchSource.DOCS,doc/sphinxman/source/basissets.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_byelement.rst:1042,Availability,avail,available,1042,".. #; .. # @BEGIN LICENSE; .. #; .. # Psi4: an open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: basis set; available by element; .. _`apdx:basisElement`:. Basis Sets by Element; =====================. |; |. .. comment This toctree directive only here to suppress warning at build time.; include line below is doing the work. .. toctree::; :hidden:. autodoc_psi4bases. .. include:: autodoc_psi4bases.rst. ",MatchSource.DOCS,doc/sphinxman/source/basissets_byelement.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_byelement.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:1083,Availability,avail,available,1083,"e package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: basis set; available by family; .. _`apdx:basisTables`:. ====================; Basis Sets by Family; ====================. Tables :ref:`Pople <table:basisPopleOrbital>`,; :ref:`Dunning <table:basisDunningOrbital>`, ; :ref:`Dunning (Douglas-Kroll) <table:basisDunningDK>`, ; :ref:`Dunning (F12) <table:basisDunningF12>`, ; :ref:`Karlsruhe <table:basisKarlsruhe>`,; :ref:`Jensen <table:basisJensen>`,; :ref:`Petersson <table:basisPetersson>`,; and :ref:`Other <table:basisOther>` summarize the orbital basis sets available in; |PSIfour|. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the :math:`X\;=\zeta` levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar's [Papajak:2011:10]_ calendar; truncations described in T",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:1583,Availability,avail,available,1583,"e GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: basis set; available by family; .. _`apdx:basisTables`:. ====================; Basis Sets by Family; ====================. Tables :ref:`Pople <table:basisPopleOrbital>`,; :ref:`Dunning <table:basisDunningOrbital>`, ; :ref:`Dunning (Douglas-Kroll) <table:basisDunningDK>`, ; :ref:`Dunning (F12) <table:basisDunningF12>`, ; :ref:`Karlsruhe <table:basisKarlsruhe>`,; :ref:`Jensen <table:basisJensen>`,; :ref:`Petersson <table:basisPetersson>`,; and :ref:`Other <table:basisOther>` summarize the orbital basis sets available in; |PSIfour|. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the :math:`X\;=\zeta` levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar's [Papajak:2011:10]_ calendar; truncations described in Table :ref:`Months Bases <table:basisMonths>`. Fitting bases ; in Tables :ref:`JKFIT <table:basisDunningJKFIT>`,; :ref:`RI <table:basisDunningMP2FIT>`, and :ref:`DUAL <table:basisDunningDUAL>`; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fittin",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:1833,Availability,avail,available,1833,"al Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: basis set; available by family; .. _`apdx:basisTables`:. ====================; Basis Sets by Family; ====================. Tables :ref:`Pople <table:basisPopleOrbital>`,; :ref:`Dunning <table:basisDunningOrbital>`, ; :ref:`Dunning (Douglas-Kroll) <table:basisDunningDK>`, ; :ref:`Dunning (F12) <table:basisDunningF12>`, ; :ref:`Karlsruhe <table:basisKarlsruhe>`,; :ref:`Jensen <table:basisJensen>`,; :ref:`Petersson <table:basisPetersson>`,; and :ref:`Other <table:basisOther>` summarize the orbital basis sets available in; |PSIfour|. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the :math:`X\;=\zeta` levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar's [Papajak:2011:10]_ calendar; truncations described in Table :ref:`Months Bases <table:basisMonths>`. Fitting bases ; in Tables :ref:`JKFIT <table:basisDunningJKFIT>`,; :ref:`RI <table:basisDunningMP2FIT>`, and :ref:`DUAL <table:basisDunningDUAL>`; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting :math:`(oo|`\ -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting :math:`(ov|`\ -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at :source:`psi4/share/psi4/b",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:2281,Availability,avail,available,2281,"f:`Dunning <table:basisDunningOrbital>`, ; :ref:`Dunning (Douglas-Kroll) <table:basisDunningDK>`, ; :ref:`Dunning (F12) <table:basisDunningF12>`, ; :ref:`Karlsruhe <table:basisKarlsruhe>`,; :ref:`Jensen <table:basisJensen>`,; :ref:`Petersson <table:basisPetersson>`,; and :ref:`Other <table:basisOther>` summarize the orbital basis sets available in; |PSIfour|. These tables are arranged so that columns indicate degree of; augmentation by diffuse functions (generally necessary for anions, excited; states, and noncovalent interactions) and DTQ56 indicate the :math:`X\;=\zeta` levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar's [Papajak:2011:10]_ calendar; truncations described in Table :ref:`Months Bases <table:basisMonths>`. Fitting bases ; in Tables :ref:`JKFIT <table:basisDunningJKFIT>`,; :ref:`RI <table:basisDunningMP2FIT>`, and :ref:`DUAL <table:basisDunningDUAL>`; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting :math:`(oo|`\ -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting :math:`(ov|`\ -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at :source:`psi4/share/psi4/basis` in the source. For basis set availability by; element and the default value for keyword |globals__puream|, consult; Appendix :ref:`apdx:basisElement`. |; |. .. _`table:basisPopleOrbital`:. .. table:: Summary of Pople-style orbital basis sets available in |PSIfour| [#f1]_. +-----------------+--------------+------------------+---------------+-------------------+----------------+; | no diffuse | heavy-augmented | augmented |; +-----------------+--------------+------------------+---------------+-------------------",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:2760,Availability,avail,availability,2760,"`X\;=\zeta` levels; available. Several intermediate levels of diffuse space between the customary; non-augmented and augmented versions have been supplied for each basis set,; including heavy-augmented and Truhlar's [Papajak:2011:10]_ calendar; truncations described in Table :ref:`Months Bases <table:basisMonths>`. Fitting bases ; in Tables :ref:`JKFIT <table:basisDunningJKFIT>`,; :ref:`RI <table:basisDunningMP2FIT>`, and :ref:`DUAL <table:basisDunningDUAL>`; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting :math:`(oo|`\ -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting :math:`(ov|`\ -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at :source:`psi4/share/psi4/basis` in the source. For basis set availability by; element and the default value for keyword |globals__puream|, consult; Appendix :ref:`apdx:basisElement`. |; |. .. _`table:basisPopleOrbital`:. .. table:: Summary of Pople-style orbital basis sets available in |PSIfour| [#f1]_. +-----------------+--------------+------------------+---------------+-------------------+----------------+; | no diffuse | heavy-augmented | augmented |; +-----------------+--------------+------------------+---------------+-------------------+----------------+; | basis set | alias | basis set | alias | basis set | alias |; +=================+==============+==================+===============+===================+================+; | STO-3G | | | | | |; +-----------------+--------------+------------------+---------------+-------------------+----------------+; | 3-21G | | | | | |; +-----------------+--------------+------------------+---------------+-------------------+----------------+; +-----------------+--------------+------------------+---------------+-------------------+----------------+; | 6-31G |",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:2973,Availability,avail,available,2973,"plied for each basis set,; including heavy-augmented and Truhlar's [Papajak:2011:10]_ calendar; truncations described in Table :ref:`Months Bases <table:basisMonths>`. Fitting bases ; in Tables :ref:`JKFIT <table:basisDunningJKFIT>`,; :ref:`RI <table:basisDunningMP2FIT>`, and :ref:`DUAL <table:basisDunningDUAL>`; are available for methods incorporating density-fitting or dual-basis; approximations. JKFIT sets are appropriate for fitting :math:`(oo|`\ -type products,; such as encountered in SCF theory and the electrostatics/exchange terms of SAPT.; RI sets are appropriate for fitting :math:`(ov|`\ -type products, such as encountered in; MP2 and most SAPT terms. Citations for basis sets can be found in their; definition files at :source:`psi4/share/psi4/basis` in the source. For basis set availability by; element and the default value for keyword |globals__puream|, consult; Appendix :ref:`apdx:basisElement`. |; |. .. _`table:basisPopleOrbital`:. .. table:: Summary of Pople-style orbital basis sets available in |PSIfour| [#f1]_. +-----------------+--------------+------------------+---------------+-------------------+----------------+; | no diffuse | heavy-augmented | augmented |; +-----------------+--------------+------------------+---------------+-------------------+----------------+; | basis set | alias | basis set | alias | basis set | alias |; +=================+==============+==================+===============+===================+================+; | STO-3G | | | | | |; +-----------------+--------------+------------------+---------------+-------------------+----------------+; | 3-21G | | | | | |; +-----------------+--------------+------------------+---------------+-------------------+----------------+; +-----------------+--------------+------------------+---------------+-------------------+----------------+; | 6-31G | | 6-31+G | | 6-31++G | |; +-----------------+--------------+------------------+---------------+-------------------+----------------+; | 6-31G(d) | 6-",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:9890,Availability,avail,available,9890,"---------+--------------------------------------------+------------------+------------------+------------------+; | may-cc-pVXZ | s, p, :math:`\cdots`, :math:`\ell_{max}-2` | | | maTZ | maQZ |; +--------------------------+--------------------------------------------------------------------------------------+--------------------------------------------+------------------+------------------+------------------+; | :math:`\cdots` | s, p | | | | aaQZ |; +--------------------------+--------------------------------------------------------------------------------------+--------------------------------------------+------------------+------------------+------------------+; | cc-pVXZ | | | DZ | TZ | QZ |; +--------------------------+--------------------------------------------------------------------------------------+--------------------------------------------+------------------+------------------+------------------+. |; |. .. _`table:basisDunningOrbital`:. .. table:: Summary of Dunning orbital basis sets available in |PSIfour|. +---------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | basis set | no diffuse | feb | mar | apr | may | jun | heavy-aug [#f2]_ | aug | d-aug |; +===============+============+=====+=====+=====+======+=======+==================+=======+=======+; | cc-pVXZ | DTQ56 | 6 | 56 | Q56 | TQ56 | DTQ56 | DTQ56 | DTQ56 | DTQ56 |; +---------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pV(X+d)Z | DTQ56 | 6 | 56 | Q56 | TQ56 | DTQ56 | DTQ56 | DTQ56 | DTQ56 |; +---------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pCVXZ | DTQ56 | 6 | 56 | Q56 | TQ56 | DTQ56 | DTQ56 | DTQ56 | DTQ56 |; +---------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pCV(X+d)Z | DTQ56 | 6 | 56 | Q56 | TQ56 | DTQ56 | DTQ56 | DTQ56 | DTQ56 |; +---------------+------------+-----+-----+-----+------+-------+",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:11351,Availability,avail,available,11351,--+-------+------------------+-------+-------+; | cc-pV(X+d)Z | DTQ56 | 6 | 56 | Q56 | TQ56 | DTQ56 | DTQ56 | DTQ56 | DTQ56 |; +---------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pCVXZ | DTQ56 | 6 | 56 | Q56 | TQ56 | DTQ56 | DTQ56 | DTQ56 | DTQ56 |; +---------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pCV(X+d)Z | DTQ56 | 6 | 56 | Q56 | TQ56 | DTQ56 | DTQ56 | DTQ56 | DTQ56 |; +---------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pwCVXZ | DTQ5 | | 5 | Q5 | TQ5 | DTQ5 | DTQ5 | DTQ5 | DTQ5 |; +---------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pwCV(X+d)Z | DTQ5 | | 5 | Q5 | TQ5 | DTQ5 | DTQ5 | DTQ5 | DTQ5 |; +---------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+. |; |. .. _`table:basisDunningDK`:. .. table:: Summary of Dunning Douglas-Kroll orbital basis sets available in |PSIfour|. +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+; | basis set | no diffuse | feb | mar | apr | may | jun | heavy-aug [#f2]_ | aug | d-aug |; +==================+============+=====+=====+=====+=====+=====+==================+========+=======+; | cc-pVXZ-DK | DTQ5 | | | | | | DTQ5 | DTQ5 | |; +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+; | cc-pV(X+d)Z-DK | | | | | | | | | |; +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+; | cc-pCVXZ-DK | DTQ5 | | | | | | DTQ5 | DTQ5 | |; +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+; | cc-pCV(X+d)Z-DK | | | | | | | | | |; +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+; | cc-pwCVXZ-DK | --TQ5 | | | | | | --TQ5 | --TQ5 | |; +------------------+----------,MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:12633,Availability,avail,available,12633,====+=====+==================+========+=======+; | cc-pVXZ-DK | DTQ5 | | | | | | DTQ5 | DTQ5 | |; +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+; | cc-pV(X+d)Z-DK | | | | | | | | | |; +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+; | cc-pCVXZ-DK | DTQ5 | | | | | | DTQ5 | DTQ5 | |; +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+; | cc-pCV(X+d)Z-DK | | | | | | | | | |; +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+; | cc-pwCVXZ-DK | --TQ5 | | | | | | --TQ5 | --TQ5 | |; +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+; | cc-pwCV(X+d)Z-DK | | | | | | | | | |; +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+. |; |. .. _`table:basisDunningF12`:. .. table:: Summary of Dunning F12 orbital basis sets available in |PSIfour|. +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+; | basis set | no diffuse | feb | mar | apr | may | jun | heavy-aug [#f2]_ | aug | d-aug |; +==================+============+=====+=====+=====+=====+=====+==================+========+=======+; | cc-pVXZ-F12 | DTQ | | | | | | | | |; +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+. |; |. .. _`table:basisDunningJKFIT`:. .. table:: Summary of Dunning JK-fitting basis sets available in |PSIfour|. +------------------------+------------+-----+-----+-----+-----+-----+------------------+------+-------+; | basis set | no diffuse | feb | mar | apr | may | jun | heavy-aug [#f2]_ | aug | d-aug |; +========================+============+=====+=====+=====+=====+=====+==================+======+=======+; | cc-pVXZ-JKFIT [#f3]_ | DTQ5 | | 5 | Q5 | TQ5 | DTQ5| DTQ5 | DTQ5 | |; +------------------------+------------+---,MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:13180,Availability,avail,available,13180,+------------+-----+-----+-----+-----+-----+------------------+--------+-------+; | cc-pwCVXZ-DK | --TQ5 | | | | | | --TQ5 | --TQ5 | |; +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+; | cc-pwCV(X+d)Z-DK | | | | | | | | | |; +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+. |; |. .. _`table:basisDunningF12`:. .. table:: Summary of Dunning F12 orbital basis sets available in |PSIfour|. +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+; | basis set | no diffuse | feb | mar | apr | may | jun | heavy-aug [#f2]_ | aug | d-aug |; +==================+============+=====+=====+=====+=====+=====+==================+========+=======+; | cc-pVXZ-F12 | DTQ | | | | | | | | |; +------------------+------------+-----+-----+-----+-----+-----+------------------+--------+-------+. |; |. .. _`table:basisDunningJKFIT`:. .. table:: Summary of Dunning JK-fitting basis sets available in |PSIfour|. +------------------------+------------+-----+-----+-----+-----+-----+------------------+------+-------+; | basis set | no diffuse | feb | mar | apr | may | jun | heavy-aug [#f2]_ | aug | d-aug |; +========================+============+=====+=====+=====+=====+=====+==================+======+=======+; | cc-pVXZ-JKFIT [#f3]_ | DTQ5 | | 5 | Q5 | TQ5 | DTQ5| DTQ5 | DTQ5 | |; +------------------------+------------+-----+-----+-----+-----+-----+------------------+------+-------+; | cc-pV(X+d)Z-JKFIT | DTQ5 | | 5 | Q5 | TQ5 | DTQ5| DTQ5 | DTQ5 | |; +------------------------+------------+-----+-----+-----+-----+-----+------------------+------+-------+; | cc-pCVXZ-JKFIT [#f3]_ | | | | | | | | | |; +------------------------+------------+-----+-----+-----+-----+-----+------------------+------+-------+; | cc-pCV(X+d)Z-JKFIT | | | | | | | | | |; +------------------------+------------+-----+-----+-----+-----+-----+------------------+------+-------+; | cc-pwCVXZ-JK,MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:14544,Availability,avail,available,14544,DTQ5 | | 5 | Q5 | TQ5 | DTQ5| DTQ5 | DTQ5 | |; +------------------------+------------+-----+-----+-----+-----+-----+------------------+------+-------+; | cc-pV(X+d)Z-JKFIT | DTQ5 | | 5 | Q5 | TQ5 | DTQ5| DTQ5 | DTQ5 | |; +------------------------+------------+-----+-----+-----+-----+-----+------------------+------+-------+; | cc-pCVXZ-JKFIT [#f3]_ | | | | | | | | | |; +------------------------+------------+-----+-----+-----+-----+-----+------------------+------+-------+; | cc-pCV(X+d)Z-JKFIT | | | | | | | | | |; +------------------------+------------+-----+-----+-----+-----+-----+------------------+------+-------+; | cc-pwCVXZ-JKFIT [#f3]_ | | | | | | | | | |; +------------------------+------------+-----+-----+-----+-----+-----+------------------+------+-------+; | cc-pwCV(X+d)Z-JKFIT | | | | | | | | | |; +------------------------+------------+-----+-----+-----+-----+-----+------------------+------+-------+. |; |. .. _`table:basisDunningMP2FIT`:. .. table:: Summary of Dunning MP2-fitting basis sets available in |PSIfour|. +------------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | basis set | no diffuse | feb | mar | apr | may | jun | heavy-aug [#f2]_ | aug | d-aug |; +==================+============+=====+=====+=====+======+=======+==================+=======+=======+; | cc-pVXZ-RI | DTQ56 | 6 | 56 | Q56 | TQ56 | DTQ56 | DTQ56 | DTQ56 | |; +------------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pV(X+d)Z-RI | DTQ56 | 6 | 56 | Q56 | TQ56 | DTQ56 | DTQ56 | DTQ56 | |; +------------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pCVXZ-RI | | | | | | | | | |; +------------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pCV(X+d)Z-RI | | | | | | | | | |; +------------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pwCVXZ-RI | DTQ5 | | 5 | Q,MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:15935,Availability,avail,available,15935,DTQ56 | DTQ56 | |; +------------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pV(X+d)Z-RI | DTQ56 | 6 | 56 | Q56 | TQ56 | DTQ56 | DTQ56 | DTQ56 | |; +------------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pCVXZ-RI | | | | | | | | | |; +------------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pCV(X+d)Z-RI | | | | | | | | | |; +------------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pwCVXZ-RI | DTQ5 | | 5 | Q5 | TQ5 | DTQ5 | DTQ5 | DTQ5 | |; +------------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+; | cc-pwCV(X+d)Z-RI | DTQ5 | | 5 | Q5 | TQ5 | DTQ5 | DTQ5 | DTQ5 | |; +------------------+------------+-----+-----+-----+------+-------+------------------+-------+-------+. |; |. .. _`table:basisDunningDUAL`:. .. table:: Summary of Dunning dual-basis helper basis sets available in |PSIfour|. +----------------------+------------+-----+-----+-----+-----+-----+------------------+-----+-------+; | basis set | no diffuse | feb | mar | apr | may | jun | heavy-aug [#f2]_ | aug | d-aug |; +======================+============+=====+=====+=====+=====+=====+==================+=====+=======+; | cc-pVXZ-DUAL | TQ | | | | | | TQ | DTQ | |; +----------------------+------------+-----+-----+-----+-----+-----+------------------+-----+-------+; | cc-pV(X+d)Z-DUAL | | | | | | | | | |; +----------------------+------------+-----+-----+-----+-----+-----+------------------+-----+-------+; | cc-pCVXZ-DUAL | | | | | | | | | |; +----------------------+------------+-----+-----+-----+-----+-----+------------------+-----+-------+; | cc-pCV(X+d)Z-DUAL | | | | | | | | | |; +----------------------+------------+-----+-----+-----+-----+-----+------------------+-----+-------+; | cc-pwCVXZ-DUAL | | | | | | | | | |; +----------------------+------------+-----+-----+-----,MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:17196,Availability,avail,available,17196,"=====+=====+=====+=====+=====+=====+==================+=====+=======+; | cc-pVXZ-DUAL | TQ | | | | | | TQ | DTQ | |; +----------------------+------------+-----+-----+-----+-----+-----+------------------+-----+-------+; | cc-pV(X+d)Z-DUAL | | | | | | | | | |; +----------------------+------------+-----+-----+-----+-----+-----+------------------+-----+-------+; | cc-pCVXZ-DUAL | | | | | | | | | |; +----------------------+------------+-----+-----+-----+-----+-----+------------------+-----+-------+; | cc-pCV(X+d)Z-DUAL | | | | | | | | | |; +----------------------+------------+-----+-----+-----+-----+-----+------------------+-----+-------+; | cc-pwCVXZ-DUAL | | | | | | | | | |; +----------------------+------------+-----+-----+-----+-----+-----+------------------+-----+-------+; | cc-pwCV(X+d)Z-DUAL | | | | | | | | | |; +----------------------+------------+-----+-----+-----+-----+-----+------------------+-----+-------+. |; |. .. _`table:basisKarlsruhe`:. .. table:: Summary of Karlsruhe orbital basis sets available in |PSIfour|. +--------------+-------------+; | no diffuse | augmented |; +==============+=============+; | def2-SV(P) | |; +--------------+-------------+; | def2-SVP | def2-SVPD |; +--------------+-------------+; | def2-TZVP | def2-TZVPD |; +--------------+-------------+; | def2-TZVPP | def2-TZVPPD |; +--------------+-------------+; | def2-QZVP | def2-QZVPD |; +--------------+-------------+; | def2-QZVPP | def2-QZVPPD |; +--------------+-------------+; | def2-mSVP | |; +--------------+-------------+; | def2-mTZVP | |; +--------------+-------------+; | def2-mTZVPP | |; +--------------+-------------+. |; |. .. _`table:basisJensen`:. .. table:: Summary of Jensen orbital basis sets available in |PSIfour|. +---------------+--------------+-----------+-------+------------------+; | basis set | no diffuse | augmented | tight | augmented, tight |; +===============+==============+===========+=======+==================+; | pcseg-N | 01234 [#f5]_ | | | |; +---------------+-",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:17894,Availability,avail,available,17894,"-----+------------+-----+-----+-----+-----+-----+------------------+-----+-------+; | cc-pwCV(X+d)Z-DUAL | | | | | | | | | |; +----------------------+------------+-----+-----+-----+-----+-----+------------------+-----+-------+. |; |. .. _`table:basisKarlsruhe`:. .. table:: Summary of Karlsruhe orbital basis sets available in |PSIfour|. +--------------+-------------+; | no diffuse | augmented |; +==============+=============+; | def2-SV(P) | |; +--------------+-------------+; | def2-SVP | def2-SVPD |; +--------------+-------------+; | def2-TZVP | def2-TZVPD |; +--------------+-------------+; | def2-TZVPP | def2-TZVPPD |; +--------------+-------------+; | def2-QZVP | def2-QZVPD |; +--------------+-------------+; | def2-QZVPP | def2-QZVPPD |; +--------------+-------------+; | def2-mSVP | |; +--------------+-------------+; | def2-mTZVP | |; +--------------+-------------+; | def2-mTZVPP | |; +--------------+-------------+. |; |. .. _`table:basisJensen`:. .. table:: Summary of Jensen orbital basis sets available in |PSIfour|. +---------------+--------------+-----------+-------+------------------+; | basis set | no diffuse | augmented | tight | augmented, tight |; +===============+==============+===========+=======+==================+; | pcseg-N | 01234 [#f5]_ | | | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcseg-N | | 01234 | | |; +---------------+--------------+-----------+-------+------------------+; | pcSseg-N | | | 01234 | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcSseg-N | | | | 01234 |; +---------------+--------------+-----------+-------+------------------+. |; |. .. _`table:basisPetersson`:. .. table:: Summary of Petersson orbital basis sets available in |PSIfour|. +---------------+--------------+-----+; | basis set | augmented, tight |; +===============+==============+=====+; | nZaPa-NR | 234567 |; +---------------+--------------+-----+. |; |. .. _`table:basisOther`:. .. table:: Summar",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:18634,Availability,avail,available,18634,"-QZVPPD |; +--------------+-------------+; | def2-mSVP | |; +--------------+-------------+; | def2-mTZVP | |; +--------------+-------------+; | def2-mTZVPP | |; +--------------+-------------+. |; |. .. _`table:basisJensen`:. .. table:: Summary of Jensen orbital basis sets available in |PSIfour|. +---------------+--------------+-----------+-------+------------------+; | basis set | no diffuse | augmented | tight | augmented, tight |; +===============+==============+===========+=======+==================+; | pcseg-N | 01234 [#f5]_ | | | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcseg-N | | 01234 | | |; +---------------+--------------+-----------+-------+------------------+; | pcSseg-N | | | 01234 | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcSseg-N | | | | 01234 |; +---------------+--------------+-----------+-------+------------------+. |; |. .. _`table:basisPetersson`:. .. table:: Summary of Petersson orbital basis sets available in |PSIfour|. +---------------+--------------+-----+; | basis set | augmented, tight |; +===============+==============+=====+; | nZaPa-NR | 234567 |; +---------------+--------------+-----+. |; |. .. _`table:basisOther`:. .. table:: Summary of other orbital basis sets available in |PSIfour|. +----------------+; | DZP |; +----------------+; | TZ2P |; +----------------+; | TZ2PF |; +----------------+; | Sadlej-LPol-ds |; +----------------+; | Sadlej-LPol-dl |; +----------------+; | Sadlej-LPol-fs |; +----------------+; | Sadlej-LPol-fl |; +----------------+. |; |. .. rubric:: Footnotes. .. [#f1] Corresponding basis set filenames have star replaced by ""s"", plus replaced by ""p"", and parenthesis and comma replaced by ""_"".; .. [#f2] The heavy-aug-cc-\ *stub* and jul-cc-\ *stub* basis sets are identical.; .. [#f3] The JKFIT basis sets are designed in the cc-\ *stub*\ (X+d)Z ; framework that includes an additional set of; *d*-functions for second-row *p*-block elements. ",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:18913,Availability,avail,available,18913,"e in |PSIfour|. +---------------+--------------+-----------+-------+------------------+; | basis set | no diffuse | augmented | tight | augmented, tight |; +===============+==============+===========+=======+==================+; | pcseg-N | 01234 [#f5]_ | | | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcseg-N | | 01234 | | |; +---------------+--------------+-----------+-------+------------------+; | pcSseg-N | | | 01234 | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcSseg-N | | | | 01234 |; +---------------+--------------+-----------+-------+------------------+. |; |. .. _`table:basisPetersson`:. .. table:: Summary of Petersson orbital basis sets available in |PSIfour|. +---------------+--------------+-----+; | basis set | augmented, tight |; +===============+==============+=====+; | nZaPa-NR | 234567 |; +---------------+--------------+-----+. |; |. .. _`table:basisOther`:. .. table:: Summary of other orbital basis sets available in |PSIfour|. +----------------+; | DZP |; +----------------+; | TZ2P |; +----------------+; | TZ2PF |; +----------------+; | Sadlej-LPol-ds |; +----------------+; | Sadlej-LPol-dl |; +----------------+; | Sadlej-LPol-fs |; +----------------+; | Sadlej-LPol-fl |; +----------------+. |; |. .. rubric:: Footnotes. .. [#f1] Corresponding basis set filenames have star replaced by ""s"", plus replaced by ""p"", and parenthesis and comma replaced by ""_"".; .. [#f2] The heavy-aug-cc-\ *stub* and jul-cc-\ *stub* basis sets are identical.; .. [#f3] The JKFIT basis sets are designed in the cc-\ *stub*\ (X+d)Z ; framework that includes an additional set of; *d*-functions for second-row *p*-block elements. Identical basis sets; with the cc-\ *stub*\ XZ-JKFIT label are provided for convenience.; .. [#f4] D\ :math:`\zeta` has :math:`\ell_{max}=2` or d.; T\ :math:`\zeta` has :math:`\ell_{max}=3` or f.; Q\ :math:`\zeta` has :math:`\ell_{max}=4` or g, *etc*.; .. [#f5] *N* in Jensen basis",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:19401,Testability,stub,stub,19401,"----------+-------+------------------+; | basis set | no diffuse | augmented | tight | augmented, tight |; +===============+==============+===========+=======+==================+; | pcseg-N | 01234 [#f5]_ | | | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcseg-N | | 01234 | | |; +---------------+--------------+-----------+-------+------------------+; | pcSseg-N | | | 01234 | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcSseg-N | | | | 01234 |; +---------------+--------------+-----------+-------+------------------+. |; |. .. _`table:basisPetersson`:. .. table:: Summary of Petersson orbital basis sets available in |PSIfour|. +---------------+--------------+-----+; | basis set | augmented, tight |; +===============+==============+=====+; | nZaPa-NR | 234567 |; +---------------+--------------+-----+. |; |. .. _`table:basisOther`:. .. table:: Summary of other orbital basis sets available in |PSIfour|. +----------------+; | DZP |; +----------------+; | TZ2P |; +----------------+; | TZ2PF |; +----------------+; | Sadlej-LPol-ds |; +----------------+; | Sadlej-LPol-dl |; +----------------+; | Sadlej-LPol-fs |; +----------------+; | Sadlej-LPol-fl |; +----------------+. |; |. .. rubric:: Footnotes. .. [#f1] Corresponding basis set filenames have star replaced by ""s"", plus replaced by ""p"", and parenthesis and comma replaced by ""_"".; .. [#f2] The heavy-aug-cc-\ *stub* and jul-cc-\ *stub* basis sets are identical.; .. [#f3] The JKFIT basis sets are designed in the cc-\ *stub*\ (X+d)Z ; framework that includes an additional set of; *d*-functions for second-row *p*-block elements. Identical basis sets; with the cc-\ *stub*\ XZ-JKFIT label are provided for convenience.; .. [#f4] D\ :math:`\zeta` has :math:`\ell_{max}=2` or d.; T\ :math:`\zeta` has :math:`\ell_{max}=3` or f.; Q\ :math:`\zeta` has :math:`\ell_{max}=4` or g, *etc*.; .. [#f5] *N* in Jensen basis sets corresponds to :math:`N+1\zeta` basis set. ",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:19421,Testability,stub,stub,19421,"----------+-------+------------------+; | basis set | no diffuse | augmented | tight | augmented, tight |; +===============+==============+===========+=======+==================+; | pcseg-N | 01234 [#f5]_ | | | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcseg-N | | 01234 | | |; +---------------+--------------+-----------+-------+------------------+; | pcSseg-N | | | 01234 | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcSseg-N | | | | 01234 |; +---------------+--------------+-----------+-------+------------------+. |; |. .. _`table:basisPetersson`:. .. table:: Summary of Petersson orbital basis sets available in |PSIfour|. +---------------+--------------+-----+; | basis set | augmented, tight |; +===============+==============+=====+; | nZaPa-NR | 234567 |; +---------------+--------------+-----+. |; |. .. _`table:basisOther`:. .. table:: Summary of other orbital basis sets available in |PSIfour|. +----------------+; | DZP |; +----------------+; | TZ2P |; +----------------+; | TZ2PF |; +----------------+; | Sadlej-LPol-ds |; +----------------+; | Sadlej-LPol-dl |; +----------------+; | Sadlej-LPol-fs |; +----------------+; | Sadlej-LPol-fl |; +----------------+. |; |. .. rubric:: Footnotes. .. [#f1] Corresponding basis set filenames have star replaced by ""s"", plus replaced by ""p"", and parenthesis and comma replaced by ""_"".; .. [#f2] The heavy-aug-cc-\ *stub* and jul-cc-\ *stub* basis sets are identical.; .. [#f3] The JKFIT basis sets are designed in the cc-\ *stub*\ (X+d)Z ; framework that includes an additional set of; *d*-functions for second-row *p*-block elements. Identical basis sets; with the cc-\ *stub*\ XZ-JKFIT label are provided for convenience.; .. [#f4] D\ :math:`\zeta` has :math:`\ell_{max}=2` or d.; T\ :math:`\zeta` has :math:`\ell_{max}=3` or f.; Q\ :math:`\zeta` has :math:`\ell_{max}=4` or g, *etc*.; .. [#f5] *N* in Jensen basis sets corresponds to :math:`N+1\zeta` basis set. ",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:19510,Testability,stub,stub,19510,"----------+-------+------------------+; | basis set | no diffuse | augmented | tight | augmented, tight |; +===============+==============+===========+=======+==================+; | pcseg-N | 01234 [#f5]_ | | | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcseg-N | | 01234 | | |; +---------------+--------------+-----------+-------+------------------+; | pcSseg-N | | | 01234 | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcSseg-N | | | | 01234 |; +---------------+--------------+-----------+-------+------------------+. |; |. .. _`table:basisPetersson`:. .. table:: Summary of Petersson orbital basis sets available in |PSIfour|. +---------------+--------------+-----+; | basis set | augmented, tight |; +===============+==============+=====+; | nZaPa-NR | 234567 |; +---------------+--------------+-----+. |; |. .. _`table:basisOther`:. .. table:: Summary of other orbital basis sets available in |PSIfour|. +----------------+; | DZP |; +----------------+; | TZ2P |; +----------------+; | TZ2PF |; +----------------+; | Sadlej-LPol-ds |; +----------------+; | Sadlej-LPol-dl |; +----------------+; | Sadlej-LPol-fs |; +----------------+; | Sadlej-LPol-fl |; +----------------+. |; |. .. rubric:: Footnotes. .. [#f1] Corresponding basis set filenames have star replaced by ""s"", plus replaced by ""p"", and parenthesis and comma replaced by ""_"".; .. [#f2] The heavy-aug-cc-\ *stub* and jul-cc-\ *stub* basis sets are identical.; .. [#f3] The JKFIT basis sets are designed in the cc-\ *stub*\ (X+d)Z ; framework that includes an additional set of; *d*-functions for second-row *p*-block elements. Identical basis sets; with the cc-\ *stub*\ XZ-JKFIT label are provided for convenience.; .. [#f4] D\ :math:`\zeta` has :math:`\ell_{max}=2` or d.; T\ :math:`\zeta` has :math:`\ell_{max}=3` or f.; Q\ :math:`\zeta` has :math:`\ell_{max}=4` or g, *etc*.; .. [#f5] *N* in Jensen basis sets corresponds to :math:`N+1\zeta` basis set. ",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst:19658,Testability,stub,stub,19658,"----------+-------+------------------+; | basis set | no diffuse | augmented | tight | augmented, tight |; +===============+==============+===========+=======+==================+; | pcseg-N | 01234 [#f5]_ | | | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcseg-N | | 01234 | | |; +---------------+--------------+-----------+-------+------------------+; | pcSseg-N | | | 01234 | |; +---------------+--------------+-----------+-------+------------------+; | aug-pcSseg-N | | | | 01234 |; +---------------+--------------+-----------+-------+------------------+. |; |. .. _`table:basisPetersson`:. .. table:: Summary of Petersson orbital basis sets available in |PSIfour|. +---------------+--------------+-----+; | basis set | augmented, tight |; +===============+==============+=====+; | nZaPa-NR | 234567 |; +---------------+--------------+-----+. |; |. .. _`table:basisOther`:. .. table:: Summary of other orbital basis sets available in |PSIfour|. +----------------+; | DZP |; +----------------+; | TZ2P |; +----------------+; | TZ2PF |; +----------------+; | Sadlej-LPol-ds |; +----------------+; | Sadlej-LPol-dl |; +----------------+; | Sadlej-LPol-fs |; +----------------+; | Sadlej-LPol-fl |; +----------------+. |; |. .. rubric:: Footnotes. .. [#f1] Corresponding basis set filenames have star replaced by ""s"", plus replaced by ""p"", and parenthesis and comma replaced by ""_"".; .. [#f2] The heavy-aug-cc-\ *stub* and jul-cc-\ *stub* basis sets are identical.; .. [#f3] The JKFIT basis sets are designed in the cc-\ *stub*\ (X+d)Z ; framework that includes an additional set of; *d*-functions for second-row *p*-block elements. Identical basis sets; with the cc-\ *stub*\ XZ-JKFIT label are provided for convenience.; .. [#f4] D\ :math:`\zeta` has :math:`\ell_{max}=2` or d.; T\ :math:`\zeta` has :math:`\ell_{max}=3` or f.; Q\ :math:`\zeta` has :math:`\ell_{max}=4` or g, *etc*.; .. [#f5] *N* in Jensen basis sets corresponds to :math:`N+1\zeta` basis set. ",MatchSource.DOCS,doc/sphinxman/source/basissets_tables.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/basissets_tables.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst:18166,Energy Efficiency,charge,charge,18166,"Hansen; *Chem. Phys.* **356**, 98-109 (2009). .. [Izsak:2011:144105]; R. Izs\ |a_acute|\ k and F. Neese; *J. Chem. Phys.* **135**, 144105 (2011). .. [Smith:2018:3504]; 10.1021/acs.jctc.8b00286,; ""PSI4NUMPY: An Interactive Quantum Chemistry Programming Environment for Reference Implementations and Rapid Development"",; D. G. A. Smith, L. A. Burns, D. A. Sirianni, D. R. Nascimento, A. Kumar, A. M. James, J. B. Schriber, T. Zhang, B. Zhang, A. S. Abbott, E. J. Berquist, M. H. Lechner, L. A. Cunha, A. G. Heide, J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; *J. Chem. Theory Comput.* **14**, 3504-3511 (2018). .. [Schriber:2021:234107]; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; *J. Chem. Phys.* **154**, 234107 (2021). .. [Caldeweyher:2019:154122]; ""A generally applicable atomic-charge dependent London dispersion correction"",; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; *J. Chem. Phys.* **150**, 154122 (2019).; https://doi.org/10.1063/1.5090222. .. [Haser:1989:104]; M. Haser and R. Ahlrichs,; *J. Comp. Chem.* **10(1)**, 104 (1989).; https://doi.org/10.1002/jcc.540100111. .. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; *J. Chem. Phys.* **147**, 144101 (2017).; https://doi.org/10.1063/1.4994190. .. [Smith:2020:184108]; ""PSI4 1.4: Open-source software for high-throughput quantum chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince",MatchSource.DOCS,doc/sphinxman/source/bibliography.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst:19409,Energy Efficiency,energy,energy,19409,"89:104]; M. Haser and R. Ahlrichs,; *J. Comp. Chem.* **10(1)**, 104 (1989).; https://doi.org/10.1002/jcc.540100111. .. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; *J. Chem. Phys.* **147**, 144101 (2017).; https://doi.org/10.1063/1.4994190. .. [Smith:2020:184108]; ""PSI4 1.4: Open-source software for high-throughput quantum chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U. Bozkaya, R. King, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill; *J. Chem. Phys.* **152**, 184108 (2020).; https://doi.org/10.1063/5.0006002. .. [Waldrop:2021:024103]; ""Nonapproximated third-order exchange induction energy in symmetry-adapted perturbation theory"",; J. M. Waldrop and K. Patkowski; *J. Chem. Phys.* **154**, 024103 (2021).; https://doi.org/10.1063/1.4994190. .. [Ochsenfeld:1998:1663]; C. Ochsenfeld, C. A. White, M. Head-Gordon; *J. Chem. Phys.* **109**, 1663 (1998); https://doi.org/10.1063/1.476741. .. [Behnle:2019:REMP]; ""REMP: A hybrid perturbation theory providing improved electronic wavefunctions and properties"",; S. Behnle and R. F. Fink,; *J. Chem. Phys.* **150**, 1241077 (2019).; https://doi.org/10.1063/1.5086168. .. [Behnle:2021:OREMP]; ""OO-REMP: Approaching Chemical Accuracy with Second-Order Perturbation Theory"",; S. Behnle and R. F. Fink,; *J. Chem. Theory Comput.* **17**, 3259 (2021).; https://doi.org/10.1021/acs.jctc.1c00280. .. [Behnle:2022:OREMP]; ""UREMP, RO-REMP, and OO-REMP: Hybrid perturbation theories for open-shell electronic structure calculations"",; S. Behnle and R. F. Fink; *J. Chem. Phys.* **156**, 124103 (2022).; https://doi.org/10.1063/5.0081285. .",MatchSource.DOCS,doc/sphinxman/source/bibliography.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst:19428,Energy Efficiency,adapt,adapted,19428,"89:104]; M. Haser and R. Ahlrichs,; *J. Comp. Chem.* **10(1)**, 104 (1989).; https://doi.org/10.1002/jcc.540100111. .. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; *J. Chem. Phys.* **147**, 144101 (2017).; https://doi.org/10.1063/1.4994190. .. [Smith:2020:184108]; ""PSI4 1.4: Open-source software for high-throughput quantum chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U. Bozkaya, R. King, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill; *J. Chem. Phys.* **152**, 184108 (2020).; https://doi.org/10.1063/5.0006002. .. [Waldrop:2021:024103]; ""Nonapproximated third-order exchange induction energy in symmetry-adapted perturbation theory"",; J. M. Waldrop and K. Patkowski; *J. Chem. Phys.* **154**, 024103 (2021).; https://doi.org/10.1063/1.4994190. .. [Ochsenfeld:1998:1663]; C. Ochsenfeld, C. A. White, M. Head-Gordon; *J. Chem. Phys.* **109**, 1663 (1998); https://doi.org/10.1063/1.476741. .. [Behnle:2019:REMP]; ""REMP: A hybrid perturbation theory providing improved electronic wavefunctions and properties"",; S. Behnle and R. F. Fink,; *J. Chem. Phys.* **150**, 1241077 (2019).; https://doi.org/10.1063/1.5086168. .. [Behnle:2021:OREMP]; ""OO-REMP: Approaching Chemical Accuracy with Second-Order Perturbation Theory"",; S. Behnle and R. F. Fink,; *J. Chem. Theory Comput.* **17**, 3259 (2021).; https://doi.org/10.1021/acs.jctc.1c00280. .. [Behnle:2022:OREMP]; ""UREMP, RO-REMP, and OO-REMP: Hybrid perturbation theories for open-shell electronic structure calculations"",; S. Behnle and R. F. Fink; *J. Chem. Phys.* **156**, 124103 (2022).; https://doi.org/10.1063/5.0081285. .",MatchSource.DOCS,doc/sphinxman/source/bibliography.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst:20528,Energy Efficiency,energy,energy,20528,"op and K. Patkowski; *J. Chem. Phys.* **154**, 024103 (2021).; https://doi.org/10.1063/1.4994190. .. [Ochsenfeld:1998:1663]; C. Ochsenfeld, C. A. White, M. Head-Gordon; *J. Chem. Phys.* **109**, 1663 (1998); https://doi.org/10.1063/1.476741. .. [Behnle:2019:REMP]; ""REMP: A hybrid perturbation theory providing improved electronic wavefunctions and properties"",; S. Behnle and R. F. Fink,; *J. Chem. Phys.* **150**, 1241077 (2019).; https://doi.org/10.1063/1.5086168. .. [Behnle:2021:OREMP]; ""OO-REMP: Approaching Chemical Accuracy with Second-Order Perturbation Theory"",; S. Behnle and R. F. Fink,; *J. Chem. Theory Comput.* **17**, 3259 (2021).; https://doi.org/10.1021/acs.jctc.1c00280. .. [Behnle:2022:OREMP]; ""UREMP, RO-REMP, and OO-REMP: Hybrid perturbation theories for open-shell electronic structure calculations"",; S. Behnle and R. F. Fink; *J. Chem. Phys.* **156**, 124103 (2022).; https://doi.org/10.1063/5.0081285. .. [Fink:2006:RE]; ""Two new unitary-invariant and size-consistent perturbation theoretical approaches to the electron correlation energy"",; R. F. Fink; *Chem. Phys. Lett.*, **428**, 461 (2006); https://doi.org/10.1016/j.cplett.2006.07.081. .. .. [Bozkaya:2014:dfomp2]; .. U. Bozkaya,; .. *J. Chem. Phys.* **141**, 124108 (2014).; .. https://doi.org/10.1063/1.4896235. .. [Bozkaya:2014:dfomp2grad]; U. Bozkaya,; *J. Chem. Theory Comput.* **10**, 4389-4399 (2014).; https://doi.org/10.1021/ct500634s. .. [Bozkaya:2016:dfomp3]; U. Bozkaya,; *J. Chem. Theory Comput.* **12**, 1179-1188 (2016).; https://doi.org/10.1021/acs.jctc.5b01128. .. [Bozkaya:2016:dfolccd]; U. Bozkaya,; *Phys. Chem. Chem. Phys.* **18**, 11362-11373 (2016).; https://doi.org/10.1039/c6cp00164e. .. [Bozkaya:2016:dfccsdat]; U. Bozkaya,; *J. Chem. Phys.* **144**, 144108 (2016).; https://doi.org/10.1063/1.4945706. .. [Bozkaya:2016:dfccsdgrad]; U. Bozkaya and C. D. Sherrill,; *J. Chem. Phys.* **144**, 174103 (2016).; https://doi.org/10.1063/1.4948318. .. [Bozkaya:2017:dfccsdtgrad]; U. Bozkaya and C. D.",MatchSource.DOCS,doc/sphinxman/source/bibliography.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst:18173,Integrability,depend,dependent,18173,"Hansen; *Chem. Phys.* **356**, 98-109 (2009). .. [Izsak:2011:144105]; R. Izs\ |a_acute|\ k and F. Neese; *J. Chem. Phys.* **135**, 144105 (2011). .. [Smith:2018:3504]; 10.1021/acs.jctc.8b00286,; ""PSI4NUMPY: An Interactive Quantum Chemistry Programming Environment for Reference Implementations and Rapid Development"",; D. G. A. Smith, L. A. Burns, D. A. Sirianni, D. R. Nascimento, A. Kumar, A. M. James, J. B. Schriber, T. Zhang, B. Zhang, A. S. Abbott, E. J. Berquist, M. H. Lechner, L. A. Cunha, A. G. Heide, J. M. Waldrop, T. Y. Takeshita, A. Alenaizan, D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; *J. Chem. Theory Comput.* **14**, 3504-3511 (2018). .. [Schriber:2021:234107]; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; *J. Chem. Phys.* **154**, 234107 (2021). .. [Caldeweyher:2019:154122]; ""A generally applicable atomic-charge dependent London dispersion correction"",; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; *J. Chem. Phys.* **150**, 154122 (2019).; https://doi.org/10.1063/1.5090222. .. [Haser:1989:104]; M. Haser and R. Ahlrichs,; *J. Comp. Chem.* **10(1)**, 104 (1989).; https://doi.org/10.1002/jcc.540100111. .. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; *J. Chem. Phys.* **147**, 144101 (2017).; https://doi.org/10.1063/1.4994190. .. [Smith:2020:184108]; ""PSI4 1.4: Open-source software for high-throughput quantum chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince",MatchSource.DOCS,doc/sphinxman/source/bibliography.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst:19428,Modifiability,adapt,adapted,19428,"89:104]; M. Haser and R. Ahlrichs,; *J. Comp. Chem.* **10(1)**, 104 (1989).; https://doi.org/10.1002/jcc.540100111. .. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; *J. Chem. Phys.* **147**, 144101 (2017).; https://doi.org/10.1063/1.4994190. .. [Smith:2020:184108]; ""PSI4 1.4: Open-source software for high-throughput quantum chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U. Bozkaya, R. King, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill; *J. Chem. Phys.* **152**, 184108 (2020).; https://doi.org/10.1063/5.0006002. .. [Waldrop:2021:024103]; ""Nonapproximated third-order exchange induction energy in symmetry-adapted perturbation theory"",; J. M. Waldrop and K. Patkowski; *J. Chem. Phys.* **154**, 024103 (2021).; https://doi.org/10.1063/1.4994190. .. [Ochsenfeld:1998:1663]; C. Ochsenfeld, C. A. White, M. Head-Gordon; *J. Chem. Phys.* **109**, 1663 (1998); https://doi.org/10.1063/1.476741. .. [Behnle:2019:REMP]; ""REMP: A hybrid perturbation theory providing improved electronic wavefunctions and properties"",; S. Behnle and R. F. Fink,; *J. Chem. Phys.* **150**, 1241077 (2019).; https://doi.org/10.1063/1.5086168. .. [Behnle:2021:OREMP]; ""OO-REMP: Approaching Chemical Accuracy with Second-Order Perturbation Theory"",; S. Behnle and R. F. Fink,; *J. Chem. Theory Comput.* **17**, 3259 (2021).; https://doi.org/10.1021/acs.jctc.1c00280. .. [Behnle:2022:OREMP]; ""UREMP, RO-REMP, and OO-REMP: Hybrid perturbation theories for open-shell electronic structure calculations"",; S. Behnle and R. F. Fink; *J. Chem. Phys.* **156**, 124103 (2022).; https://doi.org/10.1063/5.0081285. .",MatchSource.DOCS,doc/sphinxman/source/bibliography.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst:18718,Performance,throughput,throughput,18718,", D. Neuhauser, R. A. King, A. C. Simmonett, J. M. Turney, H. F. Schaefer III, F. A. Evangelista, A. E. DePrince, T. D. Crawford, K. Patkowski, and C. D. Sherrill; *J. Chem. Theory Comput.* **14**, 3504-3511 (2018). .. [Schriber:2021:234107]; J. B. Schriber, D. A. Sirianni, D. G. A. Smith, L. A. Burns, D. Sitkoff, D. L. Cheney, C. D. Sherrill; *J. Chem. Phys.* **154**, 234107 (2021). .. [Caldeweyher:2019:154122]; ""A generally applicable atomic-charge dependent London dispersion correction"",; E. Caldeweyher, S. Ehlert, A. Hansen, H. Neugebauer, S. Spicher, C. Bannwarth, and S. Grimme,; *J. Chem. Phys.* **150**, 154122 (2019).; https://doi.org/10.1063/1.5090222. .. [Haser:1989:104]; M. Haser and R. Ahlrichs,; *J. Comp. Chem.* **10(1)**, 104 (1989).; https://doi.org/10.1002/jcc.540100111. .. [Thompson:2017:144101]; T. H. Thompson and C. Ochsenfeld; *J. Chem. Phys.* **147**, 144101 (2017).; https://doi.org/10.1063/1.4994190. .. [Smith:2020:184108]; ""PSI4 1.4: Open-source software for high-throughput quantum chemistry"",; D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish, M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio, A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer, R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni, J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein, B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov, K. Patkowski, A. E. DePrince III, U. Bozkaya, R. King, F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill; *J. Chem. Phys.* **152**, 184108 (2020).; https://doi.org/10.1063/5.0006002. .. [Waldrop:2021:024103]; ""Nonapproximated third-order exchange induction energy in symmetry-adapted perturbation theory"",; J. M. Waldrop and K. Patkowski; *J. Chem. Phys.* **154**, 024103 (2021).; https://doi.org/10.1063/1.4994190. .. [Ochsenfeld:1998:1663]; C. Ochsenfeld, C. A. White, M. Head-Gordon; *J. Chem. Phys.* **109**, 1663 (1998); https://doi.org/10.1063/1.476741. .. [Beh",MatchSource.DOCS,doc/sphinxman/source/bibliography.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/bibliography.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:1414,Availability,avail,available,1414,"nse as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BrianQC; .. _`sec:brianqc`:. Interface to the BrianQC GPU module by the BrianQC team; =======================================================. .. codeauthor:: Gergely Kis; .. sectionauthor:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. c",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:1621,Availability,down,download,1621," MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BrianQC; .. _`sec:brianqc`:. Interface to the BrianQC GPU module by the BrianQC team; =======================================================. .. codeauthor:: Gergely Kis; .. sectionauthor:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https:/",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:1770,Availability,avail,available,1770,"; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BrianQC; .. _`sec:brianqc`:. Interface to the BrianQC GPU module by the BrianQC team; =======================================================. .. codeauthor:: Gergely Kis; .. sectionauthor:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. cod",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:1909,Availability,down,download,1909," Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BrianQC; .. _`sec:brianqc`:. Interface to the BrianQC GPU module by the BrianQC team; =======================================================. .. codeauthor:: Gergely Kis; .. sectionauthor:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_ins",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:1837,Deployability,install,installed,1837,"; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BrianQC; .. _`sec:brianqc`:. Interface to the BrianQC GPU module by the BrianQC team; =======================================================. .. codeauthor:: Gergely Kis; .. sectionauthor:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. cod",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:1962,Deployability,install,installing,1962,".. include:: autodoc_abbr_options_c.rst. .. index:: BrianQC; .. _`sec:brianqc`:. Interface to the BrianQC GPU module by the BrianQC team; =======================================================. .. codeauthor:: Gergely Kis; .. sectionauthor:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; b",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:1997,Deployability,install,installation,1997,".. include:: autodoc_abbr_options_c.rst. .. index:: BrianQC; .. _`sec:brianqc`:. Interface to the BrianQC GPU module by the BrianQC team; =======================================================. .. codeauthor:: Gergely Kis; .. sectionauthor:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; b",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:2179,Deployability,install,installation,2179,"r:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake ",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:2288,Deployability,configurat,configuration,2288,"r:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake ",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:2795,Deployability,install,installation,2795," the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENAB",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:3633,Deployability,install,installation,3633,"family.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENABLE` environment variable to `1`. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC; """""""""""""""""""""""""""""""""""""""""""". The operation of BrianQC is transparent from a user's point of view; every; internal computation is either performed by |PSIfour| (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual precision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and D",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:6006,Deployability,install,installation,6006,"s_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which |PSIfour| would detect by default), the; input geometry must contain the line ``symmetry c1`` to force |PSIfour| to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. * By default, |PSIfour| uses density-fitted preiterations for SCF, which BrianQC; doesn't handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting |scf__df_scf_guess| to `False`.; * By default, |PSIfour| uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set |globals__scf_type| to `direct`. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__brianqc_enable.rst. Environment Variables; ~~~~~~~~~~~~~~~~~~~~~. .. envvar:: BRIANQC_SDK_INSTALL. Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_INSTALL_PATH. Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_ENABLE. Runtime toggle of whether to use BrianQC. ",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:6173,Deployability,install,installation,6173,"s_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which |PSIfour| would detect by default), the; input geometry must contain the line ``symmetry c1`` to force |PSIfour| to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. * By default, |PSIfour| uses density-fitted preiterations for SCF, which BrianQC; doesn't handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting |scf__df_scf_guess| to `False`.; * By default, |PSIfour| uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set |globals__scf_type| to `direct`. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__brianqc_enable.rst. Environment Variables; ~~~~~~~~~~~~~~~~~~~~~. .. envvar:: BRIANQC_SDK_INSTALL. Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_INSTALL_PATH. Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_ENABLE. Runtime toggle of whether to use BrianQC. ",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:6322,Deployability,toggle,toggle,6322,"s_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which |PSIfour| would detect by default), the; input geometry must contain the line ``symmetry c1`` to force |PSIfour| to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. * By default, |PSIfour| uses density-fitted preiterations for SCF, which BrianQC; doesn't handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting |scf__df_scf_guess| to `False`.; * By default, |PSIfour| uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set |globals__scf_type| to `direct`. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__brianqc_enable.rst. Environment Variables; ~~~~~~~~~~~~~~~~~~~~~. .. envvar:: BRIANQC_SDK_INSTALL. Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_INSTALL_PATH. Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_ENABLE. Runtime toggle of whether to use BrianQC. ",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:1303,Integrability,interface,interface,1303,"e; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: BrianQC; .. _`sec:brianqc`:. Interface to the BrianQC GPU module by the BrianQC team; =======================================================. .. codeauthor:: Gergely Kis; .. sectionauthor:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PS",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:2262,Integrability,wrap,wrapper,2262,"r:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake ",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:4775,Integrability,depend,depends,4775,"able| input option to `True`;. * setting the :envvar:`BRIANQC_ENABLE` environment variable to `1`. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC; """""""""""""""""""""""""""""""""""""""""""". The operation of BrianQC is transparent from a user's point of view; every; internal computation is either performed by |PSIfour| (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual precision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which |PSIfour| would detect by default), the; input geometry must contain the line ``symmetry c1`` to force |PSIfour| to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. * By default, |PSIfour| uses density-fitted preiterations for SCF, which BrianQC; doesn't handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting |scf__df_scf_guess| to `False`.; * By default, |PSIfour| uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock b",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:2068,Modifiability,variab,variable,2068,".. include:: autodoc_abbr_options_c.rst. .. index:: BrianQC; .. _`sec:brianqc`:. Interface to the BrianQC GPU module by the BrianQC team; =======================================================. .. codeauthor:: Gergely Kis; .. sectionauthor:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; b",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:2288,Modifiability,config,configuration,2288,"r:: Gergely Kis. |PSIfour| contains code to interface to the BrianQC GPU module developed; by the `BrianQC team <https://www.brianqc.com/team>`_, which is available after a license agreement from; `https://brianqc.com/ <https://brianqc.com/>`_. Installing BrianQC; ~~~~~~~~~~~~~~~~~~. Please contact BrianQC at `https://brianqc.com/ <https://brianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake ",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:2906,Modifiability,variab,variable,2906,"/www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENABLE` environment variable to `1`. If both the input option and the environment v",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:3259,Modifiability,variab,variable,3259,"ild |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENABLE` environment variable to `1`. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC; """""""""""""""""""""""""""""""""""""""""""". The operation of BrianQC is transparent from a user's point of view; every; internal computation is either performed by |PSIfour| (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual prec",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:3317,Modifiability,variab,variable,3317,"ild |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENABLE` environment variable to `1`. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC; """""""""""""""""""""""""""""""""""""""""""". The operation of BrianQC is transparent from a user's point of view; every; internal computation is either performed by |PSIfour| (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual prec",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:3578,Modifiability,variab,variable,3578,"family.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENABLE` environment variable to `1`. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC; """""""""""""""""""""""""""""""""""""""""""". The operation of BrianQC is transparent from a user's point of view; every; internal computation is either performed by |PSIfour| (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual precision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and D",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:3829,Modifiability,variab,variable,3829,"starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENABLE` environment variable to `1`. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC; """""""""""""""""""""""""""""""""""""""""""". The operation of BrianQC is transparent from a user's point of view; every; internal computation is either performed by |PSIfour| (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual precision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calc",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:3891,Modifiability,variab,variable,3891,"t variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENABLE` environment variable to `1`. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC; """""""""""""""""""""""""""""""""""""""""""". The operation of BrianQC is transparent from a user's point of view; every; internal computation is either performed by |PSIfour| (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual precision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:3937,Modifiability,variab,variable,3937,"t variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENABLE` environment variable to `1`. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC; """""""""""""""""""""""""""""""""""""""""""". The operation of BrianQC is transparent from a user's point of view; every; internal computation is either performed by |PSIfour| (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual precision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:4119,Performance,perform,performed,4119,"g |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENABLE` environment variable to `1`. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC; """""""""""""""""""""""""""""""""""""""""""". The operation of BrianQC is transparent from a user's point of view; every; internal computation is either performed by |PSIfour| (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual precision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which ",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:4628,Performance,optimiz,optimizations,4628,"r BrianQC installation. There are two ways to enable BrianQC for a specific calculation:. * setting the |globals__brianqc_enable| input option to `True`;. * setting the :envvar:`BRIANQC_ENABLE` environment variable to `1`. If both the input option and the environment variable are specified,; then the environment variable takes precedence. When to enable BrianQC; """""""""""""""""""""""""""""""""""""""""""". The operation of BrianQC is transparent from a user's point of view; every; internal computation is either performed by |PSIfour| (if unsupported by BrianQC),; or taken over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual precision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which |PSIfour| would detect by default), the; input geometry must contain the line ``symmetry c1`` to force |PSIfour| to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. * By default, |PSIfour| uses density-fitted preiterations for SCF, which BrianQC; doesn't handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting |scf__df_scf_guess| to `False`.; * By default, |",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:5291,Performance,perform,performance,5291,"recision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which |PSIfour| would detect by default), the; input geometry must contain the line ``symmetry c1`` to force |PSIfour| to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. * By default, |PSIfour| uses density-fitted preiterations for SCF, which BrianQC; doesn't handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting |scf__df_scf_guess| to `False`.; * By default, |PSIfour| uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set |globals__scf_type| to `direct`. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__brianqc_enable.rst. Environment Variables; ~~~~~~~~~~~~~~~~~~~~~. .. envvar:: BRIANQC_SDK_INSTALL. Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_INSTALL_PATH. Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_ENABLE. Runtime",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:5528,Performance,perform,performed,5528,"s_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which |PSIfour| would detect by default), the; input geometry must contain the line ``symmetry c1`` to force |PSIfour| to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. * By default, |PSIfour| uses density-fitted preiterations for SCF, which BrianQC; doesn't handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting |scf__df_scf_guess| to `False`.; * By default, |PSIfour| uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set |globals__scf_type| to `direct`. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__brianqc_enable.rst. Environment Variables; ~~~~~~~~~~~~~~~~~~~~~. .. envvar:: BRIANQC_SDK_INSTALL. Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_INSTALL_PATH. Location of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_ENABLE. Runtime toggle of whether to use BrianQC. ",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:5150,Safety,detect,detect,5150,"n over by BrianQC, yielding the same result to within the required; precision. In particular, BrianQC will respect all of |PSIfour|'s usual precision; parameters, like |scf__ints_tolerance| and |scf__e_convergence|. BrianQC can speed up a number of internal computations, including Fock and; gradient computation. Thus, BrianQC will speed up any calculation involving; those terms, such as. * HF and DFT single point energies. * HF and DFT geometry optimizations. * HF and DFT frequency analysis. Note that not every term of every calculation can be handled by BrianQC, thus,; the actual speedup depends on the specifics of the calculation. Necessary and recommended option values; """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". To ensure that a calculation works with BrianQC, the following options need to; be set when enabling BrianQC:. * BrianQC currently only handles the C1 molecular symmetry point group. Thus, if; the molecule has any symmetries (which |PSIfour| would detect by default), the; input geometry must contain the line ``symmetry c1`` to force |PSIfour| to; disregard the symmetry. To achieve peak performance, the following settings are recommended when enabling; BrianQC:. * By default, |PSIfour| uses density-fitted preiterations for SCF, which BrianQC; doesn't handle yet. To ensure that no non-BrianQC-accelerated iterations are; performed, disable the preiterations by setting |scf__df_scf_guess| to `False`.; * By default, |PSIfour| uses a disk-based Fock building, but BrianQC currently only; accelerates direct Fock builds. To ensure that Fock building is accelerated by; BrianQC, set |globals__scf_type| to `direct`. Keywords; ~~~~~~~~. .. include:: autodir_options_c/globals__brianqc_enable.rst. Environment Variables; ~~~~~~~~~~~~~~~~~~~~~. .. envvar:: BRIANQC_SDK_INSTALL. Toggle for type of BrianQC installation.; See https://s3.amazonaws.com/streamnovation-brianqc-manual/BrianQC_Manual_v1_1_0.pdf for details. .. envvar:: BRIANQC_INSTALL_PATH. Location of BrianQC instal",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:2595,Testability,test,tested,2595,"rianqc.com/>`_; to download the BrianQC GPU module and obtain a license. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst:2662,Testability,test,tested,2662,"cense. Note that there are several prerequisites for using BrianQC, including; having a supported GPU available in the computing node and having the; proper GPU drivers installed. Please refer to the `BrianQC manual <https://www.brianqc.com/download/>`_; for a full list of prerequisites. When installing BrianQC, choose the SDK installation by setting the; :envvar:`BRIANQC_SDK_INSTALL` envoronment variable to `1`. Building BrianQC's user-built components; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. After the installation, build BrianQC's example and sample programs,; which also creates the wrapper library and CMake configuration files; required to build |PSIfour| with BrianQC. 1. Create a build directory to keep the source tree clean. .. code-block:: bash. cd <brianqc_install_path>; mkdir build; cd build. 2. Configure project and generate makefiles with CMake.; You will require `Eigen <http://eigen.tuxfamily.org>`_ (tested with version 3.1.2); and `boost <https://www.boost.org/>`_ (tested with version 1.62). .. code-block:: bash. cmake .. 3. Build the examples and samples. .. code-block:: bash. make. 4. Test the installation by starting a small calculation.; Make sure to set the :envvar:`BRIANQC_INSTALL_PATH` environment variable to `<brianqc_install_path>`!. .. code-block:: bash. export BRIANQC_INSTALL_PATH=<brianqc_install_path>; bin/sample_hf_and_dft --molecule ../share/qc_molecules/cis-decalin.raw --basis ../share/basis_sets/cc-pvdz. Building |PSIfour| with BrianQC; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. When CMake-ing |PSIfour|, set the :makevar:`ENABLE_BrianQC` CMake variable to `1`; and set the :makevar:`BrianQC_DIR` CMake variable to the path where BrianQC's; components have been built (usually `<brianqc_install_path>/build`), then build |PSIfour| normally. Using BrianQC from |PSIfour|; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~. To use BrianQC, the :envvar:`BRIANQC_INSTALL_PATH` environment variable; must be set to the full path of your BrianQC installation. There are two ways to ",MatchSource.DOCS,doc/sphinxman/source/brianqc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/brianqc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:1354,Availability,down,downloads,1354,"ify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:buildrunfaq`:. ===============; Build & Run FAQ; ===============. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. Obtaining and Updating |PSIfour|; --------------------------------. #. :ref:`faq:obtainpsi4`; #. :ref:`faq:quiz`; #. :ref:`faq:binary`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public`; #. :ref:`faq:tarballpsi4public`; #. :ref:`faq:recompile`. .. #. :ref:`faq:psi3sourceforge`. Configuring and Installing |PSIfour| via Binary; -----------------------------------------------. #. :ref:`faq:psicodedownload`; #. :ref:`sec:psi4conda`; #. :ref:`faq:psi4pkg`; #. :ref:`faq:updatepsi4`; #. :ref:`faq:psi4deps`; #. :ref:`sec:condadetails`; #. :ref:`faq:condamaxameri`. Configuring, Building, and Installing |PSIfour| via Source; ----------------------------------------------------------. #. :ref:`faq:cmakeviasetup`; #. :ref:`faq:buildquick`; #. :ref:`faq:builddetailed`. #. :ref:`faq:setuphelp`; #. :ref:`faq:chooseobjdir`; #. :ref:`faq:setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`fa",MatchSource.DOCS,doc/sphinxman/source/build_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:4243,Availability,error,erroreriam,4243,setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`faq:doconfigure`; #. :ref:`faq:cray`. Non-QC Dependencies; -------------------. #. :ref:`faq:coredepend`; #. :ref:`cmake:python`; #. :ref:`faq:libmwcondapy`; #. :ref:`cmake:lapack`; #. :ref:`cmake:cxx`; #. :ref:`faq:approvedcxx`; #. :ref:`faq:modgcc`; #. :ref:`faq:macxcode`; #. :ref:`cmake:fortran`; #. :ref:`faq:approvedfc`; #. :ref:`faq:macgfortran`. QC Dependencies and Extensions; ------------------------------. #. :ref:`faq:addondepend`; #. :ref:`faq:localaddon`; #. :ref:`cmake:chemps2`; #. :ref:`faq:chemps2gccflto`; #. :ref:`cmake:dkh`; #. :ref:`cmake:libefp`; #. :ref:`cmake:erd`; #. :ref:`cmake:gdma`; #. :ref:`cmake:libint`; #. :ref:`cmake:pcmsolver`. Testing ; -------. #. :ref:`faq:testsoutput`; #. :ref:`faq:subsettests`; #. :ref:`faq:minutetests`; #. :ref:`faq:pytest`. Runtime Setup; -------------. #. :ref:`faq:runordinaryexe`; #. :ref:`faq:runordinarymodule`; #. :ref:`faq:runfrombinary`; #. :ref:`faq:inplace`; #. :ref:`faq:psi4scratch`; #. :ref:`faq:psidatadir`; #. :ref:`faq:psi4psiapipath`; #. :ref:`faq:modulenotfounderror`. Running |PSIfour|; -----------------. #. :ref:`What command line options does Psi4 have <sec:commandLineOptions>`; #. :ref:`What environment variables affect Psi4 <sec:environmentVariables>`; #. :ref:`faq:runtimepython`; #. :ref:`faq:psi4version`; #. :ref:`faq:psi4PBS`; #. :ref:`faq:psi4fileretention`; #. :ref:`faq:logging`; #. :ref:`faq:findexemod`. Runtime Errors and Debugging; ----------------------------. #. :ref:`faq:gdblldb`; #. :ref:`faq:setuptype`; #. :ref:`faq:wrongpyfalse`. Managing Code; -------------. #. :ref:`faq:dirlayoutinstall`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:vigitmerge`. Miscellaneous; -------------. #. :ref:`faq:writepsi4`; #. :ref:`faq:psi4logos`. .. #. :ref:`faq:getversion`; .. #. :ref:`faq:binarypackage`; .. #. :ref:`faq:getting-and-using-the-psi4dependencies-package`; .. #. :ref:`faq:erroreriam`. ,MatchSource.DOCS,doc/sphinxman/source/build_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:1217,Deployability,install,install,1217," .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:buildrunfaq`:. ===============; Build & Run FAQ; ===============. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. Obtaining and Updating |PSIfour|; --------------------------------. #. :ref:`faq:obtainpsi4`; #. :ref:`faq:quiz`; #. :ref:`faq:binary`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public`; #. :ref:`faq:tarballpsi4public`; #. :ref:`faq:recompile`. .. #. :ref:`faq:psi3sourceforge`. Configuring and Installing |PSIfour| via Binary; -----------------------------------------------. #. :ref:`faq:psicodedownload`; #. :ref:`sec:psi4conda`; #. :ref:`faq:psi4pkg`; #. :ref:`faq:updatepsi4`; #. :ref:`faq:psi4deps`; #. :ref:`sec:condadetails`; #. :ref:`faq:condamaxameri`. Configuring, Building, and Installing |PSIfour| via Source; ----------------------------------------------------------. #. :ref:`faq:cmakeviasetup`; #. :ref:`faq:buildquick`; #. :ref:`faq:builddetailed`. #. :ref:`faq:setuphelp`; #. :ref:`faq:chooseobjdir`; #. :ref:`faq:setuppre",MatchSource.DOCS,doc/sphinxman/source/build_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:1283,Deployability,update,updated,1283," .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:buildrunfaq`:. ===============; Build & Run FAQ; ===============. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. Obtaining and Updating |PSIfour|; --------------------------------. #. :ref:`faq:obtainpsi4`; #. :ref:`faq:quiz`; #. :ref:`faq:binary`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public`; #. :ref:`faq:tarballpsi4public`; #. :ref:`faq:recompile`. .. #. :ref:`faq:psi3sourceforge`. Configuring and Installing |PSIfour| via Binary; -----------------------------------------------. #. :ref:`faq:psicodedownload`; #. :ref:`sec:psi4conda`; #. :ref:`faq:psi4pkg`; #. :ref:`faq:updatepsi4`; #. :ref:`faq:psi4deps`; #. :ref:`sec:condadetails`; #. :ref:`faq:condamaxameri`. Configuring, Building, and Installing |PSIfour| via Source; ----------------------------------------------------------. #. :ref:`faq:cmakeviasetup`; #. :ref:`faq:buildquick`; #. :ref:`faq:builddetailed`. #. :ref:`faq:setuphelp`; #. :ref:`faq:chooseobjdir`; #. :ref:`faq:setuppre",MatchSource.DOCS,doc/sphinxman/source/build_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:1371,Deployability,install,installs,1371,"ify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:buildrunfaq`:. ===============; Build & Run FAQ; ===============. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. Obtaining and Updating |PSIfour|; --------------------------------. #. :ref:`faq:obtainpsi4`; #. :ref:`faq:quiz`; #. :ref:`faq:binary`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public`; #. :ref:`faq:tarballpsi4public`; #. :ref:`faq:recompile`. .. #. :ref:`faq:psi3sourceforge`. Configuring and Installing |PSIfour| via Binary; -----------------------------------------------. #. :ref:`faq:psicodedownload`; #. :ref:`sec:psi4conda`; #. :ref:`faq:psi4pkg`; #. :ref:`faq:updatepsi4`; #. :ref:`faq:psi4deps`; #. :ref:`sec:condadetails`; #. :ref:`faq:condamaxameri`. Configuring, Building, and Installing |PSIfour| via Source; ----------------------------------------------------------. #. :ref:`faq:cmakeviasetup`; #. :ref:`faq:buildquick`; #. :ref:`faq:builddetailed`. #. :ref:`faq:setuphelp`; #. :ref:`faq:chooseobjdir`; #. :ref:`faq:setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`fa",MatchSource.DOCS,doc/sphinxman/source/build_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:3555,Modifiability,variab,variables,3555,setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`faq:doconfigure`; #. :ref:`faq:cray`. Non-QC Dependencies; -------------------. #. :ref:`faq:coredepend`; #. :ref:`cmake:python`; #. :ref:`faq:libmwcondapy`; #. :ref:`cmake:lapack`; #. :ref:`cmake:cxx`; #. :ref:`faq:approvedcxx`; #. :ref:`faq:modgcc`; #. :ref:`faq:macxcode`; #. :ref:`cmake:fortran`; #. :ref:`faq:approvedfc`; #. :ref:`faq:macgfortran`. QC Dependencies and Extensions; ------------------------------. #. :ref:`faq:addondepend`; #. :ref:`faq:localaddon`; #. :ref:`cmake:chemps2`; #. :ref:`faq:chemps2gccflto`; #. :ref:`cmake:dkh`; #. :ref:`cmake:libefp`; #. :ref:`cmake:erd`; #. :ref:`cmake:gdma`; #. :ref:`cmake:libint`; #. :ref:`cmake:pcmsolver`. Testing ; -------. #. :ref:`faq:testsoutput`; #. :ref:`faq:subsettests`; #. :ref:`faq:minutetests`; #. :ref:`faq:pytest`. Runtime Setup; -------------. #. :ref:`faq:runordinaryexe`; #. :ref:`faq:runordinarymodule`; #. :ref:`faq:runfrombinary`; #. :ref:`faq:inplace`; #. :ref:`faq:psi4scratch`; #. :ref:`faq:psidatadir`; #. :ref:`faq:psi4psiapipath`; #. :ref:`faq:modulenotfounderror`. Running |PSIfour|; -----------------. #. :ref:`What command line options does Psi4 have <sec:commandLineOptions>`; #. :ref:`What environment variables affect Psi4 <sec:environmentVariables>`; #. :ref:`faq:runtimepython`; #. :ref:`faq:psi4version`; #. :ref:`faq:psi4PBS`; #. :ref:`faq:psi4fileretention`; #. :ref:`faq:logging`; #. :ref:`faq:findexemod`. Runtime Errors and Debugging; ----------------------------. #. :ref:`faq:gdblldb`; #. :ref:`faq:setuptype`; #. :ref:`faq:wrongpyfalse`. Managing Code; -------------. #. :ref:`faq:dirlayoutinstall`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:vigitmerge`. Miscellaneous; -------------. #. :ref:`faq:writepsi4`; #. :ref:`faq:psi4logos`. .. #. :ref:`faq:getversion`; .. #. :ref:`faq:binarypackage`; .. #. :ref:`faq:getting-and-using-the-psi4dependencies-package`; .. #. :ref:`faq:erroreriam`. ,MatchSource.DOCS,doc/sphinxman/source/build_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:3061,Testability,test,testsoutput,3061,-----------------------------------------. #. :ref:`faq:cmakeviasetup`; #. :ref:`faq:buildquick`; #. :ref:`faq:builddetailed`. #. :ref:`faq:setuphelp`; #. :ref:`faq:chooseobjdir`; #. :ref:`faq:setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`faq:doconfigure`; #. :ref:`faq:cray`. Non-QC Dependencies; -------------------. #. :ref:`faq:coredepend`; #. :ref:`cmake:python`; #. :ref:`faq:libmwcondapy`; #. :ref:`cmake:lapack`; #. :ref:`cmake:cxx`; #. :ref:`faq:approvedcxx`; #. :ref:`faq:modgcc`; #. :ref:`faq:macxcode`; #. :ref:`cmake:fortran`; #. :ref:`faq:approvedfc`; #. :ref:`faq:macgfortran`. QC Dependencies and Extensions; ------------------------------. #. :ref:`faq:addondepend`; #. :ref:`faq:localaddon`; #. :ref:`cmake:chemps2`; #. :ref:`faq:chemps2gccflto`; #. :ref:`cmake:dkh`; #. :ref:`cmake:libefp`; #. :ref:`cmake:erd`; #. :ref:`cmake:gdma`; #. :ref:`cmake:libint`; #. :ref:`cmake:pcmsolver`. Testing ; -------. #. :ref:`faq:testsoutput`; #. :ref:`faq:subsettests`; #. :ref:`faq:minutetests`; #. :ref:`faq:pytest`. Runtime Setup; -------------. #. :ref:`faq:runordinaryexe`; #. :ref:`faq:runordinarymodule`; #. :ref:`faq:runfrombinary`; #. :ref:`faq:inplace`; #. :ref:`faq:psi4scratch`; #. :ref:`faq:psidatadir`; #. :ref:`faq:psi4psiapipath`; #. :ref:`faq:modulenotfounderror`. Running |PSIfour|; -----------------. #. :ref:`What command line options does Psi4 have <sec:commandLineOptions>`; #. :ref:`What environment variables affect Psi4 <sec:environmentVariables>`; #. :ref:`faq:runtimepython`; #. :ref:`faq:psi4version`; #. :ref:`faq:psi4PBS`; #. :ref:`faq:psi4fileretention`; #. :ref:`faq:logging`; #. :ref:`faq:findexemod`. Runtime Errors and Debugging; ----------------------------. #. :ref:`faq:gdblldb`; #. :ref:`faq:setuptype`; #. :ref:`faq:wrongpyfalse`. Managing Code; -------------. #. :ref:`faq:dirlayoutinstall`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:vigitmerge`. Miscellaneous; -------------. #. :ref:`faq:,MatchSource.DOCS,doc/sphinxman/source/build_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:3731,Testability,log,logging,3731,setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`faq:doconfigure`; #. :ref:`faq:cray`. Non-QC Dependencies; -------------------. #. :ref:`faq:coredepend`; #. :ref:`cmake:python`; #. :ref:`faq:libmwcondapy`; #. :ref:`cmake:lapack`; #. :ref:`cmake:cxx`; #. :ref:`faq:approvedcxx`; #. :ref:`faq:modgcc`; #. :ref:`faq:macxcode`; #. :ref:`cmake:fortran`; #. :ref:`faq:approvedfc`; #. :ref:`faq:macgfortran`. QC Dependencies and Extensions; ------------------------------. #. :ref:`faq:addondepend`; #. :ref:`faq:localaddon`; #. :ref:`cmake:chemps2`; #. :ref:`faq:chemps2gccflto`; #. :ref:`cmake:dkh`; #. :ref:`cmake:libefp`; #. :ref:`cmake:erd`; #. :ref:`cmake:gdma`; #. :ref:`cmake:libint`; #. :ref:`cmake:pcmsolver`. Testing ; -------. #. :ref:`faq:testsoutput`; #. :ref:`faq:subsettests`; #. :ref:`faq:minutetests`; #. :ref:`faq:pytest`. Runtime Setup; -------------. #. :ref:`faq:runordinaryexe`; #. :ref:`faq:runordinarymodule`; #. :ref:`faq:runfrombinary`; #. :ref:`faq:inplace`; #. :ref:`faq:psi4scratch`; #. :ref:`faq:psidatadir`; #. :ref:`faq:psi4psiapipath`; #. :ref:`faq:modulenotfounderror`. Running |PSIfour|; -----------------. #. :ref:`What command line options does Psi4 have <sec:commandLineOptions>`; #. :ref:`What environment variables affect Psi4 <sec:environmentVariables>`; #. :ref:`faq:runtimepython`; #. :ref:`faq:psi4version`; #. :ref:`faq:psi4PBS`; #. :ref:`faq:psi4fileretention`; #. :ref:`faq:logging`; #. :ref:`faq:findexemod`. Runtime Errors and Debugging; ----------------------------. #. :ref:`faq:gdblldb`; #. :ref:`faq:setuptype`; #. :ref:`faq:wrongpyfalse`. Managing Code; -------------. #. :ref:`faq:dirlayoutinstall`; #. :ref:`faq:githubworkflow`; #. :ref:`faq:vigitmerge`. Miscellaneous; -------------. #. :ref:`faq:writepsi4`; #. :ref:`faq:psi4logos`. .. #. :ref:`faq:getversion`; .. #. :ref:`faq:binarypackage`; .. #. :ref:`faq:getting-and-using-the-psi4dependencies-package`; .. #. :ref:`faq:erroreriam`. ,MatchSource.DOCS,doc/sphinxman/source/build_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst:1405,Usability,guid,guides,1405,"ify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. _`sec:buildrunfaq`:. ===============; Build & Run FAQ; ===============. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. Obtaining and Updating |PSIfour|; --------------------------------. #. :ref:`faq:obtainpsi4`; #. :ref:`faq:quiz`; #. :ref:`faq:binary`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public`; #. :ref:`faq:tarballpsi4public`; #. :ref:`faq:recompile`. .. #. :ref:`faq:psi3sourceforge`. Configuring and Installing |PSIfour| via Binary; -----------------------------------------------. #. :ref:`faq:psicodedownload`; #. :ref:`sec:psi4conda`; #. :ref:`faq:psi4pkg`; #. :ref:`faq:updatepsi4`; #. :ref:`faq:psi4deps`; #. :ref:`sec:condadetails`; #. :ref:`faq:condamaxameri`. Configuring, Building, and Installing |PSIfour| via Source; ----------------------------------------------------------. #. :ref:`faq:cmakeviasetup`; #. :ref:`faq:buildquick`; #. :ref:`faq:builddetailed`. #. :ref:`faq:setuphelp`; #. :ref:`faq:chooseobjdir`; #. :ref:`faq:setupprefix`; #. :ref:`faq:condapsi4dev`; #. :ref:`faq:setupmaxameri`; #. :ref:`faq:cmakeverbose`; #. :ref:`fa",MatchSource.DOCS,doc/sphinxman/source/build_faq.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_faq.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:1342,Availability,down,downloads,1342,"t and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. ===================; Obtaining |PSIfour|; ===================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good,",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:1618,Availability,avail,available,1618," MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. ===================; Obtaining |PSIfour|; ===================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm fami",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:2127,Availability,avail,available,2127,"; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy acce",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:4106,Availability,avail,available,4106,"ll``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run *and* develop in |PSIfour|. * In keeping with the open-source philosophy, I don't mind my code being; as public as Psi4 itself during the development process. |w---w|; :ref:`Goto Fork-from-GitHub <faq:forkpsi4public>`. * I want to develop *using* |PSIfour| infrastructure and libraries, not; *on* them; I think a plugin might do. * I've got a |PSIfour| compilation. Use it, then consult :ref:`plugins; <sec:newplugins>`. * I'd rather not compile |PSIfour| or I don't have compilers |w---w|; :ref:`Goto Binary-Package <faq:binarypackage>` then consult; :ref:`plugins through conda <sec:condaplugins>`. * I really like parentheses and/or DBOC, so I want Psi3. |w---w|; Psi3 is available from `sourceforge <https://sourceforge.net/projects/psicode/files/psi/3.4.0/>`_, but you're on your own. .. comment * I am a core |PSIfour| developer, yet I'm still taking this quiz.; .. comment ; .. comment * I have minions whose Psi4 development work I want to supervise through this repository instance. Preferably, [Goto Fork-from-GitHub](#forkpsi4public); otherwise [Goto Fork-from-GitHub-Private](#forkpsi4private); .. comment ; .. comment * Just give me a repository to commit to directly. Preferably, [Goto Clone-from-GitHub](#clonepsi4public); otherwise [Goto Clone-from-GitHub-Private](#clonepsi4private). .. _`faq:binary`:. Binary Installer; ----------------. * **Get Initially**. Just go to http://www.psicode.org/downloads.html, select ""Installer"",; ""Stable Release"", and your choice of architecture and Python version,; and follow the instructions there. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:4842,Availability,down,downloads,4842,"ins>`. * I'd rather not compile |PSIfour| or I don't have compilers |w---w|; :ref:`Goto Binary-Package <faq:binarypackage>` then consult; :ref:`plugins through conda <sec:condaplugins>`. * I really like parentheses and/or DBOC, so I want Psi3. |w---w|; Psi3 is available from `sourceforge <https://sourceforge.net/projects/psicode/files/psi/3.4.0/>`_, but you're on your own. .. comment * I am a core |PSIfour| developer, yet I'm still taking this quiz.; .. comment ; .. comment * I have minions whose Psi4 development work I want to supervise through this repository instance. Preferably, [Goto Fork-from-GitHub](#forkpsi4public); otherwise [Goto Fork-from-GitHub-Private](#forkpsi4private); .. comment ; .. comment * Just give me a repository to commit to directly. Preferably, [Goto Clone-from-GitHub](#clonepsi4public); otherwise [Goto Clone-from-GitHub-Private](#clonepsi4private). .. _`faq:binary`:. Binary Installer; ----------------. * **Get Initially**. Just go to http://www.psicode.org/downloads.html, select ""Installer"",; ""Stable Release"", and your choice of architecture and Python version,; and follow the instructions there. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4. * **Contribute Back**. Not applicable as not under git control. .. _`faq:binarypackage`:. Conda Binary Package; --------------------. * **Get Initially**. The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to :ref:`directions <faq:psi4pkg>`. Locally, install into; a conda environment as below. .. code-block:: bash. >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. .. code-block:: bash. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> co",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:8870,Availability,down,download,8870,"four| repository in your GitHub account. Locally, proceed to clone:. .. code-block:: bash. # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. `Set up a connection; <https://help.github.com/articles/configuring-a-remote-for-a-fork/>`_; between your forked repository and the parent repository. .. code-block:: bash. >>> git remote add upstream https://github.com/psi4/psi4.git. * **Build** :ref:`directions <faq:buildquick>`. * **Get Updates**. Locally, `update your fork; <https://help.github.com/articles/syncing-a-fork/>`_ from the parent; repository and store on GitHub at your fork. .. code-block:: bash. # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. * **Contribute Back**. |PSIfour| contributions process :ref:`here <faq:githubworkflow>` and; :source:`here <.github/CONTRIBUTING.md>`.; Consider `preparing your contribution in a branch; <http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/>`_; then issue a `GitHub pull request; <https://help.github.com/articles/creating-a-pull-request/>`_. .. _`faq:tarballpsi4public`:. Tarball from GitHub Repository; ------------------------------. * **Get Initially**. Discouraged! From the |PSIfour| repository at https://github.com/psi4/psi4, hit the; ""Clone or download"" then ""Download ZIP"" button. Locally, unpack as; below. .. code-block:: bash. >>> unzip psi4-master.zip; >>> cd psi4-master; # this is your {top-level-psi4-dir}. * **Build** :ref:`directions <faq:buildquick>`. * **Get Updates**. Download new tarball and rebuild. * **Contribute Back**. Not applicable as source not under git control. .. _`faq:githubworkflow`:. What is the suggested GitHub workflow; -------------------------------------. .. image:: /prflow.001.jpeg; .. image:: /prflow.002.jpeg; .. image:: /prflow.003.jpeg; ",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:1205,Deployability,install,install,1205,"iles.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. ===================; Obtaining |PSIfour|; ===================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Pyth",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:1271,Deployability,update,updated,1271,"iles.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. ===================; Obtaining |PSIfour|; ===================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Pyth",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:1359,Deployability,install,installs,1359,"t and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. ===================; Obtaining |PSIfour|; ===================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good,",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:1641,Deployability,install,installs,1641," MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. ===================; Obtaining |PSIfour|; ===================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm fami",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:2150,Deployability,install,installs,2150,"; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy acce",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:2800,Deployability,install,installer,2800,"y, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run *and* develop in |PSIfour|. * In keeping with the open-source philosophy, I don't mind my code being; as public as Psi4 itself during the development process. |w---w|; :ref:`Goto Fork-from-GitHub <faq:forkpsi4public>`. * I want to develop *using* |PSIfour| infrastructure and libraries, not; *on* them; I think a plugin might do. * I've got a |PSIfour| compilat",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:5123,Deployability,update,update,5123,"ourceforge <https://sourceforge.net/projects/psicode/files/psi/3.4.0/>`_, but you're on your own. .. comment * I am a core |PSIfour| developer, yet I'm still taking this quiz.; .. comment ; .. comment * I have minions whose Psi4 development work I want to supervise through this repository instance. Preferably, [Goto Fork-from-GitHub](#forkpsi4public); otherwise [Goto Fork-from-GitHub-Private](#forkpsi4private); .. comment ; .. comment * Just give me a repository to commit to directly. Preferably, [Goto Clone-from-GitHub](#clonepsi4public); otherwise [Goto Clone-from-GitHub-Private](#clonepsi4private). .. _`faq:binary`:. Binary Installer; ----------------. * **Get Initially**. Just go to http://www.psicode.org/downloads.html, select ""Installer"",; ""Stable Release"", and your choice of architecture and Python version,; and follow the instructions there. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4. * **Contribute Back**. Not applicable as not under git control. .. _`faq:binarypackage`:. Conda Binary Package; --------------------. * **Get Initially**. The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to :ref:`directions <faq:psi4pkg>`. Locally, install into; a conda environment as below. .. code-block:: bash. >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. .. code-block:: bash. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4 -c conda-forge. * **Contribute Back**. Not applicable as",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:5372,Deployability,install,installed,5372,"y instance. Preferably, [Goto Fork-from-GitHub](#forkpsi4public); otherwise [Goto Fork-from-GitHub-Private](#forkpsi4private); .. comment ; .. comment * Just give me a repository to commit to directly. Preferably, [Goto Clone-from-GitHub](#clonepsi4public); otherwise [Goto Clone-from-GitHub-Private](#clonepsi4private). .. _`faq:binary`:. Binary Installer; ----------------. * **Get Initially**. Just go to http://www.psicode.org/downloads.html, select ""Installer"",; ""Stable Release"", and your choice of architecture and Python version,; and follow the instructions there. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4. * **Contribute Back**. Not applicable as not under git control. .. _`faq:binarypackage`:. Conda Binary Package; --------------------. * **Get Initially**. The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to :ref:`directions <faq:psi4pkg>`. Locally, install into; a conda environment as below. .. code-block:: bash. >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. .. code-block:: bash. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4 -c conda-forge. * **Contribute Back**. Not applicable as not under git control. .. _`faq:clonepsi4public`:. Clone from GitHub Repository; ----------------------------. * **Get Initially**. The |PSIfour| repository at https://github.com/psi4/psi4 works like; `every other GitHub repo; <https://help.github.com/articles/which-remote-url-should-i-",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:5490,Deployability,install,install,5490,"Hub-Private](#forkpsi4private); .. comment ; .. comment * Just give me a repository to commit to directly. Preferably, [Goto Clone-from-GitHub](#clonepsi4public); otherwise [Goto Clone-from-GitHub-Private](#clonepsi4private). .. _`faq:binary`:. Binary Installer; ----------------. * **Get Initially**. Just go to http://www.psicode.org/downloads.html, select ""Installer"",; ""Stable Release"", and your choice of architecture and Python version,; and follow the instructions there. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4. * **Contribute Back**. Not applicable as not under git control. .. _`faq:binarypackage`:. Conda Binary Package; --------------------. * **Get Initially**. The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to :ref:`directions <faq:psi4pkg>`. Locally, install into; a conda environment as below. .. code-block:: bash. >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. .. code-block:: bash. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4 -c conda-forge. * **Contribute Back**. Not applicable as not under git control. .. _`faq:clonepsi4public`:. Clone from GitHub Repository; ----------------------------. * **Get Initially**. The |PSIfour| repository at https://github.com/psi4/psi4 works like; `every other GitHub repo; <https://help.github.com/articles/which-remote-url-should-i-use/>`_.; Locally, clone as below. .. code-block:: bash. # use https or ssh; >>> git clone http",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:5830,Deployability,release,release,5830,"ially**. Just go to http://www.psicode.org/downloads.html, select ""Installer"",; ""Stable Release"", and your choice of architecture and Python version,; and follow the instructions there. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4. * **Contribute Back**. Not applicable as not under git control. .. _`faq:binarypackage`:. Conda Binary Package; --------------------. * **Get Initially**. The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to :ref:`directions <faq:psi4pkg>`. Locally, install into; a conda environment as below. .. code-block:: bash. >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. .. code-block:: bash. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4 -c conda-forge. * **Contribute Back**. Not applicable as not under git control. .. _`faq:clonepsi4public`:. Clone from GitHub Repository; ----------------------------. * **Get Initially**. The |PSIfour| repository at https://github.com/psi4/psi4 works like; `every other GitHub repo; <https://help.github.com/articles/which-remote-url-should-i-use/>`_.; Locally, clone as below. .. code-block:: bash. # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. * **Build** :ref:`directions <faq:buildquick>`. * **Get Updates**. .. code-block:: bash. # on branch master; >>> git pull origin master. * **Contribute Back**. Contributions cannot be made directly to the main rep",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:6056,Deployability,update,update,6056,"ections <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4. * **Contribute Back**. Not applicable as not under git control. .. _`faq:binarypackage`:. Conda Binary Package; --------------------. * **Get Initially**. The pre-compiled conda packages at https://anaconda.org/conda-forge/psi4; can be installed into an existing Anaconda or Miniconda distribution; according to :ref:`directions <faq:psi4pkg>`. Locally, install into; a conda environment as below. .. code-block:: bash. >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> conda activate p4env. .. code-block:: bash. >>> # nightly build (Linux and Windows only); >>> conda create -n p4env psi4/label/dev::psi4 -c conda-forge/label/libint_dev -c conda-forge; >>> # release; >>> conda create -n p4env psi4 -c conda-forge/label/libint_dev -c conda-forge. * **Build**. Not applicable as binary is pre-built. * **Get Updates** :ref:`directions <faq:updatepsi4>`. .. code-block:: bash. >>> conda update psi4 -c conda-forge. * **Contribute Back**. Not applicable as not under git control. .. _`faq:clonepsi4public`:. Clone from GitHub Repository; ----------------------------. * **Get Initially**. The |PSIfour| repository at https://github.com/psi4/psi4 works like; `every other GitHub repo; <https://help.github.com/articles/which-remote-url-should-i-use/>`_.; Locally, clone as below. .. code-block:: bash. # use https or ssh; >>> git clone https://github.com/psi4/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. * **Build** :ref:`directions <faq:buildquick>`. * **Get Updates**. .. code-block:: bash. # on branch master; >>> git pull origin master. * **Contribute Back**. Contributions cannot be made directly to the main repository. :ref:`Fork; instead <faq:forkpsi4public>`. To convert clone to fork, go to https://github.com/psi4/psi4, and; hit the `Fork <https://help.github.com/articles/fork-a-repo/>`_; button to store a |PSIfour| repository in your GitHub account. .. code-block:: b",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:7948,Deployability,update,update,7948,"articles/fork-a-repo/>`_; button to store a |PSIfour| repository in your GitHub account. .. code-block:: bash. >>> git remote rename origin upstream; >>> git remote add origin https://github.com/johndoe/psi4.git. .. _`faq:forkpsi4public`:. Fork from GitHub Repository; ---------------------------. * **Get Initially**. Go to https://github.com/psi4/psi4, and hit the `Fork; <https://help.github.com/articles/fork-a-repo/>`_ button to store a; |PSIfour| repository in your GitHub account. Locally, proceed to clone:. .. code-block:: bash. # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. `Set up a connection; <https://help.github.com/articles/configuring-a-remote-for-a-fork/>`_; between your forked repository and the parent repository. .. code-block:: bash. >>> git remote add upstream https://github.com/psi4/psi4.git. * **Build** :ref:`directions <faq:buildquick>`. * **Get Updates**. Locally, `update your fork; <https://help.github.com/articles/syncing-a-fork/>`_ from the parent; repository and store on GitHub at your fork. .. code-block:: bash. # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. * **Contribute Back**. |PSIfour| contributions process :ref:`here <faq:githubworkflow>` and; :source:`here <.github/CONTRIBUTING.md>`.; Consider `preparing your contribution in a branch; <http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/>`_; then issue a `GitHub pull request; <https://help.github.com/articles/creating-a-pull-request/>`_. .. _`faq:tarballpsi4public`:. Tarball from GitHub Repository; ------------------------------. * **Get Initially**. Discouraged! From the |PSIfour| repository at https://github.com/psi4/psi4, hit the; ""Clone or download"" then ""Download ZIP"" button. Locally, unpack as; below. .. code-block:: bash. >>",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:3744,Modifiability,plugin,plugin,3744,"nda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run *and* develop in |PSIfour|. * In keeping with the open-source philosophy, I don't mind my code being; as public as Psi4 itself during the development process. |w---w|; :ref:`Goto Fork-from-GitHub <faq:forkpsi4public>`. * I want to develop *using* |PSIfour| infrastructure and libraries, not; *on* them; I think a plugin might do. * I've got a |PSIfour| compilation. Use it, then consult :ref:`plugins; <sec:newplugins>`. * I'd rather not compile |PSIfour| or I don't have compilers |w---w|; :ref:`Goto Binary-Package <faq:binarypackage>` then consult; :ref:`plugins through conda <sec:condaplugins>`. * I really like parentheses and/or DBOC, so I want Psi3. |w---w|; Psi3 is available from `sourceforge <https://sourceforge.net/projects/psicode/files/psi/3.4.0/>`_, but you're on your own. .. comment * I am a core |PSIfour| developer, yet I'm still taking this quiz.; .. comment ; .. comment * I have minions whose Psi4 development work I want to supervise through this repository instance. Preferably, [Goto Fork-from-GitHub](#forkpsi4public); otherwise [Goto Fork-from-GitHub-Private](#forkpsi4private); .. comment ; .. comment * Just give me a repository to commit to directly. Preferably, [Goto Clone-from-GitHub](#clonepsi4public); otherwise [Goto Clone-from-GitHub-Pr",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:3824,Modifiability,plugin,plugins,3824,":`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run *and* develop in |PSIfour|. * In keeping with the open-source philosophy, I don't mind my code being; as public as Psi4 itself during the development process. |w---w|; :ref:`Goto Fork-from-GitHub <faq:forkpsi4public>`. * I want to develop *using* |PSIfour| infrastructure and libraries, not; *on* them; I think a plugin might do. * I've got a |PSIfour| compilation. Use it, then consult :ref:`plugins; <sec:newplugins>`. * I'd rather not compile |PSIfour| or I don't have compilers |w---w|; :ref:`Goto Binary-Package <faq:binarypackage>` then consult; :ref:`plugins through conda <sec:condaplugins>`. * I really like parentheses and/or DBOC, so I want Psi3. |w---w|; Psi3 is available from `sourceforge <https://sourceforge.net/projects/psicode/files/psi/3.4.0/>`_, but you're on your own. .. comment * I am a core |PSIfour| developer, yet I'm still taking this quiz.; .. comment ; .. comment * I have minions whose Psi4 development work I want to supervise through this repository instance. Preferably, [Goto Fork-from-GitHub](#forkpsi4public); otherwise [Goto Fork-from-GitHub-Private](#forkpsi4private); .. comment ; .. comment * Just give me a repository to commit to directly. Preferably, [Goto Clone-from-GitHub](#clonepsi4public); otherwise [Goto Clone-from-GitHub-Private](#clonepsi4private). .. _`faq:binary`:. Binary Installer; ----------------. * **Get Initially**. Just go to http:",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:3989,Modifiability,plugin,plugins,3989,"ccept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run *and* develop in |PSIfour|. * In keeping with the open-source philosophy, I don't mind my code being; as public as Psi4 itself during the development process. |w---w|; :ref:`Goto Fork-from-GitHub <faq:forkpsi4public>`. * I want to develop *using* |PSIfour| infrastructure and libraries, not; *on* them; I think a plugin might do. * I've got a |PSIfour| compilation. Use it, then consult :ref:`plugins; <sec:newplugins>`. * I'd rather not compile |PSIfour| or I don't have compilers |w---w|; :ref:`Goto Binary-Package <faq:binarypackage>` then consult; :ref:`plugins through conda <sec:condaplugins>`. * I really like parentheses and/or DBOC, so I want Psi3. |w---w|; Psi3 is available from `sourceforge <https://sourceforge.net/projects/psicode/files/psi/3.4.0/>`_, but you're on your own. .. comment * I am a core |PSIfour| developer, yet I'm still taking this quiz.; .. comment ; .. comment * I have minions whose Psi4 development work I want to supervise through this repository instance. Preferably, [Goto Fork-from-GitHub](#forkpsi4public); otherwise [Goto Fork-from-GitHub-Private](#forkpsi4private); .. comment ; .. comment * Just give me a repository to commit to directly. Preferably, [Goto Clone-from-GitHub](#clonepsi4public); otherwise [Goto Clone-from-GitHub-Private](#clonepsi4private). .. _`faq:binary`:. Binary Installer; ----------------. * **Get Initially**. Just go to http://www.psicode.org/downloads.html, select ""Installer"",; ""Stable Release"", and your choice of architecture and Python v",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:7692,Modifiability,config,configuring-a-remote-for-a-fork,7692,"ribute Back**. Contributions cannot be made directly to the main repository. :ref:`Fork; instead <faq:forkpsi4public>`. To convert clone to fork, go to https://github.com/psi4/psi4, and; hit the `Fork <https://help.github.com/articles/fork-a-repo/>`_; button to store a |PSIfour| repository in your GitHub account. .. code-block:: bash. >>> git remote rename origin upstream; >>> git remote add origin https://github.com/johndoe/psi4.git. .. _`faq:forkpsi4public`:. Fork from GitHub Repository; ---------------------------. * **Get Initially**. Go to https://github.com/psi4/psi4, and hit the `Fork; <https://help.github.com/articles/fork-a-repo/>`_ button to store a; |PSIfour| repository in your GitHub account. Locally, proceed to clone:. .. code-block:: bash. # replace johndoe; # use https or ssh; >>> git clone https://github.com/johndoe/psi4.git; >>> cd psi4; # this is your {top-level-psi4-dir}. `Set up a connection; <https://help.github.com/articles/configuring-a-remote-for-a-fork/>`_; between your forked repository and the parent repository. .. code-block:: bash. >>> git remote add upstream https://github.com/psi4/psi4.git. * **Build** :ref:`directions <faq:buildquick>`. * **Get Updates**. Locally, `update your fork; <https://help.github.com/articles/syncing-a-fork/>`_ from the parent; repository and store on GitHub at your fork. .. code-block:: bash. # on branch working_branch; >>> git pull --rebase upstream master; >>> git push origin working_branch. Remember: Working in the master branch of a fork is considered bad practice. * **Contribute Back**. |PSIfour| contributions process :ref:`here <faq:githubworkflow>` and; :source:`here <.github/CONTRIBUTING.md>`.; Consider `preparing your contribution in a branch; <http://blog.jasonmeridth.com/posts/do-not-issue-pull-requests-from-your-master-branch/>`_; then issue a `GitHub pull request; <https://help.github.com/articles/creating-a-pull-request/>`_. .. _`faq:tarballpsi4public`:. Tarball from GitHub Repository; -----------",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:2402,Performance,optimiz,optimization,2402,"obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run ",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:2909,Performance,perform,performance,2909,"q:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run *and* develop in |PSIfour|. * In keeping with the open-source philosophy, I don't mind my code being; as public as Psi4 itself during the development process. |w---w|; :ref:`Goto Fork-from-GitHub <faq:forkpsi4public>`. * I want to develop *using* |PSIfour| infrastructure and libraries, not; *on* them; I think a plugin might do. * I've got a |PSIfour| compilation. Use it, then consult :ref:`plugins; <sec:newplugins>`. * I'd rather not compile |PSIfour| or I don't ha",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:2511,Safety,avoid,avoid,2511,"obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run ",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:3146,Security,access,access,3146,"t :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good, threaded BLAS/LAPACK, OpenMP parallelism,; and optimization for a variety of processor architectures, I'm willing to forgo; architecture tuning wizardry to avoid compiling it myself. * I'm on Linux or Mac (Intel or Silicon chips) or Windows (native or WSL/Ubuntu Bash Shell). * I'm familiar with conda and want to manage |PSIfour| as an; ordinary conda package. |w---w| :ref:`Goto Binary-Package; <faq:binarypackage>`. * I just want a |PSIfour| installer. |w---w| :ref:`Goto; Binary-Installer <faq:binary>`. * I want to compile it myself to eke out best performance on my; computer. I accept responsibility for navigating compiler, threading,; and BLAS/LAPACK compatibility. * I'm willing to have minimal dealings with git (e.g., commands ``git; clone`` and ``git pull``) in return for easy access in future to new; features and bug fixes. |w---w| :ref:`Goto Clone-from-GitHub; <faq:clonepsi4public>`. * I don't want to deal with this newfangled git, just give me a; tarball of the source code |w---w| :ref:`Goto Tarball-from-GitHub; <faq:tarballpsi4public>`. * I want to run *and* develop in |PSIfour|. * In keeping with the open-source philosophy, I don't mind my code being; as public as Psi4 itself during the development process. |w---w|; :ref:`Goto Fork-from-GitHub <faq:forkpsi4public>`. * I want to develop *using* |PSIfour| infrastructure and libraries, not; *on* them; I think a plugin might do. * I've got a |PSIfour| compilation. Use it, then consult :ref:`plugins; <sec:newplugins>`. * I'd rather not compile |PSIfour| or I don't have compilers |w---w|; :ref:`Goto Binary-Package <faq:binarypackage>` then consult; :ref:`plugins through conda <sec:condaplugins>`. * I really like parentheses and/or DBOC, so I want Psi3. |w---w|; Psi3 is available from `sourceforge <http",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst:1393,Usability,guid,guides,1393,"t and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. ===================; Obtaining |PSIfour|; ===================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. .. _`faq:obtainpsi4`:. How to obtain Psi4: start with find-the-code quiz, end in ``{top-level-psi4-dir}``; ----------------------------------------------------------------------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. Take a :ref:`quiz <faq:quiz>` to find the best version of the codebase for; your needs, be it binary, tarball, or version-controlled repository. Or,; select outright among:. #. :ref:`faq:binary`; #. :ref:`faq:binarypackage`; #. :ref:`faq:clonepsi4public`; #. :ref:`faq:forkpsi4public` (only path to develop |PSIfour|); #. :ref:`faq:tarballpsi4public`. .. _`faq:quiz`:. Find-the-code Quiz; ------------------. A better decision tree is available at :psicode:`installs/latest`,; though the below remains valid. * I just want to run the code. I may tweak the Python, but I'm not; developing anything to contribute back to the code base. * Provided I still get good,",MatchSource.DOCS,doc/sphinxman/source/build_obtaining.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_obtaining.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1567,Availability,down,downloads,1567,"HOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:2064,Availability,avail,available,2064,":installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:6894,Availability,down,download,6894,"u need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python interpreter and headers <cmake:python>` (3.8+) https://www.python.org/. * CMake (3.15+) https://cmake.org/download/. * NumPy (needed at runtime *and* buildtime) https://numpy.org/. * System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for |PSIfour|, but if not detected, the; build system will automatically download and build. * :ref:`gau2grid <cmake:gau2grid>` |w---w| :ref:`[what is gau2grid?] <sec:gau2grid>` :source:`[gau2grid min version] <external/upstream/gau2grid/CMakeLists.txt#L1>`. * :ref:`Libint <cmake:libint>` |w---w| :ref:`[what is Libint?] <sec:libint>` :source:`[Libint min version] <external/upstream/libint2/CMakeLists.txt#L1>` (Libint2 as of Nov 2020; added by v1.4). * Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; * Boost https://www.boost.org/ header-only preprocessor library. * :ref:`Libxc <cmake:libxc>` |w---w| :ref:`[what is Libxc?] <sec:libxc>` :source:`[Libxc min version] <external/upstream/libxc/CMakeLists.txt#L4>`. * pybind11 |w---w| `[what is Pybind11?] <https://pybind11.readthedocs.io/en/s",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:7163,Availability,down,download,7163,"--------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python interpreter and headers <cmake:python>` (3.8+) https://www.python.org/. * CMake (3.15+) https://cmake.org/download/. * NumPy (needed at runtime *and* buildtime) https://numpy.org/. * System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for |PSIfour|, but if not detected, the; build system will automatically download and build. * :ref:`gau2grid <cmake:gau2grid>` |w---w| :ref:`[what is gau2grid?] <sec:gau2grid>` :source:`[gau2grid min version] <external/upstream/gau2grid/CMakeLists.txt#L1>`. * :ref:`Libint <cmake:libint>` |w---w| :ref:`[what is Libint?] <sec:libint>` :source:`[Libint min version] <external/upstream/libint2/CMakeLists.txt#L1>` (Libint2 as of Nov 2020; added by v1.4). * Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; * Boost https://www.boost.org/ header-only preprocessor library. * :ref:`Libxc <cmake:libxc>` |w---w| :ref:`[what is Libxc?] <sec:libxc>` :source:`[Libxc min version] <external/upstream/libxc/CMakeLists.txt#L4>`. * pybind11 |w---w| `[what is Pybind11?] <https://pybind11.readthedocs.io/en/stable/>`_ :source:`[Pybind11 min version] <external/upstream/pybind11/CMakeLists.txt#L2>`. * QCElemental |w---w| `[what is QCElemental?] <https://molssi.github.io/QCElemental/>`_. * QCEngine |w---w| `[what is QCEngine?] <ht",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:8944,Availability,error,error,8944,"bind11 min version] <external/upstream/pybind11/CMakeLists.txt#L2>`. * QCElemental |w---w| `[what is QCElemental?] <https://molssi.github.io/QCElemental/>`_. * QCEngine |w---w| `[what is QCEngine?] <https://molssi.github.io/QCEngine/>`_ (March 2019; added by v1.4). * optking |w---w| `[what is optking] <https://optking.readthedocs.io/en/latest/>`_ (runtime dependency, required at build-time) . Additionally, there are runtime-only dependencies:. * msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * NumPy https://numpy.org/. * networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that m",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:9929,Availability,avail,available,9929,"n runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>`",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10008,Availability,down,download,10008,"y-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://suppo",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10215,Availability,avail,available,10215," deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://support.hdfgroup.org/HDF5/; * zlib http://www.zlib.net/. .. * :ref:`erd <cmake:erd>` |w---w| :ref:`[what is this?] <sec:erd>` `[min version] <https://github.com/psi4/psi4/blob/master/external/upstream/",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:14177,Availability,avail,available,14177," * OpenFermion-Psi4 |w---w| https://github.com/quantumlib/OpenFermion. * :ref:`cppe <sec:cppe>` |w---w| https://github.com/maxscheurer/cppe. * mp2d |w---w| https://github.com/Chandemonium/MP2D. * :ref:`FockCI <sec:fockci>` |w---w| https://github.com/shannonhouck/psi4fockci. * cct3 |w---w| https://github.com/piecuch-group/cct3. * :ref:`adcc <sec:adcc>` |w---w| https://github.com/adc-connect/adcc. * :ref:`BrianQC <sec:brianqc>` |w---w| https://www.brianqc.com/. * i-PI |w---w| http://ipi-code.org/. * psixas |w---w| https://github.com/Masterluke87/psixas. * MDI |w---w| https://github.com/MolSSI-MDI/MDI_Library. * :ref:`ddx <sec:ddx>` |w---w| https://github.com/ddsolvation/ddx. .. _`faq:condapsi4dev`:. How to use conda to get a Psi4 development environment; ------------------------------------------------------. |PSIfour| has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package ``psi4-dev`` is available to gather the dependencies; and build tools needed to compiler |PSIfour| from source. Go to; :psicode:`installs/latest`, select ""source"" and ""nightly build"" along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script ``psi4-path-advisor``. Running; ``psi4-path-advisor --help`` shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake's cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; :samp:`{objdir}`, you can build |PSIfour|. Remember to activate this; conda environment during |PSIfour| running or development. There are a; few extra options to ``psi4-path-advisor`` to set up using conda's GNU; compilers (on Linux), conda's Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda's GNU compilers (on Linux). .. code-block:: console. >>> git clone https://github.com/psi4/psi4.g",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:15055,Availability,reliab,reliably,15055,"-. |PSIfour| has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package ``psi4-dev`` is available to gather the dependencies; and build tools needed to compiler |PSIfour| from source. Go to; :psicode:`installs/latest`, select ""source"" and ""nightly build"" along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script ``psi4-path-advisor``. Running; ``psi4-path-advisor --help`` shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake's cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; :samp:`{objdir}`, you can build |PSIfour|. Remember to activate this; conda environment during |PSIfour| running or development. There are a; few extra options to ``psi4-path-advisor`` to set up using conda's GNU; compilers (on Linux), conda's Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda's GNU compilers (on Linux). .. code-block:: console. >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.8 -c psi4/label/dev; >>> conda activate p4dev; >>> `psi4-path-advisor --gcc`; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`. .. _`faq:setupmaxameri`:. How to configure code to use high angular momentum basis sets; -------------------------------------------------------------. The :ref:`Libint <sec:libint>` integral code handles; arbitrary order angular momentum (AM), but compiling that is; prohibitive. The build process for Libint2 takes longer than; for Libint1, so it's recommended to :ref:`use the conda packages; <faq:condamaxameri>`. The AM controlling keyword ``MAX_AM_ERI``; has definition changed a little from Libint1. It is used to ensure; that conventional energies can use at least ``MAX_AM_ERI`` zeta. See; :source:`/external/upstream",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:16189,Availability,down,download,16189,"e https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.8 -c psi4/label/dev; >>> conda activate p4dev; >>> `psi4-path-advisor --gcc`; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`. .. _`faq:setupmaxameri`:. How to configure code to use high angular momentum basis sets; -------------------------------------------------------------. The :ref:`Libint <sec:libint>` integral code handles; arbitrary order angular momentum (AM), but compiling that is; prohibitive. The build process for Libint2 takes longer than; for Libint1, so it's recommended to :ref:`use the conda packages; <faq:condamaxameri>`. The AM controlling keyword ``MAX_AM_ERI``; has definition changed a little from Libint1. It is used to ensure; that conventional energies can use at least ``MAX_AM_ERI`` zeta. See; :source:`/external/upstream/libint2/CMakeLists.txt` for a fuller; discussion of AM capabilities. Unless :makevar:`BUILD_Libint2_GENERATOR`; is set to ``ON``, an internal build of Libint2 will download a; pregenerated tarball of at least :makevar:`MAX_AM_ERI` AM. If you; want to build completely from generator source, turn on the keyword,; but parts can only run in serial and parts benefit from parallel, so; it's not recommended. All the AM generation settings would need to be; edited in the above ``CMakeLists.txt`` rather than passing them into; the |PSIfour| build directly. * Build with Higher Angular Momentum. .. code-block:: bash. >>> cmake -DMAX_AM_ERI=6. * Relevant CMake Options:. .. code-block:: bash. MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:18406,Availability,avail,available,18406,"d to a larger Libint, enter ``<objdir>``,; remove the result of ``make install`` (if ever invoked), remove; ``external/upstream/libint/``. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove ``stage/include/libint/``, ``stage/share/cmake/Libint/``,; ``stage/lib/libint2.so.2``. Edit MAX_AM_ERI; value in ``CMakeCache.txt``. Reinvoke ``make`` and check the number; beside ``Found Libint`` in the CMake output. Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can't compile above AM7, so you'll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum integrals from conda; -----------------------------------------------------. Libint2 conda packages are available from conda for Linux, Mac, and Windows. The Linux package has base ``MAX_AM_ERI=7`` and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted. The Mac and Windows packages have base ``MAX_AM_ERI=5`` and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted. Details about angular momentum settings are available here; :source:`external/upstream/libint2/CMakeLists.txt`; . .. Since February 2019, the |PSIfour| conda package on Linux has been the; .. large AM8. Likewise, this is the package you get upon ::; ..; .. conda install libint -c psi4; ..; .. There is no need for the extra ``am8`` argument previously documented here.; ..; .. On Mac, the Libint conda package itself and the Libint compiled into; .. the |PSIfour| conda package remain AM6.; ..; .. Beware this issue: https://github.com/psi4/psi4/issues/1533. .. _`faq:setuphelp`:. How to see what build configurati",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:18846,Availability,avail,available,18846," the CMake output. Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can't compile above AM7, so you'll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum integrals from conda; -----------------------------------------------------. Libint2 conda packages are available from conda for Linux, Mac, and Windows. The Linux package has base ``MAX_AM_ERI=7`` and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted. The Mac and Windows packages have base ``MAX_AM_ERI=5`` and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted. Details about angular momentum settings are available here; :source:`external/upstream/libint2/CMakeLists.txt`; . .. Since February 2019, the |PSIfour| conda package on Linux has been the; .. large AM8. Likewise, this is the package you get upon ::; ..; .. conda install libint -c psi4; ..; .. There is no need for the extra ``am8`` argument previously documented here.; ..; .. On Mac, the Libint conda package itself and the Libint compiled into; .. the |PSIfour| conda package remain AM6.; ..; .. Beware this issue: https://github.com/psi4/psi4/issues/1533. .. _`faq:setuphelp`:. How to see what build configuration options are available; ---------------------------------------------------------. CMake doesn't provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. .. literalinclude:: @SFNX_INCLUDE@CMakeLists.txt; :lines: 14-142; :language: none. Note that external projects will have their own sets of build; configur",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:19432,Availability,avail,available,19432," and Windows. The Linux package has base ``MAX_AM_ERI=7`` and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted. The Mac and Windows packages have base ``MAX_AM_ERI=5`` and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted. Details about angular momentum settings are available here; :source:`external/upstream/libint2/CMakeLists.txt`; . .. Since February 2019, the |PSIfour| conda package on Linux has been the; .. large AM8. Likewise, this is the package you get upon ::; ..; .. conda install libint -c psi4; ..; .. There is no need for the extra ``am8`` argument previously documented here.; ..; .. On Mac, the Libint conda package itself and the Libint compiled into; .. the |PSIfour| conda package remain AM6.; ..; .. Beware this issue: https://github.com/psi4/psi4/issues/1533. .. _`faq:setuphelp`:. How to see what build configuration options are available; ---------------------------------------------------------. CMake doesn't provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. .. literalinclude:: @SFNX_INCLUDE@CMakeLists.txt; :lines: 14-142; :language: none. Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. .. .. _`faq:setupd`:; .. ###<a name=""setupd""></a> How to set CMake and Preprocessor options through the ``setup`` script; .. ; .. CMake can always be invoked directly to build Psi4 [](see active cmake). But more often you have a working ``setup`` configuration and just need to convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:23245,Availability,error,erroreriam,23245,"ptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in Specific Directory; .. ; .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; -----------------------------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-psi4-dir}`. * ``cd {top-level-psi4-dir} && cmake -S. -Bobjdir``; * ``cd {top-level-psi4-dir} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmak",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:23277,Availability,error,error,23277,"------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in Specific Directory; .. ; .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; -----------------------------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-psi4-dir}`. * ``cd {top-level-psi4-dir} && cmake -S. -Bobjdir``; * ``cd {top-level-psi4-dir} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::.",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:31122,Availability,echo,echo,31122,"I_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:31641,Availability,redundant,redundant,31641,".....................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Mini",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:31876,Availability,redundant,redundant,31876,"s printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executa",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:32734,Availability,redundant,redundant,32734,"a activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilation using driver from source; ------------------------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from th",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:33834,Availability,avail,available,33834,"ecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilation using driver from source; ------------------------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available. ::. >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. .. _`faq:psidatadir`:. Why not to set :envvar:`PSIDATADIR`; -----------------------------------. :envvar:`PSIDATADIR` is an environment variable containing the location of the; text resource parts of the |PSIfour| codebase (*e.g.*, basis sets,; databases, EFP fragments). It is for developer use only. In |PSIfour| 1.1; and beyond, the program *always* knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in |PSIfour| 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory. At runtime. .. code-block:: bash. >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell. .. code-block:: tcsh.",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:40088,Availability,echo,echo,40088,"ilers for Mac without Fink, MacPorts, or Homebrew; -----------------------------------------------------------------------------. The easiest compiler to obtain is ``clang`` which is a drop-in replacement; for ``gcc`` and ``g++``. Just install `XCode; <https://apps.apple.com/us/app/xcode/id497799835>`_. Some old versions; of XCode can't handle some of the advanced C++ language features, but this; is a *software* not *hardware* limitation. Checks for version compliance; performed at build-time. Note that this ""AppleClang"" will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives. Another route to obtaining ``clang`` compilers without the above limitations; is through conda. .. code-block:: bash. # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. .. _`faq:modgcc`:. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; --------------------------------------------------------------------------. .. code-block:: bash. # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you're not using GCC as a compiler, your Intel compiler se",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:40181,Availability,echo,echo,40181,"est compiler to obtain is ``clang`` which is a drop-in replacement; for ``gcc`` and ``g++``. Just install `XCode; <https://apps.apple.com/us/app/xcode/id497799835>`_. Some old versions; of XCode can't handle some of the advanced C++ language features, but this; is a *software* not *hardware* limitation. Checks for version compliance; performed at build-time. Note that this ""AppleClang"" will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives. Another route to obtaining ``clang`` compilers without the above limitations; is through conda. .. code-block:: bash. # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. .. _`faq:modgcc`:. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; --------------------------------------------------------------------------. .. code-block:: bash. # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you're not using GCC as a compiler, your Intel compiler seeks; `gcc` to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:41630,Availability,echo,echo,41630,"++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. .. _`faq:modgcc`:. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; --------------------------------------------------------------------------. .. code-block:: bash. # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you're not using GCC as a compiler, your Intel compiler seeks; `gcc` to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager *or* install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below. .. code-block:: bash. # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. .. _`faq:cray`:. How to",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:41714,Availability,echo,echo,41714,"++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. .. _`faq:modgcc`:. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; --------------------------------------------------------------------------. .. code-block:: bash. # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you're not using GCC as a compiler, your Intel compiler seeks; `gcc` to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager *or* install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below. .. code-block:: bash. # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. .. _`faq:cray`:. How to",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:44697,Availability,down,download,44697,"e to specify name or full path to Fortran compiler.; * :makevar:`CMAKE_Fortran_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for Fortran source. **Examples**. A. Build with detected compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific (Intel) compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. .. _`faq:approvedfc`:. What Fortran compilers are approved; -----------------------------------. On Linux and Mac, the following work nicely. * GNU: ``gfortran``; * Intel: ``ifort``. * Packages to install for specific OS or package managers:. * Ubuntu ``gfortran``; * conda ``gfortran_linux-64`` or ``gfortran_osx-64`` to get ``gfortran``. .. _`faq:macgfortran`:. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; ----------------------------------------------------------------------------. Xcode does not provide a Fortran compiler. A way to get one is to download; the ``gfortran_osx-64`` conda package. This provides; ``gfortran`` compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. .. Xcode does not provide a Fortran compiler. Although a Fortran compiler is; .. not required for Psi4, a broken one can prevent correct configuration. Do; .. not download the latest version of GFortran from the HPC website; this is; .. unlikely to be compatible with your version of GCC. Instead, you should; .. run ``gcc -v`` to find out what version of GCC you're using, and then; .. download the corresponding GFortran from; .. <http://r.research.att.com/tools/>. If you configure Psi on a Mac without; .. any Fortran compiler it will set itself up correctly, so this is only; .. necessary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK con",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:45035,Availability,down,download,45035," >>> cmake -DCMAKE_Fortran_COMPILER=ifort. .. _`faq:approvedfc`:. What Fortran compilers are approved; -----------------------------------. On Linux and Mac, the following work nicely. * GNU: ``gfortran``; * Intel: ``ifort``. * Packages to install for specific OS or package managers:. * Ubuntu ``gfortran``; * conda ``gfortran_linux-64`` or ``gfortran_osx-64`` to get ``gfortran``. .. _`faq:macgfortran`:. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; ----------------------------------------------------------------------------. Xcode does not provide a Fortran compiler. A way to get one is to download; the ``gfortran_osx-64`` conda package. This provides; ``gfortran`` compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. .. Xcode does not provide a Fortran compiler. Although a Fortran compiler is; .. not required for Psi4, a broken one can prevent correct configuration. Do; .. not download the latest version of GFortran from the HPC website; this is; .. unlikely to be compatible with your version of GCC. Instead, you should; .. run ``gcc -v`` to find out what version of GCC you're using, and then; .. download the corresponding GFortran from; .. <http://r.research.att.com/tools/>. If you configure Psi on a Mac without; .. any Fortran compiler it will set itself up correctly, so this is only; .. necessary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATI",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:45259,Availability,down,download,45259,"l: ``ifort``. * Packages to install for specific OS or package managers:. * Ubuntu ``gfortran``; * conda ``gfortran_linux-64`` or ``gfortran_osx-64`` to get ``gfortran``. .. _`faq:macgfortran`:. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; ----------------------------------------------------------------------------. Xcode does not provide a Fortran compiler. A way to get one is to download; the ``gfortran_osx-64`` conda package. This provides; ``gfortran`` compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. .. Xcode does not provide a Fortran compiler. Although a Fortran compiler is; .. not required for Psi4, a broken one can prevent correct configuration. Do; .. not download the latest version of GFortran from the HPC website; this is; .. unlikely to be compatible with your version of GCC. Instead, you should; .. run ``gcc -v`` to find out what version of GCC you're using, and then; .. download the corresponding GFortran from; .. <http://r.research.att.com/tools/>. If you configure Psi on a Mac without; .. any Fortran compiler it will set itself up correctly, so this is only; .. necessary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:46750,Availability,error,error,46750,"code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* also present).; If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake. C. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. D. Build with Intel MKL. .. code-block:: bash. >>> source /path/to/intel/vers/linux/mkl",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:49423,Availability,avail,available,49423,""". H. Build with explicit non-MKL LAPACK. .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". I. Build with MKL and GCC (iomp5 needed instead of gomp for threading. use OpenMP_LIBRARY_DIRS to hint location.). .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=/opt/intel/mkl/lib/intel64/libmkl_rt.so -DLAPACK_INCLUDE_DIRS=/opt/intel/mkl/include -DOpenMP_LIBRARY_DIRS=/opt/intel/compiler/lib/intel64/. **Notes**. * Much of |PSIfours| speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:. * It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with t",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:49642,Availability,avail,available,49642,"OpenMP_LIBRARY_DIRS to hint location.). .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=/opt/intel/mkl/lib/intel64/libmkl_rt.so -DLAPACK_INCLUDE_DIRS=/opt/intel/mkl/include -DOpenMP_LIBRARY_DIRS=/opt/intel/compiler/lib/intel64/. **Notes**. * Much of |PSIfours| speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:. * It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50790,Availability,error,errors,50790,"; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would b",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50838,Availability,down,down,50838,"; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would b",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:54737,Availability,error,error,54737,"3.9"". .. _`faq:runtimepython`:. What Python is Psi4 running; ---------------------------. The Python detected at build-time is embedded into the |PSIfour|; executable. That is, the top line of ``bin/psi4`` is something like; ``#!/path/to/miniconda/envs/p4deps/bin/python3.5``, and that's the Python; through which |PSIfour| is running, rather than the Python of ``which python``.; To use a different Python with |PSIfour| in the short term, just; ``path/to/desired/python psi4`` on the command line to override the; shebang line. To use a different Python with |PSIfour| in the long term,; edit the shebang line. If you're using |PSIfour| as a Python module, then |PSIfour| *is* running; the Python of ``which python``. .. _`faq:wrongpyfalse`:. How to fix ""``undefined symbol: _Py_FalseStruct``""; --------------------------------------------------. You're probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the |PSIfour|; ""executable"", so you'll see this error only for Psi4 as Python module. .. _`faq:gdblldb`:. How to use ``gdb`` and ``lldb`` with Psi4; -----------------------------------------. Debugging |PSIfour| has gotten a little confusing now that it's running through Python. Here's the syntax ::. >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. ::. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. .. .. _`faq:valgrindpsi`:; .. ; .. How to use ``valgrind`` with Psi4; .. ---------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in t",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:55455,Availability,error,error,55455,"ning; the Python of ``which python``. .. _`faq:wrongpyfalse`:. How to fix ""``undefined symbol: _Py_FalseStruct``""; --------------------------------------------------. You're probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the |PSIfour|; ""executable"", so you'll see this error only for Psi4 as Python module. .. _`faq:gdblldb`:. How to use ``gdb`` and ``lldb`` with Psi4; -----------------------------------------. Debugging |PSIfour| has gotten a little confusing now that it's running through Python. Here's the syntax ::. >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. ::. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. .. .. _`faq:valgrindpsi`:; .. ; .. How to use ``valgrind`` with Psi4; .. ---------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in the way of suppression files. Calling Valgrind as:; .. ; .. ```bash; .. valgrind --suppressions=<file_name>; .. ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/share/psi4/scripts/valgrind-python.supp). This should remove all the python errors.; .. ; .. The other error, boost overflow error arises from ``src/lib/libmints/sieve.cc`` where the inverse; .. of the complementary error function is being called. The internet seems to claim that this is a; .. bug the arises only in debugging mode ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:55652,Availability,error,errors,55652,"un. A python of proper Py2 or Py3-ness is baked into the |PSIfour|; ""executable"", so you'll see this error only for Psi4 as Python module. .. _`faq:gdblldb`:. How to use ``gdb`` and ``lldb`` with Psi4; -----------------------------------------. Debugging |PSIfour| has gotten a little confusing now that it's running through Python. Here's the syntax ::. >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. ::. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. .. .. _`faq:valgrindpsi`:; .. ; .. How to use ``valgrind`` with Psi4; .. ---------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in the way of suppression files. Calling Valgrind as:; .. ; .. ```bash; .. valgrind --suppressions=<file_name>; .. ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/share/psi4/scripts/valgrind-python.supp). This should remove all the python errors.; .. ; .. The other error, boost overflow error arises from ``src/lib/libmints/sieve.cc`` where the inverse; .. of the complementary error function is being called. The internet seems to claim that this is a; .. bug the arises only in debugging mode and has something to do with the exponent boost chooses for; .. the default zero tolerance. Anyways, commenting out lines 47 to 49, for valgrind purposes, should; .. allow you to run valgrind. The consequence of commenting out these lines are you ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:56132,Availability,error,errors,56132,"gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. .. .. _`faq:valgrindpsi`:; .. ; .. How to use ``valgrind`` with Psi4; .. ---------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in the way of suppression files. Calling Valgrind as:; .. ; .. ```bash; .. valgrind --suppressions=<file_name>; .. ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/share/psi4/scripts/valgrind-python.supp). This should remove all the python errors.; .. ; .. The other error, boost overflow error arises from ``src/lib/libmints/sieve.cc`` where the inverse; .. of the complementary error function is being called. The internet seems to claim that this is a; .. bug the arises only in debugging mode and has something to do with the exponent boost chooses for; .. the default zero tolerance. Anyways, commenting out lines 47 to 49, for valgrind purposes, should; .. allow you to run valgrind. The consequence of commenting out these lines are you get no integeral; .. screening, so make sure you uncomment them when you actually run. .. _`faq:cmakeverbose`:. How to see the actual compiling commands (or errors) with ``cmake``; -------------------------------------------------------------------. CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue ``make VERBOSE=1`` to display the full; compilation commands and errors. .. _`faq:vigitmerge`:. How to highlight git merge conflict",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:56159,Availability,error,error,56159,">>> (gdb) run. .. .. _`faq:valgrindpsi`:; .. ; .. How to use ``valgrind`` with Psi4; .. ---------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in the way of suppression files. Calling Valgrind as:; .. ; .. ```bash; .. valgrind --suppressions=<file_name>; .. ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/share/psi4/scripts/valgrind-python.supp). This should remove all the python errors.; .. ; .. The other error, boost overflow error arises from ``src/lib/libmints/sieve.cc`` where the inverse; .. of the complementary error function is being called. The internet seems to claim that this is a; .. bug the arises only in debugging mode and has something to do with the exponent boost chooses for; .. the default zero tolerance. Anyways, commenting out lines 47 to 49, for valgrind purposes, should; .. allow you to run valgrind. The consequence of commenting out these lines are you get no integeral; .. screening, so make sure you uncomment them when you actually run. .. _`faq:cmakeverbose`:. How to see the actual compiling commands (or errors) with ``cmake``; -------------------------------------------------------------------. CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue ``make VERBOSE=1`` to display the full; compilation commands and errors. .. _`faq:vigitmerge`:. How to highlight git merge conflicts in ``vi``; ----------------------------------------------. Edit yo",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:56181,Availability,error,error,56181,">>> (gdb) run. .. .. _`faq:valgrindpsi`:; .. ; .. How to use ``valgrind`` with Psi4; .. ---------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in the way of suppression files. Calling Valgrind as:; .. ; .. ```bash; .. valgrind --suppressions=<file_name>; .. ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/share/psi4/scripts/valgrind-python.supp). This should remove all the python errors.; .. ; .. The other error, boost overflow error arises from ``src/lib/libmints/sieve.cc`` where the inverse; .. of the complementary error function is being called. The internet seems to claim that this is a; .. bug the arises only in debugging mode and has something to do with the exponent boost chooses for; .. the default zero tolerance. Anyways, commenting out lines 47 to 49, for valgrind purposes, should; .. allow you to run valgrind. The consequence of commenting out these lines are you get no integeral; .. screening, so make sure you uncomment them when you actually run. .. _`faq:cmakeverbose`:. How to see the actual compiling commands (or errors) with ``cmake``; -------------------------------------------------------------------. CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue ``make VERBOSE=1`` to display the full; compilation commands and errors. .. _`faq:vigitmerge`:. How to highlight git merge conflicts in ``vi``; ----------------------------------------------. Edit yo",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:56272,Availability,error,error,56272,"-------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in the way of suppression files. Calling Valgrind as:; .. ; .. ```bash; .. valgrind --suppressions=<file_name>; .. ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/share/psi4/scripts/valgrind-python.supp). This should remove all the python errors.; .. ; .. The other error, boost overflow error arises from ``src/lib/libmints/sieve.cc`` where the inverse; .. of the complementary error function is being called. The internet seems to claim that this is a; .. bug the arises only in debugging mode and has something to do with the exponent boost chooses for; .. the default zero tolerance. Anyways, commenting out lines 47 to 49, for valgrind purposes, should; .. allow you to run valgrind. The consequence of commenting out these lines are you get no integeral; .. screening, so make sure you uncomment them when you actually run. .. _`faq:cmakeverbose`:. How to see the actual compiling commands (or errors) with ``cmake``; -------------------------------------------------------------------. CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue ``make VERBOSE=1`` to display the full; compilation commands and errors. .. _`faq:vigitmerge`:. How to highlight git merge conflicts in ``vi``; ----------------------------------------------. Edit your ``~/.vimrc`` file to include the lines below. Hitting the ``F7``; key will toggle highli",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:56470,Availability,toler,tolerance,56470," happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in the way of suppression files. Calling Valgrind as:; .. ; .. ```bash; .. valgrind --suppressions=<file_name>; .. ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/share/psi4/scripts/valgrind-python.supp). This should remove all the python errors.; .. ; .. The other error, boost overflow error arises from ``src/lib/libmints/sieve.cc`` where the inverse; .. of the complementary error function is being called. The internet seems to claim that this is a; .. bug the arises only in debugging mode and has something to do with the exponent boost chooses for; .. the default zero tolerance. Anyways, commenting out lines 47 to 49, for valgrind purposes, should; .. allow you to run valgrind. The consequence of commenting out these lines are you get no integeral; .. screening, so make sure you uncomment them when you actually run. .. _`faq:cmakeverbose`:. How to see the actual compiling commands (or errors) with ``cmake``; -------------------------------------------------------------------. CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue ``make VERBOSE=1`` to display the full; compilation commands and errors. .. _`faq:vigitmerge`:. How to highlight git merge conflicts in ``vi``; ----------------------------------------------. Edit your ``~/.vimrc`` file to include the lines below. Hitting the ``F7``; key will toggle highlighting of git's conflict markers. .. code-block:: bash. >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. .. _`faq:libmwcondapy`:. How to handle ""runtime libra",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:56793,Availability,error,errors,56793,". ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/share/psi4/scripts/valgrind-python.supp). This should remove all the python errors.; .. ; .. The other error, boost overflow error arises from ``src/lib/libmints/sieve.cc`` where the inverse; .. of the complementary error function is being called. The internet seems to claim that this is a; .. bug the arises only in debugging mode and has something to do with the exponent boost chooses for; .. the default zero tolerance. Anyways, commenting out lines 47 to 49, for valgrind purposes, should; .. allow you to run valgrind. The consequence of commenting out these lines are you get no integeral; .. screening, so make sure you uncomment them when you actually run. .. _`faq:cmakeverbose`:. How to see the actual compiling commands (or errors) with ``cmake``; -------------------------------------------------------------------. CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue ``make VERBOSE=1`` to display the full; compilation commands and errors. .. _`faq:vigitmerge`:. How to highlight git merge conflicts in ``vi``; ----------------------------------------------. Edit your ``~/.vimrc`` file to include the lines below. Hitting the ``F7``; key will toggle highlighting of git's conflict markers. .. code-block:: bash. >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. .. _`faq:libmwcondapy`:. How to handle ""runtime library may be hidden"" when building with Anaconda Python; --------------------------------------------------------------------------------. When building against Ana/Miniconda python (e.g., ``cmake; -DPython_EXECUTABLE=/path/to/conda/bin/python``), the warning below often; appears. It is harmless, proceed. .. code-block:: bash. CMake Warning at src/bin",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:57052,Availability,error,errors,57052,"d-python.supp``](../blob/master/psi4/share/psi4/scripts/valgrind-python.supp). This should remove all the python errors.; .. ; .. The other error, boost overflow error arises from ``src/lib/libmints/sieve.cc`` where the inverse; .. of the complementary error function is being called. The internet seems to claim that this is a; .. bug the arises only in debugging mode and has something to do with the exponent boost chooses for; .. the default zero tolerance. Anyways, commenting out lines 47 to 49, for valgrind purposes, should; .. allow you to run valgrind. The consequence of commenting out these lines are you get no integeral; .. screening, so make sure you uncomment them when you actually run. .. _`faq:cmakeverbose`:. How to see the actual compiling commands (or errors) with ``cmake``; -------------------------------------------------------------------. CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue ``make VERBOSE=1`` to display the full; compilation commands and errors. .. _`faq:vigitmerge`:. How to highlight git merge conflicts in ``vi``; ----------------------------------------------. Edit your ``~/.vimrc`` file to include the lines below. Hitting the ``F7``; key will toggle highlighting of git's conflict markers. .. code-block:: bash. >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. .. _`faq:libmwcondapy`:. How to handle ""runtime library may be hidden"" when building with Anaconda Python; --------------------------------------------------------------------------------. When building against Ana/Miniconda python (e.g., ``cmake; -DPython_EXECUTABLE=/path/to/conda/bin/python``), the warning below often; appears. It is harmless, proceed. .. code-block:: bash. CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime libra",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62604,Availability,error,errors,62604,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62677,Availability,error,errors,62677,"`; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to b",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63670,Availability,avail,available,63670,"stsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64710,Availability,avail,available,64710,"ed number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. .. _`faq:writepsi4`:. How to refer to Psi4; --------------------. Ways to refer to |P",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1057,Deployability,install,installing,1057," open-source quantum chemistry software package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; perfo",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1078,Deployability,install,installFile,1078,"ware package; .. #; .. # Copyright (c) 2007-2023 The Psi4 Developers.; .. #; .. # The copyrights for code used from other parties are included in; .. # the corresponding files.; .. #; .. # This file is part of Psi4.; .. #; .. # Psi4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1329,Deployability,install,install,1329,"it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; -----------------------",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1395,Deployability,update,updated,1395,"it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; -----------------------",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1584,Deployability,install,installs,1584,"HOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1961,Deployability,install,installs,1961," Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`,",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:2123,Deployability,install,installs,2123,":installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:3635,Deployability,install,install,3635," possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Config",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:3791,Deployability,install,installing,3791,"; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:3951,Deployability,configurat,configuration,3951,"s happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Con",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4047,Deployability,install,install,4047,"s happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Con",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4106,Deployability,install,install,4106,"s happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Con",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4195,Deployability,install,install,4195,"cies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4575,Deployability,install,installation,4575,".. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutete",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4803,Deployability,install,installed,4803,"e main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> ma",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4898,Deployability,configurat,configuration,4898," >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4954,Deployability,configurat,configuration,4954," >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5311,Deployability,configurat,configuration,5311," ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5788,Deployability,install,install,5788,"y dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python i",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5822,Deployability,install,install,5822,":`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python interpreter and headers <cmake:p",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5881,Deployability,install,installation,5881,"ed configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python interpreter and headers <cmake:python>` (3.8+) https://www.python.org/. * CMake (3.15+) https://cmake.org/do",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:7006,Deployability,install,install,7006,"end`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python interpreter and headers <cmake:python>` (3.8+) https://www.python.org/. * CMake (3.15+) https://cmake.org/download/. * NumPy (needed at runtime *and* buildtime) https://numpy.org/. * System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for |PSIfour|, but if not detected, the; build system will automatically download and build. * :ref:`gau2grid <cmake:gau2grid>` |w---w| :ref:`[what is gau2grid?] <sec:gau2grid>` :source:`[gau2grid min version] <external/upstream/gau2grid/CMakeLists.txt#L1>`. * :ref:`Libint <cmake:libint>` |w---w| :ref:`[what is Libint?] <sec:libint>` :source:`[Libint min version] <external/upstream/libint2/CMakeLists.txt#L1>` (Libint2 as of Nov 2020; added by v1.4). * Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; * Boost https://www.boost.org/ header-only preprocessor library. * :ref:`Libxc <cmake:libxc>` |w---w| :ref:`[what is Libxc?] <sec:libxc>` :source:`[Libxc min version] <external/upstream/libxc/CMakeLists.txt#L4>`. * pybind11 |w---w| `[what is Pybind11?] <https://pybind11.readthedocs.io/en/stable/>`_ :source:`[Pybind11 min version] <external/upstream/pybind11/CMakeLists.txt#L2>`. * QCElemental |w---w| `[w",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10033,Deployability,install,installed,10033,"y-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://suppo",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10106,Deployability,install,installed,10106,"olo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://support.hdfgroup.org/HDF5/; * zlib http://www.zlib.net/. .. * :ref:`erd <cmake:erd>` |",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:14290,Deployability,install,installs,14290,"/maxscheurer/cppe. * mp2d |w---w| https://github.com/Chandemonium/MP2D. * :ref:`FockCI <sec:fockci>` |w---w| https://github.com/shannonhouck/psi4fockci. * cct3 |w---w| https://github.com/piecuch-group/cct3. * :ref:`adcc <sec:adcc>` |w---w| https://github.com/adc-connect/adcc. * :ref:`BrianQC <sec:brianqc>` |w---w| https://www.brianqc.com/. * i-PI |w---w| http://ipi-code.org/. * psixas |w---w| https://github.com/Masterluke87/psixas. * MDI |w---w| https://github.com/MolSSI-MDI/MDI_Library. * :ref:`ddx <sec:ddx>` |w---w| https://github.com/ddsolvation/ddx. .. _`faq:condapsi4dev`:. How to use conda to get a Psi4 development environment; ------------------------------------------------------. |PSIfour| has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package ``psi4-dev`` is available to gather the dependencies; and build tools needed to compiler |PSIfour| from source. Go to; :psicode:`installs/latest`, select ""source"" and ""nightly build"" along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script ``psi4-path-advisor``. Running; ``psi4-path-advisor --help`` shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake's cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; :samp:`{objdir}`, you can build |PSIfour|. Remember to activate this; conda environment during |PSIfour| running or development. There are a; few extra options to ``psi4-path-advisor`` to set up using conda's GNU; compilers (on Linux), conda's Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda's GNU compilers (on Linux). .. code-block:: console. >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.8 -c psi4/label/dev; >>> conda activate p4dev; >>> `psi4-path-a",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:17273,Deployability,install,install,17273,"or source, turn on the keyword,; but parts can only run in serial and parts benefit from parallel, so; it's not recommended. All the AM generation settings would need to be; edited in the above ``CMakeLists.txt`` rather than passing them into; the |PSIfour| build directly. * Build with Higher Angular Momentum. .. code-block:: bash. >>> cmake -DMAX_AM_ERI=6. * Relevant CMake Options:. .. code-block:: bash. MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since |PSIfour| 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all |PSIfour| builds detect that installation at compile-time. To switch a finished build to a larger Libint, enter ``<objdir>``,; remove the result of ``make install`` (if ever invoked), remove; ``external/upstream/libint/``. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove ``stage/include/libint/``, ``stage/share/cmake/Libint/``,; ``stage/lib/libint2.so.2``. Edit MAX_AM_ERI; value in ``CMakeCache.txt``. Reinvoke ``make`` and check the number; beside ``Found Libint`` in the CMake output. Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can't compile above AM7, so you'll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum int",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:17361,Deployability,install,installation,17361,"or source, turn on the keyword,; but parts can only run in serial and parts benefit from parallel, so; it's not recommended. All the AM generation settings would need to be; edited in the above ``CMakeLists.txt`` rather than passing them into; the |PSIfour| build directly. * Build with Higher Angular Momentum. .. code-block:: bash. >>> cmake -DMAX_AM_ERI=6. * Relevant CMake Options:. .. code-block:: bash. MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since |PSIfour| 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all |PSIfour| builds detect that installation at compile-time. To switch a finished build to a larger Libint, enter ``<objdir>``,; remove the result of ``make install`` (if ever invoked), remove; ``external/upstream/libint/``. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove ``stage/include/libint/``, ``stage/share/cmake/Libint/``,; ``stage/lib/libint2.so.2``. Edit MAX_AM_ERI; value in ``CMakeCache.txt``. Reinvoke ``make`` and check the number; beside ``Found Libint`` in the CMake output. Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can't compile above AM7, so you'll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum int",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:17487,Deployability,install,install,17487,"to be; edited in the above ``CMakeLists.txt`` rather than passing them into; the |PSIfour| build directly. * Build with Higher Angular Momentum. .. code-block:: bash. >>> cmake -DMAX_AM_ERI=6. * Relevant CMake Options:. .. code-block:: bash. MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since |PSIfour| 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all |PSIfour| builds detect that installation at compile-time. To switch a finished build to a larger Libint, enter ``<objdir>``,; remove the result of ``make install`` (if ever invoked), remove; ``external/upstream/libint/``. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove ``stage/include/libint/``, ``stage/share/cmake/Libint/``,; ``stage/lib/libint2.so.2``. Edit MAX_AM_ERI; value in ``CMakeCache.txt``. Reinvoke ``make`` and check the number; beside ``Found Libint`` in the CMake output. Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can't compile above AM7, so you'll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum integrals from conda; -----------------------------------------------------. Libint2 conda packages are available from conda for Linux, Mac, and Windows. The Linux packag",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:17632,Deployability,install,installation,17632,"make -DMAX_AM_ERI=6. * Relevant CMake Options:. .. code-block:: bash. MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since |PSIfour| 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all |PSIfour| builds detect that installation at compile-time. To switch a finished build to a larger Libint, enter ``<objdir>``,; remove the result of ``make install`` (if ever invoked), remove; ``external/upstream/libint/``. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove ``stage/include/libint/``, ``stage/share/cmake/Libint/``,; ``stage/lib/libint2.so.2``. Edit MAX_AM_ERI; value in ``CMakeCache.txt``. Reinvoke ``make`` and check the number; beside ``Found Libint`` in the CMake output. Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can't compile above AM7, so you'll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum integrals from conda; -----------------------------------------------------. Libint2 conda packages are available from conda for Linux, Mac, and Windows. The Linux package has base ``MAX_AM_ERI=7`` and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fi",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:19065,Deployability,install,install,19065,"ower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum integrals from conda; -----------------------------------------------------. Libint2 conda packages are available from conda for Linux, Mac, and Windows. The Linux package has base ``MAX_AM_ERI=7`` and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted. The Mac and Windows packages have base ``MAX_AM_ERI=5`` and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted. Details about angular momentum settings are available here; :source:`external/upstream/libint2/CMakeLists.txt`; . .. Since February 2019, the |PSIfour| conda package on Linux has been the; .. large AM8. Likewise, this is the package you get upon ::; ..; .. conda install libint -c psi4; ..; .. There is no need for the extra ``am8`` argument previously documented here.; ..; .. On Mac, the Libint conda package itself and the Libint compiled into; .. the |PSIfour| conda package remain AM6.; ..; .. Beware this issue: https://github.com/psi4/psi4/issues/1533. .. _`faq:setuphelp`:. How to see what build configuration options are available; ---------------------------------------------------------. CMake doesn't provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. .. literalinclude:: @SFNX_INCLUDE@CMakeLists.txt; :lines: 14-142; :language: none. Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. .. .. _`faq:setupd`:; .. ###<a name=""setupd""></a> How to set CMake and Preprocessor options through the ``setup`` script; .. ; .. CMake can a",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:19406,Deployability,configurat,configuration,19406," and Windows. The Linux package has base ``MAX_AM_ERI=7`` and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted. The Mac and Windows packages have base ``MAX_AM_ERI=5`` and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted. Details about angular momentum settings are available here; :source:`external/upstream/libint2/CMakeLists.txt`; . .. Since February 2019, the |PSIfour| conda package on Linux has been the; .. large AM8. Likewise, this is the package you get upon ::; ..; .. conda install libint -c psi4; ..; .. There is no need for the extra ``am8`` argument previously documented here.; ..; .. On Mac, the Libint conda package itself and the Libint compiled into; .. the |PSIfour| conda package remain AM6.; ..; .. Beware this issue: https://github.com/psi4/psi4/issues/1533. .. _`faq:setuphelp`:. How to see what build configuration options are available; ---------------------------------------------------------. CMake doesn't provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. .. literalinclude:: @SFNX_INCLUDE@CMakeLists.txt; :lines: 14-142; :language: none. Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. .. .. _`faq:setupd`:; .. ###<a name=""setupd""></a> How to set CMake and Preprocessor options through the ``setup`` script; .. ; .. CMake can always be invoked directly to build Psi4 [](see active cmake). But more often you have a working ``setup`` configuration and just need to convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:19847,Deployability,configurat,configuration,19847,"mentum settings are available here; :source:`external/upstream/libint2/CMakeLists.txt`; . .. Since February 2019, the |PSIfour| conda package on Linux has been the; .. large AM8. Likewise, this is the package you get upon ::; ..; .. conda install libint -c psi4; ..; .. There is no need for the extra ``am8`` argument previously documented here.; ..; .. On Mac, the Libint conda package itself and the Libint compiled into; .. the |PSIfour| conda package remain AM6.; ..; .. Beware this issue: https://github.com/psi4/psi4/issues/1533. .. _`faq:setuphelp`:. How to see what build configuration options are available; ---------------------------------------------------------. CMake doesn't provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. .. literalinclude:: @SFNX_INCLUDE@CMakeLists.txt; :lines: 14-142; :language: none. Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. .. .. _`faq:setupd`:; .. ###<a name=""setupd""></a> How to set CMake and Preprocessor options through the ``setup`` script; .. ; .. CMake can always be invoked directly to build Psi4 [](see active cmake). But more often you have a working ``setup`` configuration and just need to convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. -D STRING forward directly to cmake (example: -D ENABLE_THIS=1; .. -D ENABLE_THAT=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:20180,Deployability,configurat,configuration,20180,"t conda package itself and the Libint compiled into; .. the |PSIfour| conda package remain AM6.; ..; .. Beware this issue: https://github.com/psi4/psi4/issues/1533. .. _`faq:setuphelp`:. How to see what build configuration options are available; ---------------------------------------------------------. CMake doesn't provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. .. literalinclude:: @SFNX_INCLUDE@CMakeLists.txt; :lines: 14-142; :language: none. Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. .. .. _`faq:setupd`:; .. ###<a name=""setupd""></a> How to set CMake and Preprocessor options through the ``setup`` script; .. ; .. CMake can always be invoked directly to build Psi4 [](see active cmake). But more often you have a working ``setup`` configuration and just need to convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. -D STRING forward directly to cmake (example: -D ENABLE_THIS=1; .. -D ENABLE_THAT=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installati",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:20876,Deployability,install,install,20876,"ed above. .. .. _`faq:setupd`:; .. ###<a name=""setupd""></a> How to set CMake and Preprocessor options through the ``setup`` script; .. ; .. CMake can always be invoked directly to build Psi4 [](see active cmake). But more often you have a working ``setup`` configuration and just need to convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. -D STRING forward directly to cmake (example: -D ENABLE_THIS=1; .. -D ENABLE_THAT=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable ``CMAKE_INSTALL_PREFIX``; before compiling. * Build with Specific Install Directory. .. code-block:: bash. cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:20983,Deployability,install,installation,20983,"t; .. ; .. CMake can always be invoked directly to build Psi4 [](see active cmake). But more often you have a working ``setup`` configuration and just need to convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. -D STRING forward directly to cmake (example: -D ENABLE_THIS=1; .. -D ENABLE_THAT=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable ``CMAKE_INSTALL_PREFIX``; before compiling. * Build with Specific Install Directory. .. code-block:: bash. cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:21187,Deployability,install,installation,21187,"o convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. -D STRING forward directly to cmake (example: -D ENABLE_THIS=1; .. -D ENABLE_THAT=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable ``CMAKE_INSTALL_PREFIX``; before compiling. * Build with Specific Install Directory. .. code-block:: bash. cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:21548,Deployability,install,installed,21548,"T=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable ``CMAKE_INSTALL_PREFIX``; before compiling. * Build with Specific Install Directory. .. code-block:: bash. cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:21649,Deployability,install,install,21649,"##### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable ``CMAKE_INSTALL_PREFIX``; before compiling. * Build with Specific Install Directory. .. code-block:: bash. cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:22134,Deployability,release,release,22134,"strative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable ``CMAKE_INSTALL_PREFIX``; before compiling. * Build with Specific Install Directory. .. code-block:: bash. cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in S",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:22695,Deployability,release,release,22695,"ion *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in Specific Directory; .. ; .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; ---------------------------------",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:22778,Deployability,release,release,22778,"}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in Specific Directory; .. ; .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; -----------------------------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:22830,Deployability,release,release,22830,"}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in Specific Directory; .. ; .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; -----------------------------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24088,Deployability,configurat,configuration,24088," .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; -----------------------------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-psi4-dir}`. * ``cd {top-level-psi4-dir} && cmake -S. -Bobjdir``; * ``cd {top-level-psi4-dir} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24450,Deployability,install,install-libint,24450,"t`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; -----------------------------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-psi4-dir}`. * ``cd {top-level-psi4-dir} && cmake -S. -Bobjdir``; * ``cd {top-level-psi4-dir} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library head",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24644,Deployability,install,installed,24644,"---------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-psi4-dir}`. * ``cd {top-level-psi4-dir} && cmake -S. -Bobjdir``; * ``cd {top-level-psi4-dir} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/in",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24903,Deployability,install,installation,24903,"r} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plu",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24923,Deployability,install,installation,24923,"wed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input f",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24972,Deployability,install,install,24972,"wed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input f",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:25070,Deployability,install,installation,25070,"gure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordin",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:25223,Deployability,install,installed,25223,"onfigure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); l",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:25601,Deployability,install,installed,25601,"ARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; s",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:25667,Deployability,install,install,25667,"-----------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; :ref:`running compiled executable <faq:runordinaryexe>`,; :ref:`running compiled Python module <faq:runordinarymodule>`,; :ref:`running conda binary",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:27040,Deployability,install,installation,27040,"e, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; :ref:`running compiled executable <faq:runordinaryexe>`,; :ref:`running compiled Python module <faq:runordinarymodule>`,; :ref:`running conda binary <faq:runfrombinary>`. * :envvar:`PATH` pointing to ``bin``; * :envvar:`PYTHONPATH` pointing to ``lib`` (ordinary) or ``lib/pythonX.X/site-packages`` (conda); * :envvar:`PSIDATADIR` pointing to ``share/psi4``. .. _`faq:runordinaryexe`:. How to run Psi4 as executable after compilation; -----------------------------------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run |PSIfour|. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. .. _`faq:modulenotfounderror`:. How to solve ``ModuleNotFoundError: No module named 'psi4'``; ----------------------------",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:27248,Deployability,install,installation,27248,"); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; :ref:`running compiled executable <faq:runordinaryexe>`,; :ref:`running compiled Python module <faq:runordinarymodule>`,; :ref:`running conda binary <faq:runfrombinary>`. * :envvar:`PATH` pointing to ``bin``; * :envvar:`PYTHONPATH` pointing to ``lib`` (ordinary) or ``lib/pythonX.X/site-packages`` (conda); * :envvar:`PSIDATADIR` pointing to ``share/psi4``. .. _`faq:runordinaryexe`:. How to run Psi4 as executable after compilation; -----------------------------------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run |PSIfour|. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. .. _`faq:modulenotfounderror`:. How to solve ``ModuleNotFoundError: No module named 'psi4'``; ------------------------------------------------------------. You're using |PSIfour| in PsiAPI mode (``python input.py`` where; ``input.py`` contains ``import psi4``) but the Python in",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:29469,Deployability,install,installation,29469," Psithon mode and want to know the corresponding location to add to; :envvar:`PYTHONPATH` for PsiAPI mode, execute ``psi4 --psiapi``. It; will return bash commands to set :envvar:`PATH` (for correct python; interpreter) and :envvar:`PYTHONPATH` (to find psi4 module) correctly,; after which ``import psi4`` will work. .. code-block:: bash. >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". >>> python -c ""import psi4;print(psi4.__file__, psi4.__version__)"". .. _`faq:runordinarymodule`:. How to run Psi4 as Python module after compilation; --------------------------------------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombi",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:29677,Deployability,install,installation,29677,"commands to set :envvar:`PATH` (for correct python; interpreter) and :envvar:`PYTHONPATH` (to find psi4 module) correctly,; after which ``import psi4`` will work. .. code-block:: bash. >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". >>> python -c ""import psi4;print(psi4.__file__, psi4.__version__)"". .. _`faq:runordinarymodule`:. How to run Psi4 as Python module after compilation; --------------------------------------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:30618,Deployability,install,installation,30618,"le and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:30708,Deployability,configurat,configuration,30708,"shrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:30809,Deployability,install,installing,30809,"shrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:30970,Deployability,install,installation,30970,": bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; sete",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:31336,Deployability,install,installed,31336,".....................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Mini",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:31376,Deployability,install,installed,31376,".....................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Mini",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:31659,Deployability,install,installed,31659,"s printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executa",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:32360,Deployability,install,installed,32360," |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilati",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:32400,Deployability,install,installed,32400," |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilati",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:34553,Deployability,install,installed,34553,"un ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available. ::. >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. .. _`faq:psidatadir`:. Why not to set :envvar:`PSIDATADIR`; -----------------------------------. :envvar:`PSIDATADIR` is an environment variable containing the location of the; text resource parts of the |PSIfour| codebase (*e.g.*, basis sets,; databases, EFP fragments). It is for developer use only. In |PSIfour| 1.1; and beyond, the program *always* knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in |PSIfour| 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory. At runtime. .. code-block:: bash. >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. .. _`cmake:cxx`:. How to configure C++ and C compilers for building Psi4; ------------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a C++ compiler is vital for building the code. * Downstream Dependencies |w---w| |PSIfour| |dr| C++ Compiler. **CMake Variables**. * :makevar:`CMAKE_CXX_COMPILER` |w---w| CMake variable to specify name or full path to C++ compiler.; * :makevar:`CMAKE_C_COMPILER` |w---w| CMake variable to specify name or full path to C compiler.; * :makevar:`CMAKE_CXX_F",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:39289,Deployability,install,install,39289,"ork nicely. * GNU: ``gcc``, ``g++``; * Intel: ``icc``, ``icpc``; * Clang: ``clang``, ``clang++``. On Mac, the following work nicely. * Apple Clang: ``clang``, ``clang++``; * Intel: ``icc``, ``icpc``. |PSIfour| requires *full* C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; :source:`cmake/custom_cxxstandard.cmake`, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both ``icpc`` and ``gcc`` versions are checked.; Intel OneAPI Classic compilers work fine. OneAPI beta compilers build but have; been only minimally tested. * :ref:`faq:modgcc`. .. _`faq:macxcode`:. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; -----------------------------------------------------------------------------. The easiest compiler to obtain is ``clang`` which is a drop-in replacement; for ``gcc`` and ``g++``. Just install `XCode; <https://apps.apple.com/us/app/xcode/id497799835>`_. Some old versions; of XCode can't handle some of the advanced C++ language features, but this; is a *software* not *hardware* limitation. Checks for version compliance; performed at build-time. Note that this ""AppleClang"" will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives. Another route to obtaining ``clang`` compilers without the above limitations; is through conda. .. code-block:: bash. # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DC",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:41170,Deployability,update,update,41170,"pple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. .. _`faq:modgcc`:. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; --------------------------------------------------------------------------. .. code-block:: bash. # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you're not using GCC as a compiler, your Intel compiler seeks; `gcc` to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager *or* install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below. .. code-block:: bash. # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:41228,Deployability,install,install,41228,"pple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. .. _`faq:modgcc`:. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; --------------------------------------------------------------------------. .. code-block:: bash. # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you're not using GCC as a compiler, your Intel compiler seeks; `gcc` to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager *or* install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below. .. code-block:: bash. # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:44308,Deployability,install,install,44308,"-----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a Fortran compiler in unneeded for core; features but may be required for add-ons. * Downstream Dependencies. * |PSIfour| (\ |dr| optional) Fortran Compiler; * erd, dkh, gdma, PCMSolver |dr| Fortran Compiler. **CMake Variables**. * :makevar:`CMAKE_Fortran_COMPILER` |w---w| CMake variable to specify name or full path to Fortran compiler.; * :makevar:`CMAKE_Fortran_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for Fortran source. **Examples**. A. Build with detected compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific (Intel) compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. .. _`faq:approvedfc`:. What Fortran compilers are approved; -----------------------------------. On Linux and Mac, the following work nicely. * GNU: ``gfortran``; * Intel: ``ifort``. * Packages to install for specific OS or package managers:. * Ubuntu ``gfortran``; * conda ``gfortran_linux-64`` or ``gfortran_osx-64`` to get ``gfortran``. .. _`faq:macgfortran`:. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; ----------------------------------------------------------------------------. Xcode does not provide a Fortran compiler. A way to get one is to download; the ``gfortran_osx-64`` conda package. This provides; ``gfortran`` compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. .. Xcode does not provide a Fortran compiler. Although a Fortran compiler is; .. not required for Psi4, a broken one can prevent correct configuration. Do; .. not download the latest version of GFortran from the HPC website; this is; .. unlikely to be compatible with your version of GCC. Instead, you should; .. run ``gcc -v`` to find out what version of GCC you're using, and then; .. download the corresponding GFortran from; .. <http://r.research.",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:45009,Deployability,configurat,configuration,45009,". Build with specific (Intel) compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. .. _`faq:approvedfc`:. What Fortran compilers are approved; -----------------------------------. On Linux and Mac, the following work nicely. * GNU: ``gfortran``; * Intel: ``ifort``. * Packages to install for specific OS or package managers:. * Ubuntu ``gfortran``; * conda ``gfortran_linux-64`` or ``gfortran_osx-64`` to get ``gfortran``. .. _`faq:macgfortran`:. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; ----------------------------------------------------------------------------. Xcode does not provide a Fortran compiler. A way to get one is to download; the ``gfortran_osx-64`` conda package. This provides; ``gfortran`` compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. .. Xcode does not provide a Fortran compiler. Although a Fortran compiler is; .. not required for Psi4, a broken one can prevent correct configuration. Do; .. not download the latest version of GFortran from the HPC website; this is; .. unlikely to be compatible with your version of GCC. Instead, you should; .. run ``gcc -v`` to find out what version of GCC you're using, and then; .. download the corresponding GFortran from; .. <http://r.research.att.com/tools/>. If you configure Psi on a Mac without; .. any Fortran compiler it will set itself up correctly, so this is only; .. necessary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:47937,Deployability,install,install,47937,"OT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* also present).; If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake. C. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. D. Build with Intel MKL. .. code-block:: bash. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. .. code-block:: bash. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. E. Build with Intel MKL from conda (install ``mkl-devel`` package from defaults channel). .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". F. OpenBLAS - see note below. .. code-block:: bash. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. G. Build with explicit MKL LAPACK. .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". H. Build with explicit non-MKL LAPACK. .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". I. Build with MKL and GCC (iomp5 needed instead of gomp for threading. use OpenMP_LIBRARY_DIRS to hint location.). .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=/opt/intel/mkl/lib/intel64/libmkl_rt.so -DLAPACK_INCLUDE_DIRS=/opt/intel/mkl/include -DOpenMP_LIBRARY_DIRS=/opt/intel/compiler/lib/intel64/. **Notes**. * Much of |PSIfours| sp",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:57264,Deployability,toggle,toggle,57264,"error function is being called. The internet seems to claim that this is a; .. bug the arises only in debugging mode and has something to do with the exponent boost chooses for; .. the default zero tolerance. Anyways, commenting out lines 47 to 49, for valgrind purposes, should; .. allow you to run valgrind. The consequence of commenting out these lines are you get no integeral; .. screening, so make sure you uncomment them when you actually run. .. _`faq:cmakeverbose`:. How to see the actual compiling commands (or errors) with ``cmake``; -------------------------------------------------------------------. CMake by default hides a lot of useful debugging information to make the; compilation cleaner. Issue ``make VERBOSE=1`` to display the full; compilation commands and errors. .. _`faq:vigitmerge`:. How to highlight git merge conflicts in ``vi``; ----------------------------------------------. Edit your ``~/.vimrc`` file to include the lines below. Hitting the ``F7``; key will toggle highlighting of git's conflict markers. .. code-block:: bash. >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. .. _`faq:libmwcondapy`:. How to handle ""runtime library may be hidden"" when building with Anaconda Python; --------------------------------------------------------------------------------. When building against Ana/Miniconda python (e.g., ``cmake; -DPython_EXECUTABLE=/path/to/conda/bin/python``), the warning below often; appears. It is harmless, proceed. .. code-block:: bash. CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. .. _`faq:psi4scratch`:. How to set up the scratch directory; -----------------------------------. The ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:59693,Deployability,update,update,59693,". code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general :ref:`scratch documentation <sec:Scratch>`. .. _`faq:psi4fileretention`:. How do I retain specific Psi4 scratch files; -------------------------------------------. You can set up a specific path for |PSIfour| scratch file and keep them; for later use through the :ref:`psi4_io <sec:Scratch>` handler. .. _`faq:psi4PBS`:. How to use Psi4 within a PBS queue; ----------------------------------. You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pyte",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:59762,Deployability,update,updates,59762,"le (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general :ref:`scratch documentation <sec:Scratch>`. .. _`faq:psi4fileretention`:. How do I retain specific Psi4 scratch files; -------------------------------------------. You can set up a specific path for |PSIfour| scratch file and keep them; for later use through the :ref:`psi4_io <sec:Scratch>` handler. .. _`faq:psi4PBS`:. How to use Psi4 within a PBS queue; ----------------------------------. You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTe",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60115,Deployability,update,update,60115,"et up a specific path for |PSIfour| scratch file and keep them; for later use through the :ref:`psi4_io <sec:Scratch>` handler. .. _`faq:psi4PBS`:. How to use Psi4 within a PBS queue; ----------------------------------. You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in p",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60506,Deployability,install,installed,60506,"oking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60648,Deployability,install,installed,60648,". _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61394,Deployability,continuous,continuous,61394,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61405,Deployability,integrat,integration,61405,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61912,Deployability,install,installed,61912,"ples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63382,Deployability,install,installation,63382,"el""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {pref",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63562,Deployability,install,installation,63562,"un tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTAL",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63588,Deployability,install,installed,63588,"stsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63625,Deployability,install,installation,63625,"stsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63783,Deployability,install,installation,63783,"ur/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64309,Deployability,install,installed,64309,"ing that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:67745,Deployability,install,install,67745,"he one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset. Find the ``CMakeLists.txt`` governing the target Add-On in; :source:`external` and make changes analogous to the below::. #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you're changing the |PSIfour| repo codebase between compiles, there's; nothing more to do as CMake will handle the code rebuild deps for you. If you're changing the local Add-On repo codebase between compiles,; CMake *does not* know when ``libaddon.[a|so|dylib]`` needs rebuilding. It; is recommended that the |PSIfour| build be initially configured with; ``-DBUILD_SHARED_LIBS=ON`` (easier to notice changes). And to trigger; Add-On library rebuild, ``rm -rf {objdir}/external/upstream/addon/``; and ``rm -rf {objdir}/stage/share/cmake/AddOn``. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; |PSIfour| that interface to it, and relink the main ``core.so``.; If you're modifying the Add-On's file or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. N",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68079,Deployability,install,install,68079,"TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you're changing the |PSIfour| repo codebase between compiles, there's; nothing more to do as CMake will handle the code rebuild deps for you. If you're changing the local Add-On repo codebase between compiles,; CMake *does not* know when ``libaddon.[a|so|dylib]`` needs rebuilding. It; is recommended that the |PSIfour| build be initially configured with; ``-DBUILD_SHARED_LIBS=ON`` (easier to notice changes). And to trigger; Add-On library rebuild, ``rm -rf {objdir}/external/upstream/addon/``; and ``rm -rf {objdir}/stage/share/cmake/AddOn``. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; |PSIfour| that interface to it, and relink the main ``core.so``.; If you're modifying the Add-On's file or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphaz",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68713,Deployability,update,update,68713,"hould; re-clone the Add-On, rebuild and install it, rebuild any parts of; |PSIfour| that interface to it, and relink the main ``core.so``.; If you're modifying the Add-On's file or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::.",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69969,Deployability,install,installation,69969,"t. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:70268,Deployability,install,install,70268,"t. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:70309,Deployability,install,install,70309,"t. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:70388,Deployability,install,install,70388,"t. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:27812,Energy Efficiency,energy,energy,27812,"e-packages`` (conda); * :envvar:`PSIDATADIR` pointing to ``share/psi4``. .. _`faq:runordinaryexe`:. How to run Psi4 as executable after compilation; -----------------------------------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run |PSIfour|. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. .. _`faq:modulenotfounderror`:. How to solve ``ModuleNotFoundError: No module named 'psi4'``; ------------------------------------------------------------. You're using |PSIfour| in PsiAPI mode (``python input.py`` where; ``input.py`` contains ``import psi4``) but the Python interpreter; can't find the |PSIfour| Python module. Follow the directions at; :ref:`faq:psi4psiapipath`. .. _`faq:psi4psiapipath`:. How to configure paths for PsiAPI; ---------------------------------. If you know the location of the |PSIfour| executable (``bin/psi4``); for Psithon mode and want to know the corresponding location to add to; :envvar:`PYTHONPATH` for PsiAPI mode, execute ``psi4 --psiapi``. It; will return bash commands to set :envvar:`PATH` (for correct python; interpreter) and :envvar:`PYTHONPATH` (to find psi4 module) co",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:27884,Energy Efficiency,energy,energy,27884,"i4``. .. _`faq:runordinaryexe`:. How to run Psi4 as executable after compilation; -----------------------------------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run |PSIfour|. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. .. _`faq:modulenotfounderror`:. How to solve ``ModuleNotFoundError: No module named 'psi4'``; ------------------------------------------------------------. You're using |PSIfour| in PsiAPI mode (``python input.py`` where; ``input.py`` contains ``import psi4``) but the Python interpreter; can't find the |PSIfour| Python module. Follow the directions at; :ref:`faq:psi4psiapipath`. .. _`faq:psi4psiapipath`:. How to configure paths for PsiAPI; ---------------------------------. If you know the location of the |PSIfour| executable (``bin/psi4``); for Psithon mode and want to know the corresponding location to add to; :envvar:`PYTHONPATH` for PsiAPI mode, execute ``psi4 --psiapi``. It; will return bash commands to set :envvar:`PATH` (for correct python; interpreter) and :envvar:`PYTHONPATH` (to find psi4 module) correctly,; after which ``import psi4`` will work. .. code-block:: ba",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:30328,Energy Efficiency,energy,energy,30328,". How to run Psi4 as Python module after compilation; --------------------------------------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you instal",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:30415,Energy Efficiency,energy,energy,30415,"---------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the m",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:32816,Energy Efficiency,energy,energy,32816,"bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilation using driver from source; ------------------------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:32888,Energy Efficiency,energy,energy,32888,"ode-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilation using driver from source; ------------------------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available. ::. >>> cd {objdir}; >>> ln -s {top-level-psi4-",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:33118,Energy Efficiency,energy,energy,33118,"h: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilation using driver from source; ------------------------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available. ::. >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. .. _`faq:psidatadir`:. Why not to set :envvar:`PSIDATADIR`; --------------------------",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:33205,Energy Efficiency,energy,energy,33205,"SIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilation using driver from source; ------------------------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available. ::. >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. .. _`faq:psidatadir`:. Why not to set :envvar:`PSIDATADIR`; -----------------------------------. :envvar:`PSIDATADIR` is an environment variable containing the location ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:49474,Energy Efficiency,efficient,efficient,49474,""". H. Build with explicit non-MKL LAPACK. .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". I. Build with MKL and GCC (iomp5 needed instead of gomp for threading. use OpenMP_LIBRARY_DIRS to hint location.). .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=/opt/intel/mkl/lib/intel64/libmkl_rt.so -DLAPACK_INCLUDE_DIRS=/opt/intel/mkl/include -DOpenMP_LIBRARY_DIRS=/opt/intel/compiler/lib/intel64/. **Notes**. * Much of |PSIfours| speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:. * It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with t",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:55059,Energy Efficiency,energy,energy,55059,"Python of ``which python``.; To use a different Python with |PSIfour| in the short term, just; ``path/to/desired/python psi4`` on the command line to override the; shebang line. To use a different Python with |PSIfour| in the long term,; edit the shebang line. If you're using |PSIfour| as a Python module, then |PSIfour| *is* running; the Python of ``which python``. .. _`faq:wrongpyfalse`:. How to fix ""``undefined symbol: _Py_FalseStruct``""; --------------------------------------------------. You're probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the |PSIfour|; ""executable"", so you'll see this error only for Psi4 as Python module. .. _`faq:gdblldb`:. How to use ``gdb`` and ``lldb`` with Psi4; -----------------------------------------. Debugging |PSIfour| has gotten a little confusing now that it's running through Python. Here's the syntax ::. >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. ::. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. .. .. _`faq:valgrindpsi`:; .. ; .. How to use ``valgrind`` with Psi4; .. ---------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in the way of suppression files. Calling Valgrind as:; .. ; .. ```bash; .. valgrind --suppressions=<file_name>; .. ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/sh",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:55168,Energy Efficiency,energy,energy,55168,"red/python psi4`` on the command line to override the; shebang line. To use a different Python with |PSIfour| in the long term,; edit the shebang line. If you're using |PSIfour| as a Python module, then |PSIfour| *is* running; the Python of ``which python``. .. _`faq:wrongpyfalse`:. How to fix ""``undefined symbol: _Py_FalseStruct``""; --------------------------------------------------. You're probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the |PSIfour|; ""executable"", so you'll see this error only for Psi4 as Python module. .. _`faq:gdblldb`:. How to use ``gdb`` and ``lldb`` with Psi4; -----------------------------------------. Debugging |PSIfour| has gotten a little confusing now that it's running through Python. Here's the syntax ::. >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. ::. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. .. .. _`faq:valgrindpsi`:; .. ; .. How to use ``valgrind`` with Psi4; .. ---------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in the way of suppression files. Calling Valgrind as:; .. ; .. ```bash; .. valgrind --suppressions=<file_name>; .. ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/share/psi4/scripts/valgrind-python.supp). This should remove all the python errors.; .. ; .. The other error, b",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62806,Energy Efficiency,energy,energy,62806,"test -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62837,Energy Efficiency,energy,energy,62837,"test -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64586,Energy Efficiency,green,green,64586,"ed number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. .. _`faq:writepsi4`:. How to refer to Psi4; --------------------. Ways to refer to |P",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:3163,Integrability,depend,dependencies,3163,"king builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:.",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:3211,Integrability,depend,dependencies,3211,"king builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:.",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4790,Integrability,depend,dependencies,4790,"e main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> ma",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:6042,Integrability,depend,dependencies,6042,"ories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python interpreter and headers <cmake:python>` (3.8+) https://www.python.org/. * CMake (3.15+) https://cmake.org/download/. * NumPy (needed at runtime *and* buildtime) https://numpy.org/. * System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required f",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:6574,Integrability,depend,dependencies,6574,"o test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python interpreter and headers <cmake:python>` (3.8+) https://www.python.org/. * CMake (3.15+) https://cmake.org/download/. * NumPy (needed at runtime *and* buildtime) https://numpy.org/. * System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for |PSIfour|, but if not detected, the; build system will automatically download and build. * :ref:`gau2grid <cmake:gau2grid>` |w---w| :ref:`[what is gau2grid?] <sec:gau2grid>` :source:`[gau2grid min version] <external/upstream/gau2grid/CMakeLists.txt#L1>`. * :ref:`Libint <cmake:libint>` |w---w| :ref:`[what is Libint?] <sec:libint>` :source:`[Libint min version] <external/upstream/libint2/CMakeLists.txt#L1>` (Libint2 as of Nov 2020; added by v1.4). * Eigen https:",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:8277,Integrability,depend,dependency,8277,"grid min version] <external/upstream/gau2grid/CMakeLists.txt#L1>`. * :ref:`Libint <cmake:libint>` |w---w| :ref:`[what is Libint?] <sec:libint>` :source:`[Libint min version] <external/upstream/libint2/CMakeLists.txt#L1>` (Libint2 as of Nov 2020; added by v1.4). * Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; * Boost https://www.boost.org/ header-only preprocessor library. * :ref:`Libxc <cmake:libxc>` |w---w| :ref:`[what is Libxc?] <sec:libxc>` :source:`[Libxc min version] <external/upstream/libxc/CMakeLists.txt#L4>`. * pybind11 |w---w| `[what is Pybind11?] <https://pybind11.readthedocs.io/en/stable/>`_ :source:`[Pybind11 min version] <external/upstream/pybind11/CMakeLists.txt#L2>`. * QCElemental |w---w| `[what is QCElemental?] <https://molssi.github.io/QCElemental/>`_. * QCEngine |w---w| `[what is QCEngine?] <https://molssi.github.io/QCEngine/>`_ (March 2019; added by v1.4). * optking |w---w| `[what is optking] <https://optking.readthedocs.io/en/latest/>`_ (runtime dependency, required at build-time) . Additionally, there are runtime-only dependencies:. * msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * NumPy https://numpy.org/. * networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 20",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:8352,Integrability,depend,dependencies,8352,"xt#L1>`. * :ref:`Libint <cmake:libint>` |w---w| :ref:`[what is Libint?] <sec:libint>` :source:`[Libint min version] <external/upstream/libint2/CMakeLists.txt#L1>` (Libint2 as of Nov 2020; added by v1.4). * Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; * Boost https://www.boost.org/ header-only preprocessor library. * :ref:`Libxc <cmake:libxc>` |w---w| :ref:`[what is Libxc?] <sec:libxc>` :source:`[Libxc min version] <external/upstream/libxc/CMakeLists.txt#L4>`. * pybind11 |w---w| `[what is Pybind11?] <https://pybind11.readthedocs.io/en/stable/>`_ :source:`[Pybind11 min version] <external/upstream/pybind11/CMakeLists.txt#L2>`. * QCElemental |w---w| `[what is QCElemental?] <https://molssi.github.io/QCElemental/>`_. * QCEngine |w---w| `[what is QCEngine?] <https://molssi.github.io/QCEngine/>`_ (March 2019; added by v1.4). * optking |w---w| `[what is optking] <https://optking.readthedocs.io/en/latest/>`_ (runtime dependency, required at build-time) . Additionally, there are runtime-only dependencies:. * msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * NumPy https://numpy.org/. * networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:8433,Integrability,depend,dependency,8433,"l/upstream/libint2/CMakeLists.txt#L1>` (Libint2 as of Nov 2020; added by v1.4). * Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; * Boost https://www.boost.org/ header-only preprocessor library. * :ref:`Libxc <cmake:libxc>` |w---w| :ref:`[what is Libxc?] <sec:libxc>` :source:`[Libxc min version] <external/upstream/libxc/CMakeLists.txt#L4>`. * pybind11 |w---w| `[what is Pybind11?] <https://pybind11.readthedocs.io/en/stable/>`_ :source:`[Pybind11 min version] <external/upstream/pybind11/CMakeLists.txt#L2>`. * QCElemental |w---w| `[what is QCElemental?] <https://molssi.github.io/QCElemental/>`_. * QCEngine |w---w| `[what is QCEngine?] <https://molssi.github.io/QCEngine/>`_ (March 2019; added by v1.4). * optking |w---w| `[what is optking] <https://optking.readthedocs.io/en/latest/>`_ (runtime dependency, required at build-time) . Additionally, there are runtime-only dependencies:. * msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * NumPy https://numpy.org/. * networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:8602,Integrability,depend,dependency,8602,"w.boost.org/ header-only preprocessor library. * :ref:`Libxc <cmake:libxc>` |w---w| :ref:`[what is Libxc?] <sec:libxc>` :source:`[Libxc min version] <external/upstream/libxc/CMakeLists.txt#L4>`. * pybind11 |w---w| `[what is Pybind11?] <https://pybind11.readthedocs.io/en/stable/>`_ :source:`[Pybind11 min version] <external/upstream/pybind11/CMakeLists.txt#L2>`. * QCElemental |w---w| `[what is QCElemental?] <https://molssi.github.io/QCElemental/>`_. * QCEngine |w---w| `[what is QCEngine?] <https://molssi.github.io/QCEngine/>`_ (March 2019; added by v1.4). * optking |w---w| `[what is optking] <https://optking.readthedocs.io/en/latest/>`_ (runtime dependency, required at build-time) . Additionally, there are runtime-only dependencies:. * msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * NumPy https://numpy.org/. * networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; ---------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:8741,Integrability,depend,dependency,8741,"c>` :source:`[Libxc min version] <external/upstream/libxc/CMakeLists.txt#L4>`. * pybind11 |w---w| `[what is Pybind11?] <https://pybind11.readthedocs.io/en/stable/>`_ :source:`[Pybind11 min version] <external/upstream/pybind11/CMakeLists.txt#L2>`. * QCElemental |w---w| `[what is QCElemental?] <https://molssi.github.io/QCElemental/>`_. * QCEngine |w---w| `[what is QCEngine?] <https://molssi.github.io/QCEngine/>`_ (March 2019; added by v1.4). * optking |w---w| `[what is optking] <https://optking.readthedocs.io/en/latest/>`_ (runtime dependency, required at build-time) . Additionally, there are runtime-only dependencies:. * msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * NumPy https://numpy.org/. * networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items be",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:8830,Integrability,depend,dependency,8830,"-w| `[what is Pybind11?] <https://pybind11.readthedocs.io/en/stable/>`_ :source:`[Pybind11 min version] <external/upstream/pybind11/CMakeLists.txt#L2>`. * QCElemental |w---w| `[what is QCElemental?] <https://molssi.github.io/QCElemental/>`_. * QCEngine |w---w| `[what is QCEngine?] <https://molssi.github.io/QCEngine/>`_ (March 2019; added by v1.4). * optking |w---w| `[what is optking] <https://optking.readthedocs.io/en/latest/>`_ (runtime dependency, required at build-time) . Additionally, there are runtime-only dependencies:. * msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * NumPy https://numpy.org/. * networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:8950,Integrability,message,message,8950,"bind11 min version] <external/upstream/pybind11/CMakeLists.txt#L2>`. * QCElemental |w---w| `[what is QCElemental?] <https://molssi.github.io/QCElemental/>`_. * QCEngine |w---w| `[what is QCEngine?] <https://molssi.github.io/QCEngine/>`_ (March 2019; added by v1.4). * optking |w---w| `[what is optking] <https://optking.readthedocs.io/en/latest/>`_ (runtime dependency, required at build-time) . Additionally, there are runtime-only dependencies:. * msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * NumPy https://numpy.org/. * networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that m",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:9055,Integrability,depend,dependency,9055,"i.github.io/QCElemental/>`_. * QCEngine |w---w| `[what is QCEngine?] <https://molssi.github.io/QCEngine/>`_ (March 2019; added by v1.4). * optking |w---w| `[what is optking] <https://optking.readthedocs.io/en/latest/>`_ (runtime dependency, required at build-time) . Additionally, there are runtime-only dependencies:. * msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * NumPy https://numpy.org/. * networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testin",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:9137,Integrability,depend,dependency,9137,".github.io/QCEngine/>`_ (March 2019; added by v1.4). * optking |w---w| `[what is optking] <https://optking.readthedocs.io/en/latest/>`_ (runtime dependency, required at build-time) . Additionally, there are runtime-only dependencies:. * msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * NumPy https://numpy.org/. * networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many test",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:9542,Integrability,depend,dependencies,9542,"tps://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :sour",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:9777,Integrability,depend,dependencies,9777,"). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for ful",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10561,Integrability,message,message,10561,"---------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://support.hdfgroup.org/HDF5/; * zlib http://www.zlib.net/. .. * :ref:`erd <cmake:erd>` |w---w| :ref:`[what is this?] <sec:erd>` `[min version] <https://github.com/psi4/psi4/blob/master/external/upstream/erd/CMakeLists.txt#L2>`_. .. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`ecpint <cmake:ecpint>` |w---w| :ref:`[what is ecpint?] <sec:ecpint>` :source:`[ecpint min version] <external/upstream/ecpint/CMakeLists.txt/#L2>`. * :ref:`dkh <cmake:dkh>` |w---w| :ref:`[what is dkh?] <sec:dkh>` :source:`[dkh min version] <external/u",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10638,Integrability,depend,dependencies,10638,"s an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://support.hdfgroup.org/HDF5/; * zlib http://www.zlib.net/. .. * :ref:`erd <cmake:erd>` |w---w| :ref:`[what is this?] <sec:erd>` `[min version] <https://github.com/psi4/psi4/blob/master/external/upstream/erd/CMakeLists.txt#L2>`_. .. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`ecpint <cmake:ecpint>` |w---w| :ref:`[what is ecpint?] <sec:ecpint>` :source:`[ecpint min version] <external/upstream/ecpint/CMakeLists.txt/#L2>`. * :ref:`dkh <cmake:dkh>` |w---w| :ref:`[what is dkh?] <sec:dkh>` :source:`[dkh min version] <external/upstream/dkh/CMakeLists.txt#L2>`. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`gdma <cmake:",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:14049,Integrability,depend,dependencies,14049,"-mp2/commits/master. * resp |w---w| https://github.com/cdsgroup/resp. * gpu_dfcc |w---w| https://github.com/edeprince3/gpu_dfcc/commits/master. * OpenFermion-Psi4 |w---w| https://github.com/quantumlib/OpenFermion. * :ref:`cppe <sec:cppe>` |w---w| https://github.com/maxscheurer/cppe. * mp2d |w---w| https://github.com/Chandemonium/MP2D. * :ref:`FockCI <sec:fockci>` |w---w| https://github.com/shannonhouck/psi4fockci. * cct3 |w---w| https://github.com/piecuch-group/cct3. * :ref:`adcc <sec:adcc>` |w---w| https://github.com/adc-connect/adcc. * :ref:`BrianQC <sec:brianqc>` |w---w| https://www.brianqc.com/. * i-PI |w---w| http://ipi-code.org/. * psixas |w---w| https://github.com/Masterluke87/psixas. * MDI |w---w| https://github.com/MolSSI-MDI/MDI_Library. * :ref:`ddx <sec:ddx>` |w---w| https://github.com/ddsolvation/ddx. .. _`faq:condapsi4dev`:. How to use conda to get a Psi4 development environment; ------------------------------------------------------. |PSIfour| has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package ``psi4-dev`` is available to gather the dependencies; and build tools needed to compiler |PSIfour| from source. Go to; :psicode:`installs/latest`, select ""source"" and ""nightly build"" along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script ``psi4-path-advisor``. Running; ``psi4-path-advisor --help`` shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake's cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; :samp:`{objdir}`, you can build |PSIfour|. Remember to activate this; conda environment during |PSIfour| running or development. There are a; few extra options to ``psi4-path-advisor`` to set up using conda's GNU; compilers (on Linux), conda's Clang compilers (on Mac; less reliably)",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:14201,Integrability,depend,dependencies,14201," * OpenFermion-Psi4 |w---w| https://github.com/quantumlib/OpenFermion. * :ref:`cppe <sec:cppe>` |w---w| https://github.com/maxscheurer/cppe. * mp2d |w---w| https://github.com/Chandemonium/MP2D. * :ref:`FockCI <sec:fockci>` |w---w| https://github.com/shannonhouck/psi4fockci. * cct3 |w---w| https://github.com/piecuch-group/cct3. * :ref:`adcc <sec:adcc>` |w---w| https://github.com/adc-connect/adcc. * :ref:`BrianQC <sec:brianqc>` |w---w| https://www.brianqc.com/. * i-PI |w---w| http://ipi-code.org/. * psixas |w---w| https://github.com/Masterluke87/psixas. * MDI |w---w| https://github.com/MolSSI-MDI/MDI_Library. * :ref:`ddx <sec:ddx>` |w---w| https://github.com/ddsolvation/ddx. .. _`faq:condapsi4dev`:. How to use conda to get a Psi4 development environment; ------------------------------------------------------. |PSIfour| has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package ``psi4-dev`` is available to gather the dependencies; and build tools needed to compiler |PSIfour| from source. Go to; :psicode:`installs/latest`, select ""source"" and ""nightly build"" along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script ``psi4-path-advisor``. Running; ``psi4-path-advisor --help`` shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake's cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; :samp:`{objdir}`, you can build |PSIfour|. Remember to activate this; conda environment during |PSIfour| running or development. There are a; few extra options to ``psi4-path-advisor`` to set up using conda's GNU; compilers (on Linux), conda's Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda's GNU compilers (on Linux). .. code-block:: console. >>> git clone https://github.com/psi4/psi4.g",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:14625,Integrability,depend,dependency,14625," * :ref:`BrianQC <sec:brianqc>` |w---w| https://www.brianqc.com/. * i-PI |w---w| http://ipi-code.org/. * psixas |w---w| https://github.com/Masterluke87/psixas. * MDI |w---w| https://github.com/MolSSI-MDI/MDI_Library. * :ref:`ddx <sec:ddx>` |w---w| https://github.com/ddsolvation/ddx. .. _`faq:condapsi4dev`:. How to use conda to get a Psi4 development environment; ------------------------------------------------------. |PSIfour| has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package ``psi4-dev`` is available to gather the dependencies; and build tools needed to compiler |PSIfour| from source. Go to; :psicode:`installs/latest`, select ""source"" and ""nightly build"" along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script ``psi4-path-advisor``. Running; ``psi4-path-advisor --help`` shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake's cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; :samp:`{objdir}`, you can build |PSIfour|. Remember to activate this; conda environment during |PSIfour| running or development. There are a; few extra options to ``psi4-path-advisor`` to set up using conda's GNU; compilers (on Linux), conda's Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda's GNU compilers (on Linux). .. code-block:: console. >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.8 -c psi4/label/dev; >>> conda activate p4dev; >>> `psi4-path-advisor --gcc`; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`. .. _`faq:setupmaxameri`:. How to configure code to use high angular momentum basis sets; -------------------------------------------------------------. The :ref:`Libint <sec:libint>` integral code handles; a",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:30942,Integrability,message,message,30942,": bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; sete",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:39691,Integrability,rout,route,39691,"d to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both ``icpc`` and ``gcc`` versions are checked.; Intel OneAPI Classic compilers work fine. OneAPI beta compilers build but have; been only minimally tested. * :ref:`faq:modgcc`. .. _`faq:macxcode`:. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; -----------------------------------------------------------------------------. The easiest compiler to obtain is ``clang`` which is a drop-in replacement; for ``gcc`` and ``g++``. Just install `XCode; <https://apps.apple.com/us/app/xcode/id497799835>`_. Some old versions; of XCode can't handle some of the advanced C++ language features, but this; is a *software* not *hardware* limitation. Checks for version compliance; performed at build-time. Note that this ""AppleClang"" will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives. Another route to obtaining ``clang`` compilers without the above limitations; is through conda. .. code-block:: bash. # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. .. _`faq:modgcc`:. How to satisfy the GC",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:41296,Integrability,rout,route,41296,"R=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. .. _`faq:modgcc`:. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; --------------------------------------------------------------------------. .. code-block:: bash. # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you're not using GCC as a compiler, your Intel compiler seeks; `gcc` to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager *or* install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below. .. code-block:: bash. # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gn",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:48966,Integrability,depend,depends,48966,"ck:: bash. >>> cmake -DLAPACK_LIBRARIES=""${CONDA_PREFIX}/lib/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""${CONDA_PREFIX}/include"". F. OpenBLAS - see note below. .. code-block:: bash. >>> MATH_ROOT=/path/to/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib cmake. G. Build with explicit MKL LAPACK. .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/intel64/libmkl_lapack95_lp64.a;/path/to/lib/intel64/libmkl_rt.so"" -DLAPACK_INCLUDE_DIRS=""/path/to/mkl-h-include/"". H. Build with explicit non-MKL LAPACK. .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=""/path/to/lib/liblapack.so;/path/to/lib/libblas.a"". I. Build with MKL and GCC (iomp5 needed instead of gomp for threading. use OpenMP_LIBRARY_DIRS to hint location.). .. code-block:: bash. >>> cmake -DLAPACK_LIBRARIES=/opt/intel/mkl/lib/intel64/libmkl_rt.so -DLAPACK_INCLUDE_DIRS=/opt/intel/mkl/include -DOpenMP_LIBRARY_DIRS=/opt/intel/compiler/lib/intel64/. **Notes**. * Much of |PSIfours| speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:. * It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS)",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:52118,Integrability,interface,interface,52118,"conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python li",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60018,Integrability,depend,depending,60018,"faq:psi4fileretention`:. How do I retain specific Psi4 scratch files; -------------------------------------------. You can set up a specific path for |PSIfour| scratch file and keep them; for later use through the :ref:`psi4_io <sec:Scratch>` handler. .. _`faq:psi4PBS`:. How to use Psi4 within a PBS queue; ----------------------------------. You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, `",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61405,Integrability,integrat,integration,61405,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63151,Integrability,depend,depending,63151,"name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:67794,Integrability,interface,interface,67794,"he one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset. Find the ``CMakeLists.txt`` governing the target Add-On in; :source:`external` and make changes analogous to the below::. #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you're changing the |PSIfour| repo codebase between compiles, there's; nothing more to do as CMake will handle the code rebuild deps for you. If you're changing the local Add-On repo codebase between compiles,; CMake *does not* know when ``libaddon.[a|so|dylib]`` needs rebuilding. It; is recommended that the |PSIfour| build be initially configured with; ``-DBUILD_SHARED_LIBS=ON`` (easier to notice changes). And to trigger; Add-On library rebuild, ``rm -rf {objdir}/external/upstream/addon/``; and ``rm -rf {objdir}/stage/share/cmake/AddOn``. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; |PSIfour| that interface to it, and relink the main ``core.so``.; If you're modifying the Add-On's file or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. N",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:2320,Modifiability,config,configure,2320," nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildq",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:2876,Modifiability,config,configure,2876,", well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:3762,Modifiability,config,configuring,3762,"; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:3951,Modifiability,config,configuration,3951,"s happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Con",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4898,Modifiability,config,configuration,4898," >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4954,Modifiability,config,configuration,4954," >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5311,Modifiability,config,configuration,5311," ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5907,Modifiability,config,configure,5907,"ed configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python interpreter and headers <cmake:python>` (3.8+) https://www.python.org/. * CMake (3.15+) https://cmake.org/do",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5923,Modifiability,variab,variables,5923,"ed configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python interpreter and headers <cmake:python>` (3.8+) https://www.python.org/. * CMake (3.15+) https://cmake.org/do",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:6422,Modifiability,config,configure,6422,">> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python interpreter and headers <cmake:python>` (3.8+) https://www.python.org/. * CMake (3.15+) https://cmake.org/download/. * NumPy (needed at runtime *and* buildtime) https://numpy.org/. * System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for |PSIfour|, but if not detected, the; build system will automatically download and build. * :ref:`gau2grid <cmake:gau2grid>` |w---w| :ref:`[what is gau2grid?] <sec:gau2grid>` :source:`[gau2grid min version] <external/upstream/gau2grid/CMakeLists.txt#L1>`. * :ref:`Libint <cmake:libint>` |w---w| :ref:`[what is Libint?] <sec:libint>` :source:`[Libint ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:15431,Modifiability,config,configure,15431,"nning; ``psi4-path-advisor --help`` shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake's cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; :samp:`{objdir}`, you can build |PSIfour|. Remember to activate this; conda environment during |PSIfour| running or development. There are a; few extra options to ``psi4-path-advisor`` to set up using conda's GNU; compilers (on Linux), conda's Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda's GNU compilers (on Linux). .. code-block:: console. >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.8 -c psi4/label/dev; >>> conda activate p4dev; >>> `psi4-path-advisor --gcc`; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`. .. _`faq:setupmaxameri`:. How to configure code to use high angular momentum basis sets; -------------------------------------------------------------. The :ref:`Libint <sec:libint>` integral code handles; arbitrary order angular momentum (AM), but compiling that is; prohibitive. The build process for Libint2 takes longer than; for Libint1, so it's recommended to :ref:`use the conda packages; <faq:condamaxameri>`. The AM controlling keyword ``MAX_AM_ERI``; has definition changed a little from Libint1. It is used to ensure; that conventional energies can use at least ``MAX_AM_ERI`` zeta. See; :source:`/external/upstream/libint2/CMakeLists.txt` for a fuller; discussion of AM capabilities. Unless :makevar:`BUILD_Libint2_GENERATOR`; is set to ``ON``, an internal build of Libint2 will download a; pregenerated tarball of at least :makevar:`MAX_AM_ERI` AM. If you; want to build completely from generator source, turn on the keyword,; but parts can only run in serial and parts benefit from parallel, so; it's not recommended. All the AM generation settings would need to be; edited ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:19406,Modifiability,config,configuration,19406," and Windows. The Linux package has base ``MAX_AM_ERI=7`` and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted. The Mac and Windows packages have base ``MAX_AM_ERI=5`` and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted. Details about angular momentum settings are available here; :source:`external/upstream/libint2/CMakeLists.txt`; . .. Since February 2019, the |PSIfour| conda package on Linux has been the; .. large AM8. Likewise, this is the package you get upon ::; ..; .. conda install libint -c psi4; ..; .. There is no need for the extra ``am8`` argument previously documented here.; ..; .. On Mac, the Libint conda package itself and the Libint compiled into; .. the |PSIfour| conda package remain AM6.; ..; .. Beware this issue: https://github.com/psi4/psi4/issues/1533. .. _`faq:setuphelp`:. How to see what build configuration options are available; ---------------------------------------------------------. CMake doesn't provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. .. literalinclude:: @SFNX_INCLUDE@CMakeLists.txt; :lines: 14-142; :language: none. Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. .. .. _`faq:setupd`:; .. ###<a name=""setupd""></a> How to set CMake and Preprocessor options through the ``setup`` script; .. ; .. CMake can always be invoked directly to build Psi4 [](see active cmake). But more often you have a working ``setup`` configuration and just need to convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:19847,Modifiability,config,configuration,19847,"mentum settings are available here; :source:`external/upstream/libint2/CMakeLists.txt`; . .. Since February 2019, the |PSIfour| conda package on Linux has been the; .. large AM8. Likewise, this is the package you get upon ::; ..; .. conda install libint -c psi4; ..; .. There is no need for the extra ``am8`` argument previously documented here.; ..; .. On Mac, the Libint conda package itself and the Libint compiled into; .. the |PSIfour| conda package remain AM6.; ..; .. Beware this issue: https://github.com/psi4/psi4/issues/1533. .. _`faq:setuphelp`:. How to see what build configuration options are available; ---------------------------------------------------------. CMake doesn't provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. .. literalinclude:: @SFNX_INCLUDE@CMakeLists.txt; :lines: 14-142; :language: none. Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. .. .. _`faq:setupd`:; .. ###<a name=""setupd""></a> How to set CMake and Preprocessor options through the ``setup`` script; .. ; .. CMake can always be invoked directly to build Psi4 [](see active cmake). But more often you have a working ``setup`` configuration and just need to convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. -D STRING forward directly to cmake (example: -D ENABLE_THIS=1; .. -D ENABLE_THAT=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:20180,Modifiability,config,configuration,20180,"t conda package itself and the Libint compiled into; .. the |PSIfour| conda package remain AM6.; ..; .. Beware this issue: https://github.com/psi4/psi4/issues/1533. .. _`faq:setuphelp`:. How to see what build configuration options are available; ---------------------------------------------------------. CMake doesn't provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. .. literalinclude:: @SFNX_INCLUDE@CMakeLists.txt; :lines: 14-142; :language: none. Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. .. .. _`faq:setupd`:; .. ###<a name=""setupd""></a> How to set CMake and Preprocessor options through the ``setup`` script; .. ; .. CMake can always be invoked directly to build Psi4 [](see active cmake). But more often you have a working ``setup`` configuration and just need to convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. -D STRING forward directly to cmake (example: -D ENABLE_THIS=1; .. -D ENABLE_THAT=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installati",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:20249,Modifiability,variab,variables,20249,"t conda package itself and the Libint compiled into; .. the |PSIfour| conda package remain AM6.; ..; .. Beware this issue: https://github.com/psi4/psi4/issues/1533. .. _`faq:setuphelp`:. How to see what build configuration options are available; ---------------------------------------------------------. CMake doesn't provide a summary for this (unless you want to try the CMake; GUI, which the developers have never looked at). However, the top half of; the main CMakeLists.txt is a passable summary:. .. literalinclude:: @SFNX_INCLUDE@CMakeLists.txt; :lines: 14-142; :language: none. Note that external projects will have their own sets of build; configuration options. Only the most-common user knobs of those are; mentioned above. .. .. _`faq:setupd`:; .. ###<a name=""setupd""></a> How to set CMake and Preprocessor options through the ``setup`` script; .. ; .. CMake can always be invoked directly to build Psi4 [](see active cmake). But more often you have a working ``setup`` configuration and just need to convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. -D STRING forward directly to cmake (example: -D ENABLE_THIS=1; .. -D ENABLE_THAT=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installati",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:21240,Modifiability,variab,variable,21240,"o convey a couple CMake or Preprocessor variables.; .. ; .. * ###### Build with Hint Variable to CMake; .. ; .. ```; .. setup -DGSL_ROOT_DIR=$CONDA/envs/boostenv; .. ```; .. ; .. * ###### Relevant ``setup`` Options:; .. ; .. ```; .. -D STRING forward directly to cmake (example: -D ENABLE_THIS=1; .. -D ENABLE_THAT=1); you can also forward CPP definitions; .. all the way to the program (example: -D CPP=""-DDEBUG"");; .. also handle multi-word arguments; .. (example: -D MORELIBS=""-L/path/to/lib /path/to/lib2""); .. (default: []); .. ```; .. ; .. * ###### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable ``CMAKE_INSTALL_PREFIX``; before compiling. * Build with Specific Install Directory. .. code-block:: bash. cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:21691,Modifiability,config,configured,21691,"##### Relevant ``cmake`` Options:; .. ; .. ```; .. -DSTRING -express to cmake; .. ```. .. _`faq:setupprefix`:. How to install elsewhere than :samp:`/usr/local/psi4`; -----------------------------------------------------. The installation directory is the filesystem location for the executable; script, the Python module, basis set data, and other administrative files.; Unless using the conda package, which is relocatable, the installation; directory must be specified with CMake variable ``CMAKE_INSTALL_PREFIX``; before compiling. * Build with Specific Install Directory. .. code-block:: bash. cmake -DCMAKE_INSTALL_PREFIX=/nfs/common/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:22402,Modifiability,plugin,plugins,22402,"mon/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in Specific Directory; .. ; .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:22421,Modifiability,variab,variable,22421,"mon/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in Specific Directory; .. ; .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24088,Modifiability,config,configuration,24088," .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; -----------------------------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-psi4-dir}`. * ``cd {top-level-psi4-dir} && cmake -S. -Bobjdir``; * ``cd {top-level-psi4-dir} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24222,Modifiability,config,configure,24222,"aq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; -----------------------------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-psi4-dir}`. * ``cd {top-level-psi4-dir} && cmake -S. -Bobjdir``; * ``cd {top-level-psi4-dir} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers fo",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24333,Modifiability,config,configure,24333,"-------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; -----------------------------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-psi4-dir}`. * ``cd {top-level-psi4-dir} && cmake -S. -Bobjdir``; * ``cd {top-level-psi4-dir} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); incl",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24548,Modifiability,config,configure,24548,"t`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; -----------------------------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-psi4-dir}`. * ``cd {top-level-psi4-dir} && cmake -S. -Bobjdir``; * ``cd {top-level-psi4-dir} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library head",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24568,Modifiability,config,configure,24568," _`faq:chooseobjdir`:. How to choose the compilation directory, ``{objdir}``; -----------------------------------------------------. * there is no default; * common choices are ``objdir`` or ``build`` under :samp:`{top-level-psi4-dir}`. * ``cd {top-level-psi4-dir} && cmake -S. -Bobjdir``; * ``cd {top-level-psi4-dir} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cma",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:25883,Modifiability,plugin,plugins,25883,"(:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; :ref:`running compiled executable <faq:runordinaryexe>`,; :ref:`running compiled Python module <faq:runordinarymodule>`,; :ref:`running conda binary <faq:runfrombinary>`. * :envvar:`PATH` pointing to ``bin``; * :envvar:`PYTHONPATH` pointing to ``lib`` (ordinary) or ``lib/pythonX.X/site-packages`` (conda); * :envvar:`PSIDATADIR` pointing to ``share/psi4``. .. _`faq:runordinaryexe`:. How to run Psi4 ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:25892,Modifiability,plugin,plugin,25892,"(:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; :ref:`running compiled executable <faq:runordinaryexe>`,; :ref:`running compiled Python module <faq:runordinarymodule>`,; :ref:`running conda binary <faq:runfrombinary>`. * :envvar:`PATH` pointing to ``bin``; * :envvar:`PYTHONPATH` pointing to ``lib`` (ordinary) or ``lib/pythonX.X/site-packages`` (conda); * :envvar:`PSIDATADIR` pointing to ``share/psi4``. .. _`faq:runordinaryexe`:. How to run Psi4 ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:26420,Modifiability,variab,variables,26420," (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; :ref:`running compiled executable <faq:runordinaryexe>`,; :ref:`running compiled Python module <faq:runordinarymodule>`,; :ref:`running conda binary <faq:runfrombinary>`. * :envvar:`PATH` pointing to ``bin``; * :envvar:`PYTHONPATH` pointing to ``lib`` (ordinary) or ``lib/pythonX.X/site-packages`` (conda); * :envvar:`PSIDATADIR` pointing to ``share/psi4``. .. _`faq:runordinaryexe`:. How to run Psi4 as executable after compilation; -----------------------------------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installation directory, substitute; :samp:`{objdir}/stage` for :samp:`{prefix}`.). .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PATH {prefix}/bin:$PATH; setenv PSI_",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:28417,Modifiability,config,configure,28417,"ATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. Run |PSIfour|. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. .. _`faq:modulenotfounderror`:. How to solve ``ModuleNotFoundError: No module named 'psi4'``; ------------------------------------------------------------. You're using |PSIfour| in PsiAPI mode (``python input.py`` where; ``input.py`` contains ``import psi4``) but the Python interpreter; can't find the |PSIfour| Python module. Follow the directions at; :ref:`faq:psi4psiapipath`. .. _`faq:psi4psiapipath`:. How to configure paths for PsiAPI; ---------------------------------. If you know the location of the |PSIfour| executable (``bin/psi4``); for Psithon mode and want to know the corresponding location to add to; :envvar:`PYTHONPATH` for PsiAPI mode, execute ``psi4 --psiapi``. It; will return bash commands to set :envvar:`PATH` (for correct python; interpreter) and :envvar:`PYTHONPATH` (to find psi4 module) correctly,; after which ``import psi4`` will work. .. code-block:: bash. >>> psi4 --psiapi-path; export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> export PATH=/path/to/dir/of/python/interpreter/against/which/psi4/compiled:$PATH; >>> export PYTHONPATH=/path/to/dir/of/psi4/core-dot-so:$PYTHONPATH. >>> python -c ""import psi4"". >>> python -c ""import psi4;print(psi4.__file__, psi4.__version__)"". .. _`faq:runordinarymodule`:. How to run Psi4 as Python module after compilation; -------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:30708,Modifiability,config,configuration,30708,"shrc file; setenv PYTHONPATH {prefix}/lib:$PYTHONPATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PYTHONPATH={prefix}/lib:$PYTHONPATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. * :ref:`faq:psi4psiapipath`. Run |PSIfour|. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:34182,Modifiability,variab,variable,34182,"ergy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilation using driver from source; ------------------------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available. ::. >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. .. _`faq:psidatadir`:. Why not to set :envvar:`PSIDATADIR`; -----------------------------------. :envvar:`PSIDATADIR` is an environment variable containing the location of the; text resource parts of the |PSIfour| codebase (*e.g.*, basis sets,; databases, EFP fragments). It is for developer use only. In |PSIfour| 1.1; and beyond, the program *always* knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in |PSIfour| 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory. At runtime. .. code-block:: bash. >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. .. _`cmake:cxx`:. How to configure C++ and C compilers for building Psi4; ------------------------------------------------------. **Role and De",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:34463,Modifiability,variab,variable,34463,"---------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available. ::. >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. .. _`faq:psidatadir`:. Why not to set :envvar:`PSIDATADIR`; -----------------------------------. :envvar:`PSIDATADIR` is an environment variable containing the location of the; text resource parts of the |PSIfour| codebase (*e.g.*, basis sets,; databases, EFP fragments). It is for developer use only. In |PSIfour| 1.1; and beyond, the program *always* knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in |PSIfour| 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory. At runtime. .. code-block:: bash. >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. .. _`cmake:cxx`:. How to configure C++ and C compilers for building Psi4; ------------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a C++ compiler is vital for building the code. * Downstream Dependencies |w---w| |PSIfour| |dr| C++ Compiler. **CMake Variables**. * :makevar:`CMAKE_CXX_COMPILER` |w---w| CMake variab",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:35090,Modifiability,config,configure,35090,"---. :envvar:`PSIDATADIR` is an environment variable containing the location of the; text resource parts of the |PSIfour| codebase (*e.g.*, basis sets,; databases, EFP fragments). It is for developer use only. In |PSIfour| 1.1; and beyond, the program *always* knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in |PSIfour| 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory. At runtime. .. code-block:: bash. >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. .. _`cmake:cxx`:. How to configure C++ and C compilers for building Psi4; ------------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a C++ compiler is vital for building the code. * Downstream Dependencies |w---w| |PSIfour| |dr| C++ Compiler. **CMake Variables**. * :makevar:`CMAKE_CXX_COMPILER` |w---w| CMake variable to specify name or full path to C++ compiler.; * :makevar:`CMAKE_C_COMPILER` |w---w| CMake variable to specify name or full path to C compiler.; * :makevar:`CMAKE_CXX_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for C++ source.; * :makevar:`CMAKE_C_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for C source. **Examples**. A. Build with detected compilers from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific (Intel) compilers from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. C. Build with specific (GNU) compilers *not* in :envvar:`PATH`. .. code-block:: ba",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:35428,Modifiability,variab,variable,35428,"nd the; only reason to set this variable is to point to another location.; Previously in |PSIfour| 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory. At runtime. .. code-block:: bash. >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. .. _`cmake:cxx`:. How to configure C++ and C compilers for building Psi4; ------------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a C++ compiler is vital for building the code. * Downstream Dependencies |w---w| |PSIfour| |dr| C++ Compiler. **CMake Variables**. * :makevar:`CMAKE_CXX_COMPILER` |w---w| CMake variable to specify name or full path to C++ compiler.; * :makevar:`CMAKE_C_COMPILER` |w---w| CMake variable to specify name or full path to C compiler.; * :makevar:`CMAKE_CXX_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for C++ source.; * :makevar:`CMAKE_C_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for C source. **Examples**. A. Build with detected compilers from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific (Intel) compilers from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. C. Build with specific (GNU) compilers *not* in :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. D. Build with specific (Intel) compilers from :envvar:`PATH` based on GCC *not* in :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMA",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:35528,Modifiability,variab,variable,35528,".0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory. At runtime. .. code-block:: bash. >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. .. _`cmake:cxx`:. How to configure C++ and C compilers for building Psi4; ------------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a C++ compiler is vital for building the code. * Downstream Dependencies |w---w| |PSIfour| |dr| C++ Compiler. **CMake Variables**. * :makevar:`CMAKE_CXX_COMPILER` |w---w| CMake variable to specify name or full path to C++ compiler.; * :makevar:`CMAKE_C_COMPILER` |w---w| CMake variable to specify name or full path to C compiler.; * :makevar:`CMAKE_CXX_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for C++ source.; * :makevar:`CMAKE_C_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for C source. **Examples**. A. Build with detected compilers from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific (Intel) compilers from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. C. Build with specific (GNU) compilers *not* in :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. D. Build with specific (Intel) compilers from :envvar:`PATH` based on GCC *not* in :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:35625,Modifiability,variab,variable,35625,"en run from the; compilation directory. At runtime. .. code-block:: bash. >>> psi4 -p {top-level-psi4-dir}/psi4/share/psi4. Or in the shell. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. .. _`cmake:cxx`:. How to configure C++ and C compilers for building Psi4; ------------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a C++ compiler is vital for building the code. * Downstream Dependencies |w---w| |PSIfour| |dr| C++ Compiler. **CMake Variables**. * :makevar:`CMAKE_CXX_COMPILER` |w---w| CMake variable to specify name or full path to C++ compiler.; * :makevar:`CMAKE_C_COMPILER` |w---w| CMake variable to specify name or full path to C compiler.; * :makevar:`CMAKE_CXX_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for C++ source.; * :makevar:`CMAKE_C_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for C source. **Examples**. A. Build with detected compilers from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific (Intel) compilers from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. C. Build with specific (GNU) compilers *not* in :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. D. Build with specific (Intel) compilers from :envvar:`PATH` based on GCC *not* in :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". E. Build with specific (Intel) compilers from :envvar:`PATH` based on GCC *not* in :envvar:`",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:35740,Modifiability,variab,variable,35740,"re/psi4. Or in the shell. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. .. _`cmake:cxx`:. How to configure C++ and C compilers for building Psi4; ------------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a C++ compiler is vital for building the code. * Downstream Dependencies |w---w| |PSIfour| |dr| C++ Compiler. **CMake Variables**. * :makevar:`CMAKE_CXX_COMPILER` |w---w| CMake variable to specify name or full path to C++ compiler.; * :makevar:`CMAKE_C_COMPILER` |w---w| CMake variable to specify name or full path to C compiler.; * :makevar:`CMAKE_CXX_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for C++ source.; * :makevar:`CMAKE_C_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for C source. **Examples**. A. Build with detected compilers from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific (Intel) compilers from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. C. Build with specific (GNU) compilers *not* in :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. D. Build with specific (Intel) compilers from :envvar:`PATH` based on GCC *not* in :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". E. Build with specific (Intel) compilers from :envvar:`PATH` based on GCC *not* in :envvar:`PATH` and also building Fortran Add-Ons. .. code-block:: bash. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMP",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:40016,Modifiability,variab,variables,40016,"ilers for Mac without Fink, MacPorts, or Homebrew; -----------------------------------------------------------------------------. The easiest compiler to obtain is ``clang`` which is a drop-in replacement; for ``gcc`` and ``g++``. Just install `XCode; <https://apps.apple.com/us/app/xcode/id497799835>`_. Some old versions; of XCode can't handle some of the advanced C++ language features, but this; is a *software* not *hardware* limitation. Checks for version compliance; performed at build-time. Note that this ""AppleClang"" will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives. Another route to obtaining ``clang`` compilers without the above limitations; is through conda. .. code-block:: bash. # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. .. _`faq:modgcc`:. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; --------------------------------------------------------------------------. .. code-block:: bash. # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you're not using GCC as a compiler, your Intel compiler se",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:41569,Modifiability,variab,variables,41569,"++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. .. _`faq:modgcc`:. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; --------------------------------------------------------------------------. .. code-block:: bash. # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you're not using GCC as a compiler, your Intel compiler seeks; `gcc` to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager *or* install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below. .. code-block:: bash. # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. .. _`faq:cray`:. How to",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:42630,Modifiability,config,configure,42630,"/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. .. _`faq:cray`:. How to configure a Psi4 build on Cray; -------------------------------------. Cray systems strongly prefer to build static libraries, but |PSIfour|; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building |PSIfour| on; Cray requires setting environment variables before running `cmake`. ::. CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... .. envvar:: CRAYPE_LINK_TYPE. Set to allow |PSIfour| to build as shared library on Cray supercomputers. .. envvar:: CRAY_ADD_RPATH. Set to true to allow |PSIfour| to build on Cray supercomputers. .. _`cmake:fortran`:. How to configure Fortran compilers for building Psi4; ----------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a Fortran compiler in unneeded for core; features but may be required for add-ons. * Downstream Dependencies. * |PSIfour| (\ |dr| optional) Fortran Compiler; * erd, dkh, gdma, PCMSolver |dr| Fortran Compiler. **CMake Variables**. * :makeva",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:42948,Modifiability,variab,variables,42948,"; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. .. _`faq:cray`:. How to configure a Psi4 build on Cray; -------------------------------------. Cray systems strongly prefer to build static libraries, but |PSIfour|; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building |PSIfour| on; Cray requires setting environment variables before running `cmake`. ::. CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... .. envvar:: CRAYPE_LINK_TYPE. Set to allow |PSIfour| to build as shared library on Cray supercomputers. .. envvar:: CRAY_ADD_RPATH. Set to true to allow |PSIfour| to build on Cray supercomputers. .. _`cmake:fortran`:. How to configure Fortran compilers for building Psi4; ----------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a Fortran compiler in unneeded for core; features but may be required for add-ons. * Downstream Dependencies. * |PSIfour| (\ |dr| optional) Fortran Compiler; * erd, dkh, gdma, PCMSolver |dr| Fortran Compiler. **CMake Variables**. * :makevar:`CMAKE_Fortran_COMPILER` |w---w| CMake variable to specify name or full path to Fortran compiler.; * :makevar:`CMAKE_Fortran_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for Fortran source. **Examples**. A.",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:43265,Modifiability,config,configure,43265,"S=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. .. _`faq:cray`:. How to configure a Psi4 build on Cray; -------------------------------------. Cray systems strongly prefer to build static libraries, but |PSIfour|; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building |PSIfour| on; Cray requires setting environment variables before running `cmake`. ::. CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... .. envvar:: CRAYPE_LINK_TYPE. Set to allow |PSIfour| to build as shared library on Cray supercomputers. .. envvar:: CRAY_ADD_RPATH. Set to true to allow |PSIfour| to build on Cray supercomputers. .. _`cmake:fortran`:. How to configure Fortran compilers for building Psi4; ----------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a Fortran compiler in unneeded for core; features but may be required for add-ons. * Downstream Dependencies. * |PSIfour| (\ |dr| optional) Fortran Compiler; * erd, dkh, gdma, PCMSolver |dr| Fortran Compiler. **CMake Variables**. * :makevar:`CMAKE_Fortran_COMPILER` |w---w| CMake variable to specify name or full path to Fortran compiler.; * :makevar:`CMAKE_Fortran_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for Fortran source. **Examples**. A. Build with detected compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific (Intel) compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. .. _`faq:approvedfc`:. What Fortran compilers are approved; -----------------------------------. On Linux and Mac, the following work nicely. * GNU: ``gfortran``; * Intel: ``ifort``. * Packages to ins",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:43702,Modifiability,variab,variable,43702," systems strongly prefer to build static libraries, but |PSIfour|; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building |PSIfour| on; Cray requires setting environment variables before running `cmake`. ::. CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... .. envvar:: CRAYPE_LINK_TYPE. Set to allow |PSIfour| to build as shared library on Cray supercomputers. .. envvar:: CRAY_ADD_RPATH. Set to true to allow |PSIfour| to build on Cray supercomputers. .. _`cmake:fortran`:. How to configure Fortran compilers for building Psi4; ----------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a Fortran compiler in unneeded for core; features but may be required for add-ons. * Downstream Dependencies. * |PSIfour| (\ |dr| optional) Fortran Compiler; * erd, dkh, gdma, PCMSolver |dr| Fortran Compiler. **CMake Variables**. * :makevar:`CMAKE_Fortran_COMPILER` |w---w| CMake variable to specify name or full path to Fortran compiler.; * :makevar:`CMAKE_Fortran_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for Fortran source. **Examples**. A. Build with detected compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific (Intel) compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. .. _`faq:approvedfc`:. What Fortran compilers are approved; -----------------------------------. On Linux and Mac, the following work nicely. * GNU: ``gfortran``; * Intel: ``ifort``. * Packages to install for specific OS or package managers:. * Ubuntu ``gfortran``; * conda ``gfortran_linux-64`` or ``gfortran_osx-64`` to get ``gfortran``. .. _`faq:macgfortran`:. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; ----------------------------------------------------------------------------. Xcode does not provide a Fortran compiler. A way to get one is to download;",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:43809,Modifiability,variab,variable,43809,". Courtesy of @misha; at the forum and various supercomputer guides, building |PSIfour| on; Cray requires setting environment variables before running `cmake`. ::. CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... .. envvar:: CRAYPE_LINK_TYPE. Set to allow |PSIfour| to build as shared library on Cray supercomputers. .. envvar:: CRAY_ADD_RPATH. Set to true to allow |PSIfour| to build on Cray supercomputers. .. _`cmake:fortran`:. How to configure Fortran compilers for building Psi4; ----------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a Fortran compiler in unneeded for core; features but may be required for add-ons. * Downstream Dependencies. * |PSIfour| (\ |dr| optional) Fortran Compiler; * erd, dkh, gdma, PCMSolver |dr| Fortran Compiler. **CMake Variables**. * :makevar:`CMAKE_Fortran_COMPILER` |w---w| CMake variable to specify name or full path to Fortran compiler.; * :makevar:`CMAKE_Fortran_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for Fortran source. **Examples**. A. Build with detected compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific (Intel) compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. .. _`faq:approvedfc`:. What Fortran compilers are approved; -----------------------------------. On Linux and Mac, the following work nicely. * GNU: ``gfortran``; * Intel: ``ifort``. * Packages to install for specific OS or package managers:. * Ubuntu ``gfortran``; * conda ``gfortran_linux-64`` or ``gfortran_osx-64`` to get ``gfortran``. .. _`faq:macgfortran`:. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; ----------------------------------------------------------------------------. Xcode does not provide a Fortran compiler. A way to get one is to download; the ``gfortran_osx-64`` conda package. This provides; ``gfortran`` compilers for Mac. The version is 4.8.5, which is",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:45009,Modifiability,config,configuration,45009,". Build with specific (Intel) compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. .. _`faq:approvedfc`:. What Fortran compilers are approved; -----------------------------------. On Linux and Mac, the following work nicely. * GNU: ``gfortran``; * Intel: ``ifort``. * Packages to install for specific OS or package managers:. * Ubuntu ``gfortran``; * conda ``gfortran_linux-64`` or ``gfortran_osx-64`` to get ``gfortran``. .. _`faq:macgfortran`:. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; ----------------------------------------------------------------------------. Xcode does not provide a Fortran compiler. A way to get one is to download; the ``gfortran_osx-64`` conda package. This provides; ``gfortran`` compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. .. Xcode does not provide a Fortran compiler. Although a Fortran compiler is; .. not required for Psi4, a broken one can prevent correct configuration. Do; .. not download the latest version of GFortran from the HPC website; this is; .. unlikely to be compatible with your version of GCC. Instead, you should; .. run ``gcc -v`` to find out what version of GCC you're using, and then; .. download the corresponding GFortran from; .. <http://r.research.att.com/tools/>. If you configure Psi on a Mac without; .. any Fortran compiler it will set itself up correctly, so this is only; .. necessary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:45347,Modifiability,config,configure,45347,"ntu ``gfortran``; * conda ``gfortran_linux-64`` or ``gfortran_osx-64`` to get ``gfortran``. .. _`faq:macgfortran`:. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; ----------------------------------------------------------------------------. Xcode does not provide a Fortran compiler. A way to get one is to download; the ``gfortran_osx-64`` conda package. This provides; ``gfortran`` compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. .. Xcode does not provide a Fortran compiler. Although a Fortran compiler is; .. not required for Psi4, a broken one can prevent correct configuration. Do; .. not download the latest version of GFortran from the HPC website; this is; .. unlikely to be compatible with your version of GCC. Instead, you should; .. run ``gcc -v`` to find out what version of GCC you're using, and then; .. download the corresponding GFortran from; .. <http://r.research.att.com/tools/>. If you configure Psi on a Mac without; .. any Fortran compiler it will set itself up correctly, so this is only; .. necessary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be """,MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:45545,Modifiability,config,configure,45545,"--------------------------------------------. Xcode does not provide a Fortran compiler. A way to get one is to download; the ``gfortran_osx-64`` conda package. This provides; ``gfortran`` compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. .. Xcode does not provide a Fortran compiler. Although a Fortran compiler is; .. not required for Psi4, a broken one can prevent correct configuration. Do; .. not download the latest version of GFortran from the HPC website; this is; .. unlikely to be compatible with your version of GCC. Instead, you should; .. run ``gcc -v`` to find out what version of GCC you're using, and then; .. download the corresponding GFortran from; .. <http://r.research.att.com/tools/>. If you configure Psi on a Mac without; .. any Fortran compiler it will set itself up correctly, so this is only; .. necessary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w-",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:45968,Modifiability,variab,variable,45968,"orrect configuration. Do; .. not download the latest version of GFortran from the HPC website; this is; .. unlikely to be compatible with your version of GCC. Instead, you should; .. run ``gcc -v`` to find out what version of GCC you're using, and then; .. download the corresponding GFortran from; .. <http://r.research.att.com/tools/>. If you configure Psi on a Mac without; .. any Fortran compiler it will set itself up correctly, so this is only; .. necessary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in wh",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:46115,Modifiability,variab,variable,46115,"sion of GCC. Instead, you should; .. run ``gcc -v`` to find out what version of GCC you're using, and then; .. download the corresponding GFortran from; .. <http://r.research.att.com/tools/>. If you configure Psi on a Mac without; .. any Fortran compiler it will set itself up correctly, so this is only; .. necessary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:46269,Modifiability,variab,variable,46269," GFortran from; .. <http://r.research.att.com/tools/>. If you configure Psi on a Mac without; .. any Fortran compiler it will set itself up correctly, so this is only; .. necessary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* als",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:46441,Modifiability,variab,variable,46441,"essary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* also present).; If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake. C. Build with native Accelerate LAP",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:46596,Modifiability,variab,variable,46596,"-----------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* also present).; If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake. C. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> c",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:46821,Modifiability,variab,variable,46821,"stems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* also present).; If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake. C. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. D. Build with Intel MKL. .. code-block:: bash. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. .. code-b",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:46962,Modifiability,variab,variable,46962,"ibraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* also present).; If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake. C. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. D. Build with Intel MKL. .. code-block:: bash. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. .. code-block:: bash. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. E. Build with Intel MKL from conda (install ``mkl-devel`` package from defaults channel). .. code-b",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:51448,Modifiability,variab,variables,51448,"tion, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; --------------------------------",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:52354,Modifiability,config,configure,52354,"ween BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python library.; * :makevar:`Python_INCLUDE_DIR` |w---w| specify directory of Python headers. Contains ``Python.h``. **Examples**. A. Build with detected Python from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific Python. .. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:58545,Modifiability,variab,variable,58545,"aconda Python; --------------------------------------------------------------------------------. When building against Ana/Miniconda python (e.g., ``cmake; -DPython_EXECUTABLE=/path/to/conda/bin/python``), the warning below often; appears. It is harmless, proceed. .. code-block:: bash. CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. .. _`faq:psi4scratch`:. How to set up the scratch directory; -----------------------------------. The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; commonly set up through the :envvar:`PSI_SCRATCH` environment variable:. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general :ref:`scratch documentation <sec:Scratch>`. .. _`faq:psi4fileretention`:. How do I retain specific Psi4 scratch files; -------------------------------------------. You can set up a specific path for |PSIfour| scratch file and keep them; for later use through the :ref:`psi4_io <sec:Scratch>` handler. .. _`faq:psi4PBS`:. How to use Psi4 within a PBS queue; ----------------------------------. You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the ex",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:59427,Modifiability,variab,variables,59427,"al inefficiencies caused by I/O. The scratch directory is; commonly set up through the :envvar:`PSI_SCRATCH` environment variable:. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general :ref:`scratch documentation <sec:Scratch>`. .. _`faq:psi4fileretention`:. How do I retain specific Psi4 scratch files; -------------------------------------------. You can set up a specific path for |PSIfour| scratch file and keep them; for later use through the :ref:`psi4_io <sec:Scratch>` handler. .. _`faq:psi4PBS`:. How to use Psi4 within a PBS queue; ----------------------------------. You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; --------------------------",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:67492,Modifiability,config,configured,67492," each Add-On, |PSIfour| pulls source from a specific online Git; repository and a specific tag/branch/commit in it. This ensures success; of the |PSIfour| build, reproducibility of the runtime results, and; freedom for continued upstream development. Sometimes, you're the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset. Find the ``CMakeLists.txt`` governing the target Add-On in; :source:`external` and make changes analogous to the below::. #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you're changing the |PSIfour| repo codebase between compiles, there's; nothing more to do as CMake will handle the code rebuild deps for you. If you're changing the local Add-On repo codebase between compiles,; CMake *does not* know when ``libaddon.[a|so|dylib]`` needs rebuilding. It; is recommended that the |PSIfour| build be initially configured with; ``-DBUILD_SHARED_LIBS=ON`` (easier to notice changes). And to trigger; Add-On library rebuild, ``rm -rf {objdir}/external/upstream/addon/``; and ``rm -rf {objdir}/stage/share/cmake/AddOn``. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; |PSIfour| that interface to it, and relink the main ``core.so``.; If you're modifying the Add-On's file or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path contai",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68561,Modifiability,config,config,68561,"e changes). And to trigger; Add-On library rebuild, ``rm -rf {objdir}/external/upstream/addon/``; and ``rm -rf {objdir}/stage/share/cmake/AddOn``. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; |PSIfour| that interface to it, and relink the main ``core.so``.; If you're modifying the Add-On's file or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level ma",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1917,Performance,perform,performance-tuned,1917," Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`,",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:2041,Performance,perform,performance-tuned,2041,":installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:12169,Performance,load,loaded,12169,"rsion] <https://github.com/psi4/psi4/blob/master/external/upstream/erd/CMakeLists.txt#L2>`_. .. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`ecpint <cmake:ecpint>` |w---w| :ref:`[what is ecpint?] <sec:ecpint>` :source:`[ecpint min version] <external/upstream/ecpint/CMakeLists.txt/#L2>`. * :ref:`dkh <cmake:dkh>` |w---w| :ref:`[what is dkh?] <sec:dkh>` :source:`[dkh min version] <external/upstream/dkh/CMakeLists.txt#L2>`. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`gdma <cmake:gdma>` |w---w| :ref:`[what is gdma?] <sec:gdma>` :source:`[gdma min version] <external/upstream/gdma/CMakeLists.txt#L2>`. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`PCMSolver <cmake:pcmsolver>` |w---w| :ref:`[what is PCMSolver?] <sec:pcmsolver>`. * :ref:`Fortran Compiler <cmake:fortran>`; * zlib http://www.zlib.net/. * :ref:`simint <cmake:simint>` |w---w| :ref:`[what is simint?] <sec:simint>` :source:`[simint min version] <external/upstream/simint/CMakeLists.txt#L2>`. Additionally, there are runtime-loaded capabilities:. * :ref:`PylibEFP & libefp <cmake:libefp>` |w---w| :ref:`[what is LibEFP?] <sec:libefp>` :source:`[LibEFP min version] <external/upstream/libefp/CMakeLists.txt#L1>`. * cfour |w---w| :ref:`[what is CFOUR?] <sec:cfour>`. * dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>`. * simple-dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>` (Nov 2022; added by v1.7) preferred alternative to dftd3 https://github.com/dftd3/simple-dftd3. * gcp |w---w| :ref:`[what is gCP?] <sec:gcp>`. * mctc-gcp |w---w| :ref:`[what is gCP?] <sec:gcp>` (Nov 2022; added by v1.7) preferred alternative to gcp https://github.com/grimme-lab/gcp. * dftd4 |w---w| <sec:dftd3> https://github.com/dftd4/dftd4. * mrcc |w---w| :ref:`[what is MPCC?] <sec:mrcc>`. * v2rdm_casscf |w---w| :ref:`[what is v2rdm_casscf?] <sec:v2rdm_casscf>`. * :ref:`sns-mp2 <sec:snsmp2>` |w---w| https://github.com/DEShawResearch/sns-mp2/commits/master. * resp |w---w| https://github.com/cdsgroup/resp. * gpu_dfcc |w---w| https://gi",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:14663,Performance,cache,cache,14663," * :ref:`BrianQC <sec:brianqc>` |w---w| https://www.brianqc.com/. * i-PI |w---w| http://ipi-code.org/. * psixas |w---w| https://github.com/Masterluke87/psixas. * MDI |w---w| https://github.com/MolSSI-MDI/MDI_Library. * :ref:`ddx <sec:ddx>` |w---w| https://github.com/ddsolvation/ddx. .. _`faq:condapsi4dev`:. How to use conda to get a Psi4 development environment; ------------------------------------------------------. |PSIfour| has a lot of dependencies, some of which are complicated; to build. Fortunately, conda can supply them all. A conda; package ``psi4-dev`` is available to gather the dependencies; and build tools needed to compiler |PSIfour| from source. Go to; :psicode:`installs/latest`, select ""source"" and ""nightly build"" along; with Linux/Mac and a Python version. Follow its instructions to create; a conda environment that has a script ``psi4-path-advisor``. Running; ``psi4-path-advisor --help`` shows more options. Running the script; without arguments gives a cmake command that supplies paths to dependency; conda packages to CMake's cache. You can add further cmake options to; this command when you execute it. Once the cmake command has built your; :samp:`{objdir}`, you can build |PSIfour|. Remember to activate this; conda environment during |PSIfour| running or development. There are a; few extra options to ``psi4-path-advisor`` to set up using conda's GNU; compilers (on Linux), conda's Clang compilers (on Mac; less reliably),; or your own Intel compilers backed by conda's GNU compilers (on Linux). .. code-block:: console. >>> git clone https://github.com/psi4/psi4.git && cd psi4; >>> conda create -n p4dev psi4-dev python=3.8 -c psi4/label/dev; >>> conda activate p4dev; >>> `psi4-path-advisor --gcc`; >>> cd objdir && make -j`getconf _NPROCESSORS_ONLN`. .. _`faq:setupmaxameri`:. How to configure code to use high angular momentum basis sets; -------------------------------------------------------------. The :ref:`Libint <sec:libint>` integral code handles; a",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:22332,Performance,optimiz,optimizations,22332,"mon/software/psi4. * Relevant CMake Options:. .. code-block:: bash. CMAKE_INSTALL_PREFIX=PATH # Location to which Psi4 and internally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in Specific Directory; .. ; .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:22592,Performance,optimiz,optimization,22592,"ote:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in Specific Directory; .. ; .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:setupmaxameri`; .. * :ref:`faq:condamaxameri`. .. _`faq:chooseobjdir",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:26258,Performance,load,loader,26258,"xternal proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; see for details:; :ref:`running compiled executable <faq:runordinaryexe>`,; :ref:`running compiled Python module <faq:runordinarymodule>`,; :ref:`running conda binary <faq:runfrombinary>`. * :envvar:`PATH` pointing to ``bin``; * :envvar:`PYTHONPATH` pointing to ``lib`` (ordinary) or ``lib/pythonX.X/site-packages`` (conda); * :envvar:`PSIDATADIR` pointing to ``share/psi4``. .. _`faq:runordinaryexe`:. How to run Psi4 as executable after compilation; -----------------------------------------------. Substituting the full installation directory :samp:`{prefix}` and a; suitable scratch directory, issue the following commands directly in your; terminal or place them into your ""rc"" file and open a new terminal. (To; use a staged installat",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:31714,Performance,perform,performed,31714,"s printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executa",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:39527,Performance,perform,performed,39527,"ll* C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; :source:`cmake/custom_cxxstandard.cmake`, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both ``icpc`` and ``gcc`` versions are checked.; Intel OneAPI Classic compilers work fine. OneAPI beta compilers build but have; been only minimally tested. * :ref:`faq:modgcc`. .. _`faq:macxcode`:. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; -----------------------------------------------------------------------------. The easiest compiler to obtain is ``clang`` which is a drop-in replacement; for ``gcc`` and ``g++``. Just install `XCode; <https://apps.apple.com/us/app/xcode/id497799835>`_. Some old versions; of XCode can't handle some of the advanced C++ language features, but this; is a *software* not *hardware* limitation. Checks for version compliance; performed at build-time. Note that this ""AppleClang"" will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives. Another route to obtaining ``clang`` compilers without the above limitations; is through conda. .. code-block:: bash. # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To Build, activate environment (prepends PATH and defines environment variables CLANG, CLANGXX, HOST, etc):; >>> conda activate clang401; >>> echo ${CLANGXX}; /path/to/miniconda/envs/clang401/bin/x86_64-apple-darwin13.4.0-clang++; >>> echo ${HOST}; x86_64-apple-darwin13.4.0. # build with Clang; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CLANG} \; -DCMAKE_CXX_COMPILER=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLA",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50624,Performance,load,loaders,50624,"h conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:54571,Performance,load,loading,54571,"CUTABLE=""${PFXC}/bin/python"" \; -DPython_LIBRARY=""${PFXC}/lib/libpython3.9.so"" \; -DPython_INCLUDE_DIR=""${PFXC}/include/python3.9"". .. _`faq:runtimepython`:. What Python is Psi4 running; ---------------------------. The Python detected at build-time is embedded into the |PSIfour|; executable. That is, the top line of ``bin/psi4`` is something like; ``#!/path/to/miniconda/envs/p4deps/bin/python3.5``, and that's the Python; through which |PSIfour| is running, rather than the Python of ``which python``.; To use a different Python with |PSIfour| in the short term, just; ``path/to/desired/python psi4`` on the command line to override the; shebang line. To use a different Python with |PSIfour| in the long term,; edit the shebang line. If you're using |PSIfour| as a Python module, then |PSIfour| *is* running; the Python of ``which python``. .. _`faq:wrongpyfalse`:. How to fix ""``undefined symbol: _Py_FalseStruct``""; --------------------------------------------------. You're probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the |PSIfour|; ""executable"", so you'll see this error only for Psi4 as Python module. .. _`faq:gdblldb`:. How to use ``gdb`` and ``lldb`` with Psi4; -----------------------------------------. Debugging |PSIfour| has gotten a little confusing now that it's running through Python. Here's the syntax ::. >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. ::. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. .. .. _`faq:valgrindpsi`:; .. ; .. How to use ``valgrind`` with Psi4; .. ---------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks lik",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:59292,Performance,queue,queue,59292," Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; commonly set up through the :envvar:`PSI_SCRATCH` environment variable:. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See also the more general :ref:`scratch documentation <sec:Scratch>`. .. _`faq:psi4fileretention`:. How do I retain specific Psi4 scratch files; -------------------------------------------. You can set up a specific path for |PSIfour| scratch file and keep them; for later use through the :ref:`psi4_io <sec:Scratch>` handler. .. _`faq:psi4PBS`:. How to use Psi4 within a PBS queue; ----------------------------------. You will usually need to set up a PBS job script that is setting all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63521,Performance,perform,performed,63521,"un tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTAL",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:2842,Safety,detect,detect,2842,", well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:7116,Safety,detect,detected,7116,"--------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python interpreter and headers <cmake:python>` (3.8+) https://www.python.org/. * CMake (3.15+) https://cmake.org/download/. * NumPy (needed at runtime *and* buildtime) https://numpy.org/. * System utilities: GNU make and GNU install or Ninja, POSIX threads (Pthreads) library. The following are also required for |PSIfour|, but if not detected, the; build system will automatically download and build. * :ref:`gau2grid <cmake:gau2grid>` |w---w| :ref:`[what is gau2grid?] <sec:gau2grid>` :source:`[gau2grid min version] <external/upstream/gau2grid/CMakeLists.txt#L1>`. * :ref:`Libint <cmake:libint>` |w---w| :ref:`[what is Libint?] <sec:libint>` :source:`[Libint min version] <external/upstream/libint2/CMakeLists.txt#L1>` (Libint2 as of Nov 2020; added by v1.4). * Eigen https://eigen.tuxfamily.org/index.php?title=Main_Page; * Boost https://www.boost.org/ header-only preprocessor library. * :ref:`Libxc <cmake:libxc>` |w---w| :ref:`[what is Libxc?] <sec:libxc>` :source:`[Libxc min version] <external/upstream/libxc/CMakeLists.txt#L4>`. * pybind11 |w---w| `[what is Pybind11?] <https://pybind11.readthedocs.io/en/stable/>`_ :source:`[Pybind11 min version] <external/upstream/pybind11/CMakeLists.txt#L2>`. * QCElemental |w---w| `[what is QCElemental?] <https://molssi.github.io/QCElemental/>`_. * QCEngine |w---w| `[what is QCEngine?] <ht",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:8886,Safety,avoid,avoidable,8886,"bind11 min version] <external/upstream/pybind11/CMakeLists.txt#L2>`. * QCElemental |w---w| `[what is QCElemental?] <https://molssi.github.io/QCElemental/>`_. * QCEngine |w---w| `[what is QCEngine?] <https://molssi.github.io/QCEngine/>`_ (March 2019; added by v1.4). * optking |w---w| `[what is optking] <https://optking.readthedocs.io/en/latest/>`_ (runtime dependency, required at build-time) . Additionally, there are runtime-only dependencies:. * msgpack-python for MessagePack https://msgpack.org/ (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * NumPy https://numpy.org/. * networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that m",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:17349,Safety,detect,detect,17349,"or source, turn on the keyword,; but parts can only run in serial and parts benefit from parallel, so; it's not recommended. All the AM generation settings would need to be; edited in the above ``CMakeLists.txt`` rather than passing them into; the |PSIfour| build directly. * Build with Higher Angular Momentum. .. code-block:: bash. >>> cmake -DMAX_AM_ERI=6. * Relevant CMake Options:. .. code-block:: bash. MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since |PSIfour| 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all |PSIfour| builds detect that installation at compile-time. To switch a finished build to a larger Libint, enter ``<objdir>``,; remove the result of ``make install`` (if ever invoked), remove; ``external/upstream/libint/``. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove ``stage/include/libint/``, ``stage/share/cmake/Libint/``,; ``stage/lib/libint2.so.2``. Edit MAX_AM_ERI; value in ``CMakeCache.txt``. Reinvoke ``make`` and check the number; beside ``Found Libint`` in the CMake output. Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can't compile above AM7, so you'll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum int",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:17610,Safety,detect,detecting,17610,"make -DMAX_AM_ERI=6. * Relevant CMake Options:. .. code-block:: bash. MAX_AM_ERI=N # The maximum angular momentum level (1=p, 2=d, 3=f,; # etc.) for the libint integrals and derivative; # integrals. A value of N implies a maximum first; # derivative of N-1, and maximum second derivative of; # N-2, so for an atom such as Neon, the default 5 gets; # you conventional cc-pV5Z for energies, cc-pVQZ for; # gradients, cc-pVTZ for frequencies and density-fitted; # cc-pVQZ for energies, cc-pVTZ for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since |PSIfour| 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all |PSIfour| builds detect that installation at compile-time. To switch a finished build to a larger Libint, enter ``<objdir>``,; remove the result of ``make install`` (if ever invoked), remove; ``external/upstream/libint/``. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove ``stage/include/libint/``, ``stage/share/cmake/Libint/``,; ``stage/lib/libint2.so.2``. Edit MAX_AM_ERI; value in ``CMakeCache.txt``. Reinvoke ``make`` and check the number; beside ``Found Libint`` in the CMake output. Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can't compile above AM7, so you'll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum integrals from conda; -----------------------------------------------------. Libint2 conda packages are available from conda for Linux, Mac, and Windows. The Linux package has base ``MAX_AM_ERI=7`` and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fi",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:18090,Safety,detect,detection,18090," for gradients, cc-pVDZ; # for frequencies. [default: 5]. Note that since |PSIfour| 1.1, it is possible to build Libint; independently (or install just the libint conda package), then have; any/all |PSIfour| builds detect that installation at compile-time. To switch a finished build to a larger Libint, enter ``<objdir>``,; remove the result of ``make install`` (if ever invoked), remove; ``external/upstream/libint/``. If earlier Libint was built; internally (as opposed to detecting an external installation),; remove ``stage/include/libint/``, ``stage/share/cmake/Libint/``,; ``stage/lib/libint2.so.2``. Edit MAX_AM_ERI; value in ``CMakeCache.txt``. Reinvoke ``make`` and check the number; beside ``Found Libint`` in the CMake output. Note that the same keyword MAX_AM_ERI controls Libint and simint. simint; can't compile above AM7, so you'll have to turn off simint to get an; internal compile of AM>=8 Libint. The keyword is only a lower bound for; detection, so you can set it at 7, have both Libint and simint enabled,; and point CMake toward a pre-built Libint AM8 just fine. * :ref:`cmake:libint`. .. _`faq:condamaxameri`:. How to get high angular momentum integrals from conda; -----------------------------------------------------. Libint2 conda packages are available from conda for Linux, Mac, and Windows. The Linux package has base ``MAX_AM_ERI=7`` and can run 7z energies; and gradients conventional, 6z energies and gradients density-fitted,; and qz Hessians both conventional and density fitted. The Mac and Windows packages have base ``MAX_AM_ERI=5`` and can run; 5z energies, qz gradients, and tz Hessians, both conventional and; density-fitted. Details about angular momentum settings are available here; :source:`external/upstream/libint2/CMakeLists.txt`; . .. Since February 2019, the |PSIfour| conda package on Linux has been the; .. large AM8. Likewise, this is the package you get upon ::; ..; .. conda install libint -c psi4; ..; .. There is no need for the extra ``am8`` ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:22538,Safety,detect,detected,22538,"ally built; # add-ons are installed (default: /usr/local/psi4). .. note:: It's not guaranteed, but if, in a pinch, you need to install a; built Psi4 to a location *not* configured by ``CMAKE_INSTALL_PREFIX``,; recursively copy the folders under :samp:`{objdir}/stage/{prefix}` to; the desired location, ``chown`` them if needed, edit the shebang in; ``bin/psi4`` if needed, and recursively delete all the "".pyc"" files. It; may just run. .. ###<a name=""profiling""></a>; .. ; .. How to set up a profiling build; .. ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; .. ; .. Specifying build type ``setup --type profile`` prepares a release build; .. type with the addition of extra flags for linking against the profiler; .. `gprof`. .. _`faq:setuptype`:. How to compile for debugging; ----------------------------. Flags to turn optimizations off and debugging on can be set across the; project and plugins with CMake variable ``CMAKE_BUILD_TYPE`` before; compiling. Note that these flags *will not* propagate to any add-ons that; are detected pre-built rather than built. * Build without optimization. .. code-block:: bash. cmake -DCMAKE_BUILD_TYPE=debug. set the CMake build type [default: release]. * Relevant CMake Options:. .. code-block:: bash. CMAKE_BUILD_TYPE=[debug|release] # Build type (Release or Debug)"" [default: release]. .. .. _`faq:setupobjdir`:; .. ; .. How to compile elsewhere than ``{top-level-psi4-dir}/objdir``; .. -------------------------------------------------------------; .. ; .. [How to choose the compilation directory, ``$objdir``](2_Planning#chooseobjdir); .. ; .. * Build in Specific Directory; .. ; .. .. code-block:: bash; .. ; .. cd $top-level-psi4-dir; .. cmake -S. -Bobj-gcc; .. cd obj-gcc. .. .. _`faq:erroreriam`:; ..; .. How to fix error ""``RuntimeError: value for ERI``""; .. --------------------------------------------------; ..; .. You will need to rebuild Libint. Reissue ``cmake`` or edit; .. ``CMakeCache.txt`` with larger ``MAX_AM_ERI`` and rebuild.; ..; .. * :ref:`faq:",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:25591,Safety,detect,detecting,25591,"ARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plugins (plugin template files); share/psi4/fsapt (fsapt scripts); share/psi4/samples/ (sample input files); lib/ (shared libraries and py modules for psi4 + any external proj); # ordinary; lib/psi4/ (object files); lib/psi4/driver/ (py-side, uncompiled); lib/psi4/header.py (prints file header); lib/psi4/metadata.py (psi4 version info); lib/psi4/__init__.py (module marker/loader for psi4.core); lib/psi4/core.cpython-*.so (c-side, compiled and bound by pybind11); # conda; lib/pythonX.X/site-packages/psi4/. The following environment variables point to certain places in the above; directory structure. None to few need to be set; s",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:31641,Safety,redund,redundant,31641,".....................................PASSED. .. _`faq:runfrombinary`:. How to run Psi4 as executable or Python module from conda installation; ----------------------------------------------------------------------. The configuration commands below are generic versions of the ones printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Mini",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:31876,Safety,redund,redundant,31876,"s printed; to your screen as advice upon installing |PSIfour| into a Anaconda,; Miniconda, or Psi4conda distribution, :samp:`{condadist} =; {ana|mini|psi4}conda`. To see the message again after initial installation,; with the conda environment active, run ``.psi4-post-link.sh``.; If ``which conda python psi4`` points to your; :samp:`{condadist}` and ``echo $PSI_SCRATCH`` is set, skip ahead to the; ""Run |PSIfour|\"" commands below. Otherwise, issue the following; commands directly in your terminal or place them into your ""rc"" file and; open a new terminal. If you installed the Psi4conda distribution or installed the |PSIfour|; conda package into the main environment of an Anaconda or Miniconda; distribution and added that to your :envvar:`PATH`, as prompted, then; ``which psi4`` likely yields :samp:`{condadist}/bin/psi4` and the ``PATH``; setting lines below are redundant. If you installed into a conda environment :samp:`{p4env}` and performed; :samp:`conda activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executa",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:32734,Safety,redund,redundant,32734,"a activate {p4env}`, then ``which psi4`` likely yields; :samp:`{condadist}/envs/{p4env}/bin/psi4` and the ``PATH`` setting lines; below are redundant. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; unsetenv PSIDATADIR; setenv PATH {prefix}/bin:$PATH; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; unset PSIDATADIR; export PATH={prefix}/bin:$PATH; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. .. If you installed the Psi4conda distribution or installed the |PSIfour|; .. conda package into the main environment of an Anaconda or Miniconda; .. distribution and added that to your :envvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilation using driver from source; ------------------------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from th",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:35839,Safety,detect,detected,35839," PSIDATADIR {top-level-psi4-dir}/psi4/share/psi4. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSIDATADIR={top-level-psi4-dir}/psi4/share/psi4. .. _`cmake:cxx`:. How to configure C++ and C compilers for building Psi4; ------------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a C++ compiler is vital for building the code. * Downstream Dependencies |w---w| |PSIfour| |dr| C++ Compiler. **CMake Variables**. * :makevar:`CMAKE_CXX_COMPILER` |w---w| CMake variable to specify name or full path to C++ compiler.; * :makevar:`CMAKE_C_COMPILER` |w---w| CMake variable to specify name or full path to C compiler.; * :makevar:`CMAKE_CXX_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for C++ source.; * :makevar:`CMAKE_C_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for C source. **Examples**. A. Build with detected compilers from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific (Intel) compilers from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_CXX_COMPILER=icpc -DCMAKE_C_COMPILER=icc. C. Build with specific (GNU) compilers *not* in :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_CXX_COMPILER=/path/to/gcc6.2/bin/g++ -DCMAKE_C_COMPILER=/path/to/gcc6.2/bin/gcc. D. Build with specific (Intel) compilers from :envvar:`PATH` based on GCC *not* in :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMAKE_CXX_FLAGS=""-gcc-name=${GCC5}/bin/gcc -gxx-name=${GCC5}/bin/g++"". E. Build with specific (Intel) compilers from :envvar:`PATH` based on GCC *not* in :envvar:`PATH` and also building Fortran Add-Ons. .. code-block:: bash. >>> cmake -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_C_FLAGS=""-gcc-name=${GCC5}/bin/gcc"" \; -DCMA",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:43914,Safety,detect,detected,43914," setting environment variables before running `cmake`. ::. CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... .. envvar:: CRAYPE_LINK_TYPE. Set to allow |PSIfour| to build as shared library on Cray supercomputers. .. envvar:: CRAY_ADD_RPATH. Set to true to allow |PSIfour| to build on Cray supercomputers. .. _`cmake:fortran`:. How to configure Fortran compilers for building Psi4; ----------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a Fortran compiler in unneeded for core; features but may be required for add-ons. * Downstream Dependencies. * |PSIfour| (\ |dr| optional) Fortran Compiler; * erd, dkh, gdma, PCMSolver |dr| Fortran Compiler. **CMake Variables**. * :makevar:`CMAKE_Fortran_COMPILER` |w---w| CMake variable to specify name or full path to Fortran compiler.; * :makevar:`CMAKE_Fortran_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for Fortran source. **Examples**. A. Build with detected compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific (Intel) compiler from :envvar:`PATH`. .. code-block:: bash. >>> cmake -DCMAKE_Fortran_COMPILER=ifort. .. _`faq:approvedfc`:. What Fortran compilers are approved; -----------------------------------. On Linux and Mac, the following work nicely. * GNU: ``gfortran``; * Intel: ``ifort``. * Packages to install for specific OS or package managers:. * Ubuntu ``gfortran``; * conda ``gfortran_linux-64`` or ``gfortran_osx-64`` to get ``gfortran``. .. _`faq:macgfortran`:. How to obtain a Fortran compiler for Mac without Fink, MacPorts, or Homebrew; ----------------------------------------------------------------------------. Xcode does not provide a Fortran compiler. A way to get one is to download; the ``gfortran_osx-64`` conda package. This provides; ``gfortran`` compilers for Mac. The version is 4.8.5, which is quite old,; but the Fortran compiler will work. .. Xcode does not provide a Fortran compiler. Although ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:46338,Safety,detect,detection,46338," GFortran from; .. <http://r.research.att.com/tools/>. If you configure Psi on a Mac without; .. any Fortran compiler it will set itself up correctly, so this is only; .. necessary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* als",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:46516,Safety,detect,detection,46516,"essary if you want a Fortran compiler for other purposes. .. _`cmake:lapack`:. How to configure BLAS/LAPACK for building Psi4; ----------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, BLAS and LAPACK control much of the speed; and efficiency of the code since computational chemistry is essentially; linear algebra on molecular systems. * Downstream Dependencies |w---w| |PSIfour| |dr| LAPACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* also present).; If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake. C. Build with native Accelerate LAP",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:46892,Safety,detect,detection,46892,"ACK Libraries. **CMake Variables**. * :makevar:`BLAS_TYPE` |w---w| CMake variable to specify which BLAS libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* also present).; If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake. C. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. D. Build with Intel MKL. .. code-block:: bash. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. .. code-block:: bash. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ c",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:47038,Safety,detect,detected,47038,"ibraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_TYPE` |w---w| CMake variable to specify which LAPACK libraries to look for among ``MKL|OPENBLAS|ESSL|ATLAS|ACML|SYSTEM_NATIVE``.; * :makevar:`LAPACK_LIBRARIES` |w---w| CMake variable to specify BLAS/LAPACK libraries explicitly, bypassing math detection. Should be "";""-separated list of full paths.; * :makevar:`LAPACK_INCLUDE_DIRS` |w---w| CMake variable to specify BLAS/LAPACK header location explicitly, bypassing math detection. Only needed for MKL.; * :makevar:`OpenMP_LIBRARY_DIRS` |w---w| CMake variable to specify OpenMP library (iomp5/gomp/omp) directories explicitly. Should be "";""-separated list of full directory paths. Usually the solution to error ``Could NOT find MathOpenMP``. .. envvar:: MKL_ROOT. Environment variable set by Intel compilervars scripts. Sufficient to trigger math detection of MKL at this location. .. envvar:: MATH_ROOT. Environment variable to specify root directory in which BLAS/LAPACK libraries should be detected (*e.g.*, ``${MATH_ROOT}/lib64/libblas.so`` and ``${MATH_ROOT}/lib64/liblapack.so``). **Examples**. A. Build with any LAPACK in standard location. .. code-block:: bash. >>> cmake. B. Build with native Accelerate LAPACK on Mac (MKL *not* also present).; If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake. C. Build with native Accelerate LAPACK on Mac (MKL also present); If NumPy *not* using native Accelerate LAPACK, then directing Psi4; to use it is Bad Idea!. .. code-block:: bash. >>> cmake -DBLAS_TYPE=SYSTEM_NATIVE -DLAPACK_TYPE=SYSTEM_NATIVE. D. Build with Intel MKL. .. code-block:: bash. >>> source /path/to/intel/vers/linux/mkl/bin/mklvars.sh intel64 # adjust sh/csh and arch as needed; >>> cmake. .. code-block:: bash. >>> MATH_ROOT=/path/to/intel/vers/linux/mkl/ cmake. E. Build with Intel MKL from conda (install ``mkl-devel`` package from defaults channel). .. code-b",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:49928,Safety,avoid,avoid,49928,"Notes**. * Much of |PSIfours| speed and efficiency depends on the corresponding; speed and efficiency of the linked BLAS and LAPACK libraries; (especially the former). Consider the following recommendations:. * It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmk",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50038,Safety,risk,risk,50038,"r the following recommendations:. * It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for g",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50245,Safety,safe,safe,50245,"e completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also lin",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50278,Safety,safe,safe,50278,"e completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also lin",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50311,Safety,safe,safe,50311,"e completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also lin",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:51213,Safety,detect,detected,51213,"aded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``m",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:51358,Safety,detect,detection,51358,"https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threadi",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:51418,Safety,detect,detection,51418,"tion, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; --------------------------------",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:51870,Safety,detect,detection,51870,"own to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually o",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:52189,Safety,detect,detected,52189,"conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake variables is purely formal. In practice, they get run; together and linked as ``${LAPACK_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python li",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:52776,Safety,detect,detection,52776,"acml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python library.; * :makevar:`Python_INCLUDE_DIR` |w---w| specify directory of Python headers. Contains ``Python.h``. **Examples**. A. Build with detected Python from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific Python. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=/path/to/interp/python3.9. C. Build with full Python specification to root directory ``${PFXC}``. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=""${PFXC}/bin/python"" \; -DPython_LIBRARY=""${PFXC}/lib/libpython3.9.so"" \; -DPython_INCLUDE_DIR=""${PFXC}/include/python3.9"". .. _`faq:runtimepython`:. What Python is Psi4 running; ---------",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:52820,Safety,detect,detection,52820,"acml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python library.; * :makevar:`Python_INCLUDE_DIR` |w---w| specify directory of Python headers. Contains ``Python.h``. **Examples**. A. Build with detected Python from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific Python. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=/path/to/interp/python3.9. C. Build with full Python specification to root directory ``${PFXC}``. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=""${PFXC}/bin/python"" \; -DPython_LIBRARY=""${PFXC}/lib/libpython3.9.so"" \; -DPython_INCLUDE_DIR=""${PFXC}/include/python3.9"". .. _`faq:runtimepython`:. What Python is Psi4 running; ---------",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:53285,Safety,detect,detected,53285,"ated to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python library.; * :makevar:`Python_INCLUDE_DIR` |w---w| specify directory of Python headers. Contains ``Python.h``. **Examples**. A. Build with detected Python from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific Python. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=/path/to/interp/python3.9. C. Build with full Python specification to root directory ``${PFXC}``. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=""${PFXC}/bin/python"" \; -DPython_LIBRARY=""${PFXC}/lib/libpython3.9.so"" \; -DPython_INCLUDE_DIR=""${PFXC}/include/python3.9"". .. _`faq:runtimepython`:. What Python is Psi4 running; ---------------------------. The Python detected at build-time is embedded into the |PSIfour|; executable. That is, the top line of ``bin/psi4`` is something like; ``#!/path/to/miniconda/envs/p4deps/bin/python3.5``, and that's the Python; through which |PSIfour| is running, rather than the Python of ``which python``.; To use a different Python with |PSIfour| in the short term, just; ``path/to/desired/python psi4`` on the command line to override the; shebang line. To use a different Python with |PSIfour| in the long term,; e",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:53807,Safety,detect,detected,53807,"ally only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python library.; * :makevar:`Python_INCLUDE_DIR` |w---w| specify directory of Python headers. Contains ``Python.h``. **Examples**. A. Build with detected Python from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific Python. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=/path/to/interp/python3.9. C. Build with full Python specification to root directory ``${PFXC}``. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=""${PFXC}/bin/python"" \; -DPython_LIBRARY=""${PFXC}/lib/libpython3.9.so"" \; -DPython_INCLUDE_DIR=""${PFXC}/include/python3.9"". .. _`faq:runtimepython`:. What Python is Psi4 running; ---------------------------. The Python detected at build-time is embedded into the |PSIfour|; executable. That is, the top line of ``bin/psi4`` is something like; ``#!/path/to/miniconda/envs/p4deps/bin/python3.5``, and that's the Python; through which |PSIfour| is running, rather than the Python of ``which python``.; To use a different Python with |PSIfour| in the short term, just; ``path/to/desired/python psi4`` on the command line to override the; shebang line. To use a different Python with |PSIfour| in the long term,; edit the shebang line. If you're using |PSIfour| as a Python module, then |PSIfour| *is* running; the Python of ``which python``. .. _`faq:wrongpyfalse`:. How to fix ""``undefined symbol: _Py_FalseStruct``""; --------------------------------------------------. You're probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the |PSIfour|; ""executable"", so you'll see this error only for Psi4 as Python module. .. _`faq:gdblldb`:. How to use ``gdb`` and ``lldb`` with Ps",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:57877,Safety,safe,safe,57877,"seful debugging information to make the; compilation cleaner. Issue ``make VERBOSE=1`` to display the full; compilation commands and errors. .. _`faq:vigitmerge`:. How to highlight git merge conflicts in ``vi``; ----------------------------------------------. Edit your ``~/.vimrc`` file to include the lines below. Hitting the ``F7``; key will toggle highlighting of git's conflict markers. .. code-block:: bash. >>> cat ~/.vimrc; set hlsearch; map <F7> :/\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>. .. _`faq:libmwcondapy`:. How to handle ""runtime library may be hidden"" when building with Anaconda Python; --------------------------------------------------------------------------------. When building against Ana/Miniconda python (e.g., ``cmake; -DPython_EXECUTABLE=/path/to/conda/bin/python``), the warning below often; appears. It is harmless, proceed. .. code-block:: bash. CMake Warning at src/bin/psi4/CMakeLists.txt:58 (add_executable):; Cannot generate a safe runtime search path for target psi4 because files in; some directories may conflict with libraries in implicit directories:. runtime library [libm.so.6] in /usr/lib64 may be hidden by files in:; /theoryfs2/common/software/anaconda/lib. Some of these libraries may not be found correctly. .. _`faq:psi4scratch`:. How to set up the scratch directory; -----------------------------------. The scratch directory is where Psi4 stores potentially large files during; computation. It should thus be on a local, fast disk to minimize any; computational inefficiencies caused by I/O. The scratch directory is; commonly set up through the :envvar:`PSI_SCRATCH` environment variable:. .. code-block:: tcsh. # csh, tcsh: add to shell or ~/.tcshrc file; setenv PSI_SCRATCH /path/to/existing/writable/local-not-network/directory/for/scratch/files. .. code-block:: bash. # sh, bash: add to shell or ~/.bashrc (Linux/Windows) or ~/.bash_profile (Mac) file; export PSI_SCRATCH=/path/to/existing/writable/local-not-network/directory/for/scratch/files. See ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64030,Safety,detect,detectable,64030," look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68197,Safety,avoid,avoid,68197,", there's; nothing more to do as CMake will handle the code rebuild deps for you. If you're changing the local Add-On repo codebase between compiles,; CMake *does not* know when ``libaddon.[a|so|dylib]`` needs rebuilding. It; is recommended that the |PSIfour| build be initially configured with; ``-DBUILD_SHARED_LIBS=ON`` (easier to notice changes). And to trigger; Add-On library rebuild, ``rm -rf {objdir}/external/upstream/addon/``; and ``rm -rf {objdir}/stage/share/cmake/AddOn``. This should; re-clone the Add-On, rebuild and install it, rebuild any parts of; |PSIfour| that interface to it, and relink the main ``core.so``.; If you're modifying the Add-On's file or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; fil",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:52546,Security,access,accessed,52546,"_LIBRARIES} ${BLAS_LIBRARIES}``. * Sometimes the CMake's library search capabilites falter at SONAMEs; (*e.g.*, ``libblas.so.3`` *vs.* ``libblas.so``), extensions (static; *vs.* dynamic), or suffixes (*e.g.*, ``libacml_mp.so`` *vs.*; ``libacml.so``). The developers would be interested in hearing; of such problems to expand the math detection capabilities. The; immediate solution, however, is to form symlinks between the; library names that exist and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python library.; * :makevar:`Python_INCLUDE_DIR` |w---w| specify directory of Python headers. Contains ``Python.h``. **Examples**. A. Build with detected Python from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific Python. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=/path/to/interp/python3.9. C. Build with full Python specification to root directory ``${PFXC}``. .",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1904,Testability,test,tested,1904," Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`,",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:2032,Testability,test,tested,2032,":installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:4185,Testability,test,test,4185,"cies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; .. * :ref:`faq:chooseobjdir`; .. * :ref:`faq:setupprefix`; .. * :ref:`faq:setuptype`; .. * :ref:`faq:setupmaxameri`. .. _`faq:buildquick`:. How to build and install Psi4, the compact version; --------------------------------------------------. This section outlines the main steps of configuring, compiling, and; installing |PSIfour|. More detail is given :ref:`here; <faq:builddetailed>`. .. code-block:: console. >>> cd {top-level-psi4-dir}; >>> cmake -S. -Bobjdir [your configuration options]; # make; >>> cd objdir; >>> make -j`getconf _NPROCESSORS_ONLN`; >>> make install; # -or- general; >>> cmake --build objdir --target install -j`getconf _NPROCESSORS_ONLN`. .. _`faq:builddetailed`:. How to build, test, and install Psi4, in detail; -----------------------------------------------. **1. Plan Directories**. Get ahold of the |PSIfour| codebase, and navigate to the top level source; directory, hereafter :samp:`{top-level-psi4-dir}`. * :ref:`faq:obtainpsi4`. ::. >>> cd {top-level-psi4-dir}. Choose a compilation directory, hereafter :samp:`{objdir}`. * :ref:`faq:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5559,Testability,test,test,5559,"q:chooseobjdir`. Choose an installation directory, hereafter :samp:`{prefix}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structur",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5639,Testability,test,testsoutput,5639,"}`. * :ref:`faq:setupprefix`. **2. Plan Configuration**. Examine the strict and optional software requirements to make sure the; target computer has all the necessary dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:c",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:5776,Testability,test,tests,5776,"y dependencies installed. * :ref:`faq:coredepend`; * :ref:`faq:addondepend`. Prepare any necessary or desired configuration options for ``cmake``,; hereafter ``[your configuration options]``. * :ref:`faq:setuphelp`; * :ref:`faq:cmakeviasetup`. **3. Configure**. Run CMake with planned options and directories, as below. It reports on; software found or unfound as it scans the computer, then (upon success); creates :samp:`{objdir}` ready for compilation. ::. >>> cmake -S. -B{objdir} -DCMAKE_INSTALL_PREFIX={prefix} [your configuration options]. **4. Compile**. Compile the code (optional ``-j`` triggers parallel compilation). .. code-block:: console. >>> cd {objdir}; >>> cmake --build . -j`getconf _NPROCESSORS_ONLN`. **5. Test**. Optionally, use CTest and Pytest to test the build. * :ref:`faq:minutetests`; * :ref:`faq:subsettests`; * :ref:`faq:testsoutput`; * :ref:`faq:pytest`. .. code-block:: console. >>> ctest -j`getconf _NPROCESSORS_ONLN`. >>> make pytest. **6. Install**. If tests pass, install the code. ::. >>> cmake --install . **7. Configure Runtime**. To run |PSIfour| after installation, you need to configure a few variables:. * :ref:`faq:runordinaryexe`; * :ref:`faq:runordinarymodule`. .. _`faq:coredepend`:. What are the tools and dependencies strictly required for building Psi4; -----------------------------------------------------------------------. The core |PSIfour| build requires the software below. Note that; practically everything (including Python, CMake, NumPy, BLAS/LAPACK,; Libint, and even C++ compilers on Linux and Mac) can be; satisfied through conda. The links below give examples of how to configure; that software for |PSIfour| and any notes and warnings pertaining to it. See :source:`codedeps.yaml` for a structured listing and history of dependencies. * :ref:`C++ and C Compilers <cmake:cxx>` (C++17 compliant). * :ref:`Optimized BLAS and LAPACK libraries <cmake:lapack>` (preferably NOT one supplied by a standard; Linux distribution). * :ref:`Python i",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:9418,Testability,test,testing,9418,"ive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * NumPy https://numpy.org/. * networkx https://github.com/networkx/networkx (transitive dependency of QCElemental; optional for QCElemental but required for |PSIfour|). * pint https://pint.readthedocs.io/en/latest/ (transitive dependency of QCElemental). * pydantic https://pydantic-docs.helpmanual.io/# (transitive dependency of QCElemental). * SciPy https://scipy.org/ (avoidable if necessary by following directions in runtime error message). * py-cpuinfo (provides ``import cpuinfo``) https://github.com/workhorsy/py-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebook",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10043,Testability,test,testing,10043,"y-cpuinfo (transitive dependency of QCEngine). * psutil https://github.com/giampaolo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://suppo",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10116,Testability,test,testing,10116,"olo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://support.hdfgroup.org/HDF5/; * zlib http://www.zlib.net/. .. * :ref:`erd <cmake:erd>` |",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:10129,Testability,test,tests,10129,"olo/psutil (transitive dependency of QCEngine). Dropped Dependencies:. * Boost (September 2016; dropped by v1.1). * deepdiff https://github.com/seperman/deepdiff (May 2019; dropped by v1.4). * MPFR https://www.mpfr.org/ (Mar 2022; dropped by v1.6) no longer needed to compile against Libint2. * Perl for testing (April 2022; dropped by v1.6). .. _`faq:addondepend`:. What are the add-on capabilities for Psi4 and what are their dependencies; -------------------------------------------------------------------------. Each of the items below is an independent additional capability that can; be built with |PSIfour|. Sub-items below are the respective additional; dependencies of the add-on. Select which, if any, you want, and examine; the links for appropriate enabling arguments to ``cmake``. Note that many; are available pre-built from conda. * |PSIfour| Testing. * CTest https://cmake.org/download/; * pytest (for installed testing) http://doc.pytest.org/en/latest/; * pytest-xdist (for installed testing many tests at once) https://github.com/pytest-dev/pytest-xdist. * |PSIfour| Documentation (available pre-built at :psicode:`psi4manual/master/index.html`). * Sphinx (3.5+) http://sphinx-doc.org; * Perl (for some auto-documentation scripts) https://www.perl.org/; * nbsphinx (for converting Jupyter notebooks) http://nbsphinx.readthedocs.io/en/jupyter-theme/; * sphinx-psi-theme https://github.com/psi4/sphinx-psi-theme; * See :source:`[""message"" lines] <doc/sphinxman/CMakeLists.txt>` for advice on obtaining docs dependencies or :source:`[conda env spec] <devtools/conda-envs/docs-cf.yaml>`; * See :source:`.github/workflows/docs.yml` for full docs building procedure to follow. * Ambit |w---w| https://github.com/jturney/ambit. * :ref:`CheMPS2 <cmake:chemps2>` |w---w| :ref:`[what is CheMPS2?] <sec:chemps2>` :source:`[CheMPS2 min version] <external/upstream/chemps2/CMakeLists.txt#L2>`. * HDF5 https://support.hdfgroup.org/HDF5/; * zlib http://www.zlib.net/. .. * :ref:`erd <cmake:erd>` |",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:24869,Testability,test,tested,24869,"r} && cmake -S. -Bbuild``. * in-source builds (``*.cc`` and ``*.o`` in same directory) are disallowed; * builds *outside* :samp:`{top-level-psi4-dir}` are permitted. .. _`faq:doconfigure`:. How to save configuration settings for a future compilation; -----------------------------------------------------------. Create a file like ``do-configure`` with the ``cmake`` command and options; *on one line*. ::. >>> cd {top-level-psi4-dir}; >>> cat do-configure; cmake -S. -B{objdir} \; -DCMAKE_INSTALL_PATH=""/Users/me/psi4"" \; -DCMAKE_PREFIX_PATH=""/Users/me/externals/install-libint"" \; -DMAX_AM_ERI=6 \; -DENABLE_gdma=ON \; -DBUILD_SHARED_LIBS=ON; >>> chmod u+x do-configure; >>> ./do-configure. .. _`faq:dirlayoutinstall`:. What is the directory layout of the installed or staged Psi4; ------------------------------------------------------------. After compilation (:samp:`cd {objdir} && make`), a directory structure like the; below will exist at :samp:`{objdir}/stage`. This may be tested and used; just like a full installation. After installation (:samp:`cd {objdir} && make && make install`), a directory; structure like the below will exist at :samp:`/{prefix}`. This is a full; installation. .. code-block:: bash. /; bin/ (executables for psi4 + any external proj); bin/psi4 (psi4 executable, actually just a py script); include/ (installed headers for psi4 + any external proj); include/psi4/ (header files for #include-ing); include/psi4/psi4-dec.h (primary psi4 header); include/psi4/masses.h (a project-wide psi4 header); include/psi4/libmints/ (psi4 library headers); include/psi4/libfock/ (ditto); share/ (read-only arch-indep files for psi4 + any external proj); share/cmake/psi4/ (files for detecting installed targets); share/cmake/psi4/psi4Config.cmake (psi4 build/install info); share/cmake/psi4/psi4ConfigVersion.cmake (psi4 cmake version info); share/doc/psi4/html/ (sphinx html documentation); share/psi4/ (text files needed by psi4); share/psi4/basis (basis sets); share/psi4/plu",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:33571,Testability,test,test,33571,"nvvar:`PATH`, as prompted, then; .. :samp:`{condadist} = $HOME/{ana|mini|psi4}conda` and ``which psi4`` likely; .. yields :samp:`{condadist}/bin/psi4` and the ``PATH`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilation using driver from source; ------------------------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available. ::. >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. .. _`faq:psidatadir`:. Why not to set :envvar:`PSIDATADIR`; -----------------------------------. :envvar:`PSIDATADIR` is an environment variable containing the location of the; text resource parts of the |PSIfour| codebase (*e.g.*, basis sets,; databases, EFP fragments). It is for developer use only. In |PSIfour| 1.1; and beyond, the program *always* knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in |PSIfour| 1.0 and ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:38721,Testability,test,test,38721,"FIX}/${HOST}/sysroot"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${CONDA_PREFIX}/bin/${HOST} --sysroot=${CONDA_PREFIX}/${HOST}/sysroot"". H. Build on Linux with specific (GCC) compilers from; from conda in **activated** environment; (:envvar:`CONDA_PREFIX` and :envvar:`HOST` are defined upon; activation). .. code-block:: bash. >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. .. _`faq:approvedcxx`:. What C and C++ compilers and versions are approved; --------------------------------------------------. On Linux, the following work nicely. * GNU: ``gcc``, ``g++``; * Intel: ``icc``, ``icpc``; * Clang: ``clang``, ``clang++``. On Mac, the following work nicely. * Apple Clang: ``clang``, ``clang++``; * Intel: ``icc``, ``icpc``. |PSIfour| requires *full* C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; :source:`cmake/custom_cxxstandard.cmake`, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both ``icpc`` and ``gcc`` versions are checked.; Intel OneAPI Classic compilers work fine. OneAPI beta compilers build but have; been only minimally tested. * :ref:`faq:modgcc`. .. _`faq:macxcode`:. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; -----------------------------------------------------------------------------. The easiest compiler to obtain is ``clang`` which is a drop-in replacement; for ``gcc`` and ``g++``. Just install `XCode; <https://apps.apple.com/us/app/xcode/id497799835>`_. Some old versions; of XCode can't handle some of the advanced C++ language features, but this; is a *software* not *hardware* limitation. Checks for version compliance; performed at build-time. Note that this ""AppleClang"" will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives. Another route to obtaining ``clang`` co",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:38975,Testability,test,tested,38975,"var:`CONDA_PREFIX` and :envvar:`HOST` are defined upon; activation). .. code-block:: bash. >>> cmake -DCMAKE_C_COMPILER=${GCC} \; -DCMAKE_CXX_COMPILER=${GXX} \; -DCMAKE_Fortran_COMPILER=${GFORTRAN}. .. _`faq:approvedcxx`:. What C and C++ compilers and versions are approved; --------------------------------------------------. On Linux, the following work nicely. * GNU: ``gcc``, ``g++``; * Intel: ``icc``, ``icpc``; * Clang: ``clang``, ``clang++``. On Mac, the following work nicely. * Apple Clang: ``clang``, ``clang++``; * Intel: ``icc``, ``icpc``. |PSIfour| requires *full* C++11 compliance, meaning, most importantly, GCC; >= 4.9. This compliance is checked for at build-time with file; :source:`cmake/custom_cxxstandard.cmake`, so either consult that file or; try a test build to ensure your compiler is approved. Note that Intel; compilers on Linux also rely on GCC, so both ``icpc`` and ``gcc`` versions are checked.; Intel OneAPI Classic compilers work fine. OneAPI beta compilers build but have; been only minimally tested. * :ref:`faq:modgcc`. .. _`faq:macxcode`:. How to obtain C and C++ compilers for Mac without Fink, MacPorts, or Homebrew; -----------------------------------------------------------------------------. The easiest compiler to obtain is ``clang`` which is a drop-in replacement; for ``gcc`` and ``g++``. Just install `XCode; <https://apps.apple.com/us/app/xcode/id497799835>`_. Some old versions; of XCode can't handle some of the advanced C++ language features, but this; is a *software* not *hardware* limitation. Checks for version compliance; performed at build-time. Note that this ""AppleClang"" will not be compatible; with conda Mac packages using C++11, nor can it make use of OpenMP directives. Another route to obtaining ``clang`` compilers without the above limitations; is through conda. .. code-block:: bash. # Install Clang 4.0.1 into a non-primary conda environment; >>> conda create -n clang401 clangxx_osx-64 clang_osx-64 llvm-openmp intel-openmp. # To ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:41303,Testability,test,tested,41303,"R=${CLANGXX} \; -DCMAKE_CXX_FLAGS=""-stdlib=libc++"" \; -DOpenMP_CXX_FLAG=""-fopenmp=libiomp5"". # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-clang-name=${CLANG}"" \; -DCMAKE_CXX_FLAGS=""-clang-name=${CLANG} -clangxx-name=${CLANGXX} -stdlib=libc++ -I${CONDA_PREFIX}/include/c++/v1"". # Configure and build. .. _`faq:modgcc`:. How to satisfy the GCC >= 4.9 requirement on Linux without updating the OS; --------------------------------------------------------------------------. .. code-block:: bash. # See if GCC too old (in this case, yes); >>> gcc --version; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-4). Even if you're not using GCC as a compiler, your Intel compiler seeks; `gcc` to generate code compatible with your current GCC version. If your; GCC is too old (like above), you can update your system GCC through your; package manager *or* install an acceptable version elsewhere on your; system. The latter route, tested on Linux with Intel compilers, is below. .. code-block:: bash. # Install GCC 7.2 into a non-primary conda environment; >>> conda create -n gcc72 gxx_linux-64 gcc_linux-64. # To Build, either:. # (A) activate environment (prepends PATH and defines environment variables CC, CXX, HOST, etc); >>> conda activate gcc72; >>> echo ${CXX}; /path/to/miniconda/envs/gcc72/bin/x86_64-conda_cos6-linux-gnu-g++; >>> echo ${HOST}; x86_64-conda_cos6-linux-gnu. # build with GNU; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=${CC} \; -DCMAKE_CXX_COMPILER=${CXX} \. # build with Intel; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gn",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50053,Testability,test,testing,50053,"r the following recommendations:. * It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for g",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50102,Testability,test,tests,50102,"r the following recommendations:. * It is NOT wise to use the stock BLAS library provided with many; Linux distributions like RedHat, as it is usually just the completely; unoptimized netlib distribution. The choice of LAPACK is less; critical, and so the unoptimized netlib distribution is acceptable. * Perhaps the best choice, if available, is Intel's MKL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for g",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:50485,Testability,test,testing,50485,"KL library,; which includes efficient threaded BLAS and LAPACK (as of |PSIfour|; v1.1, earliest known working version is MKL 2013; as of v1.4,; should use at leat MKL 2019). MKL, which is; freely available through conda, is the only threaded BLAS/LAPACK; distribution fully supported by |PSIfour|. * On Mac, the native Accelerate libraries are very nice and would; be recommended but for the potential conflict between |PSIfour|; BLAS and NumPy BLAS. Unless you've a special NumPy, avoid!. * The open-source LAPACK distributions OpenBLAS (formerly GotoBLAS); mostly works. Use it at your own risk and after testing your; particular distribution, including tests run multithreaded,; if you intend to run |PSIfour| so. Use at least 0.2.15, and; pay attention to how it was compiled - unthreaded seems safe,; openmp-threaded is mostly safe, default pthreaded is *not* safe. See; https://github.com/psi4/psi4/issues/1009 for recent analysis. * Another open-source LAPACK distribution, ATLAS had; stability issues with the DFOCC module at last testing,; https://github.com/psi4/psi4/issues/391. * ACML libraries are known to work with |PSIfour| v1.1 at ACML 6. * Because of how link loaders work, at runtime, the BLAS of |PSIfour|; and the BLAS of NumPy are not independent. There can be unpredictable; but reproducible numerical and thread-scaling errors if |PSIfour|; and NumPy BLAS don't match down to the library name (that is,; ``libmkl_rt``, ``libmkl_core.so``, ``libmkl_core.a`` are *not*; interchangeable). See https://github.com/psi4/psi4/issues/1007,; https://github.com/psi4/psi4/issues/748,; https://github.com/psi4/psi4/issues/755 for gory discussions.; Choose your NumPy and |PSIfour| compile conditions to use the same; BLAS distribution. * The BLAS/LAPACK detected for |PSIfour| are also linked into any; Add-Ons (*e.g.*, libefp) that require them, rather than relying on; those packages' native math detection. * The separation between BLAS and LAPACK seen in detection printing; and CMake",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:55045,Testability,test,tests,55045,"Python of ``which python``.; To use a different Python with |PSIfour| in the short term, just; ``path/to/desired/python psi4`` on the command line to override the; shebang line. To use a different Python with |PSIfour| in the long term,; edit the shebang line. If you're using |PSIfour| as a Python module, then |PSIfour| *is* running; the Python of ``which python``. .. _`faq:wrongpyfalse`:. How to fix ""``undefined symbol: _Py_FalseStruct``""; --------------------------------------------------. You're probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the |PSIfour|; ""executable"", so you'll see this error only for Psi4 as Python module. .. _`faq:gdblldb`:. How to use ``gdb`` and ``lldb`` with Psi4; -----------------------------------------. Debugging |PSIfour| has gotten a little confusing now that it's running through Python. Here's the syntax ::. >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. ::. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. .. .. _`faq:valgrindpsi`:; .. ; .. How to use ``valgrind`` with Psi4; .. ---------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in the way of suppression files. Calling Valgrind as:; .. ; .. ```bash; .. valgrind --suppressions=<file_name>; .. ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/sh",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:55154,Testability,test,tests,55154,"red/python psi4`` on the command line to override the; shebang line. To use a different Python with |PSIfour| in the long term,; edit the shebang line. If you're using |PSIfour| as a Python module, then |PSIfour| *is* running; the Python of ``which python``. .. _`faq:wrongpyfalse`:. How to fix ""``undefined symbol: _Py_FalseStruct``""; --------------------------------------------------. You're probably loading a Py3-compiled Psi4 in Py2. Switch interpreters; and re-run. A python of proper Py2 or Py3-ness is baked into the |PSIfour|; ""executable"", so you'll see this error only for Psi4 as Python module. .. _`faq:gdblldb`:. How to use ``gdb`` and ``lldb`` with Psi4; -----------------------------------------. Debugging |PSIfour| has gotten a little confusing now that it's running through Python. Here's the syntax ::. >>> cd {objdir}; >>> lldb -- python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (lldb) run. ::. >>> cd {objdir}; >>> gdb --args python stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat; >>> (gdb) run. .. .. _`faq:valgrindpsi`:; .. ; .. How to use ``valgrind`` with Psi4; .. ---------------------------------; .. ; .. When you naively use Valgrind with Psi4, you're likely to get incomprehensible mess of garbage or it may just crash with a boost overflow error. This happens because the boost python layer looks really really bad as far as Valgrind is concerned, i.e. it looks like a ton of memory leaks. It really isn't, so we want to ignore all such errors/warnings. Valgrind has a mechanism for this in the way of suppression files. Calling Valgrind as:; .. ; .. ```bash; .. valgrind --suppressions=<file_name>; .. ```; .. ; .. will run valgrind with the suppression file located on disk at ""file_name"". Lucky for you, Psi4 comes with such a suppression file at [``$top-level-psi4-dir/psi4/share/psi4/scripts/valgrind-python.supp``](../blob/master/psi4/share/psi4/scripts/valgrind-python.supp). This should remove all the python errors.; .. ; .. The other error, b",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60392,Testability,test,tests,60392,"g all; necessary environment variables, making sure the scratch directories are; set up, and invoking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that cont",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60472,Testability,test,test,60472,"oking the executable. An :ref:`example <sec:PBS>` PBS script; is provided in the manual, but make sure to also consult your own PBS; documentation for appropriate setup. .. _`faq:recompile`:. How to update and rebuild Psi4; ------------------------------. Obtain code updates as appropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60768,Testability,test,tests,60768,"ppropriate from :ref:`faq:binary`,; :ref:`faq:clonepsi4public`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by l",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60854,Testability,test,test,60854,"c`, or :ref:`faq:forkpsi4public`. Move into; :samp:`{objdir}` and reissue ``make`` or ``cmake --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60891,Testability,test,testname,60891,"ke --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). F",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60923,Testability,test,test,60923,"ke --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). F",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60935,Testability,test,tests,60935,"ke --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). F",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:60950,Testability,test,testlabel,60950,"ke --build .``, whereupon CMake may reconfigure but; will only rebuild objects and libraries depending on changed files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). F",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61059,Testability,test,tests,61059,"d files. It is; scarcely ever necessary for the user to reinvoke ``cmake`` to update; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytes",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61105,Testability,test,tests,61105,"te; :samp:`{objdir}` based on changes to the |PSIfour| repository.; Upon switching conda environments, though, one should; make a new objdir since there are many full paths baked into; :samp:`{objdir}/CMakeCache.txt`. .. _`faq:minutetests`:. How to run a minute's worth of tests; ------------------------------------. When you want to do a very minimal test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61240,Testability,test,test,61240,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61290,Testability,test,tests,61290,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61383,Testability,test,tests,61383,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61438,Testability,test,test,61438,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61499,Testability,test,tests,61499,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61580,Testability,test,tests,61580,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61615,Testability,test,testname,61615,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61633,Testability,test,tests,61633,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61675,Testability,test,testname,61675,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61693,Testability,test,tests,61693,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61729,Testability,test,testlabel,61729,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61748,Testability,test,tests,61748,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61792,Testability,test,testlabel,61792,"test of the build and have; CTest installed, the following command can be useful. .. code-block:: console. >>> ctest -L smoke -j`getconf _NPROCESSORS_ONLN`. If you have pytest installed, very similar coverage is obtained through::. >>> make pytest. .. _`faq:subsettests`:. How to run a subset of tests; ----------------------------. CTest allows flexibly partitioned running of the test suite. In; the examples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and no",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61841,Testability,test,tests,61841,"ples below, *testname* are regex of :source:`test names <tests>`,; and *testlabel* are regex of labels (*e.g.*, ``cc``, ``mints``,; ``libefp`` defined :source:`[here, for example] <tests/ci-property/CMakeLists.txt#L3>` . * Run tests in parallel with ``-j`` flag. For maximum parallelism (not Windows): :samp:`ctest -j\`getconf _NPROCESSORS_ONLN\`\ `; * Run full test suite: ``ctest``; * Run about a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:61984,Testability,test,test,61984,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62024,Testability,test,tests,62024,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62080,Testability,test,tests,62080,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62162,Testability,test,tests,62162,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62198,Testability,test,testname,62198,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62216,Testability,test,tests,62216,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62264,Testability,test,testname,62264,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62283,Testability,test,tests,62283,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62320,Testability,test,testlabel,62320,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62339,Testability,test,tests,62339,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62388,Testability,test,testlabel,62388,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62408,Testability,test,tests,62408,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62505,Testability,test,tests,62505,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62519,Testability,test,test,62519,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62552,Testability,test,tests,62552,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62566,Testability,test,test,62566,"a third of the tests in 5 minutes, the so-called *quicktests*: ``ctest -L quick``; * Run the same subset of tests that continuous integration checks (not the full test suite): ``ctest -L quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``ctest -L smoke``; * Run tests matching by name: ``ctest -R testname``; * Run tests excluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's te",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62637,Testability,test,testsoutput,62637,"xcluding those by name: ``ctest -E testname``; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62669,Testability,test,testing,62669,"`; * Run tests matching by label: ``ctest -L testlabel``; * Run tests excluding those by label: ``ctest -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to b",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:62780,Testability,test,tests,62780,"test -LE testlabel``. Pytest has similar commands:. * Run tests in parallel with ``-n`` flag (if Python package ``pytest-xdist`` installed). For maximum parallelism: :samp:`pytest -n auto`; * Run full test suite: ``pytest``; * Run the quick tests: ``pytest -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63008,Testability,test,tests,63008,"st -m quick``; * Run the minimal number of tests to ensure Psi4 and any add-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectab",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63110,Testability,log,log,63110,"-ons in working order: ``pytest -m smoke``; * Run tests matching by name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.)",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63181,Testability,test,test,63181,"name: ``pytest -k testname``; * Run tests excluding those by name: ``pytest -k ""not testname""``; * Run tests matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63273,Testability,test,testing,63273,"sts matching by label: ``pytest -m testlabel``; * Run tests excluding those by label: ``pytest -m ""not testlabel""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If pack",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63370,Testability,test,test,63370,"el""``; * Run tests with complicated filtering by name: ``pytest -k ""cc and not cc4 and not stdsuite""``; * Run tests and see test names: ``pytest -v``; * Run tests and see test names and sometimes more verbose errors: ``pytest -vv``. .. _`faq:testsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {pref",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63580,Testability,test,test,63580,"stsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63656,Testability,test,test,63656,"stsoutput`:. How to see CTest testing errors; -------------------------------. ::. >>> ctest; Test project /your/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63739,Testability,test,tests,63739,"ur/path/2/psi4/build/directory/tests; Start 248: tu1-h2o-energy; 1/2 Test #248: tu1-h2o-energy ................... Passed 1.73 sec; Start 6: cc1; 2/2 Test #6: cc1 ..............................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63850,Testability,test,tests,63850,"..........................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED``",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63879,Testability,test,test,63879,"..........................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED``",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63893,Testability,test,tests,63893,"..........................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED``",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63924,Testability,test,test,63924,"..........................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED``",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63967,Testability,test,tests,63967,"..........................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED``",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:63981,Testability,test,test,63981,"..........................***Failed 0.07 sec; ... When ``ctest`` reports that some (or all) tests have failed, look in your; build directory for file; :samp:`{objdir}/Testing/Temporary/LastTest.log`. It may have a; ``.tmp`` extension, depending on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED``",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64145,Testability,test,tests,64145,"on whether the last test was interrupted and; a few other factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addo",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64186,Testability,test,test,64186,"her factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PAS",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64209,Testability,test,tests,64209,"her factors. Either way, this file should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PAS",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64245,Testability,test,test,64245," should contain CMake's testing; output, as well as everything that was printed to the screen. .. _`faq:pytest`:. How to test a Psi4 installation; -------------------------------. ``ctest`` requires a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PA",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64371,Testability,test,tests,64371," a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64431,Testability,test,tests,64431," a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64462,Testability,test,tests,64462," a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64517,Testability,test,tests,64517," a connection to source files and ``cmake``; machinery and so can only be performed from :samp:`{objdir}`; (staged installation). To test an installed |PSIfour| (full or staged; installation), a supplementary test suite is available to be; run via pytest. Running a limited number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64608,Testability,test,test,64608,"ed number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. .. _`faq:writepsi4`:. How to refer to Psi4; --------------------. Ways to refer to |P",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64702,Testability,test,test,64702,"ed number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. .. _`faq:writepsi4`:. How to refer to Psi4; --------------------. Ways to refer to |P",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:64823,Testability,test,tests,64823,"ed number of ""smoke"" tests is; generally sufficient to verify an installation. * From the executable. .. code-block:: bash. # smoke tests only in serial; psi4 --test; # smoke tests only in parallel; psi4 --test -n`getconf _NPROCESSORS_ONLN`; # most tests; psi4 --test full. * From the library (|PSIfour| must be detectable as a Python; module. See setup at :ref:`faq:psi4psiapipath`; if needed.). .. code-block:: bash. # smoke tests only; python -c ""import psi4; psi4.test('smoke')""; # most tests; python -c ""import psi4; psi4.test()"". * From pytest directly. If package ``pytest-xdist`` is installed, can run in parallel. .. code-block:: bash. # smoke tests only; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -m smoke -n auto; # all tests; pytest {prefix}/lib/{PYMOD_INSTALL_LIBDIR}/psi4/tests/ -n auto. Output looks something like the below. ``PASSED`` in green is good; (means test ran correctly); ``SKIPPED`` in yellow is good (means that; not all software required for test is available); ``XPASS`` or ``XFAIL``; in yellow is fine (unexpected pass or expected fail happens when we; include tests that need particular conditions (*e.g.*, multiple cores); to run correctly); ``FAILED`` in red is bad. ::. test_addons.py::test_gdma PASSED; test_addons.py::test_mrcc SKIPPED; test_addons.py::test_chemps2 PASSED; test_addons.py::test_dftd3 PASSED; test_addons.py::test_libefp PASSED; test_addons.py::test_pcmsolver PASSED; test_addons.py::test_erd PASSED; test_addons.py::test_simint PASSED; test_addons.py::test_json PASSED; test_addons.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. .. _`faq:writepsi4`:. How to refer to Psi4; --------------------. Ways to refer to |P",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:66255,Testability,log,logo,66255,"s.py::test_cfour SKIPPED; test_addons.py::test_v2rdm_casscf PASSED; test_addons.py::test_grimme_3c PASSED; test_addons.py::test_dkh PASSED; test_psi4.py::test_psi4_basic PASSED; test_psi4.py::test_psi4_cc PASSED; test_psi4.py::test_psi4_cas PASSED; test_psi4.py::test_psi4_dfmp2 PASSED; test_psi4.py::test_psi4_sapt PASSED; test_psi4.py::test_psi4_scfproperty PASSED. .. _`faq:writepsi4`:. How to refer to Psi4; --------------------. Ways to refer to |PSIfour| in text, in order of decreasing goodness:. * as ``Psi4`` in Optima regular font with ""si"" in custom (82%) small caps; according to :source:`media/README.md`. * html: ``<span style=""font-family: Optima, sans-serif; color: #273896;"">P<span style=""font-size: 82%;"">SI</span>4</span>``. * as ``Psi4`` with ""si"" in generated small caps. * html: ``<span style=""font-variant: small-caps;"">Psi4</span>``. * as ``Psi4`` with ""si"" in lowercase. * as ``psi4`` in code. * **NOT** ``PSI4`` or ``PSI``. .. _`faq:psi4logos`:. How to get a Psi4 logo file; ---------------------------. All image files are stored in https://github.com/psi4/psi4media. .. _`faq:localaddon`:. How to use a local Add-On repository in the Psi4 build; ------------------------------------------------------. For each Add-On, |PSIfour| pulls source from a specific online Git; repository and a specific tag/branch/commit in it. This ensures success; of the |PSIfour| build, reproducibility of the runtime results, and; freedom for continued upstream development. Sometimes, you're the one; doing that development, and you need the CMake superbuild to pull source; from a local path rather than the approved codeset. Find the ``CMakeLists.txt`` governing the target Add-On in; :source:`external` and make changes analogous to the below::. #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG 1.0; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone"". If you're changing the |PSIfour| repo codebase between compiles, there's; nothing more to do as CMake will handle t",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68845,Testability,log,logging,68845,"f you're modifying the Add-On's file or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; ---",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68867,Testability,log,logging,68867,"or directory structure, be; smart and ``rm`` all traces of it within ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; ---------------------------------------",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68914,Testability,log,log,68914,"thin ``{objdir}/stage/``,; especially any ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:68984,Testability,log,log,68984,"y ``*.pyc`` files. Alternatively and preferentially to the above, you can instead build and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layo",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69035,Testability,log,log,69035," and install the; Add-On library yourself, external to the |PSIfour| repository. This; is especially useful if you want to avoid full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed location",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69154,Testability,log,log,69154,"id full recompiles of the; Add-On at each change to the Add-On's source. Build the Add-On; library dynamically (``-DBUILD_SHARED_LIBS=ON``) and mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69395,Testability,log,log,69395," mind any; ""Psi4 wants"" in the Add-On's top-level CMakeLists.txt. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69436,Testability,log,log,69436,"t. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69513,Testability,log,log,69513,"t. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69536,Testability,log,logging,69536,"t. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69585,Testability,log,logging,69585,"t. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69644,Testability,log,logging,69644,"t. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69670,Testability,log,logging,69670,"t. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:69743,Testability,log,loglevel,69743,"t. Install the; Add-On and note the full path to ``AddOnConfig.cmake``. Pass; the path containing that file to |PSIfours| CMake as; ``-DAddon_DIR=/path/to/config/usually/ending/in/share/cmake/AddON``; and build |PSIfour|. The main ``core.so`` should be dynamically linked; to your dev AddOn dynamic lib and update automatically when you rebuild; the AddOn lib. Naturally, you may need to delete ``core.so`` and remake; as needed. .. _`faq:logging`:. How to use logging in Psi4; --------------------------. A log file is generated alongside the output file and has extension; ``.log``. Selected key information is sent to it. The log file contents; are provisional and haphazard, so don't start relying upon them. It is; tentatively envisioned that log files will have much of the same results as output; files but more as structured data than narrative, nicely formatted data.; In some cases where external calls are involved, the most detailed; information may only be collectable in the log file. It is; worthwhile to check the log file if expected results are missing from; the usual output file. If the log file is empty, the logging level may; be set too low. To change the logging level to DEBUG from the command-line::. >>> psi4 --logging 10. To change the logging level to DEBUG in PsiAPI::. >>> psi4.set_output_file(<filebase>, loglevel=10). .. _`faq:findexemod`:. How to find the Psi4 module from the executable and vice versa; --------------------------------------------------------------. Because of the different conventions of C++/Linux and Python installation; layouts, the |PSIfour| executable and the |PSIfour| Python module aren't; at fixed locations relative to each other. Accessors have been added; so that the executable can show where the module is, and the module; can show where the executable is. .. code-block:: bash. > /path/to/psi4/install/bin/psi4 --module; /path/to/psi4/install/lib//; > python -c ""import psi4;print(psi4.executable)""; /path/to/psi4/install/bin/psi4. ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1618,Usability,guid,guides,1618,"HOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer ",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:1830,Usability,guid,guide,1830,"GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: prerequisites, compiling, installing; .. _`sec:installFile`:. ====================================; Compiling and Installing from Source; ====================================. .. warning:: As of v1.8, primary binary distribution has moved from; the psi4 channel to the conda-forge channel. Neither install docs; for users nor compile docs for developers have been updated yet to; reflect new patterns. Please consult :source:`conda/psi4-path-advisor.py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, an",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:2458,Usability,guid,guide,2458,".py`; (extensive help menu at ``conda/psi4-path-advisor.py -h``); or :psicode:`psicode downloads; page <installs/latest/>` for the latest guides. This section fulfills the duty of every Linux project to have an INSTALL; file detailing how to build it from source. Few (mostly packagers and; sysadmins) are expected to read this file as it is a broad guide to the; many choices in building this project. For a specific, well-tested,; and performance-tuned build path, see :psicode:`installs/latest`; (select ""source""). For pre-built binaries again well-tested,; performance-tuned, and available for all common operating systems,; see :psicode:`installs/latest` (select ""conda"").; To see working builds for Linux, Mac, and Windows, see :src:; :source:`[this GHA] <.github/workflows/ecosystem.yml>`. .. _`faq:cmakeviasetup`:. Planning: how to configure Psi4 and invoke CMake; ------------------------------------------------. |PSIfour| is built through CMake. An abbreviated build guide can be found; :source:`within the source itself <CMakeLists.txt#L27>` . CMake does a good job scanning your computer to locate libraries, header; files, and executables needed for compilation. So it's very possible that; from :samp:`{top-level-psi4-dir}` source directory, you can call :samp:`cmake -S.; -B{objdir}` without any further arguments, and it will invoke ``cmake``,; detect some appropriate defaults, configure the build, create a build; directory :samp:`{objdir}`, and complete, leaving you to only invoke; ``make`` or Ninja in the new build directory. Should this happy scenario not come to pass, or if the default build; options are not to your taste, use the links within :ref:`core; dependencies <faq:coredepend>` and :ref:`add-on dependencies; <faq:addondepend>` to plan a set of arguments to ``cmake`` tailored to; your computer. Proceed to :ref:`quick build <faq:buildquick>` or; :ref:`detailed build <faq:builddetailed>`. .. The following topics may also be helpful. .. * :ref:`faq:setuphelp`; ..",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:12464,Usability,simpl,simple-,12464,"is dkh?] <sec:dkh>` :source:`[dkh min version] <external/upstream/dkh/CMakeLists.txt#L2>`. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`gdma <cmake:gdma>` |w---w| :ref:`[what is gdma?] <sec:gdma>` :source:`[gdma min version] <external/upstream/gdma/CMakeLists.txt#L2>`. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`PCMSolver <cmake:pcmsolver>` |w---w| :ref:`[what is PCMSolver?] <sec:pcmsolver>`. * :ref:`Fortran Compiler <cmake:fortran>`; * zlib http://www.zlib.net/. * :ref:`simint <cmake:simint>` |w---w| :ref:`[what is simint?] <sec:simint>` :source:`[simint min version] <external/upstream/simint/CMakeLists.txt#L2>`. Additionally, there are runtime-loaded capabilities:. * :ref:`PylibEFP & libefp <cmake:libefp>` |w---w| :ref:`[what is LibEFP?] <sec:libefp>` :source:`[LibEFP min version] <external/upstream/libefp/CMakeLists.txt#L1>`. * cfour |w---w| :ref:`[what is CFOUR?] <sec:cfour>`. * dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>`. * simple-dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>` (Nov 2022; added by v1.7) preferred alternative to dftd3 https://github.com/dftd3/simple-dftd3. * gcp |w---w| :ref:`[what is gCP?] <sec:gcp>`. * mctc-gcp |w---w| :ref:`[what is gCP?] <sec:gcp>` (Nov 2022; added by v1.7) preferred alternative to gcp https://github.com/grimme-lab/gcp. * dftd4 |w---w| <sec:dftd3> https://github.com/dftd4/dftd4. * mrcc |w---w| :ref:`[what is MPCC?] <sec:mrcc>`. * v2rdm_casscf |w---w| :ref:`[what is v2rdm_casscf?] <sec:v2rdm_casscf>`. * :ref:`sns-mp2 <sec:snsmp2>` |w---w| https://github.com/DEShawResearch/sns-mp2/commits/master. * resp |w---w| https://github.com/cdsgroup/resp. * gpu_dfcc |w---w| https://github.com/edeprince3/gpu_dfcc/commits/master. * OpenFermion-Psi4 |w---w| https://github.com/quantumlib/OpenFermion. * :ref:`cppe <sec:cppe>` |w---w| https://github.com/maxscheurer/cppe. * mp2d |w---w| https://github.com/Chandemonium/MP2D. * :ref:`FockCI <sec:fockci>` |w---w| https://github.com/shannonhouck/psi4fockci. * cct3 |w---w| https:",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:12603,Usability,simpl,simple-,12603,"tran Compiler <cmake:fortran>`. * :ref:`gdma <cmake:gdma>` |w---w| :ref:`[what is gdma?] <sec:gdma>` :source:`[gdma min version] <external/upstream/gdma/CMakeLists.txt#L2>`. * :ref:`Fortran Compiler <cmake:fortran>`. * :ref:`PCMSolver <cmake:pcmsolver>` |w---w| :ref:`[what is PCMSolver?] <sec:pcmsolver>`. * :ref:`Fortran Compiler <cmake:fortran>`; * zlib http://www.zlib.net/. * :ref:`simint <cmake:simint>` |w---w| :ref:`[what is simint?] <sec:simint>` :source:`[simint min version] <external/upstream/simint/CMakeLists.txt#L2>`. Additionally, there are runtime-loaded capabilities:. * :ref:`PylibEFP & libefp <cmake:libefp>` |w---w| :ref:`[what is LibEFP?] <sec:libefp>` :source:`[LibEFP min version] <external/upstream/libefp/CMakeLists.txt#L1>`. * cfour |w---w| :ref:`[what is CFOUR?] <sec:cfour>`. * dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>`. * simple-dftd3 |w---w| :ref:`[what is DFTD3?] <sec:dftd3>` (Nov 2022; added by v1.7) preferred alternative to dftd3 https://github.com/dftd3/simple-dftd3. * gcp |w---w| :ref:`[what is gCP?] <sec:gcp>`. * mctc-gcp |w---w| :ref:`[what is gCP?] <sec:gcp>` (Nov 2022; added by v1.7) preferred alternative to gcp https://github.com/grimme-lab/gcp. * dftd4 |w---w| <sec:dftd3> https://github.com/dftd4/dftd4. * mrcc |w---w| :ref:`[what is MPCC?] <sec:mrcc>`. * v2rdm_casscf |w---w| :ref:`[what is v2rdm_casscf?] <sec:v2rdm_casscf>`. * :ref:`sns-mp2 <sec:snsmp2>` |w---w| https://github.com/DEShawResearch/sns-mp2/commits/master. * resp |w---w| https://github.com/cdsgroup/resp. * gpu_dfcc |w---w| https://github.com/edeprince3/gpu_dfcc/commits/master. * OpenFermion-Psi4 |w---w| https://github.com/quantumlib/OpenFermion. * :ref:`cppe <sec:cppe>` |w---w| https://github.com/maxscheurer/cppe. * mp2d |w---w| https://github.com/Chandemonium/MP2D. * :ref:`FockCI <sec:fockci>` |w---w| https://github.com/shannonhouck/psi4fockci. * cct3 |w---w| https://github.com/piecuch-group/cct3. * :ref:`adcc <sec:adcc>` |w---w| https://github.com/adc-connect/adcc.",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:33657,Usability,clear,clear,33657,"`` setting lines above; .. are redundant. Run |PSIfour| as executable. ::. >>> cat sample.in; molecule {; He; }; energy('hf/cc-pvdz'); compare_values(-2.85518839, get_variable('current energy'), 5, 'SCF E'); >>> psi4 sample.in; SCF E.............................................................PASSED. *or* Run |PSIfour| as Python module. ::. >>> cat sample.py; import psi4; mol = psi4.geometry(""""""; He; """"""); psi4.energy('hf/cc-pvdz'); psi4.compare_values(-2.85518839, psi4.core.get_variable('current energy'), 5, 'SCF E'); >>> python sample.py; SCF E.............................................................PASSED. .. _`faq:inplace`:. How to run Psi4 as executable after compilation using driver from source; ------------------------------------------------------------------------. When developing python driver code, it can be annoying to keep `make`\; ing to test the code. |PSIfour| can be run ""inplace"" through the; following procedure. To be clear, this is running compiled C++ from the; build directory and python from the source directory. This is an expert; option for development, and not all functionality will be available. ::. >>> cd {objdir}; >>> ln -s {top-level-psi4-dir}/{objdir}/stage/lib/psi4/core.cpython-{ext_will_vary}.so ../psi4/core.cpython-{ext_will_vary}.so; >>> python ../psi4/run_psi4.py --inplace input.dat. .. _`faq:psidatadir`:. Why not to set :envvar:`PSIDATADIR`; -----------------------------------. :envvar:`PSIDATADIR` is an environment variable containing the location of the; text resource parts of the |PSIfour| codebase (*e.g.*, basis sets,; databases, EFP fragments). It is for developer use only. In |PSIfour| 1.1; and beyond, the program *always* knows where its resources are, and the; only reason to set this variable is to point to another location.; Previously in |PSIfour| 1.0 and previous, only installed executables knew; the location, so it always needed to be explicitly set when run from the; compilation directory. At runtime. .. code-block",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:42883,Usability,guid,guides,42883,"; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${HOST}-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${HOST}-"" \. # (B) tell CMake to tell the compiler which GCC to use; >>> GCC7=/path/to/miniconda/envs/gcc72; >>> cmake -S. -Bbuild \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DCMAKE_C_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; -DCMAKE_CXX_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \; ...; # if Fortran active ...; -DCMAKE_Fortran_COMPILER=ifort \; -DCMAKE_Fortran_FLAGS=""-gnu-prefix=${GCC7}/bin/x86_64-conda_cos6-linux-gnu-"" \. # Configure and build. # To Run:; >>> export LD_LIBRARY_PATH=${GCC7}/lib:$LD_LIBRARY_PATH. .. _`faq:cray`:. How to configure a Psi4 build on Cray; -------------------------------------. Cray systems strongly prefer to build static libraries, but |PSIfour|; needs to be dynamic to function as a Python module. Courtesy of @misha; at the forum and various supercomputer guides, building |PSIfour| on; Cray requires setting environment variables before running `cmake`. ::. CRAYPE_LINK_TYPE=dynamic CRAY_ADD_RPATH=yes cmake ... .. envvar:: CRAYPE_LINK_TYPE. Set to allow |PSIfour| to build as shared library on Cray supercomputers. .. envvar:: CRAY_ADD_RPATH. Set to true to allow |PSIfour| to build on Cray supercomputers. .. _`cmake:fortran`:. How to configure Fortran compilers for building Psi4; ----------------------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, a Fortran compiler in unneeded for core; features but may be required for add-ons. * Downstream Dependencies. * |PSIfour| (\ |dr| optional) Fortran Compiler; * erd, dkh, gdma, PCMSolver |dr| Fortran Compiler. **CMake Variables**. * :makevar:`CMAKE_Fortran_COMPILER` |w---w| CMake variable to specify name or full path to Fortran compiler.; * :makevar:`CMAKE_Fortran_FLAGS` |w---w| CMake variable to specify any additional custom compiler flags for Fortran source. **Examples**. A.",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst:52989,Usability,guid,guidance,52989,"and the names expected. Consult file; :source:`cmake/math/MathLibs.cmake` for the library patterns being; sought. * The BLAS/LAPACK interface is standardized, so only libraries, not; headers, need to be detected. The exception is MKL, where the ``mkl.h``; header defines additional functionality; it must be located to use; BLAS threading. .. _`cmake:python`:. How to configure Python for building Psi4; -----------------------------------------. **Role and Dependencies**. * Role |w---w| In |PSIfour|, Python allows the core compiled C++ code to; be flexibly accessed for manipulation and extension in an interpreted; language. * Downstream Dependencies |w---w| |PSIfour| |dr| Python Interpreter. **CMake Variables**. Note that in v1.4, |PSIfour| switched from Numpy-written CMake Python; detection to new CMake-written CMake Python detection. Usually only; :makevar:`Python_EXECUTABLE` is now needed to hint Python's location. See; https://cmake.org/cmake/help/latest/module/FindPython.html for full; guidance. * :makevar:`Python_EXECUTABLE` |w---w| specify name or full path to Python interpreter.; * :makevar:`Python_LIBRARY` |w---w| specify path to Python library.; * :makevar:`Python_INCLUDE_DIR` |w---w| specify directory of Python headers. Contains ``Python.h``. **Examples**. A. Build with detected Python from :envvar:`PATH`. .. code-block:: bash. >>> cmake. B. Build with specific Python. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=/path/to/interp/python3.9. C. Build with full Python specification to root directory ``${PFXC}``. .. code-block:: bash. >>> cmake -DPython_EXECUTABLE=""${PFXC}/bin/python"" \; -DPython_LIBRARY=""${PFXC}/lib/libpython3.9.so"" \; -DPython_INCLUDE_DIR=""${PFXC}/include/python3.9"". .. _`faq:runtimepython`:. What Python is Psi4 running; ---------------------------. The Python detected at build-time is embedded into the |PSIfour|; executable. That is, the top line of ``bin/psi4`` is something like; ``#!/path/to/miniconda/envs/p4deps/bin/python3.5``, and",MatchSource.DOCS,doc/sphinxman/source/build_planning.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/build_planning.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst:2004,Availability,avail,available,2004,"ARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:mtd_capabilities`:. Capabilities and Alternate Implementations; ==========================================. Depending on the reference (e.g., RHF, UHF, ROHF), the integral treatment; (conventional CONV, density-fitted DF, and Cholesky-decomposed CD),; active orbitals, and derivative level, computational methods are; sometimes assembled from implementations by multiple coders. Conversely,; some capabilities may be implemented multiple times. Capabilities,; modules, algorithm types, and defaults are detailed for many ground-state; methods at Table :ref:`Module Capabilities <table:managedmethods>`. Its; analogous summary table (with modules collapsed) is at :ref:`Summary; Capabilities <table:stdsuite>`. |PSIfour| transparently selects the; most efficient implementation, so one generally needn't consult this; table. However, to understand the details of what combinations are; accessible or what alternate implementations are available, read on. Note that HF, DFT, and MPn (n<=3); default to density-fitted integrals, while all higher methods default to; conventional integrals. Therefore, for a closed-shell molecule::. # runs MP2 with default algorithm type ``DF`` with default implementation DFMP2; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with default implementation OCC; set mp2_type conv; energy('mp2'). # runs MP2 with default algorithm type ``DF`` with implementation OCC; set qc_module occ; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with implementation FNOCC; set mp2_type conv; set qc_module fnocc; energy('mp2'). .. include:: autodoc_capabilities_details.rst. ",MatchSource.DOCS,doc/sphinxman/source/capabilities.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst:1822,Energy Efficiency,efficient,efficient,1822,"ARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:mtd_capabilities`:. Capabilities and Alternate Implementations; ==========================================. Depending on the reference (e.g., RHF, UHF, ROHF), the integral treatment; (conventional CONV, density-fitted DF, and Cholesky-decomposed CD),; active orbitals, and derivative level, computational methods are; sometimes assembled from implementations by multiple coders. Conversely,; some capabilities may be implemented multiple times. Capabilities,; modules, algorithm types, and defaults are detailed for many ground-state; methods at Table :ref:`Module Capabilities <table:managedmethods>`. Its; analogous summary table (with modules collapsed) is at :ref:`Summary; Capabilities <table:stdsuite>`. |PSIfour| transparently selects the; most efficient implementation, so one generally needn't consult this; table. However, to understand the details of what combinations are; accessible or what alternate implementations are available, read on. Note that HF, DFT, and MPn (n<=3); default to density-fitted integrals, while all higher methods default to; conventional integrals. Therefore, for a closed-shell molecule::. # runs MP2 with default algorithm type ``DF`` with default implementation DFMP2; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with default implementation OCC; set mp2_type conv; energy('mp2'). # runs MP2 with default algorithm type ``DF`` with implementation OCC; set qc_module occ; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with implementation FNOCC; set mp2_type conv; set qc_module fnocc; energy('mp2'). .. include:: autodoc_capabilities_details.rst. ",MatchSource.DOCS,doc/sphinxman/source/capabilities.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst:2280,Energy Efficiency,energy,energy,2280,"ARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:mtd_capabilities`:. Capabilities and Alternate Implementations; ==========================================. Depending on the reference (e.g., RHF, UHF, ROHF), the integral treatment; (conventional CONV, density-fitted DF, and Cholesky-decomposed CD),; active orbitals, and derivative level, computational methods are; sometimes assembled from implementations by multiple coders. Conversely,; some capabilities may be implemented multiple times. Capabilities,; modules, algorithm types, and defaults are detailed for many ground-state; methods at Table :ref:`Module Capabilities <table:managedmethods>`. Its; analogous summary table (with modules collapsed) is at :ref:`Summary; Capabilities <table:stdsuite>`. |PSIfour| transparently selects the; most efficient implementation, so one generally needn't consult this; table. However, to understand the details of what combinations are; accessible or what alternate implementations are available, read on. Note that HF, DFT, and MPn (n<=3); default to density-fitted integrals, while all higher methods default to; conventional integrals. Therefore, for a closed-shell molecule::. # runs MP2 with default algorithm type ``DF`` with default implementation DFMP2; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with default implementation OCC; set mp2_type conv; energy('mp2'). # runs MP2 with default algorithm type ``DF`` with implementation OCC; set qc_module occ; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with implementation FNOCC; set mp2_type conv; set qc_module fnocc; energy('mp2'). .. include:: autodoc_capabilities_details.rst. ",MatchSource.DOCS,doc/sphinxman/source/capabilities.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst:2387,Energy Efficiency,energy,energy,2387,"ARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:mtd_capabilities`:. Capabilities and Alternate Implementations; ==========================================. Depending on the reference (e.g., RHF, UHF, ROHF), the integral treatment; (conventional CONV, density-fitted DF, and Cholesky-decomposed CD),; active orbitals, and derivative level, computational methods are; sometimes assembled from implementations by multiple coders. Conversely,; some capabilities may be implemented multiple times. Capabilities,; modules, algorithm types, and defaults are detailed for many ground-state; methods at Table :ref:`Module Capabilities <table:managedmethods>`. Its; analogous summary table (with modules collapsed) is at :ref:`Summary; Capabilities <table:stdsuite>`. |PSIfour| transparently selects the; most efficient implementation, so one generally needn't consult this; table. However, to understand the details of what combinations are; accessible or what alternate implementations are available, read on. Note that HF, DFT, and MPn (n<=3); default to density-fitted integrals, while all higher methods default to; conventional integrals. Therefore, for a closed-shell molecule::. # runs MP2 with default algorithm type ``DF`` with default implementation DFMP2; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with default implementation OCC; set mp2_type conv; energy('mp2'). # runs MP2 with default algorithm type ``DF`` with implementation OCC; set qc_module occ; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with implementation FNOCC; set mp2_type conv; set qc_module fnocc; energy('mp2'). .. include:: autodoc_capabilities_details.rst. ",MatchSource.DOCS,doc/sphinxman/source/capabilities.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst:2492,Energy Efficiency,energy,energy,2492,"ARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:mtd_capabilities`:. Capabilities and Alternate Implementations; ==========================================. Depending on the reference (e.g., RHF, UHF, ROHF), the integral treatment; (conventional CONV, density-fitted DF, and Cholesky-decomposed CD),; active orbitals, and derivative level, computational methods are; sometimes assembled from implementations by multiple coders. Conversely,; some capabilities may be implemented multiple times. Capabilities,; modules, algorithm types, and defaults are detailed for many ground-state; methods at Table :ref:`Module Capabilities <table:managedmethods>`. Its; analogous summary table (with modules collapsed) is at :ref:`Summary; Capabilities <table:stdsuite>`. |PSIfour| transparently selects the; most efficient implementation, so one generally needn't consult this; table. However, to understand the details of what combinations are; accessible or what alternate implementations are available, read on. Note that HF, DFT, and MPn (n<=3); default to density-fitted integrals, while all higher methods default to; conventional integrals. Therefore, for a closed-shell molecule::. # runs MP2 with default algorithm type ``DF`` with default implementation DFMP2; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with default implementation OCC; set mp2_type conv; energy('mp2'). # runs MP2 with default algorithm type ``DF`` with implementation OCC; set qc_module occ; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with implementation FNOCC; set mp2_type conv; set qc_module fnocc; energy('mp2'). .. include:: autodoc_capabilities_details.rst. ",MatchSource.DOCS,doc/sphinxman/source/capabilities.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst:2614,Energy Efficiency,energy,energy,2614,"ARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:mtd_capabilities`:. Capabilities and Alternate Implementations; ==========================================. Depending on the reference (e.g., RHF, UHF, ROHF), the integral treatment; (conventional CONV, density-fitted DF, and Cholesky-decomposed CD),; active orbitals, and derivative level, computational methods are; sometimes assembled from implementations by multiple coders. Conversely,; some capabilities may be implemented multiple times. Capabilities,; modules, algorithm types, and defaults are detailed for many ground-state; methods at Table :ref:`Module Capabilities <table:managedmethods>`. Its; analogous summary table (with modules collapsed) is at :ref:`Summary; Capabilities <table:stdsuite>`. |PSIfour| transparently selects the; most efficient implementation, so one generally needn't consult this; table. However, to understand the details of what combinations are; accessible or what alternate implementations are available, read on. Note that HF, DFT, and MPn (n<=3); default to density-fitted integrals, while all higher methods default to; conventional integrals. Therefore, for a closed-shell molecule::. # runs MP2 with default algorithm type ``DF`` with default implementation DFMP2; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with default implementation OCC; set mp2_type conv; energy('mp2'). # runs MP2 with default algorithm type ``DF`` with implementation OCC; set qc_module occ; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with implementation FNOCC; set mp2_type conv; set qc_module fnocc; energy('mp2'). .. include:: autodoc_capabilities_details.rst. ",MatchSource.DOCS,doc/sphinxman/source/capabilities.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst:1955,Security,access,accessible,1955,"ARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:mtd_capabilities`:. Capabilities and Alternate Implementations; ==========================================. Depending on the reference (e.g., RHF, UHF, ROHF), the integral treatment; (conventional CONV, density-fitted DF, and Cholesky-decomposed CD),; active orbitals, and derivative level, computational methods are; sometimes assembled from implementations by multiple coders. Conversely,; some capabilities may be implemented multiple times. Capabilities,; modules, algorithm types, and defaults are detailed for many ground-state; methods at Table :ref:`Module Capabilities <table:managedmethods>`. Its; analogous summary table (with modules collapsed) is at :ref:`Summary; Capabilities <table:stdsuite>`. |PSIfour| transparently selects the; most efficient implementation, so one generally needn't consult this; table. However, to understand the details of what combinations are; accessible or what alternate implementations are available, read on. Note that HF, DFT, and MPn (n<=3); default to density-fitted integrals, while all higher methods default to; conventional integrals. Therefore, for a closed-shell molecule::. # runs MP2 with default algorithm type ``DF`` with default implementation DFMP2; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with default implementation OCC; set mp2_type conv; energy('mp2'). # runs MP2 with default algorithm type ``DF`` with implementation OCC; set qc_module occ; energy('mp2'). # runs MP2 with algorithm type ``CONV`` with implementation FNOCC; set mp2_type conv; set qc_module fnocc; energy('mp2'). .. include:: autodoc_capabilities_details.rst. ",MatchSource.DOCS,doc/sphinxman/source/capabilities.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/capabilities.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:5671,Availability,avail,available,5671,"he aggregate model chemistry requested through cbs(). Then,; since, for example, an ``energy('ccsd(t)')`` yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run. ::. Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this section must be dotted with the weightings in column Wt; to get the total cbs energy. Finally, in the CBS section, are listed the results for each stage; of the cbs procedure. The stage energies of this section sum outright to the total cbs energy. ::. ==> Components <==; ; ----------------------------------------------------------------------------------; Method / Basis Rqd Energy [H] Variable; ----------------------------------------------------------------------------------; scf / aug-cc-pvqz * -1.11916375 SCF TOTAL ENERGY; mp2 / aug-cc-pvqz * -0.03407997 MP2 CORRELATION ENERGY; scf / aug-cc-pvdz -1.11662884 SCF TOTAL ENERGY; mp2 / aug-cc-pvdz * -0.02881480 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz * -0.03893812 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvdz -0.03893812 CCSD CORRELATION ENERGY; scf / aug-cc-pvtz ",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:1446,Energy Efficiency,power,powerful,1446,".. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; cbs(); see: complete_basis_set(); cbs(); single: basis set; delta correction. .. _`sec:cbs()`:. Complete Basis Set; ==================. .. toctree::; :hidden:. cbs_eqn. .. codeauthor:: Lori A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes lik",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:1594,Energy Efficiency,energy,energy,1594," even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; cbs(); see: complete_basis_set(); cbs(); single: basis set; delta correction. .. _`sec:cbs()`:. Complete Basis Set; ==================. .. toctree::; :hidden:. cbs_eqn. .. codeauthor:: Lori A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:1804,Energy Efficiency,energy,energy,1804," Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; cbs(); see: complete_basis_set(); cbs(); single: basis set; delta correction. .. _`sec:cbs()`:. Complete Basis Set; ==================. .. toctree::; :hidden:. cbs_eqn. .. codeauthor:: Lori A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the fun",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:1836,Energy Efficiency,energy,energy,1836," Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; cbs(); see: complete_basis_set(); cbs(); single: basis set; delta correction. .. _`sec:cbs()`:. Complete Basis Set; ==================. .. toctree::; :hidden:. cbs_eqn. .. codeauthor:: Lori A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correc",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:1898,Energy Efficiency,energy,energy,1898,"on, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; cbs(); see: complete_basis_set(); cbs(); single: basis set; delta correction. .. _`sec:cbs()`:. Complete Basis Set; ==================. .. toctree::; :hidden:. cbs_eqn. .. codeauthor:: Lori A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item bel",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:2168,Energy Efficiency,energy,energy,2168,". Complete Basis Set; ==================. .. toctree::; :hidden:. cbs_eqn. .. codeauthor:: Lori A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. * ``optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. *",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:2222,Energy Efficiency,energy,energy,2222,"i A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. * ``optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. * ``optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""c",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:3396,Energy Efficiency,energy,energy,3396,"unc:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. * ``optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. * ``optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}])``. Many examples can be found at :srcsample:`cbs-xtpl-energy`,; :srcsample:`cbs-xtpl-gradient`, :srcsample:`cbs-xtpl-opt`,; :srcsample:`cbs-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if more delta functions are required, use the ```cbs_metadata``` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn't affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. .. index::; pair: cbs(); output. Output; ^^^^^^. At the beginning of a cbs() job is print",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:4495,Energy Efficiency,energy,energy,4495,"s-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if more delta functions are required, use the ```cbs_metadata``` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn't affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. .. index::; pair: cbs(); output. Output; ^^^^^^. At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an ``energy('ccsd(t)')`` yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run. ::. Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz ",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:4743,Energy Efficiency,energy,energy,4743,"ote:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if more delta functions are required, use the ```cbs_metadata``` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn't affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. .. index::; pair: cbs(); output. Output; ^^^^^^. At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an ``energy('ccsd(t)')`` yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run. ::. Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of t",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:4799,Energy Efficiency,energy,energy,4799,"ote:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if more delta functions are required, use the ```cbs_metadata``` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn't affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. .. index::; pair: cbs(); output. Output; ^^^^^^. At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an ``energy('ccsd(t)')`` yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run. ::. Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of t",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:5904,Energy Efficiency,energy,energy,5904,"he second; list of minimum number of calculations which will actually be run. ::. Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this section must be dotted with the weightings in column Wt; to get the total cbs energy. Finally, in the CBS section, are listed the results for each stage; of the cbs procedure. The stage energies of this section sum outright to the total cbs energy. ::. ==> Components <==; ; ----------------------------------------------------------------------------------; Method / Basis Rqd Energy [H] Variable; ----------------------------------------------------------------------------------; scf / aug-cc-pvqz * -1.11916375 SCF TOTAL ENERGY; mp2 / aug-cc-pvqz * -0.03407997 MP2 CORRELATION ENERGY; scf / aug-cc-pvdz -1.11662884 SCF TOTAL ENERGY; mp2 / aug-cc-pvdz * -0.02881480 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz * -0.03893812 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvdz -0.03893812 CCSD CORRELATION ENERGY; scf / aug-cc-pvtz -1.11881134 SCF TOTAL ENERGY; mp2 / aug-cc-pvtz * -0.03288936 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz * -0.04201004 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvtz -0.04201004 CCSD CORRELATION ENE",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:6067,Energy Efficiency,energy,energy,6067," for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of this section must be dotted with the weightings in column Wt; to get the total cbs energy. Finally, in the CBS section, are listed the results for each stage; of the cbs procedure. The stage energies of this section sum outright to the total cbs energy. ::. ==> Components <==; ; ----------------------------------------------------------------------------------; Method / Basis Rqd Energy [H] Variable; ----------------------------------------------------------------------------------; scf / aug-cc-pvqz * -1.11916375 SCF TOTAL ENERGY; mp2 / aug-cc-pvqz * -0.03407997 MP2 CORRELATION ENERGY; scf / aug-cc-pvdz -1.11662884 SCF TOTAL ENERGY; mp2 / aug-cc-pvdz * -0.02881480 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz * -0.03893812 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvdz -0.03893812 CCSD CORRELATION ENERGY; scf / aug-cc-pvtz -1.11881134 SCF TOTAL ENERGY; mp2 / aug-cc-pvtz * -0.03288936 MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz * -0.04201004 CCSD(T) CORRELATION ENERGY; ccsd / aug-cc-pvtz -0.04201004 CCSD CORRELATION ENERGY; ----------------------------------------------------------------------------------; ; ==> Stages <==; ; -----------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:3544,Integrability,wrap,wrapper,3544,"unc:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. * ``optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. * ``optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}])``. Many examples can be found at :srcsample:`cbs-xtpl-energy`,; :srcsample:`cbs-xtpl-gradient`, :srcsample:`cbs-xtpl-opt`,; :srcsample:`cbs-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if more delta functions are required, use the ```cbs_metadata``` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn't affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. .. index::; pair: cbs(); output. Output; ^^^^^^. At the beginning of a cbs() job is print",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:3991,Integrability,interface,interface,3991,"ization can also be accessed through the first item below more; conveniently than the equivalent second and third items. * ``optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. * ``optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}])``. Many examples can be found at :srcsample:`cbs-xtpl-energy`,; :srcsample:`cbs-xtpl-gradient`, :srcsample:`cbs-xtpl-opt`,; :srcsample:`cbs-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if more delta functions are required, use the ```cbs_metadata``` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn't affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. .. index::; pair: cbs(); output. Output; ^^^^^^. At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an ``energy('ccsd(t)')`` yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations whic",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:4818,Integrability,wrap,wrapper,4818,"ote:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if more delta functions are required, use the ```cbs_metadata``` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn't affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. .. index::; pair: cbs(); output. Output; ^^^^^^. At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an ``energy('ccsd(t)')`` yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run. ::. Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY. At the end of a cbs() job is printed a summary section like the one below. First,; in the components section, are listed the results for each model chemistry available, whether; required for the cbs job (*) or not. Next, in the stages section, are listed the results for; each extrapolation. The energies of t",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:2905,Performance,optimiz,optimization,2905,"wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. * ``optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. * ``optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}])``. Many examples can be found at :srcsample:`cbs-xtpl-energy`,; :srcsample:`cbs-xtpl-gradient`, :srcsample:`cbs-xtpl-opt`,; :srcsample:`cbs-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:3035,Performance,optimiz,optimize,3035,"Ifour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. * ``optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. * ``optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}])``. Many examples can be found at :srcsample:`cbs-xtpl-energy`,; :srcsample:`cbs-xtpl-gradient`, :srcsample:`cbs-xtpl-opt`,; :srcsample:`cbs-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if more delta functions are required, use the ```cbs_metadata``` interface. Also, temporarily extrapolations are performed on diffe",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:3089,Performance,optimiz,optimize,3089,"ike the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. * ``optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. * ``optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}])``. Many examples can be found at :srcsample:`cbs-xtpl-energy`,; :srcsample:`cbs-xtpl-gradient`, :srcsample:`cbs-xtpl-opt`,; :srcsample:`cbs-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if more delta functions are required, use the ```cbs_metadata``` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies dire",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:3197,Performance,optimiz,optimize,3197,""": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. * ``optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. * ``optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}])``. Many examples can be found at :srcsample:`cbs-xtpl-energy`,; :srcsample:`cbs-xtpl-gradient`, :srcsample:`cbs-xtpl-opt`,; :srcsample:`cbs-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if more delta functions are required, use the ```cbs_metadata``` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn't affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which ",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:4039,Performance,perform,performed,4039,"cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. * ``optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}])``. Many examples can be found at :srcsample:`cbs-xtpl-energy`,; :srcsample:`cbs-xtpl-gradient`, :srcsample:`cbs-xtpl-opt`,; :srcsample:`cbs-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if more delta functions are required, use the ```cbs_metadata``` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn't affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. .. index::; pair: cbs(); output. Output; ^^^^^^. At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an ``energy('ccsd(t)')`` yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run. ::. Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / ",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:4529,Performance,perform,performed,4529,"s-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if more delta functions are required, use the ```cbs_metadata``` interface. Also, temporarily extrapolations are performed on differences of target and scf total energies, rather than on correlation energies directly. This doesn't affect the extrapolated values of the particular formulas defined here (though it does affect the betas, which are commented out), but it is sloppy and temporary and could affect any user-defined corl extrapolations. .. index::; pair: cbs(); output. Output; ^^^^^^. At the beginning of a cbs() job is printed a listing of the individual; energy calculations which will be performed. The output snippet below is; from the example job [2] above. It shows first each model chemistry needed; to compute the aggregate model chemistry requested through cbs(). Then,; since, for example, an ``energy('ccsd(t)')`` yields CCSD(T), CCSD, MP2,; and SCF energy values, the wrapper condenses this task list into the second; list of minimum number of calculations which will actually be run. ::. Naive listing of computations required.; scf / aug-cc-pvqz for SCF TOTAL ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz for CCSD(T) CORRELATION ENERGY; mp2 / aug-cc-pvdz for MP2 CORRELATION ENERGY; mp2 / aug-cc-pvtz for MP2 CORRELATION ENERGY. Enlightened listing of computations required.; mp2 / aug-cc-pvqz for MP2 CORRELATION ENERGY; ccsd(t) / aug-cc-pvdz for CCSD(T) CORRELATION ENERGY; ccsd(t) / aug-cc-pvtz ",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:1546,Security,access,accessed,1546,"e that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; cbs(); see: complete_basis_set(); cbs(); single: basis set; delta correction. .. _`sec:cbs()`:. Complete Basis Set; ==================. .. toctree::; :hidden:. cbs_eqn. .. codeauthor:: Lori A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.d",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:1700,Security,access,accessed,1700,"General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index::; triple: setting; keywords; cbs(); see: complete_basis_set(); cbs(); single: basis set; delta correction. .. _`sec:cbs()`:. Complete Basis Set; ==================. .. toctree::; :hidden:. cbs_eqn. .. codeauthor:: Lori A. Burns, Daniel G. A. Smith and Peter Kraus; .. sectionauthor:: Lori A. Burns and Peter Kraus. The :py:func:`psi4.driver.cbs` function described below is; powerful but complicated, requiring many options. For most common; calculations, a shorthand can be accessed directly though; :py:func:`psi4.driver.energy`, :py:func:`psi4.driver.gradient`, *etc.* For example,; a MP2 single-point DT extrapolation can be accessed through the first item; below more conveniently than the equivalent second or third items. * ``energy('mp2/cc-pv[dt]z')``. * ``energy(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[dt]z')``. * ``energy(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in th",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst:2930,Security,access,accessed,2930,"wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": ""corl_xtpl_helgaker_2""}])``. .. caution:: In |PSIfour| previous to Spring 2022 and v1.6, calling certain; cbs-related functions like the above looked like ::. energy(cbs, corl_wfn='mp2', corl_basis='cc-pv[dt]z'). energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvtz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[dt]z"", ""scheme"": corl_xtpl_helgaker_2}]). The difference is that the main function; :py:func:`psi4.driver.cbs` and extrapolation schemes like; :py:func:`psi4.driver.driver_cbs_helper.xtpl_highest_1` and; :py:func:`psi4.driver.driver_cbs_helper.scf_xtpl_helgaker_2` and composite; aliases like :py:func:`psi4.driver.aliases.sherrill_gold_standard`; and :py:func:`psi4.driver.aliases.allen_focal_point` in the old way; passed the Python function directly, whereas the new way uses the; string of the function name. A CCSD(T) DT coupled-cluster correction atop a TQ MP2 extrapolation; geometry optimization can also be accessed through the first item below more; conveniently than the equivalent second and third items. * ``optimize('mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz')``. * ``optimize(""cbs"", corl_wfn='mp2', corl_basis='cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='cc-pvdz')``. * ``optimize(""cbs"", cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pvqz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvdz""}])``. Many examples can be found at :srcsample:`cbs-xtpl-energy`,; :srcsample:`cbs-xtpl-gradient`, :srcsample:`cbs-xtpl-opt`,; :srcsample:`cbs-xtpl-freq`, :srcsample:`cbs-xtpl-func`,; :srcsample:`cbs-xtpl-wrapper`, :srcsample:`cbs-xtpl-dict`. .. autofunction:: psi4.cbs(name [, scf_basis, scf_scheme, corl_wfn, corl_basis, corl_scheme, delta_wfn, delta_wfn_lesser, delta_basis, delta_scheme, delta2_wfn, delta2_wfn_lesser, delta2_basis, delta2_scheme, cbs_metadata]); :noindex:. .. note:: As of October 2018, only two explicit ```deltaN_[wfn,basis,scheme]``` sets of options are active; if",MatchSource.DOCS,doc/sphinxman/source/cbs.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs_eqn.rst:1668,Energy Efficiency,energy,energy,1668," PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: ; pair: cbs(); theory. .. _`eq:cbs`:. .. math:: E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}. Here, :math:`\mathcal{F}` is an energy or energy extrapolation scheme, and the following also hold. .. math:: \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right). .. math:: \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right). .. math:: \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right). .. math:: \delta_{\textbf{delt",MatchSource.DOCS,doc/sphinxman/source/cbs_eqn.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs_eqn.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs_eqn.rst:1678,Energy Efficiency,energy,energy,1678," PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. index:: ; pair: cbs(); theory. .. _`eq:cbs`:. .. math:: E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}. Here, :math:`\mathcal{F}` is an energy or energy extrapolation scheme, and the following also hold. .. math:: \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right). .. math:: \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right). .. math:: \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right). .. math:: \delta_{\textbf{delt",MatchSource.DOCS,doc/sphinxman/source/cbs_eqn.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs_eqn.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs_eqn.rst:3561,Energy Efficiency,energy,energy,3561,"}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right). .. math:: \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right). .. math:: \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right). .. math:: \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right). A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. .. math:: E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}. .. math:: \delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right). ",MatchSource.DOCS,doc/sphinxman/source/cbs_eqn.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs_eqn.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs_eqn.rst:3609,Energy Efficiency,energy,energy,3609,"}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right). .. math:: \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right). .. math:: \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right). .. math:: \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right). A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. .. math:: E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}. .. math:: \delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right). ",MatchSource.DOCS,doc/sphinxman/source/cbs_eqn.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cbs_eqn.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:2016,Availability,reliab,reliable,2016,"e:: autodoc_abbr_options_c.rst. .. index::; single: CC, coupled cluster; pair: CC; theory. .. _`sec:cc`:. CC: Coupled Cluster Theory; ==========================. .. codeauthor:: T. Daniel Crawford; .. sectionauthor:: T. Daniel Crawford. *Module:* :ref:`PSI Variables <apdx:ccenergy_psivar>`. *Module:* :ref:`Keywords <apdx:ccenergy>`, :source:`CCENERGY <psi4/src/psi4/cc/ccenergy>`. *Module:* :ref:`Keywords <apdx:cceom>`, :source:`CCEOM <psi4/src/psi4/cc/cceom>`. *Module:* :ref:`Keywords <apdx:ccresponse>`, :source:`CCRESPONSE <psi4/src/psi4/cc/ccresponse>`. *Module:* :ref:`Keywords <apdx:cctriples>`, :source:`CCTRIPLES <psi4/src/psi4/cc/cctriples>`. *Module:* :ref:`Keywords <apdx:ccdensity>`, :source:`CCDENSITY <psi4/src/psi4/cc/ccdensity>`. *Module:* :ref:`Keywords <apdx:cchbar>`, :source:`CCHBAR <psi4/src/psi4/cc/cchbar>`. *Module:* :ref:`Keywords <apdx:cclambda>`, :source:`CCLAMBDA <psi4/src/psi4/cc/cclambda>`. The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuration; interaction, coupled cluster uses an exponential expansion,. .. math::; :label: CCexpansion. | \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,. where the cluster operator :math:`{\hat{T}}` is written as a sum of operators that; generate singly-excited, doubly-excited, *etc.*, determinants:. .. math:: {\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},. with. .. math::. {\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,. *etc.* The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982]_ truncates the expansion at :math:`{\hat{T}} = {\",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:9185,Availability,avail,available,9185,"ds related to coupled-cluster computations is; provided in the appendices, with the majority of the relevant; keywords appearing in Appendix :ref:`apdx:ccenergy`. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. .. include:: autodir_options_c/ccenergy__reference.rst; .. include:: autodir_options_c/ccenergy__r_convergence.rst; .. include:: autodir_options_c/ccenergy__maxiter.rst; .. include:: autodir_options_c/ccenergy__brueckner_orbs_r_convergence.rst; .. include:: autodir_options_c/ccenergy__restart.rst; .. include:: autodir_options_c/ccenergy__cachelevel.rst; .. include:: autodir_options_c/ccenergy__cachetype.rst; .. include:: autodir_options_c/ccenergy__num_amps_print.rst; .. include:: autodir_options_c/ccenergy__mp2_amps_print.rst. Larger Calculations; ^^^^^^^^^^^^^^^^^^^. Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with |PSIfour|:. * In most cases it is reasonable to set the ``memory`` keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should *not* specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the ``memory`` keyword to a value less than 16 GB. * Set the |ccenergy__cachelevel| keyword to ``0``.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists. * Set the |globals__print| keyword to ``2``. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. .. _`sec:eomcc`:. Excited State Coupled Cluster Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. A complete list of keywords related to; coupled cluster linear response is provided in Appendix :ref:`apdx:cc",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:9753,Availability,fault,faults,9753,"clude:: autodir_options_c/ccenergy__cachelevel.rst; .. include:: autodir_options_c/ccenergy__cachetype.rst; .. include:: autodir_options_c/ccenergy__num_amps_print.rst; .. include:: autodir_options_c/ccenergy__mp2_amps_print.rst. Larger Calculations; ^^^^^^^^^^^^^^^^^^^. Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with |PSIfour|:. * In most cases it is reasonable to set the ``memory`` keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should *not* specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the ``memory`` keyword to a value less than 16 GB. * Set the |ccenergy__cachelevel| keyword to ``0``.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists. * Set the |globals__print| keyword to ``2``. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. .. _`sec:eomcc`:. Excited State Coupled Cluster Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. A complete list of keywords related to; coupled cluster linear response is provided in Appendix :ref:`apdx:cceom`.; The most important keywords associated with EOM-CC calculations are:. .. include:: autodir_options_c/cceom__roots_per_irrep.rst; .. include:: autodir_options_c/cceom__e_convergence.rst; .. include:: autodir_options_c/cceom__singles_print.rst; .. include:: autodir_options_c/cceom__schmidt_add_residual_tolerance.rst; .. include:: autodir_options_c/cceom__eom_guess.rst. Linear Response (CCLR) Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Linear response computations are invoked like ``properties('ccsd')``; or ``properties('cc2')``, along with a li",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:9909,Availability,error,errors,9909,"lude:: autodir_options_c/ccenergy__mp2_amps_print.rst. Larger Calculations; ^^^^^^^^^^^^^^^^^^^. Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with |PSIfour|:. * In most cases it is reasonable to set the ``memory`` keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should *not* specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the ``memory`` keyword to a value less than 16 GB. * Set the |ccenergy__cachelevel| keyword to ``0``.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists. * Set the |globals__print| keyword to ``2``. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. .. _`sec:eomcc`:. Excited State Coupled Cluster Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. A complete list of keywords related to; coupled cluster linear response is provided in Appendix :ref:`apdx:cceom`.; The most important keywords associated with EOM-CC calculations are:. .. include:: autodir_options_c/cceom__roots_per_irrep.rst; .. include:: autodir_options_c/cceom__e_convergence.rst; .. include:: autodir_options_c/cceom__singles_print.rst; .. include:: autodir_options_c/cceom__schmidt_add_residual_tolerance.rst; .. include:: autodir_options_c/cceom__eom_guess.rst. Linear Response (CCLR) Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Linear response computations are invoked like ``properties('ccsd')``; or ``properties('cc2')``, along with a list of requested properties.; A complete list of keywords related to; coupled cluster linear response is provided in Appendix :ref:`apdx:ccresponse`. The most important keywor",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:2166,Deployability,configurat,configuration,2166,"=================. .. codeauthor:: T. Daniel Crawford; .. sectionauthor:: T. Daniel Crawford. *Module:* :ref:`PSI Variables <apdx:ccenergy_psivar>`. *Module:* :ref:`Keywords <apdx:ccenergy>`, :source:`CCENERGY <psi4/src/psi4/cc/ccenergy>`. *Module:* :ref:`Keywords <apdx:cceom>`, :source:`CCEOM <psi4/src/psi4/cc/cceom>`. *Module:* :ref:`Keywords <apdx:ccresponse>`, :source:`CCRESPONSE <psi4/src/psi4/cc/ccresponse>`. *Module:* :ref:`Keywords <apdx:cctriples>`, :source:`CCTRIPLES <psi4/src/psi4/cc/cctriples>`. *Module:* :ref:`Keywords <apdx:ccdensity>`, :source:`CCDENSITY <psi4/src/psi4/cc/ccdensity>`. *Module:* :ref:`Keywords <apdx:cchbar>`, :source:`CCHBAR <psi4/src/psi4/cc/cchbar>`. *Module:* :ref:`Keywords <apdx:cclambda>`, :source:`CCLAMBDA <psi4/src/psi4/cc/cclambda>`. The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuration; interaction, coupled cluster uses an exponential expansion,. .. math::; :label: CCexpansion. | \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,. where the cluster operator :math:`{\hat{T}}` is written as a sum of operators that; generate singly-excited, doubly-excited, *etc.*, determinants:. .. math:: {\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},. with. .. math::. {\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,. *etc.* The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982]_ truncates the expansion at :math:`{\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}`. This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves up",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:3105,Deployability,configurat,configuration,3105,"by configuration; interaction, coupled cluster uses an exponential expansion,. .. math::; :label: CCexpansion. | \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,. where the cluster operator :math:`{\hat{T}}` is written as a sum of operators that; generate singly-excited, doubly-excited, *etc.*, determinants:. .. math:: {\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},. with. .. math::. {\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,. *etc.* The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982]_ truncates the expansion at :math:`{\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}`. This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (*e.g.*, the term :math:`{\hat{T}_2}^2` approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods *size extensive*, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as :math:`{\cal{O}}(o^2 v^4)`, where; :math:`o` is the number of occupied orbitals and :math:`v` is the number of virtual; orbitals. Improving upon CCSD, the CCSD(T) method [Raghavachari:1989]_ includes; a perturbative estimate of the energy contributed by the :math:`{\hat{T}_3}`; operator. The computational cost of this additional term scales as; :math:`{\cal{O}}(o^3 v^4)`, making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases. |PSIfour| is capable of computing energie",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:3801,Energy Efficiency,energy,energy,3801,"gle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,. *etc.* The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982]_ truncates the expansion at :math:`{\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}`. This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (*e.g.*, the term :math:`{\hat{T}_2}^2` approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods *size extensive*, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as :math:`{\cal{O}}(o^2 v^4)`, where; :math:`o` is the number of occupied orbitals and :math:`v` is the number of virtual; orbitals. Improving upon CCSD, the CCSD(T) method [Raghavachari:1989]_ includes; a perturbative estimate of the energy contributed by the :math:`{\hat{T}_3}`; operator. The computational cost of this additional term scales as; :math:`{\cal{O}}(o^3 v^4)`, making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases. |PSIfour| is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; :ref:`CC Methods <table:ccsummary>` summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within |PSIfour|.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, |PSIfour|; can interface to K\ |a_acute|\ llay's MRCC code (see :ref:`MRCC <sec:mrcc>`). Sol",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:5075,Energy Efficiency,energy,energy,5075,"coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; :ref:`CC Methods <table:ccsummary>` summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within |PSIfour|.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, |PSIfour|; can interface to K\ |a_acute|\ llay's MRCC code (see :ref:`MRCC <sec:mrcc>`). Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104]_, see; :ref:`PCM <sec:pcmsolver>`. The following wavefunctions are currently recognized by |PSIfour| as arguments; to functions like :py:func:`~psi4.driver.energy`: ``'ccsd'``, ``'ccsd(t)'``, ``'a-ccsd(t)'``, ``'cc2'``,; ``'cc3'``, ``'bccd'`` (CCD with Brueckner orbitals), ``'bccd(t)'`` (CCD(T) with; Brueckner orbitals), ``'eom-ccsd'``, ``'eom-cc2'`` (CC2 for excited states),; ``'eom-cc3'`` (CC3 for excited states). Response properties can be obtained; by calling the function :py:func:`~psi4.driver.properties` (instead of, for example, :py:func:`~psi4.driver.energy`,; *e.g.*, ``properties('ccsd')``. There are many sample; coupled cluster inputs provided in :source:`samples`. The various methods supported by the CCENERGY modules in |Psifour| are; summarized in Table :ref:`CC Methods <table:ccsummary>` and detailed; (except excited state methods) in Table :ref:`CCENERGY Capabilities; <table:ccenergy_stdsuite>`. Even without ``set qc_module ccenergy``,; methods will default to this module, but alternate implementations can; be seen at :ref:`other modules <table:managedmethods>`. .. _`table:ccsummary`:. .. table:: Current coupled cluster capabilities of |PSIfour|. +------------------+------------+-----------+-----------+---------------+-----------+; | Method | Reference |",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:5484,Energy Efficiency,energy,energy,5484,"ccsummary>` summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within |PSIfour|.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, |PSIfour|; can interface to K\ |a_acute|\ llay's MRCC code (see :ref:`MRCC <sec:mrcc>`). Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104]_, see; :ref:`PCM <sec:pcmsolver>`. The following wavefunctions are currently recognized by |PSIfour| as arguments; to functions like :py:func:`~psi4.driver.energy`: ``'ccsd'``, ``'ccsd(t)'``, ``'a-ccsd(t)'``, ``'cc2'``,; ``'cc3'``, ``'bccd'`` (CCD with Brueckner orbitals), ``'bccd(t)'`` (CCD(T) with; Brueckner orbitals), ``'eom-ccsd'``, ``'eom-cc2'`` (CC2 for excited states),; ``'eom-cc3'`` (CC3 for excited states). Response properties can be obtained; by calling the function :py:func:`~psi4.driver.properties` (instead of, for example, :py:func:`~psi4.driver.energy`,; *e.g.*, ``properties('ccsd')``. There are many sample; coupled cluster inputs provided in :source:`samples`. The various methods supported by the CCENERGY modules in |Psifour| are; summarized in Table :ref:`CC Methods <table:ccsummary>` and detailed; (except excited state methods) in Table :ref:`CCENERGY Capabilities; <table:ccenergy_stdsuite>`. Even without ``set qc_module ccenergy``,; methods will default to this module, but alternate implementations can; be seen at :ref:`other modules <table:managedmethods>`. .. _`table:ccsummary`:. .. table:: Current coupled cluster capabilities of |PSIfour|. +------------------+------------+-----------+-----------+---------------+-----------+; | Method | Reference | Energy | Gradient | Exc. Energies | LR Props |; +==================+============+===========+===========+===============+===========+; | CC2 | RHF | Y | Y | Y | Y |; + +------------+-----------+-----------+---------------+-----------+; | | UHF | Y | --- | --- | --- |; + +-----------",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:4307,Integrability,depend,dependent,4307,"}^2` approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods *size extensive*, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as :math:`{\cal{O}}(o^2 v^4)`, where; :math:`o` is the number of occupied orbitals and :math:`v` is the number of virtual; orbitals. Improving upon CCSD, the CCSD(T) method [Raghavachari:1989]_ includes; a perturbative estimate of the energy contributed by the :math:`{\hat{T}_3}`; operator. The computational cost of this additional term scales as; :math:`{\cal{O}}(o^3 v^4)`, making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases. |PSIfour| is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; :ref:`CC Methods <table:ccsummary>` summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within |PSIfour|.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, |PSIfour|; can interface to K\ |a_acute|\ llay's MRCC code (see :ref:`MRCC <sec:mrcc>`). Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104]_, see; :ref:`PCM <sec:pcmsolver>`. The following wavefunctions are currently recognized by |PSIfour| as arguments; to functions like :py:func:`~psi4.driver.energy`: ``'ccsd'``, ``'ccsd(t)'``, ``'a-ccsd(t)'``, ``'cc2'``,; ``'cc3'``, ``'bccd'`` (CCD with Brueckner orbitals), ``'bccd(t)'`` (CCD(T) with; Brueckner orbitals), ``'eom-ccsd'``, ``'eom-cc2'`` (CC2 for excited states),; ``'eo",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:4701,Integrability,interface,interface,4701,". Improving upon CCSD, the CCSD(T) method [Raghavachari:1989]_ includes; a perturbative estimate of the energy contributed by the :math:`{\hat{T}_3}`; operator. The computational cost of this additional term scales as; :math:`{\cal{O}}(o^3 v^4)`, making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases. |PSIfour| is capable of computing energies and analytic gradients for a; number of coupled cluster models. It can also compute linear response; properties (such as static or frequency-dependent polarizability,; or optical rotation angles) for some models. Excited states can; also be computed by the CC2 and CC3 models, or by EOM-CCSD. Table; :ref:`CC Methods <table:ccsummary>` summarizes these capabilities. This section; describes how to carry out coupled cluster calculations within |PSIfour|.; For higher-order coupled-cluster methods like CCSDT and CCSDTQ, |PSIfour|; can interface to K\ |a_acute|\ llay's MRCC code (see :ref:`MRCC <sec:mrcc>`). Solvent effects on energies can be taken into account using the polarizable; continuum model (PCM) in the PTE approximation [Cammi:2009:164104]_, see; :ref:`PCM <sec:pcmsolver>`. The following wavefunctions are currently recognized by |PSIfour| as arguments; to functions like :py:func:`~psi4.driver.energy`: ``'ccsd'``, ``'ccsd(t)'``, ``'a-ccsd(t)'``, ``'cc2'``,; ``'cc3'``, ``'bccd'`` (CCD with Brueckner orbitals), ``'bccd(t)'`` (CCD(T) with; Brueckner orbitals), ``'eom-ccsd'``, ``'eom-cc2'`` (CC2 for excited states),; ``'eom-cc3'`` (CC3 for excited states). Response properties can be obtained; by calling the function :py:func:`~psi4.driver.properties` (instead of, for example, :py:func:`~psi4.driver.energy`,; *e.g.*, ``properties('ccsd')``. There are many sample; coupled cluster inputs provided in :source:`samples`. The various methods supported by the CCENERGY modules in |Psifour| are; summarized in Table :r",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:9365,Integrability,rout,routines,9365,"pendix :ref:`apdx:ccenergy`. For a standard ground-state; CCSD or CCSD(T) computation, the following keywords are common:. .. include:: autodir_options_c/ccenergy__reference.rst; .. include:: autodir_options_c/ccenergy__r_convergence.rst; .. include:: autodir_options_c/ccenergy__maxiter.rst; .. include:: autodir_options_c/ccenergy__brueckner_orbs_r_convergence.rst; .. include:: autodir_options_c/ccenergy__restart.rst; .. include:: autodir_options_c/ccenergy__cachelevel.rst; .. include:: autodir_options_c/ccenergy__cachetype.rst; .. include:: autodir_options_c/ccenergy__num_amps_print.rst; .. include:: autodir_options_c/ccenergy__mp2_amps_print.rst. Larger Calculations; ^^^^^^^^^^^^^^^^^^^. Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with |PSIfour|:. * In most cases it is reasonable to set the ``memory`` keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should *not* specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the ``memory`` keyword to a value less than 16 GB. * Set the |ccenergy__cachelevel| keyword to ``0``.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists. * Set the |globals__print| keyword to ``2``. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. .. _`sec:eomcc`:. Excited State Coupled Cluster Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. A complete list of keywords related to; coupled cluster linear response is provided in Appendix :ref:`apdx:cceom`.; The most important keywords associated with EOM-CC calculations are:. .. include:: autodir_options_c/cceom__roots_per_irrep.rst",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:2166,Modifiability,config,configuration,2166,"=================. .. codeauthor:: T. Daniel Crawford; .. sectionauthor:: T. Daniel Crawford. *Module:* :ref:`PSI Variables <apdx:ccenergy_psivar>`. *Module:* :ref:`Keywords <apdx:ccenergy>`, :source:`CCENERGY <psi4/src/psi4/cc/ccenergy>`. *Module:* :ref:`Keywords <apdx:cceom>`, :source:`CCEOM <psi4/src/psi4/cc/cceom>`. *Module:* :ref:`Keywords <apdx:ccresponse>`, :source:`CCRESPONSE <psi4/src/psi4/cc/ccresponse>`. *Module:* :ref:`Keywords <apdx:cctriples>`, :source:`CCTRIPLES <psi4/src/psi4/cc/cctriples>`. *Module:* :ref:`Keywords <apdx:ccdensity>`, :source:`CCDENSITY <psi4/src/psi4/cc/ccdensity>`. *Module:* :ref:`Keywords <apdx:cchbar>`, :source:`CCHBAR <psi4/src/psi4/cc/cchbar>`. *Module:* :ref:`Keywords <apdx:cclambda>`, :source:`CCLAMBDA <psi4/src/psi4/cc/cclambda>`. The coupled cluster approach is one of the most accurate and reliable quantum; chemical techniques for including the effects of electron correlation.; Instead of the linear expansion of the wavefunction used by configuration; interaction, coupled cluster uses an exponential expansion,. .. math::; :label: CCexpansion. | \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,. where the cluster operator :math:`{\hat{T}}` is written as a sum of operators that; generate singly-excited, doubly-excited, *etc.*, determinants:. .. math:: {\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},. with. .. math::. {\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,. *etc.* The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982]_ truncates the expansion at :math:`{\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}`. This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves up",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:3105,Modifiability,config,configuration,3105,"by configuration; interaction, coupled cluster uses an exponential expansion,. .. math::; :label: CCexpansion. | \Psi \rangle &= e^{\hat{T}} | \Phi_0 \rangle \\; &= \left( 1 + {\hat{T}} + \frac{1}{2} {\hat{T}}^2 + \frac{1}{3!}{\hat{T}}^3 + \cdots \right) | \Phi_0 \rangle,. where the cluster operator :math:`{\hat{T}}` is written as a sum of operators that; generate singly-excited, doubly-excited, *etc.*, determinants:. .. math:: {\hat{T}} = {\hat{T}_1} + {\hat{T}_2} + {\hat{T}_3} + \cdots + {\hat{T}_N},. with. .. math::. {\hat T}_1 | \Phi_0 \rangle &= \sum_{i}^{\rm occ} \sum_a^{\rm vir} t_i^a | \Phi_i^a \rangle \\; {\hat T}_2 | \Phi_0 \rangle &= \sum_{i<j}^{\rm occ} \sum_{a<b}^{\rm vir} t_{ij}^{ab} | \Phi_{ij}^{ab} \rangle,. *etc.* The popular coupled cluster singles and doubles (CCSD) model; [Purvis:1982]_ truncates the expansion at :math:`{\hat{T}} = {\hat{T}_1}; + {\hat{T}_2}`. This model has the same number of parameters as; configuration interaction singles and doubles (CISD) but improves upon; it by approximately accounting for higher-order terms using products; of lower-order terms (*e.g.*, the term :math:`{\hat{T}_2}^2` approximately; accounts for quadruple excitations). The inclusion of such products; makes coupled-cluster methods *size extensive*, meaning that the; quality of the computation should not degrade for larger molecules.; The computational cost for CCSD scales as :math:`{\cal{O}}(o^2 v^4)`, where; :math:`o` is the number of occupied orbitals and :math:`v` is the number of virtual; orbitals. Improving upon CCSD, the CCSD(T) method [Raghavachari:1989]_ includes; a perturbative estimate of the energy contributed by the :math:`{\hat{T}_3}`; operator. The computational cost of this additional term scales as; :math:`{\cal{O}}(o^3 v^4)`, making it rather expensive for molecules with more than; a dozen heavy atoms or so. However, when this method is affordable, it; provides very high quality results in most cases. |PSIfour| is capable of computing energie",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:9664,Performance,cache,cacheing,9664,"clude:: autodir_options_c/ccenergy__cachelevel.rst; .. include:: autodir_options_c/ccenergy__cachetype.rst; .. include:: autodir_options_c/ccenergy__num_amps_print.rst; .. include:: autodir_options_c/ccenergy__mp2_amps_print.rst. Larger Calculations; ^^^^^^^^^^^^^^^^^^^. Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with |PSIfour|:. * In most cases it is reasonable to set the ``memory`` keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should *not* specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the ``memory`` keyword to a value less than 16 GB. * Set the |ccenergy__cachelevel| keyword to ``0``.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists. * Set the |globals__print| keyword to ``2``. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. .. _`sec:eomcc`:. Excited State Coupled Cluster Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. A complete list of keywords related to; coupled cluster linear response is provided in Appendix :ref:`apdx:cceom`.; The most important keywords associated with EOM-CC calculations are:. .. include:: autodir_options_c/cceom__roots_per_irrep.rst; .. include:: autodir_options_c/cceom__e_convergence.rst; .. include:: autodir_options_c/cceom__singles_print.rst; .. include:: autodir_options_c/cceom__schmidt_add_residual_tolerance.rst; .. include:: autodir_options_c/cceom__eom_guess.rst. Linear Response (CCLR) Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Linear response computations are invoked like ``properties('ccsd')``; or ``properties('cc2')``, along with a li",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst:9888,Performance,bottleneck,bottlenecks,9888,"lude:: autodir_options_c/ccenergy__mp2_amps_print.rst. Larger Calculations; ^^^^^^^^^^^^^^^^^^^. Here are a few recommendations for carrying out large-basis-set coupled; cluster calculations with |PSIfour|:. * In most cases it is reasonable to set the ``memory`` keyword to 90% of; the available physical memory, at most. There is a small amount of overhead; associated with the; coupled cluster modules that is not accounted for by the internal CC memory; handling routines. Thus, the user should *not* specify the entire; physical memory of the system, or swapping is likely. However, for especially large; calculations, it is better to set the ``memory`` keyword to a value less than 16 GB. * Set the |ccenergy__cachelevel| keyword to ``0``.; This will turn off cacheing, which, for very large calculations, can; lead to heap fragmentation and memory faults, even when sufficient; physical memory exists. * Set the |globals__print| keyword to ``2``. This; will help narrow where memory bottlenecks or other errors exist in the; event of a crash. .. _`sec:eomcc`:. Excited State Coupled Cluster Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. A complete list of keywords related to; coupled cluster linear response is provided in Appendix :ref:`apdx:cceom`.; The most important keywords associated with EOM-CC calculations are:. .. include:: autodir_options_c/cceom__roots_per_irrep.rst; .. include:: autodir_options_c/cceom__e_convergence.rst; .. include:: autodir_options_c/cceom__singles_print.rst; .. include:: autodir_options_c/cceom__schmidt_add_residual_tolerance.rst; .. include:: autodir_options_c/cceom__eom_guess.rst. Linear Response (CCLR) Calculations; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Linear response computations are invoked like ``properties('ccsd')``; or ``properties('cc2')``, along with a list of requested properties.; A complete list of keywords related to; coupled cluster linear response is provided in Appendix :ref:`apdx:ccresponse`. The most important keywor",MatchSource.DOCS,doc/sphinxman/source/cc.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cc.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:1535,Availability,avail,available,1535,"ll be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. pyt",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:1702,Availability,down,download,1702,"# GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcd",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:2232,Availability,error,error,2232,". sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` become",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:3313,Availability,avail,available,3313,"t be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t)')``. Find available methods for; :py:func:`~psi4.driver.energy` at :ref:`Energy (CFOUR) <table:energy_cfour>`; and for :py:func:`~psi4.driver.optimize` at :ref:`Gradient (CFOUR); <table:grad_cfour>`. * Generally, the p4c4 interface will handle best practices for path of; execution: ``vcc``/``ecc``, derivative type, *etc.* The user is still; responsible for setting convergence, frozen core, guess, diis, *etc.*; For the moment, so-called ""best-practices"" keywords are summarized at; :ref:`Best Practices <table:cfour_cc_program>`. * For the type of computation intended, find appropriate options at; :ref:`Keywords <apdx:cfour>`. These keyword summaries contain the same; information as the `proper CFOUR options list; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.ListOfKeywordsInAlphabeticalOrder>`_; plus notes on keyword relevance when run through |PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.Manual>`_ may; also be useful, as may the many samples at",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:6560,Availability,toler,tolerant,6560,"ctly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration of the |PSIfour| instance (as opposed to solely *in files*); is the only advantage thus far incurred by the P4C4 interface. We'll call; this mode of basic utility the ""sandwich"" mode. Molecule specification in |PSIfour| allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See :ref:`sec:moleculeSpecification` for details and; :srcsample:`cfour/mints5` for examples. When a |PSIfour|-style molecule is; supplied, its geometry is written to ``ZMAT`` in Cartesian form and the; |cfour__cfour_coordinates|\ =CARTESIAN, |cfour__cfour_units|\ =ANGSTROM,; |cfour__cfour_charge|, and |cfour__cfour_multiplicity| keywords are set; appropriately in the ``*CFOUR(...)`` directive. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. Whenever the molecule is supplied in |PSIfour| format, the job control; keywords must be too. All :ref:`Cfour keywords <apdx:cfour>` are the usual; ones, prepended by ``cfour_`` to avoid any possible name conflicts. As; detailed in :ref:`sec:jobControl`, setting keywords is flexible i",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:12891,Availability,avail,available,12891,"71 ~; --------------------------------------------------------------------------------------------------------------- ~. The above example also shows the total memory for the computation being; set in |PSIfour| format. See :ref:`sec:memory` for details. When; specified, the memory value is passed on to Cfour by setting keywords; |cfour__cfour_memory_size| and |cfour__cfour_mem_unit|\ =MB. |PSIfour| has an extensive :ref:`basis set library <apdx:basisElement>` in; Gaussian94 format. See :ref:`sec:basisSets` for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (*e.g.*, jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the |mints__basis| keyword instead of |cfour__cfour_basis|; (accompanied, of course, by specifying the molecule |PSIfour|-style).; Internally, |PSIfour| processes the basis set as usual, then translates; the basis set format and writes out a ``GENBAS`` file with an entry for; each atom. The P4C4 interface sets keyword |cfour__cfour_basis|\ =SPECIAL; and |cfour__cfour_spherical| as appropriate, then writes the basis section; necessary for SPECIAL below the ``*CFOUR(...)`` block. (I'm sorry that the; name of the basis doesn't appear in ``ZMAT``, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.). The input below employs a |PSIfour| library basis set and also introduces; the final stage of conversion toward |PSIfour| format. Instead of the; generic ``'cfour'``, the computational method is specified as the first; argument to the :py:func:`~psi4.driver.optimize` call. In the computational; command below, the string argument ``'c4-ccsd(t)'``",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:15621,Availability,avail,available,15621,"084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, *etc.* and; some options can be set according to best practices. Practically speaking,; |cfour__cfour_cc_program| (and eventually |cfour__cfour_abcdtype|) will; always be set to the :ref:`fastest safe value <table:cfour_cc_program>`.; For example, the input above will run with |cfour__cfour_cc_program|\ =ECC; unless explicitly set to VCC. An advantage of |PSIfours| Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core ""wrappers"" available in |PSIfour| are; :py:func:`~psi4.driver.driver_nbody.nbody`,; :py:func:`~psi4.driver.wrapper_database.database`, and; :py:func:`~psi4.driver.cbs`; read their respective sections; for details, but an overview is provided here. :py:func:`~psi4.driver.driver_nbody.nbody`; computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both). ::. molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }; ; Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ; ; for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)); ; yields ::. R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the :py:func:`~psi4.driver.wrapper_database.database` wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input ::. set {; basis jun-cc-pvdz; d_convergence 9; }; ; database('c4-mp2','nbc10',cp='on',subset='Me",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:22222,Availability,error,error,22222,"style molecule, the; interface cannot judge whether a sandwich mode (drop the |PSIfour| molecule; and use the cfour block as the entirety of the ``ZMAT``) or a standard mode; (translate the |PSIfour| molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a |PSIfour| molecule and a molecule in the cfour block,; ``ZMAT`` *will* end up with multiple molecules and multiple ``*CFOUR(...)``; blocks, and it *will not* run. Therefore, if mixing sandwich and; standard or pure-\ |PSIfour| computations in an input file, place all; the sandwich jobs at the beginning before declaring |PSIfour|; molecules. If necessary, clear the cfour block with ``cfour {}`` before; commencing standard P4C4 jobs. .. _`sec:cfourOutput`:. Output; ~~~~~~. The output of :program:`xcfour` invoked from a |PSIfour| input file is; written to the |PSIfour| output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in :psivar:`CFOUR ERROR CODE`. .. rubric:: Energies & Scalars. After execution of :program:`xcfour` has completed, the output string is; extensively parsed and appropriate results are stored in :ref:`PSI; Variables <apdx:cfour_psivar>`. All gleaned variables are printed in the; Cfour output section of the |PSIfour| output file, as shown below. ::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELAT",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:23507,Availability,avail,available,23507," are printed in the; Cfour output section of the |PSIfour| output file, as shown below. ::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used. ::. energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No PSI Variables for properties: *e.g.*, :psivar:`SCF DIPOLE`. - No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. .. rubric:: Gradients and Arrays. In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the ``GRD`` file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by |PSIfour|; going f",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:29765,Availability,avail,available,29765,"nbody` for computation of interaction energies with or; without counterpoise correction. Example: :srcsample:`cfour/dfmp2-1`. * :py:func:`~psi4.driver.wrapper_database.database` for computation of a collection of molecules in a; single input, with summarization of results. Examples:; :srcsample:`cfour/pywrap-db1` and :srcsample:`cfour/psi-a24-grad`. * :py:func:`~psi4.driver.cbs` for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of |PSIfour| and Cfour computational methods and |PSIfour| basis sets.; Example: :srcsample:`cfour/pywrap-cbs1`. .. rubric:: Not Yet Implemented. * Ground state CI energies and optimizations. * Excited state energies and optimizations. * Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables. * Property calls that required extra computation not yet translated into; :py:func:`~psi4.driver.properties` computation command. * Frequencies. Energy methods available through P4C4 interface. .. include:: cfour_table_energy.rst. Gradient methods available through P4C4 interface. .. include:: cfour_table_grad.rst. .. _`table:cfour_cc_program`:. .. notes on preferred modules from JFS; .. comment always abcdtype = aobasis (but sometimes ; .. comment ncc does rhf ccsdt(q); .. comment reccommended code to do with, not only code (b/c mrcc can do much of this); .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | | | | RHF | UHF | ROHF |; .. comment | | | +--------+--------+---------+; .. comment | Driver Call, |cfour__cfour_deriv_level| | name, |cfour__cfour_calc_level| | |cfour__cfour_excite| | |cfour__cfour_cc_program| |; .. comment +=========================================+=================================+=======================+========+========+=========+",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:29853,Availability,avail,available,29853,". Example: :srcsample:`cfour/dfmp2-1`. * :py:func:`~psi4.driver.wrapper_database.database` for computation of a collection of molecules in a; single input, with summarization of results. Examples:; :srcsample:`cfour/pywrap-db1` and :srcsample:`cfour/psi-a24-grad`. * :py:func:`~psi4.driver.cbs` for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of |PSIfour| and Cfour computational methods and |PSIfour| basis sets.; Example: :srcsample:`cfour/pywrap-cbs1`. .. rubric:: Not Yet Implemented. * Ground state CI energies and optimizations. * Excited state energies and optimizations. * Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables. * Property calls that required extra computation not yet translated into; :py:func:`~psi4.driver.properties` computation command. * Frequencies. Energy methods available through P4C4 interface. .. include:: cfour_table_energy.rst. Gradient methods available through P4C4 interface. .. include:: cfour_table_grad.rst. .. _`table:cfour_cc_program`:. .. notes on preferred modules from JFS; .. comment always abcdtype = aobasis (but sometimes ; .. comment ncc does rhf ccsdt(q); .. comment reccommended code to do with, not only code (b/c mrcc can do much of this); .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | | | | RHF | UHF | ROHF |; .. comment | | | +--------+--------+---------+; .. comment | Driver Call, |cfour__cfour_deriv_level| | name, |cfour__cfour_calc_level| | |cfour__cfour_excite| | |cfour__cfour_cc_program| |; .. comment +=========================================+=================================+=======================+========+========+=========+; .. comment | :py:func:`~psi4.energy`, zero | cc2 | none | vcc | vcc | vcc |; .. comme",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:40277,Availability,down,down,40277,"us roles; in the Cfour program (*e.g.*, |scf__maxiter| is used to set; |cfour__cfour_scf_maxcyc|). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that |PSIfours| defaults don't; get imposed on Cfour. Also, in the case where a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF conv crit since that's Cfour's default; for |cfour__cfour_scf_conv| ::. energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; keyword ::. set cfour_scf_conv 6; energy('c4-scf'). * uses :math:`10^{-5}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword ::. set d_convergence 5; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword (local scope works, too) where; the |PSIfours| more flexible float input has been rounded down to; the integer required by Cfour ::. set scf d_convergence 5e-6; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten; and Cfour module keyword trumps |PSIfour| SCF module keyword ::. set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. .. note:: Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the :ref:`Cfour module<apdx:cfour>` along with; |mints__basis| and |globals__puream| (opt, too?). Misc. Running; ~~~~~~~~~~~~~. Naturally, in |PSIfour| multiple jobs can be run in succession from the input file. Control optimizations with optking keywords HERE. Cfour ``GRD`` file is; written to |PSIfour| output file. Gradient transformed back into the frame; in",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:41289,Availability,avail,available,41289,"xible float input has been rounded down to; the integer required by Cfour ::. set scf d_convergence 5e-6; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten; and Cfour module keyword trumps |PSIfour| SCF module keyword ::. set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. .. note:: Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the :ref:`Cfour module<apdx:cfour>` along with; |mints__basis| and |globals__puream| (opt, too?). Misc. Running; ~~~~~~~~~~~~~. Naturally, in |PSIfour| multiple jobs can be run in succession from the input file. Control optimizations with optking keywords HERE. Cfour ``GRD`` file is; written to |PSIfour| output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the |PSIfour|; output file and is available from input as :py:func:`~psi4.core.Wavefunction.gradient`. sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the ``cfour {...}`` block are tacked onto; the end of the ``ZMAT`` file that is otherwise written from psi style; format. It is by this route that, for example ``%excite*`` sections can at; present be specified. The execution of :program:`xcfour` can be modified by a few parameters. Setting; the option |cfour__cfour_omp_num_threads| sets the environment variable; :envvar:`OMP_NUM_THREADS` for only the duration of the Cfour computation.; That is, portions of an input file that run |PSIfour| modules are; unaffected. Additi",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:42643,Availability,error,errors,42643," # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the ``cfour {...}`` block are tacked onto; the end of the ``ZMAT`` file that is otherwise written from psi style; format. It is by this route that, for example ``%excite*`` sections can at; present be specified. The execution of :program:`xcfour` can be modified by a few parameters. Setting; the option |cfour__cfour_omp_num_threads| sets the environment variable; :envvar:`OMP_NUM_THREADS` for only the duration of the Cfour computation.; That is, portions of an input file that run |PSIfour| modules are; unaffected. Additionally, there are a few arguments to the function; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` that control the Cfour scratch; directory. . .. comment Notes to Self; .. comment ~~~~~~~~~~~~~; .. comment ; .. comment Test checked-in GENBAS on installed copy; .. comment ; .. comment Reference still not factored into cc_program!; .. comment ; .. comment optimize on a sandwich calc? errors out; .. comment ; .. comment ; .. comment .. _`table:cfour_cc_program`:; .. comment ; .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | | | | RHF | UHF | ROHF |; .. comment | | | +--------+--------+---------+; .. comment | Driver Call, |cfour__cfour_deriv_level| | name, |cfour__cfour_calc_level| | |cfour__cfour_excite| | |cfour__cfour_cc_program| |; .. comment +=========================================+=================================+=======================+========+========+=========+; .. comment | :py:func:`~psi4.energy`, zero | cc2 | none | vcc | vcc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | _cc | _cc | _cc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eom",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:1714,Deployability,install,install,1714,"# GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcd",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:35265,Deployability,integrat,integration,35265,"nt | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | vcc | | |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsdt | none | ecc | mrcc | mrc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | mrcc | mrcc | mrcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | mrcc | mrcc | mrcc |; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment properties same as grad; .. comment 2nd deriv ecc only for ccsd(t). Specification Details; ~~~~~~~~~~~~~~~~~~~~~. The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between |PSIfour| and; Cfour specification format are generally resolved behind the scenes:; not according to a *simple* rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a |PSIfour| module). Much can be gleaned by just running; inputs and inspecting the ``ZMAT`` passed to Cfour, but when questions; arise, here are the specifics, the governing laws. * Specifying a piece of input in |PSIfour| format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through :samp:`molecule; {optional_molecule_name} \\{...\\}`), memory (through :samp:`memory; {value} {unit}`), computational method (through . If Cfour keywords; are specified with values that contradict the |PSIfour| input,; execution is halted. As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the ``cfour_units; angstrom`` setting is permissible, since it concurs with the value; implied in",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:42503,Deployability,install,installed,42503,"eceding or following jobs, it is prudent to; separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the ``cfour {...}`` block are tacked onto; the end of the ``ZMAT`` file that is otherwise written from psi style; format. It is by this route that, for example ``%excite*`` sections can at; present be specified. The execution of :program:`xcfour` can be modified by a few parameters. Setting; the option |cfour__cfour_omp_num_threads| sets the environment variable; :envvar:`OMP_NUM_THREADS` for only the duration of the Cfour computation.; That is, portions of an input file that run |PSIfour| modules are; unaffected. Additionally, there are a few arguments to the function; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` that control the Cfour scratch; directory. . .. comment Notes to Self; .. comment ~~~~~~~~~~~~~; .. comment ; .. comment Test checked-in GENBAS on installed copy; .. comment ; .. comment Reference still not factored into cc_program!; .. comment ; .. comment optimize on a sandwich calc? errors out; .. comment ; .. comment ; .. comment .. _`table:cfour_cc_program`:; .. comment ; .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | | | | RHF | UHF | ROHF |; .. comment | | | +--------+--------+---------+; .. comment | Driver Call, |cfour__cfour_deriv_level| | name, |cfour__cfour_calc_level| | |cfour__cfour_excite| | |cfour__cfour_cc_program| |; .. comment +=========================================+=================================+=======================+========+========+=========+; .. comment | :py:func:`~psi4.energy`, zero | cc2 | none | vcc | vcc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:2858,Energy Efficiency,adapt,adapted,2858,"var:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t)')``. Find available methods for; :py:func:`~psi4.driver.energy` at :ref:`Energy (CFOUR) <table:energy_cfour>`; and for :py:func:`~psi4.driver.optimize` at :ref:`Gradient (CFOUR); <table:grad_cfour>`. * Generally, the p4c4 interface will handle best practices for path of; execution: ``vcc``/``ecc``, derivative type, *etc.* The user is still; responsible for setting convergence, frozen core, guess, diis, *etc.*; For the moment, so-called ""best-practices"" keywords are summarized at; :ref:`Best Practices <table:cfour_cc_program>`. * For the type of ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:3197,Energy Efficiency,energy,energy,3197,"ported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t)')``. Find available methods for; :py:func:`~psi4.driver.energy` at :ref:`Energy (CFOUR) <table:energy_cfour>`; and for :py:func:`~psi4.driver.optimize` at :ref:`Gradient (CFOUR); <table:grad_cfour>`. * Generally, the p4c4 interface will handle best practices for path of; execution: ``vcc``/``ecc``, derivative type, *etc.* The user is still; responsible for setting convergence, frozen core, guess, diis, *etc.*; For the moment, so-called ""best-practices"" keywords are summarized at; :ref:`Best Practices <table:cfour_cc_program>`. * For the type of computation intended, find appropriate options at; :ref:`Keywords <apdx:cfour>`. These keyword summaries contain the same; information as the `proper CFOUR options list; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.ListOfKeywordsInAlphabeticalOrder>`_; plus notes on keyword relevance when run through |PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:3224,Energy Efficiency,energy,energy,3224,"ported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t)')``. Find available methods for; :py:func:`~psi4.driver.energy` at :ref:`Energy (CFOUR) <table:energy_cfour>`; and for :py:func:`~psi4.driver.optimize` at :ref:`Gradient (CFOUR); <table:grad_cfour>`. * Generally, the p4c4 interface will handle best practices for path of; execution: ``vcc``/``ecc``, derivative type, *etc.* The user is still; responsible for setting convergence, frozen core, guess, diis, *etc.*; For the moment, so-called ""best-practices"" keywords are summarized at; :ref:`Best Practices <table:cfour_cc_program>`. * For the type of computation intended, find appropriate options at; :ref:`Keywords <apdx:cfour>`. These keyword summaries contain the same; information as the `proper CFOUR options list; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.ListOfKeywordsInAlphabeticalOrder>`_; plus notes on keyword relevance when run through |PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:3359,Energy Efficiency,energy,energy,3359,"ranch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t)')``. Find available methods for; :py:func:`~psi4.driver.energy` at :ref:`Energy (CFOUR) <table:energy_cfour>`; and for :py:func:`~psi4.driver.optimize` at :ref:`Gradient (CFOUR); <table:grad_cfour>`. * Generally, the p4c4 interface will handle best practices for path of; execution: ``vcc``/``ecc``, derivative type, *etc.* The user is still; responsible for setting convergence, frozen core, guess, diis, *etc.*; For the moment, so-called ""best-practices"" keywords are summarized at; :ref:`Best Practices <table:cfour_cc_program>`. * For the type of computation intended, find appropriate options at; :ref:`Keywords <apdx:cfour>`. These keyword summaries contain the same; information as the `proper CFOUR options list; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.ListOfKeywordsInAlphabeticalOrder>`_; plus notes on keyword relevance when run through |PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.Manual>`_ may; also be useful, as may the many samples at :source:`samples/cfour`. * Set Cfour keywords just like |PSIfour| ke",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:5305,Energy Efficiency,energy,energy,5305,"samples at :source:`samples/cfour`. * Set Cfour keywords just like |PSIfour| keywords. The names of keywords; are unchanged beyond a prepended ""cfour\_"". (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; |cfour__cfour_calc_level| and |cfour__cfour_reference| when used in; |PSIfour|.). * In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; |scf__reference| will appropriately set |cfour__cfour_reference|. For a; list of applicable keywords, see source of; muster_psi4options. * Consult :ref:`sec:cfourFunctionality` for information on what Cfour; functionality is accessible through |PSIfour|. |PSIfour| for Cfour Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. In the simplest use of the Psi4/Cfour interface, a |PSIfour| input file; can simply ""wrap"" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration of the |PSIfour| instance (as opposed to solely *in files*); is the only advantage thus far incurred by the P4C4 interface. We'll call; this mode of bas",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:5476,Energy Efficiency,energy,energy,5476,"; are unchanged beyond a prepended ""cfour\_"". (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; |cfour__cfour_calc_level| and |cfour__cfour_reference| when used in; |PSIfour|.). * In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; |scf__reference| will appropriately set |cfour__cfour_reference|. For a; list of applicable keywords, see source of; muster_psi4options. * Consult :ref:`sec:cfourFunctionality` for information on what Cfour; functionality is accessible through |PSIfour|. |PSIfour| for Cfour Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. In the simplest use of the Psi4/Cfour interface, a |PSIfour| input file; can simply ""wrap"" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration of the |PSIfour| instance (as opposed to solely *in files*); is the only advantage thus far incurred by the P4C4 interface. We'll call; this mode of basic utility the ""sandwich"" mode. Molecule specification in |PSIfour| allows Cartesians, Z-matrices, mixed; Ca",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:5804,Energy Efficiency,energy,energy,5804,"four__cfour_reference|. For a; list of applicable keywords, see source of; muster_psi4options. * Consult :ref:`sec:cfourFunctionality` for information on what Cfour; functionality is accessible through |PSIfour|. |PSIfour| for Cfour Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. In the simplest use of the Psi4/Cfour interface, a |PSIfour| input file; can simply ""wrap"" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration of the |PSIfour| instance (as opposed to solely *in files*); is the only advantage thus far incurred by the P4C4 interface. We'll call; this mode of basic utility the ""sandwich"" mode. Molecule specification in |PSIfour| allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See :ref:`sec:moleculeSpecification` for details and; :srcsample:`cfour/mints5` for examples. When a |PSIfour|-style molecule is; supplied, its geometry is written to ``ZMAT`` in Cartesian form and the; |cfour__cfour_coordinates|\ =CARTESIAN, |cfour__cfour_",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:5891,Energy Efficiency,energy,energy,5891,"nctionality` for information on what Cfour; functionality is accessible through |PSIfour|. |PSIfour| for Cfour Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. In the simplest use of the Psi4/Cfour interface, a |PSIfour| input file; can simply ""wrap"" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration of the |PSIfour| instance (as opposed to solely *in files*); is the only advantage thus far incurred by the P4C4 interface. We'll call; this mode of basic utility the ""sandwich"" mode. Molecule specification in |PSIfour| allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See :ref:`sec:moleculeSpecification` for details and; :srcsample:`cfour/mints5` for examples. When a |PSIfour|-style molecule is; supplied, its geometry is written to ``ZMAT`` in Cartesian form and the; |cfour__cfour_coordinates|\ =CARTESIAN, |cfour__cfour_units|\ =ANGSTROM,; |cfour__cfour_charge|, and |cfour__cfour_multiplicity| keywords are set; appropriately in the ``*CFOUR",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:7617,Energy Efficiency,energy,energy,7617,"tails and; :srcsample:`cfour/mints5` for examples. When a |PSIfour|-style molecule is; supplied, its geometry is written to ``ZMAT`` in Cartesian form and the; |cfour__cfour_coordinates|\ =CARTESIAN, |cfour__cfour_units|\ =ANGSTROM,; |cfour__cfour_charge|, and |cfour__cfour_multiplicity| keywords are set; appropriately in the ``*CFOUR(...)`` directive. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. Whenever the molecule is supplied in |PSIfour| format, the job control; keywords must be too. All :ref:`Cfour keywords <apdx:cfour>` are the usual; ones, prepended by ``cfour_`` to avoid any possible name conflicts. As; detailed in :ref:`sec:jobControl`, setting keywords is flexible in; format. The previous example translates to::. # UHF-SCF energy calculation . molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; }; ; set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }; ; energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by t",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:7998,Energy Efficiency,energy,energy,7998,"ropriately in the ``*CFOUR(...)`` directive. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. Whenever the molecule is supplied in |PSIfour| format, the job control; keywords must be too. All :ref:`Cfour keywords <apdx:cfour>` are the usual; ones, prepended by ``cfour_`` to avoid any possible name conflicts. As; detailed in :ref:`sec:jobControl`, setting keywords is flexible in; format. The previous example translates to::. # UHF-SCF energy calculation . molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; }; ; set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }; ; energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gra",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:9647,Energy Efficiency,energy,energy,9647,"yword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ----------------------------------",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:10402,Energy Efficiency,monitor,monitor,10402,"; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * 3.58e-05 9.89e-05 * 8.93e-05 o ~; 4 -76.33226141 -4.26e-09 * 9.76e-07 * 6.58e-07 * 6.22e-06 * 3.71e-06 o ~; --------------------------------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:14272,Energy Efficiency,energy,energy,14272,"cfour_spherical| as appropriate, then writes the basis section; necessary for SPECIAL below the ``*CFOUR(...)`` block. (I'm sorry that the; name of the basis doesn't appear in ``ZMAT``, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.). The input below employs a |PSIfour| library basis set and also introduces; the final stage of conversion toward |PSIfour| format. Instead of the; generic ``'cfour'``, the computational method is specified as the first; argument to the :py:func:`~psi4.driver.optimize` call. In the computational; command below, the string argument ``'c4-ccsd(t)'`` directs that a CCSD(T); computation be run using Cfour (as opposed to ``'ccsd(t)'`` which would; call |PSIfour| CC code). Specifying computational method in this manner; sets |cfour__cfour_calc_level| from the argument and; |cfour__cfour_deriv_level| as appropriate from the function call:; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.gradient`, or; :py:func:`~psi4.driver.optimize`. If those keywords are also set explicitly to; contradictory values, the interface will complain. ::. memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, *etc.* and; some options can be set according to best practices. Practically speaking,; |cfour__cfour_cc_program| (and eventually |cfour__cfour_abcdtype|) will; always be set to the :ref:`fastest safe value <table:cfour_cc_program>`.; For example, the input ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:15927,Energy Efficiency,energy,energy,15927,"ation can be made; of the reference, the derivative level, the excitation level, *etc.* and; some options can be set according to best practices. Practically speaking,; |cfour__cfour_cc_program| (and eventually |cfour__cfour_abcdtype|) will; always be set to the :ref:`fastest safe value <table:cfour_cc_program>`.; For example, the input above will run with |cfour__cfour_cc_program|\ =ECC; unless explicitly set to VCC. An advantage of |PSIfours| Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core ""wrappers"" available in |PSIfour| are; :py:func:`~psi4.driver.driver_nbody.nbody`,; :py:func:`~psi4.driver.wrapper_database.database`, and; :py:func:`~psi4.driver.cbs`; read their respective sections; for details, but an overview is provided here. :py:func:`~psi4.driver.driver_nbody.nbody`; computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both). ::. molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }; ; Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ; ; for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)); ; yields ::. R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the :py:func:`~psi4.driver.wrapper_database.database` wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input ::. set {; basis jun-cc-pvdz; d_convergence 9; }; ; database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; :srcdb:`NBC10` database::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//; ; For each VARIABLE requ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:16684,Energy Efficiency,energy,energy,16684,"r_database.database`, and; :py:func:`~psi4.driver.cbs`; read their respective sections; for details, but an overview is provided here. :py:func:`~psi4.driver.driver_nbody.nbody`; computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both). ::. molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }; ; Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ; ; for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)); ; yields ::. R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the :py:func:`~psi4.driver.wrapper_database.database` wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input ::. set {; basis jun-cc-pvdz; d_convergence 9; }; ; database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; :srcdb:`NBC10` database::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//; ; For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense.; ; ==> Requested Energy <==; ; ----------------------------------------------------------------------------------------------; Reaction Reaction Energy Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [H] Wt [H] Wt; ----------------------------------------------------------------------------------------------; NBC1-MeMe-3.2 0.0690 1.1639 1.0949 -80.72700202 1 -40.36442840 -2; NBC1-MeMe-3.3 -0.2390 0.6709 0.9099 -80.72764911 1 -40.36435916 -2; NBC1-MeMe-3.4 -0.4170 0.3407 0.7577 -80.72806043 1 -40.36430165 -2; NBC1-MeMe-3.5 -0.5080 0.1244 0.6324 ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:19350,Energy Efficiency,energy,energy,19350,"36409932 -2; NBC1-MeMe-4.6 -0.2170 -0.1155 0.1015 -80.72836761 1 -40.36409177 -2; NBC1-MeMe-4.8 -0.1680 -0.0933 0.0747 -80.72831991 1 -40.36408563 -2; NBC1-MeMe-5.0 -0.1300 -0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the :py:func:`~psi4.driver.cbs` wrapper allows any; compound computational method that can be expressed through :ref:`CBS; <eq:cbs>` to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through |PSIfour| and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points. ::. molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }; ; set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields::. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; --------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:23596,Energy Efficiency,energy,energy,23596," ::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used. ::. energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No PSI Variables for properties: *e.g.*, :psivar:`SCF DIPOLE`. - No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. .. rubric:: Gradients and Arrays. In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the ``GRD`` file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by |PSIfour|; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal ori",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:23658,Energy Efficiency,energy,energy,23658,"y Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used. ::. energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No PSI Variables for properties: *e.g.*, :psivar:`SCF DIPOLE`. - No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. .. rubric:: Gradients and Arrays. In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the ``GRD`` file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by |PSIfour|; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while |PSIfour| naturally; expects the gradi",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:23727,Energy Efficiency,energy,energy,23727,"<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used. ::. energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No PSI Variables for properties: *e.g.*, :psivar:`SCF DIPOLE`. - No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. .. rubric:: Gradients and Arrays. In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the ``GRD`` file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by |PSIfour|; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while |PSIfour| naturally; expects the gradient to be aligned with the active molecule.",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:23778,Energy Efficiency,energy,energy,23778,"----------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used. ::. energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No PSI Variables for properties: *e.g.*, :psivar:`SCF DIPOLE`. - No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. .. rubric:: Gradients and Arrays. In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the ``GRD`` file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by |PSIfour|; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while |PSIfour| naturally; expects the gradient to be aligned with the active molecule. The geometry; in ``GRD`` and the geometry of |PSIfours| active molecule a",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:23832,Energy Efficiency,energy,energy,23832,"----------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used. ::. energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No PSI Variables for properties: *e.g.*, :psivar:`SCF DIPOLE`. - No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. .. rubric:: Gradients and Arrays. In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the ``GRD`` file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by |PSIfour|; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while |PSIfour| naturally; expects the gradient to be aligned with the active molecule. The geometry; in ``GRD`` and the geometry of |PSIfours| active molecule a",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:26520,Energy Efficiency,energy,energy,26520,"00001; 7.0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; :py:class:`~psi4.core.Matrix` object through the wfn as; :py:func:`psi4.core.Wavefunction.gradient`. Previously, cfour communicated through; `psi4.core.legacy_gradient` which was accessed through `psi4.core.get_gradient()`. .. rubric:: Cfour Files. The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary ``P4C4_INFO``. That is,; ``P4C4_INFO['zmat']`` returns a string of the input file sent to Cfour.; Accessible arguments are ``zmat``, ``output``, and any that have been; produced of ``grd``. For example, to print to the screen if CC convergence; is reached, the following could be placed in the |PSIfour| input file. ::. energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. .. rubric:: Scratch Files. By default, a separate subdirectory for each Cfour call is created within; the job's scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, ``energy('cfour',; path='/full/path/to/cfour/scratch')``. Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with ``energy('cfour', keep=True)`` or; (the default) ``energy('cfour', keep=False)``. *path* and *keep* are; keyword arguments that get interpreted by the; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` function documented below. .. autofunction:: psi4.driver.procrouting.interface_cfour.run_cfour(name [, keep, path]). .. _`sec:cfourFunctionality`:. Functionality; ~~~~~~~~~~~~~. Through clever use of the ``cfour {...}`` block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:26809,Energy Efficiency,energy,energy,26809,"n also be accessed from the input file as a; :py:class:`~psi4.core.Matrix` object through the wfn as; :py:func:`psi4.core.Wavefunction.gradient`. Previously, cfour communicated through; `psi4.core.legacy_gradient` which was accessed through `psi4.core.get_gradient()`. .. rubric:: Cfour Files. The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary ``P4C4_INFO``. That is,; ``P4C4_INFO['zmat']`` returns a string of the input file sent to Cfour.; Accessible arguments are ``zmat``, ``output``, and any that have been; produced of ``grd``. For example, to print to the screen if CC convergence; is reached, the following could be placed in the |PSIfour| input file. ::. energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. .. rubric:: Scratch Files. By default, a separate subdirectory for each Cfour call is created within; the job's scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, ``energy('cfour',; path='/full/path/to/cfour/scratch')``. Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with ``energy('cfour', keep=True)`` or; (the default) ``energy('cfour', keep=False)``. *path* and *keep* are; keyword arguments that get interpreted by the; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` function documented below. .. autofunction:: psi4.driver.procrouting.interface_cfour.run_cfour(name [, keep, path]). .. _`sec:cfourFunctionality`:. Functionality; ~~~~~~~~~~~~~. Through clever use of the ``cfour {...}`` block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into |PSIfour| data objects. .. rubric:: Implemented. * Single-point :py:func:`~psi4.driver.energy` commands for :ref:`ground state; methods <table:energy_cfour>`. Example",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:27015,Energy Efficiency,energy,energy,27015,"psi4.core.legacy_gradient` which was accessed through `psi4.core.get_gradient()`. .. rubric:: Cfour Files. The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary ``P4C4_INFO``. That is,; ``P4C4_INFO['zmat']`` returns a string of the input file sent to Cfour.; Accessible arguments are ``zmat``, ``output``, and any that have been; produced of ``grd``. For example, to print to the screen if CC convergence; is reached, the following could be placed in the |PSIfour| input file. ::. energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. .. rubric:: Scratch Files. By default, a separate subdirectory for each Cfour call is created within; the job's scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, ``energy('cfour',; path='/full/path/to/cfour/scratch')``. Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with ``energy('cfour', keep=True)`` or; (the default) ``energy('cfour', keep=False)``. *path* and *keep* are; keyword arguments that get interpreted by the; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` function documented below. .. autofunction:: psi4.driver.procrouting.interface_cfour.run_cfour(name [, keep, path]). .. _`sec:cfourFunctionality`:. Functionality; ~~~~~~~~~~~~~. Through clever use of the ``cfour {...}`` block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into |PSIfour| data objects. .. rubric:: Implemented. * Single-point :py:func:`~psi4.driver.energy` commands for :ref:`ground state; methods <table:energy_cfour>`. Examples:; :srcsample:`cfour/sp-rhf-ccsd_t_-ao-ecc`, :srcsample:`cfour/scf4`,; :srcsample:`cfour/mints5`. * Analytic :py:func:`~psi4.driver.gradient` and :py:func:`~psi4.driver.optimize`; comma",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:27064,Energy Efficiency,energy,energy,27064,"psi4.core.legacy_gradient` which was accessed through `psi4.core.get_gradient()`. .. rubric:: Cfour Files. The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary ``P4C4_INFO``. That is,; ``P4C4_INFO['zmat']`` returns a string of the input file sent to Cfour.; Accessible arguments are ``zmat``, ``output``, and any that have been; produced of ``grd``. For example, to print to the screen if CC convergence; is reached, the following could be placed in the |PSIfour| input file. ::. energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. .. rubric:: Scratch Files. By default, a separate subdirectory for each Cfour call is created within; the job's scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, ``energy('cfour',; path='/full/path/to/cfour/scratch')``. Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with ``energy('cfour', keep=True)`` or; (the default) ``energy('cfour', keep=False)``. *path* and *keep* are; keyword arguments that get interpreted by the; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` function documented below. .. autofunction:: psi4.driver.procrouting.interface_cfour.run_cfour(name [, keep, path]). .. _`sec:cfourFunctionality`:. Functionality; ~~~~~~~~~~~~~. Through clever use of the ``cfour {...}`` block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into |PSIfour| data objects. .. rubric:: Implemented. * Single-point :py:func:`~psi4.driver.energy` commands for :ref:`ground state; methods <table:energy_cfour>`. Examples:; :srcsample:`cfour/sp-rhf-ccsd_t_-ao-ecc`, :srcsample:`cfour/scf4`,; :srcsample:`cfour/mints5`. * Analytic :py:func:`~psi4.driver.gradient` and :py:func:`~psi4.driver.optimize`; comma",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:27714,Energy Efficiency,energy,energy,27714,"ocation of the; Cfour scratch, execute with, for example, ``energy('cfour',; path='/full/path/to/cfour/scratch')``. Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with ``energy('cfour', keep=True)`` or; (the default) ``energy('cfour', keep=False)``. *path* and *keep* are; keyword arguments that get interpreted by the; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` function documented below. .. autofunction:: psi4.driver.procrouting.interface_cfour.run_cfour(name [, keep, path]). .. _`sec:cfourFunctionality`:. Functionality; ~~~~~~~~~~~~~. Through clever use of the ``cfour {...}`` block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into |PSIfour| data objects. .. rubric:: Implemented. * Single-point :py:func:`~psi4.driver.energy` commands for :ref:`ground state; methods <table:energy_cfour>`. Examples:; :srcsample:`cfour/sp-rhf-ccsd_t_-ao-ecc`, :srcsample:`cfour/scf4`,; :srcsample:`cfour/mints5`. * Analytic :py:func:`~psi4.driver.gradient` and :py:func:`~psi4.driver.optimize`; commands for :ref:`ground state methods <table:grad_cfour>`. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: :srcsample:`cfour/opt-rhf-ccsd_t_`,; :srcsample:`cfour/mp2-1`, and :srcsample:`cfour/mints5-grad`. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. * Finite difference of energy :py:func:`~psi4.driver.gradient` and; :py:func:`~psi4.driver.optimize` for :ref:`methods <table:energy_cfour>`.; Force with ``gradient('name', dertype=0)``, *etc.*. * :py:func:`~ps",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:28563,Energy Efficiency,energy,energy,28563,"ted functionalities where results from Cfour are collected; into |PSIfour| data objects. .. rubric:: Implemented. * Single-point :py:func:`~psi4.driver.energy` commands for :ref:`ground state; methods <table:energy_cfour>`. Examples:; :srcsample:`cfour/sp-rhf-ccsd_t_-ao-ecc`, :srcsample:`cfour/scf4`,; :srcsample:`cfour/mints5`. * Analytic :py:func:`~psi4.driver.gradient` and :py:func:`~psi4.driver.optimize`; commands for :ref:`ground state methods <table:grad_cfour>`. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: :srcsample:`cfour/opt-rhf-ccsd_t_`,; :srcsample:`cfour/mp2-1`, and :srcsample:`cfour/mints5-grad`. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. * Finite difference of energy :py:func:`~psi4.driver.gradient` and; :py:func:`~psi4.driver.optimize` for :ref:`methods <table:energy_cfour>`.; Force with ``gradient('name', dertype=0)``, *etc.*. * :py:func:`~psi4.driver.driver_nbody.nbody` for computation of interaction energies with or; without counterpoise correction. Example: :srcsample:`cfour/dfmp2-1`. * :py:func:`~psi4.driver.wrapper_database.database` for computation of a collection of molecules in a; single input, with summarization of results. Examples:; :srcsample:`cfour/pywrap-db1` and :srcsample:`cfour/psi-a24-grad`. * :py:func:`~psi4.driver.cbs` for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of |PSIfour| and Cfour computational methods and |PSIfour| basis sets.; Example: :srcsample:`cfour/pywrap-cbs1`. .. rubric:: Not Yet Implemented. * Ground state CI energies and optimizations. * Excited state energies and optimizations. * Properties are not yet regex-ed, transformed into i",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:30805,Energy Efficiency,energy,energy,30805,"y.rst. Gradient methods available through P4C4 interface. .. include:: cfour_table_grad.rst. .. _`table:cfour_cc_program`:. .. notes on preferred modules from JFS; .. comment always abcdtype = aobasis (but sometimes ; .. comment ncc does rhf ccsdt(q); .. comment reccommended code to do with, not only code (b/c mrcc can do much of this); .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | | | | RHF | UHF | ROHF |; .. comment | | | +--------+--------+---------+; .. comment | Driver Call, |cfour__cfour_deriv_level| | name, |cfour__cfour_calc_level| | |cfour__cfour_excite| | |cfour__cfour_cc_program| |; .. comment +=========================================+=================================+=======================+========+========+=========+; .. comment | :py:func:`~psi4.energy`, zero | cc2 | none | vcc | vcc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | _cc | _cc | _cc |; .. comment | |vcc for everything +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | _cc | _cc | _cc |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsd | none | ecc | ecc | ecc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | vcc | vcc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | vcc | vcc | vcc |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsd(t) | none | ecc | ecc | ecc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | | | |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | |",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:35631,Energy Efficiency,charge,charge,35631,"/eomip | mrcc | mrcc | mrcc |; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment properties same as grad; .. comment 2nd deriv ecc only for ccsd(t). Specification Details; ~~~~~~~~~~~~~~~~~~~~~. The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between |PSIfour| and; Cfour specification format are generally resolved behind the scenes:; not according to a *simple* rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a |PSIfour| module). Much can be gleaned by just running; inputs and inspecting the ``ZMAT`` passed to Cfour, but when questions; arise, here are the specifics, the governing laws. * Specifying a piece of input in |PSIfour| format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through :samp:`molecule; {optional_molecule_name} \\{...\\}`), memory (through :samp:`memory; {value} {unit}`), computational method (through . If Cfour keywords; are specified with values that contradict the |PSIfour| input,; execution is halted. As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the ``cfour_units; angstrom`` setting is permissible, since it concurs with the value; implied in the molecule block. ::. memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:36567,Energy Efficiency,energy,energy,36567,"rise, here are the specifics, the governing laws. * Specifying a piece of input in |PSIfour| format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through :samp:`molecule; {optional_molecule_name} \\{...\\}`), memory (through :samp:`memory; {value} {unit}`), computational method (through . If Cfour keywords; are specified with values that contradict the |PSIfour| input,; execution is halted. As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the ``cfour_units; angstrom`` setting is permissible, since it concurs with the value; implied in the molecule block. ::. memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). * Specifying anything in |PSIfour| format (molecule, basis, options,; method call) starts building a ``*CFOUR(...)`` directive for the; ``ZMAT`` file. Since the contents of the ``cfour {...}`` block are; blindly appended to any input interpreted from |PSIfour| format, mixing; of |PSIfour| and Cfour input formats likely *will* give rise to multiple; ``*CFOUR(...)`` directives in the prospective ``ZMAT``, execution of; which *will* be trapped and halted. Proper uses for the ``cfour {...}``; block are for the sandwich mode, where the entire ``ZMAT`` is enclosed,; or for extra directives like ``%excite*``, which presently have no other; specification route. * Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between |PSIfour| and Cfour and it'",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:36624,Energy Efficiency,energy,energy,36624,"harge/multiplicity through :samp:`molecule; {optional_molecule_name} \\{...\\}`), memory (through :samp:`memory; {value} {unit}`), computational method (through . If Cfour keywords; are specified with values that contradict the |PSIfour| input,; execution is halted. As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the ``cfour_units; angstrom`` setting is permissible, since it concurs with the value; implied in the molecule block. ::. memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). * Specifying anything in |PSIfour| format (molecule, basis, options,; method call) starts building a ``*CFOUR(...)`` directive for the; ``ZMAT`` file. Since the contents of the ``cfour {...}`` block are; blindly appended to any input interpreted from |PSIfour| format, mixing; of |PSIfour| and Cfour input formats likely *will* give rise to multiple; ``*CFOUR(...)`` directives in the prospective ``ZMAT``, execution of; which *will* be trapped and halted. Proper uses for the ``cfour {...}``; block are for the sandwich mode, where the entire ``ZMAT`` is enclosed,; or for extra directives like ``%excite*``, which presently have no other; specification route. * Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between |PSIfour| and Cfour and it's not; practical to compare exponent-to-exponent, any input file with both; |mints__basis| and |cfour__cfour_basis| keywords present will halt. Once; a basis set has been requested through |mints__ba",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:38190,Energy Efficiency,energy,energy,38190,"extra directives like ``%excite*``, which presently have no other; specification route. * Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between |PSIfour| and Cfour and it's not; practical to compare exponent-to-exponent, any input file with both; |mints__basis| and |cfour__cfour_basis| keywords present will halt. Once; a basis set has been requested through |mints__basis|, overriding the; default spherical/Cartesian setting must be done through; |globals__puream| (as opposed to |cfour__cfour_spherical|). * Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (*e.g.*, |cfour__cfour_geo_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ecc since that's best practice for the requested ccsd ::. energy('c4-ccsd'). * runs in vcc since *hidden* default overwritten by keyword ::. set cfour_cc_program vcc; energy('c4-ccsd'). * Specifying certain keywords that are nominally applicable for pure-\; |PSIfour| modules directs them to fulfil analogous roles; in the",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:38223,Energy Efficiency,energy,energy,38223,"extra directives like ``%excite*``, which presently have no other; specification route. * Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between |PSIfour| and Cfour and it's not; practical to compare exponent-to-exponent, any input file with both; |mints__basis| and |cfour__cfour_basis| keywords present will halt. Once; a basis set has been requested through |mints__basis|, overriding the; default spherical/Cartesian setting must be done through; |globals__puream| (as opposed to |cfour__cfour_spherical|). * Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (*e.g.*, |cfour__cfour_geo_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ecc since that's best practice for the requested ccsd ::. energy('c4-ccsd'). * runs in vcc since *hidden* default overwritten by keyword ::. set cfour_cc_program vcc; energy('c4-ccsd'). * Specifying certain keywords that are nominally applicable for pure-\; |PSIfour| modules directs them to fulfil analogous roles; in the",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:38735,Energy Efficiency,energy,energy,38735," (as opposed to |cfour__cfour_spherical|). * Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (*e.g.*, |cfour__cfour_geo_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ecc since that's best practice for the requested ccsd ::. energy('c4-ccsd'). * runs in vcc since *hidden* default overwritten by keyword ::. set cfour_cc_program vcc; energy('c4-ccsd'). * Specifying certain keywords that are nominally applicable for pure-\; |PSIfour| modules directs them to fulfil analogous roles; in the Cfour program (*e.g.*, |scf__maxiter| is used to set; |cfour__cfour_scf_maxcyc|). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that |PSIfours| defaults don't; get imposed on Cfour. Also, in the case where a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:38868,Energy Efficiency,energy,energy,38868," Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (*e.g.*, |cfour__cfour_geo_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ecc since that's best practice for the requested ccsd ::. energy('c4-ccsd'). * runs in vcc since *hidden* default overwritten by keyword ::. set cfour_cc_program vcc; energy('c4-ccsd'). * Specifying certain keywords that are nominally applicable for pure-\; |PSIfour| modules directs them to fulfil analogous roles; in the Cfour program (*e.g.*, |scf__maxiter| is used to set; |cfour__cfour_scf_maxcyc|). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that |PSIfours| defaults don't; get imposed on Cfour. Also, in the case where a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF conv crit since that's Cfour's default; for |cfour__cfour_scf_conv| ::. energy('c4-scf'). * uses :math:`10^{-6}` SCF con",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:38953,Energy Efficiency,energy,energy,38953,"o_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ecc since that's best practice for the requested ccsd ::. energy('c4-ccsd'). * runs in vcc since *hidden* default overwritten by keyword ::. set cfour_cc_program vcc; energy('c4-ccsd'). * Specifying certain keywords that are nominally applicable for pure-\; |PSIfour| modules directs them to fulfil analogous roles; in the Cfour program (*e.g.*, |scf__maxiter| is used to set; |cfour__cfour_scf_maxcyc|). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that |PSIfours| defaults don't; get imposed on Cfour. Also, in the case where a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF conv crit since that's Cfour's default; for |cfour__cfour_scf_conv| ::. energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; keyword ::. set cfour_scf_conv 6; energy('c4-scf'). * uses :math:`10^{-5}` S",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:39062,Energy Efficiency,energy,energy,39062,"ywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ecc since that's best practice for the requested ccsd ::. energy('c4-ccsd'). * runs in vcc since *hidden* default overwritten by keyword ::. set cfour_cc_program vcc; energy('c4-ccsd'). * Specifying certain keywords that are nominally applicable for pure-\; |PSIfour| modules directs them to fulfil analogous roles; in the Cfour program (*e.g.*, |scf__maxiter| is used to set; |cfour__cfour_scf_maxcyc|). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that |PSIfours| defaults don't; get imposed on Cfour. Also, in the case where a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF conv crit since that's Cfour's default; for |cfour__cfour_scf_conv| ::. energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; keyword ::. set cfour_scf_conv 6; energy('c4-scf'). * uses :math:`10^{-5}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword ::. set d_converg",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:39801,Energy Efficiency,energy,energy,39801,"d ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ecc since that's best practice for the requested ccsd ::. energy('c4-ccsd'). * runs in vcc since *hidden* default overwritten by keyword ::. set cfour_cc_program vcc; energy('c4-ccsd'). * Specifying certain keywords that are nominally applicable for pure-\; |PSIfour| modules directs them to fulfil analogous roles; in the Cfour program (*e.g.*, |scf__maxiter| is used to set; |cfour__cfour_scf_maxcyc|). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that |PSIfours| defaults don't; get imposed on Cfour. Also, in the case where a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF conv crit since that's Cfour's default; for |cfour__cfour_scf_conv| ::. energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; keyword ::. set cfour_scf_conv 6; energy('c4-scf'). * uses :math:`10^{-5}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword ::. set d_convergence 5; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword (local scope works, too) where; the |PSIfours| more flexible float input has been rounded down to; the integer required by Cfour ::. set scf d_convergence 5e-6; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten; and Cfour module keyword trumps |PSIfour| SCF module keyword ::. set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. .. note:: Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entire",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:39920,Energy Efficiency,energy,energy,39920,"practice for the requested ccsd ::. energy('c4-ccsd'). * runs in vcc since *hidden* default overwritten by keyword ::. set cfour_cc_program vcc; energy('c4-ccsd'). * Specifying certain keywords that are nominally applicable for pure-\; |PSIfour| modules directs them to fulfil analogous roles; in the Cfour program (*e.g.*, |scf__maxiter| is used to set; |cfour__cfour_scf_maxcyc|). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that |PSIfours| defaults don't; get imposed on Cfour. Also, in the case where a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF conv crit since that's Cfour's default; for |cfour__cfour_scf_conv| ::. energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; keyword ::. set cfour_scf_conv 6; energy('c4-scf'). * uses :math:`10^{-5}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword ::. set d_convergence 5; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword (local scope works, too) where; the |PSIfours| more flexible float input has been rounded down to; the integer required by Cfour ::. set scf d_convergence 5e-6; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten; and Cfour module keyword trumps |PSIfour| SCF module keyword ::. set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. .. note:: Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the :ref:`Cfour module<apdx:cfour>` along with; |mints__basis| and |globals__pu",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:40066,Energy Efficiency,energy,energy,40066,"nergy('c4-ccsd'). * Specifying certain keywords that are nominally applicable for pure-\; |PSIfour| modules directs them to fulfil analogous roles; in the Cfour program (*e.g.*, |scf__maxiter| is used to set; |cfour__cfour_scf_maxcyc|). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that |PSIfours| defaults don't; get imposed on Cfour. Also, in the case where a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF conv crit since that's Cfour's default; for |cfour__cfour_scf_conv| ::. energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; keyword ::. set cfour_scf_conv 6; energy('c4-scf'). * uses :math:`10^{-5}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword ::. set d_convergence 5; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword (local scope works, too) where; the |PSIfours| more flexible float input has been rounded down to; the integer required by Cfour ::. set scf d_convergence 5e-6; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten; and Cfour module keyword trumps |PSIfour| SCF module keyword ::. set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. .. note:: Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the :ref:`Cfour module<apdx:cfour>` along with; |mints__basis| and |globals__puream| (opt, too?). Misc. Running; ~~~~~~~~~~~~~. Naturally, in |PSIfour| multiple jobs can be run in succession from the input file. Control optimi",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:40348,Energy Efficiency,energy,energy,40348," if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that |PSIfours| defaults don't; get imposed on Cfour. Also, in the case where a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF conv crit since that's Cfour's default; for |cfour__cfour_scf_conv| ::. energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; keyword ::. set cfour_scf_conv 6; energy('c4-scf'). * uses :math:`10^{-5}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword ::. set d_convergence 5; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword (local scope works, too) where; the |PSIfours| more flexible float input has been rounded down to; the integer required by Cfour ::. set scf d_convergence 5e-6; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten; and Cfour module keyword trumps |PSIfour| SCF module keyword ::. set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. .. note:: Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the :ref:`Cfour module<apdx:cfour>` along with; |mints__basis| and |globals__puream| (opt, too?). Misc. Running; ~~~~~~~~~~~~~. Naturally, in |PSIfour| multiple jobs can be run in succession from the input file. Control optimizations with optking keywords HERE. Cfour ``GRD`` file is; written to |PSIfour| output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the |PSIfour|; output file and is available from input as :py:func:`~psi4.core.Wavefunc",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:40538,Energy Efficiency,energy,energy,40538," a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF conv crit since that's Cfour's default; for |cfour__cfour_scf_conv| ::. energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; keyword ::. set cfour_scf_conv 6; energy('c4-scf'). * uses :math:`10^{-5}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword ::. set d_convergence 5; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword (local scope works, too) where; the |PSIfours| more flexible float input has been rounded down to; the integer required by Cfour ::. set scf d_convergence 5e-6; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten; and Cfour module keyword trumps |PSIfour| SCF module keyword ::. set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. .. note:: Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the :ref:`Cfour module<apdx:cfour>` along with; |mints__basis| and |globals__puream| (opt, too?). Misc. Running; ~~~~~~~~~~~~~. Naturally, in |PSIfour| multiple jobs can be run in succession from the input file. Control optimizations with optking keywords HERE. Cfour ``GRD`` file is; written to |PSIfour| output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the |PSIfour|; output file and is available from input as :py:func:`~psi4.core.Wavefunction.gradient`. sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it i",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:43373,Energy Efficiency,energy,energy,43373,". . .. comment Notes to Self; .. comment ~~~~~~~~~~~~~; .. comment ; .. comment Test checked-in GENBAS on installed copy; .. comment ; .. comment Reference still not factored into cc_program!; .. comment ; .. comment optimize on a sandwich calc? errors out; .. comment ; .. comment ; .. comment .. _`table:cfour_cc_program`:; .. comment ; .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | | | | RHF | UHF | ROHF |; .. comment | | | +--------+--------+---------+; .. comment | Driver Call, |cfour__cfour_deriv_level| | name, |cfour__cfour_calc_level| | |cfour__cfour_excite| | |cfour__cfour_cc_program| |; .. comment +=========================================+=================================+=======================+========+========+=========+; .. comment | :py:func:`~psi4.energy`, zero | cc2 | none | vcc | vcc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | _cc | _cc | _cc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | _cc | _cc | _cc |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsd | none | ecc | ecc | ecc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | ecc | _cc | _cc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | _cc | _cc | _cc |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsd(t) | none | ecc | ecc | ecc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | _cc | _cc | _cc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:1399,Integrability,interface,interface,1399,"eneral Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:1972,Integrability,interface,interface,1972,"utodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour on",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:2113,Integrability,interface,interface,2113,"utodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour on",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:2282,Integrability,interface,interface,2282,"I Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:2830,Integrability,interface,interface,2830,"var:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t)')``. Find available methods for; :py:func:`~psi4.driver.energy` at :ref:`Energy (CFOUR) <table:energy_cfour>`; and for :py:func:`~psi4.driver.optimize` at :ref:`Gradient (CFOUR); <table:grad_cfour>`. * Generally, the p4c4 interface will handle best practices for path of; execution: ``vcc``/``ecc``, derivative type, *etc.* The user is still; responsible for setting convergence, frozen core, guess, diis, *etc.*; For the moment, so-called ""best-practices"" keywords are summarized at; :ref:`Best Practices <table:cfour_cc_program>`. * For the type of ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:3525,Integrability,interface,interface,3525," and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t)')``. Find available methods for; :py:func:`~psi4.driver.energy` at :ref:`Energy (CFOUR) <table:energy_cfour>`; and for :py:func:`~psi4.driver.optimize` at :ref:`Gradient (CFOUR); <table:grad_cfour>`. * Generally, the p4c4 interface will handle best practices for path of; execution: ``vcc``/``ecc``, derivative type, *etc.* The user is still; responsible for setting convergence, frozen core, guess, diis, *etc.*; For the moment, so-called ""best-practices"" keywords are summarized at; :ref:`Best Practices <table:cfour_cc_program>`. * For the type of computation intended, find appropriate options at; :ref:`Keywords <apdx:cfour>`. These keyword summaries contain the same; information as the `proper CFOUR options list; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.ListOfKeywordsInAlphabeticalOrder>`_; plus notes on keyword relevance when run through |PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.Manual>`_ may; also be useful, as may the many samples at :source:`samples/cfour`. * Set Cfour keywords just like |PSIfour| keywords. The names of keywords; are unchanged beyond a prepended ""cfour\_"". (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:5139,Integrability,interface,interface,5139,"|PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.Manual>`_ may; also be useful, as may the many samples at :source:`samples/cfour`. * Set Cfour keywords just like |PSIfour| keywords. The names of keywords; are unchanged beyond a prepended ""cfour\_"". (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; |cfour__cfour_calc_level| and |cfour__cfour_reference| when used in; |PSIfour|.). * In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; |scf__reference| will appropriately set |cfour__cfour_reference|. For a; list of applicable keywords, see source of; muster_psi4options. * Consult :ref:`sec:cfourFunctionality` for information on what Cfour; functionality is accessible through |PSIfour|. |PSIfour| for Cfour Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. In the simplest use of the Psi4/Cfour interface, a |PSIfour| input file; can simply ""wrap"" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration o",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:5186,Integrability,wrap,wrap,5186,"|PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.Manual>`_ may; also be useful, as may the many samples at :source:`samples/cfour`. * Set Cfour keywords just like |PSIfour| keywords. The names of keywords; are unchanged beyond a prepended ""cfour\_"". (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; |cfour__cfour_calc_level| and |cfour__cfour_reference| when used in; |PSIfour|.). * In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; |scf__reference| will appropriately set |cfour__cfour_reference|. For a; list of applicable keywords, see source of; muster_psi4options. * Consult :ref:`sec:cfourFunctionality` for information on what Cfour; functionality is accessible through |PSIfour|. |PSIfour| for Cfour Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. In the simplest use of the Psi4/Cfour interface, a |PSIfour| input file; can simply ""wrap"" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration o",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:6281,Integrability,interface,interface,6281,""" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration of the |PSIfour| instance (as opposed to solely *in files*); is the only advantage thus far incurred by the P4C4 interface. We'll call; this mode of basic utility the ""sandwich"" mode. Molecule specification in |PSIfour| allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See :ref:`sec:moleculeSpecification` for details and; :srcsample:`cfour/mints5` for examples. When a |PSIfour|-style molecule is; supplied, its geometry is written to ``ZMAT`` in Cartesian form and the; |cfour__cfour_coordinates|\ =CARTESIAN, |cfour__cfour_units|\ =ANGSTROM,; |cfour__cfour_charge|, and |cfour__cfour_multiplicity| keywords are set; appropriately in the ``*CFOUR(...)`` directive. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and w",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:9185,Integrability,interface,interface,9185,"mands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`c",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:9977,Integrability,interface,interface,9977,"e Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteri",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:12736,Integrability,depend,depending,12736,"46 0.00040256 0.00077146 0.00070447 ~; 3 -76.332261404452 -0.000000439070 0.00004307 0.00003577 0.00009889 0.00008926 ~; 4 -76.332261408714 -0.000000004262 0.00000098 0.00000066 0.00000622 0.00000371 ~; --------------------------------------------------------------------------------------------------------------- ~. The above example also shows the total memory for the computation being; set in |PSIfour| format. See :ref:`sec:memory` for details. When; specified, the memory value is passed on to Cfour by setting keywords; |cfour__cfour_memory_size| and |cfour__cfour_mem_unit|\ =MB. |PSIfour| has an extensive :ref:`basis set library <apdx:basisElement>` in; Gaussian94 format. See :ref:`sec:basisSets` for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (*e.g.*, jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the |mints__basis| keyword instead of |cfour__cfour_basis|; (accompanied, of course, by specifying the molecule |PSIfour|-style).; Internally, |PSIfour| processes the basis set as usual, then translates; the basis set format and writes out a ``GENBAS`` file with an entry for; each atom. The P4C4 interface sets keyword |cfour__cfour_basis|\ =SPECIAL; and |cfour__cfour_spherical| as appropriate, then writes the basis section; necessary for SPECIAL below the ``*CFOUR(...)`` block. (I'm sorry that the; name of the basis doesn't appear in ``ZMAT``, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.). The input below employs a |PSIfour| library basis set and also introduces; the final stage of conversion toward |PSIfour| format. Instead of the; gene",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:13217,Integrability,interface,interface,13217,"ur_memory_size| and |cfour__cfour_mem_unit|\ =MB. |PSIfour| has an extensive :ref:`basis set library <apdx:basisElement>` in; Gaussian94 format. See :ref:`sec:basisSets` for details. Contrasts to; Cfour basis handling include identifying basis sets by standard name; (aug-cc-pVDZ instead of AUG-PVDZ), direct handles for; diffuse-function-pruned sets (*e.g.*, jun-cc-pVDZ), case insensitivity,; appropriate setting of spherical/Cartesian depending on basis set design,; and syntax to set different basis sets to different classes of atoms; without listing each atom. All of these features are available to Cfour by; using the |mints__basis| keyword instead of |cfour__cfour_basis|; (accompanied, of course, by specifying the molecule |PSIfour|-style).; Internally, |PSIfour| processes the basis set as usual, then translates; the basis set format and writes out a ``GENBAS`` file with an entry for; each atom. The P4C4 interface sets keyword |cfour__cfour_basis|\ =SPECIAL; and |cfour__cfour_spherical| as appropriate, then writes the basis section; necessary for SPECIAL below the ``*CFOUR(...)`` block. (I'm sorry that the; name of the basis doesn't appear in ``ZMAT``, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.). The input below employs a |PSIfour| library basis set and also introduces; the final stage of conversion toward |PSIfour| format. Instead of the; generic ``'cfour'``, the computational method is specified as the first; argument to the :py:func:`~psi4.driver.optimize` call. In the computational; command below, the string argument ``'c4-ccsd(t)'`` directs that a CCSD(T); computation be run using Cfour (as opposed to ``'ccsd(t)'`` which would; call |PSIfour| CC code). Specifying computational method in this manner; sets |cfour__cfour_calc_level| from the argument and; |cfour__cfour_deriv_level| as appropriate from the function call:; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.dr",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:14425,Integrability,interface,interface,14425,"k. (I'm sorry that the; name of the basis doesn't appear in ``ZMAT``, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.). The input below employs a |PSIfour| library basis set and also introduces; the final stage of conversion toward |PSIfour| format. Instead of the; generic ``'cfour'``, the computational method is specified as the first; argument to the :py:func:`~psi4.driver.optimize` call. In the computational; command below, the string argument ``'c4-ccsd(t)'`` directs that a CCSD(T); computation be run using Cfour (as opposed to ``'ccsd(t)'`` which would; call |PSIfour| CC code). Specifying computational method in this manner; sets |cfour__cfour_calc_level| from the argument and; |cfour__cfour_deriv_level| as appropriate from the function call:; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.gradient`, or; :py:func:`~psi4.driver.optimize`. If those keywords are also set explicitly to; contradictory values, the interface will complain. ::. memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, *etc.* and; some options can be set according to best practices. Practically speaking,; |cfour__cfour_cc_program| (and eventually |cfour__cfour_abcdtype|) will; always be set to the :ref:`fastest safe value <table:cfour_cc_program>`.; For example, the input above will run with |cfour__cfour_cc_program|\ =ECC; unless explicitly set to VCC. An advantage of |PSIfours| Python",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:15479,Integrability,wrap,wrapped,15479,"{; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, *etc.* and; some options can be set according to best practices. Practically speaking,; |cfour__cfour_cc_program| (and eventually |cfour__cfour_abcdtype|) will; always be set to the :ref:`fastest safe value <table:cfour_cc_program>`.; For example, the input above will run with |cfour__cfour_cc_program|\ =ECC; unless explicitly set to VCC. An advantage of |PSIfours| Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core ""wrappers"" available in |PSIfour| are; :py:func:`~psi4.driver.driver_nbody.nbody`,; :py:func:`~psi4.driver.wrapper_database.database`, and; :py:func:`~psi4.driver.cbs`; read their respective sections; for details, but an overview is provided here. :py:func:`~psi4.driver.driver_nbody.nbody`; computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both). ::. molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }; ; Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ; ; for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)); ; yields ::. R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the :py:func:`~psi4.driver.wrapper_database.database` wrapper allows any computational; model chemistry to be applied ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:15611,Integrability,wrap,wrappers,15611,"084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, *etc.* and; some options can be set according to best practices. Practically speaking,; |cfour__cfour_cc_program| (and eventually |cfour__cfour_abcdtype|) will; always be set to the :ref:`fastest safe value <table:cfour_cc_program>`.; For example, the input above will run with |cfour__cfour_cc_program|\ =ECC; unless explicitly set to VCC. An advantage of |PSIfours| Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core ""wrappers"" available in |PSIfour| are; :py:func:`~psi4.driver.driver_nbody.nbody`,; :py:func:`~psi4.driver.wrapper_database.database`, and; :py:func:`~psi4.driver.cbs`; read their respective sections; for details, but an overview is provided here. :py:func:`~psi4.driver.driver_nbody.nbody`; computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both). ::. molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }; ; Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ; ; for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)); ; yields ::. R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the :py:func:`~psi4.driver.wrapper_database.database` wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input ::. set {; basis jun-cc-pvdz; d_convergence 9; }; ; database('c4-mp2','nbc10',cp='on',subset='Me",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:16419,Integrability,wrap,wrapper,16419," automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core ""wrappers"" available in |PSIfour| are; :py:func:`~psi4.driver.driver_nbody.nbody`,; :py:func:`~psi4.driver.wrapper_database.database`, and; :py:func:`~psi4.driver.cbs`; read their respective sections; for details, but an overview is provided here. :py:func:`~psi4.driver.driver_nbody.nbody`; computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both). ::. molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }; ; Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ; ; for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)); ; yields ::. R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the :py:func:`~psi4.driver.wrapper_database.database` wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input ::. set {; basis jun-cc-pvdz; d_convergence 9; }; ; database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; :srcdb:`NBC10` database::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//; ; For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense.; ; ==> Requested Energy <==; ; ----------------------------------------------------------------------------------------------; Reaction Reaction Energy Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [H] Wt [H] Wt; ----------------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:19061,Integrability,wrap,wrapper,19061,"3 1 -40.36411859 -2; NBC1-MeMe-4.2 -0.3540 -0.1633 0.1907 -80.72848118 1 -40.36411044 -2; NBC1-MeMe-4.3 -0.3150 -0.1525 0.1625 -80.72845143 1 -40.36410422 -2; NBC1-MeMe-4.4 -0.2790 -0.1403 0.1387 -80.72842215 1 -40.36409932 -2; NBC1-MeMe-4.6 -0.2170 -0.1155 0.1015 -80.72836761 1 -40.36409177 -2; NBC1-MeMe-4.8 -0.1680 -0.0933 0.0747 -80.72831991 1 -40.36408563 -2; NBC1-MeMe-5.0 -0.1300 -0.0747 0.0553 -80.72827951 1 -40.36408021 -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the :py:func:`~psi4.driver.cbs` wrapper allows any; compound computational method that can be expressed through :ref:`CBS; <eq:cbs>` to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through |PSIfour| and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points. ::. molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }; ; set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields::. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highes",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:19575,Integrability,wrap,wrapper,19575," -2; NBC1-MeMe-5.4 -0.0800 -0.0479 0.0321 -80.72821875 1 -40.36407122 -2; NBC1-MeMe-5.8 -0.0500 -0.0312 0.0188 -80.72817678 1 -40.36406353 -2; ----------------------------------------------------------------------------------------------; Minimal Dev 0.0188; Maximal Dev 1.0949; Mean Signed Dev 0.3509; Mean Absolute Dev 0.3509; RMS Dev 0.4676; ----------------------------------------------------------------------------------------------. Thirdly, the :py:func:`~psi4.driver.cbs` wrapper allows any; compound computational method that can be expressed through :ref:`CBS; <eq:cbs>` to be applied to a molecule while employing the minimum number; of calculations. For example, the job below computes a; triple-quadruple-zeta Helgaker extrapolation of the mp2 correlation energy; atop a quadruple zeta reference to which is appended a double-triple-zeta; Helgaker extrapolated ccsd(t) - mp2 delta correction. Since the mp2 has; been requested through |PSIfour| and the ccsd(t) through Cfour, the; wrapper runs only MP2/cc-pVQZ (P4), CCSD(T)/cc-pVDZ (C4), and; CCSD(T)/cc-pVTZ (C4) single-points. ::. molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }; ; set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields::. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for :py:func:`~psi4.driver.cbs`, the; basis set needs to be specified through |mints__basis|, not; |cfour__cfour_basis|. Many of the wrappers can be u",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:20563,Integrability,wrap,wrappers,20563,"e-points. ::. molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }; ; set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields::. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for :py:func:`~psi4.driver.cbs`, the; basis set needs to be specified through |mints__basis|, not; |cfour__cfour_basis|. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming). Finally, any number and combination of jobs can be run from a single; |PSIfour| input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. .. warning:: Because p4c4 does not inspect the contents of the ``cfour {...}``; block, once the user specifies a |PSIfour|-style molecule, the; interface cannot judge whether a sandwich mode (drop the |PSIfour| molecule; and use the cfour block as the entirety of the ``ZMAT``) or a standard mode; (translate the |PSIfour| molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a |PSIfour| molecule and a molecule in the cfour block,; ``ZMAT`` *will* end up with multiple molecules and",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:21252,Integrability,interface,interface,21252,"----------------------------------------------------------------. Note that especially for :py:func:`~psi4.driver.cbs`, the; basis set needs to be specified through |mints__basis|, not; |cfour__cfour_basis|. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming). Finally, any number and combination of jobs can be run from a single; |PSIfour| input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. .. warning:: Because p4c4 does not inspect the contents of the ``cfour {...}``; block, once the user specifies a |PSIfour|-style molecule, the; interface cannot judge whether a sandwich mode (drop the |PSIfour| molecule; and use the cfour block as the entirety of the ``ZMAT``) or a standard mode; (translate the |PSIfour| molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a |PSIfour| molecule and a molecule in the cfour block,; ``ZMAT`` *will* end up with multiple molecules and multiple ``*CFOUR(...)``; blocks, and it *will not* run. Therefore, if mixing sandwich and; standard or pure-\ |PSIfour| computations in an input file, place all; the sandwich jobs at the beginning before declaring |PSIfour|; molecules. If necessary, clear the cfour block with ``cfour {}`` before; commencing standard P4C4 jobs. .. _`sec:cfourOutput`:. Output; ~~~~~~. The output of :program:`xcfour` invoked from a |PSIfour| input file is; written to the |PSIfour| output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in :psivar:`CFOUR ERROR CODE`. .. rubric:: Energies & Scalars. After execution of :pr",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:24145,Integrability,interface,interface,24145,"NT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used. ::. energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No PSI Variables for properties: *e.g.*, :psivar:`SCF DIPOLE`. - No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. .. rubric:: Gradients and Arrays. In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the ``GRD`` file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by |PSIfour|; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while |PSIfour| naturally; expects the gradient to be aligned with the active molecule. The geometry; in ``GRD`` and the geometry of |PSIfours| active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in ``GRD``, the result of which; is printed below and passed on to Optking. ::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:24477,Integrability,interface,interface,24477,"062748460180. The PSI Variables are also available from the input file for manipulation.; For instance, to compute the MBPT 2 3/4 energy from MBPT 3 results, the; following could be used. ::. energy('c4-mp3'); mp2p75_corl = 0.75 * get_variable('mp3 correlation energy') + \; 0.25 * get_variable('MP2 correlation energy'); print mp2p75_corl + get_variable('scf total energy'). .. caution:: Some features are not yet implemented. Buy a developer a coffee. - No PSI Variables for properties: *e.g.*, :psivar:`SCF DIPOLE`. - No PSI Variables for excited state energies. The formation of further regexes for properties, excited states, etc.; is one of the primary areas in which this interface requires further; work. .. rubric:: Gradients and Arrays. In addition to parsing the output stream, results are collected from files; written to the scratch directory. Presently, the ``GRD`` file is parsed; and printed to the output file, as shown below. Also printed is the Cfour; gradient after manipulation by the P4C4 interface and used by |PSIfour|; going forward. Manipulation is necessary because Cfour determinedly uses; its own internal orientation and atom ordering while |PSIfour| naturally; expects the gradient to be aligned with the active molecule. The geometry; in ``GRD`` and the geometry of |PSIfours| active molecule are shifted,; rotated, flipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in ``GRD``, the result of which; is printed below and passed on to Optking. ::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3 . 1 2 3 . 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:27513,Integrability,interface,interface,27513,"ced in the |PSIfour| input file. ::. energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. .. rubric:: Scratch Files. By default, a separate subdirectory for each Cfour call is created within; the job's scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, ``energy('cfour',; path='/full/path/to/cfour/scratch')``. Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with ``energy('cfour', keep=True)`` or; (the default) ``energy('cfour', keep=False)``. *path* and *keep* are; keyword arguments that get interpreted by the; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` function documented below. .. autofunction:: psi4.driver.procrouting.interface_cfour.run_cfour(name [, keep, path]). .. _`sec:cfourFunctionality`:. Functionality; ~~~~~~~~~~~~~. Through clever use of the ``cfour {...}`` block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into |PSIfour| data objects. .. rubric:: Implemented. * Single-point :py:func:`~psi4.driver.energy` commands for :ref:`ground state; methods <table:energy_cfour>`. Examples:; :srcsample:`cfour/sp-rhf-ccsd_t_-ao-ecc`, :srcsample:`cfour/scf4`,; :srcsample:`cfour/mints5`. * Analytic :py:func:`~psi4.driver.gradient` and :py:func:`~psi4.driver.optimize`; commands for :ref:`ground state methods <table:grad_cfour>`. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: :srcsample:`cfour/opt-rhf-ccsd_t_`,; :srcsample:`cfour/mp2-1`, and :srcsample:`cfour/mints5-grad`. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreco",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:29788,Integrability,interface,interface,29788,"nbody` for computation of interaction energies with or; without counterpoise correction. Example: :srcsample:`cfour/dfmp2-1`. * :py:func:`~psi4.driver.wrapper_database.database` for computation of a collection of molecules in a; single input, with summarization of results. Examples:; :srcsample:`cfour/pywrap-db1` and :srcsample:`cfour/psi-a24-grad`. * :py:func:`~psi4.driver.cbs` for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of |PSIfour| and Cfour computational methods and |PSIfour| basis sets.; Example: :srcsample:`cfour/pywrap-cbs1`. .. rubric:: Not Yet Implemented. * Ground state CI energies and optimizations. * Excited state energies and optimizations. * Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables. * Property calls that required extra computation not yet translated into; :py:func:`~psi4.driver.properties` computation command. * Frequencies. Energy methods available through P4C4 interface. .. include:: cfour_table_energy.rst. Gradient methods available through P4C4 interface. .. include:: cfour_table_grad.rst. .. _`table:cfour_cc_program`:. .. notes on preferred modules from JFS; .. comment always abcdtype = aobasis (but sometimes ; .. comment ncc does rhf ccsdt(q); .. comment reccommended code to do with, not only code (b/c mrcc can do much of this); .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | | | | RHF | UHF | ROHF |; .. comment | | | +--------+--------+---------+; .. comment | Driver Call, |cfour__cfour_deriv_level| | name, |cfour__cfour_calc_level| | |cfour__cfour_excite| | |cfour__cfour_cc_program| |; .. comment +=========================================+=================================+=======================+========+========+=========+",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:29876,Integrability,interface,interface,29876,". Example: :srcsample:`cfour/dfmp2-1`. * :py:func:`~psi4.driver.wrapper_database.database` for computation of a collection of molecules in a; single input, with summarization of results. Examples:; :srcsample:`cfour/pywrap-db1` and :srcsample:`cfour/psi-a24-grad`. * :py:func:`~psi4.driver.cbs` for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of |PSIfour| and Cfour computational methods and |PSIfour| basis sets.; Example: :srcsample:`cfour/pywrap-cbs1`. .. rubric:: Not Yet Implemented. * Ground state CI energies and optimizations. * Excited state energies and optimizations. * Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables. * Property calls that required extra computation not yet translated into; :py:func:`~psi4.driver.properties` computation command. * Frequencies. Energy methods available through P4C4 interface. .. include:: cfour_table_energy.rst. Gradient methods available through P4C4 interface. .. include:: cfour_table_grad.rst. .. _`table:cfour_cc_program`:. .. notes on preferred modules from JFS; .. comment always abcdtype = aobasis (but sometimes ; .. comment ncc does rhf ccsdt(q); .. comment reccommended code to do with, not only code (b/c mrcc can do much of this); .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | | | | RHF | UHF | ROHF |; .. comment | | | +--------+--------+---------+; .. comment | Driver Call, |cfour__cfour_deriv_level| | name, |cfour__cfour_calc_level| | |cfour__cfour_excite| | |cfour__cfour_cc_program| |; .. comment +=========================================+=================================+=======================+========+========+=========+; .. comment | :py:func:`~psi4.energy`, zero | cc2 | none | vcc | vcc | vcc |; .. comme",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:34985,Integrability,interface,interface,34985,"--------+--------+--------+---------+; .. comment | | cc3 | none | vcc | | |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | vcc | | |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | vcc | | |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsdt | none | ecc | mrcc | mrc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | mrcc | mrcc | mrcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | mrcc | mrcc | mrcc |; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment properties same as grad; .. comment 2nd deriv ecc only for ccsd(t). Specification Details; ~~~~~~~~~~~~~~~~~~~~~. The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between |PSIfour| and; Cfour specification format are generally resolved behind the scenes:; not according to a *simple* rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a |PSIfour| module). Much can be gleaned by just running; inputs and inspecting the ``ZMAT`` passed to Cfour, but when questions; arise, here are the specifics, the governing laws. * Specifying a piece of input in |PSIfour| format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through :samp:`molecule; {optional_molecule_name} \\{...\\}`), memory (through :samp:`memory; {value} {unit}`), computational method (through . If Cfour keywords; are specified with values that contradict the |PSIfour| input,; execution is halted. As an example, the input below is set up to fail in four ways:; contradictory specifica",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:35265,Integrability,integrat,integration,35265,"nt | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | vcc | | |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsdt | none | ecc | mrcc | mrc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | mrcc | mrcc | mrcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | mrcc | mrcc | mrcc |; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment properties same as grad; .. comment 2nd deriv ecc only for ccsd(t). Specification Details; ~~~~~~~~~~~~~~~~~~~~~. The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between |PSIfour| and; Cfour specification format are generally resolved behind the scenes:; not according to a *simple* rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a |PSIfour| module). Much can be gleaned by just running; inputs and inspecting the ``ZMAT`` passed to Cfour, but when questions; arise, here are the specifics, the governing laws. * Specifying a piece of input in |PSIfour| format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through :samp:`molecule; {optional_molecule_name} \\{...\\}`), memory (through :samp:`memory; {value} {unit}`), computational method (through . If Cfour keywords; are specified with values that contradict the |PSIfour| input,; execution is halted. As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the ``cfour_units; angstrom`` setting is permissible, since it concurs with the value; implied in",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:35553,Integrability,contract,contract,35553,"cc | mrcc | mrcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | mrcc | mrcc | mrcc |; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment properties same as grad; .. comment 2nd deriv ecc only for ccsd(t). Specification Details; ~~~~~~~~~~~~~~~~~~~~~. The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between |PSIfour| and; Cfour specification format are generally resolved behind the scenes:; not according to a *simple* rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a |PSIfour| module). Much can be gleaned by just running; inputs and inspecting the ``ZMAT`` passed to Cfour, but when questions; arise, here are the specifics, the governing laws. * Specifying a piece of input in |PSIfour| format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through :samp:`molecule; {optional_molecule_name} \\{...\\}`), memory (through :samp:`memory; {value} {unit}`), computational method (through . If Cfour keywords; are specified with values that contradict the |PSIfour| input,; execution is halted. As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the ``cfour_units; angstrom`` setting is permissible, since it concurs with the value; implied in the molecule block. ::. memory 300 mb. molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set c",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:37297,Integrability,rout,route,37297,"molecule {; H; H 1 0.7; }. set basis 6-31g; set cfour_multiplicity 3 # clash with implicit singlet in molecule {} above; set cfour_units angstrom # no problem, consistent with molecule {} above; set cfour_memory_size 100000000 # clash with 300 mb above; set cfour_calc_level ccsd # clash with 'c4-scf' below; set cfour_deriv_level first # clash with energy() below (use gradient('c4-scf') to achieve this). energy('c4-scf'). * Specifying anything in |PSIfour| format (molecule, basis, options,; method call) starts building a ``*CFOUR(...)`` directive for the; ``ZMAT`` file. Since the contents of the ``cfour {...}`` block are; blindly appended to any input interpreted from |PSIfour| format, mixing; of |PSIfour| and Cfour input formats likely *will* give rise to multiple; ``*CFOUR(...)`` directives in the prospective ``ZMAT``, execution of; which *will* be trapped and halted. Proper uses for the ``cfour {...}``; block are for the sandwich mode, where the entire ``ZMAT`` is enclosed,; or for extra directives like ``%excite*``, which presently have no other; specification route. * Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between |PSIfour| and Cfour and it's not; practical to compare exponent-to-exponent, any input file with both; |mints__basis| and |cfour__cfour_basis| keywords present will halt. Once; a basis set has been requested through |mints__basis|, overriding the; default spherical/Cartesian setting must be done through; |globals__puream| (as opposed to |cfour__cfour_spherical|). * Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (*e.g.*, |cfour__cfour_geo_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:39411,Integrability,contract,contract,39411," of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ecc since that's best practice for the requested ccsd ::. energy('c4-ccsd'). * runs in vcc since *hidden* default overwritten by keyword ::. set cfour_cc_program vcc; energy('c4-ccsd'). * Specifying certain keywords that are nominally applicable for pure-\; |PSIfour| modules directs them to fulfil analogous roles; in the Cfour program (*e.g.*, |scf__maxiter| is used to set; |cfour__cfour_scf_maxcyc|). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that |PSIfours| defaults don't; get imposed on Cfour. Also, in the case where a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF conv crit since that's Cfour's default; for |cfour__cfour_scf_conv| ::. energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; keyword ::. set cfour_scf_conv 6; energy('c4-scf'). * uses :math:`10^{-5}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword ::. set d_convergence 5; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword (local scope works, too) where; the |PSIfours| more flexible float input has been rounded down to; the integer required by Cfour ::. set scf d_convergence 5e-6; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv cr",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:41853,Integrability,rout,route,41853,"h; |mints__basis| and |globals__puream| (opt, too?). Misc. Running; ~~~~~~~~~~~~~. Naturally, in |PSIfour| multiple jobs can be run in succession from the input file. Control optimizations with optking keywords HERE. Cfour ``GRD`` file is; written to |PSIfour| output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the |PSIfour|; output file and is available from input as :py:func:`~psi4.core.Wavefunction.gradient`. sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the ``cfour {...}`` block are tacked onto; the end of the ``ZMAT`` file that is otherwise written from psi style; format. It is by this route that, for example ``%excite*`` sections can at; present be specified. The execution of :program:`xcfour` can be modified by a few parameters. Setting; the option |cfour__cfour_omp_num_threads| sets the environment variable; :envvar:`OMP_NUM_THREADS` for only the duration of the Cfour computation.; That is, portions of an input file that run |PSIfour| modules are; unaffected. Additionally, there are a few arguments to the function; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` that control the Cfour scratch; directory. . .. comment Notes to Self; .. comment ~~~~~~~~~~~~~; .. comment ; .. comment Test checked-in GENBAS on installed copy; .. comment ; .. comment Reference still not factored into cc_program!; .. comment ; .. comment optimize on a sandwich calc? errors out; .. comment ; .. comment ; .. comment .. _`table:cfour_cc_program`:; .. comment ; .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +----------------------------------------",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:2858,Modifiability,adapt,adapted,2858,"var:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t)')``. Find available methods for; :py:func:`~psi4.driver.energy` at :ref:`Energy (CFOUR) <table:energy_cfour>`; and for :py:func:`~psi4.driver.optimize` at :ref:`Gradient (CFOUR); <table:grad_cfour>`. * Generally, the p4c4 interface will handle best practices for path of; execution: ``vcc``/``ecc``, derivative type, *etc.* The user is still; responsible for setting convergence, frozen core, guess, diis, *etc.*; For the moment, so-called ""best-practices"" keywords are summarized at; :ref:`Best Practices <table:cfour_cc_program>`. * For the type of ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:6117,Modifiability,variab,variables,6117,""" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration of the |PSIfour| instance (as opposed to solely *in files*); is the only advantage thus far incurred by the P4C4 interface. We'll call; this mode of basic utility the ""sandwich"" mode. Molecule specification in |PSIfour| allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See :ref:`sec:moleculeSpecification` for details and; :srcsample:`cfour/mints5` for examples. When a |PSIfour|-style molecule is; supplied, its geometry is written to ``ZMAT`` in Cartesian form and the; |cfour__cfour_coordinates|\ =CARTESIAN, |cfour__cfour_units|\ =ANGSTROM,; |cfour__cfour_charge|, and |cfour__cfour_multiplicity| keywords are set; appropriately in the ``*CFOUR(...)`` directive. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and w",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:6458,Modifiability,variab,variables,6458,"CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration of the |PSIfour| instance (as opposed to solely *in files*); is the only advantage thus far incurred by the P4C4 interface. We'll call; this mode of basic utility the ""sandwich"" mode. Molecule specification in |PSIfour| allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See :ref:`sec:moleculeSpecification` for details and; :srcsample:`cfour/mints5` for examples. When a |PSIfour|-style molecule is; supplied, its geometry is written to ``ZMAT`` in Cartesian form and the; |cfour__cfour_coordinates|\ =CARTESIAN, |cfour__cfour_units|\ =ANGSTROM,; |cfour__cfour_charge|, and |cfour__cfour_multiplicity| keywords are set; appropriately in the ``*CFOUR(...)`` directive. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. Whenever the molecule is supplied in |PSIfour| format, the job control; keywords must be too. All :ref:`Cfour keywords <apdx:cfour>` are the usual; ones, prepended by ``cfo",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:6495,Modifiability,variab,variables,6495,"CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration of the |PSIfour| instance (as opposed to solely *in files*); is the only advantage thus far incurred by the P4C4 interface. We'll call; this mode of basic utility the ""sandwich"" mode. Molecule specification in |PSIfour| allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See :ref:`sec:moleculeSpecification` for details and; :srcsample:`cfour/mints5` for examples. When a |PSIfour|-style molecule is; supplied, its geometry is written to ``ZMAT`` in Cartesian form and the; |cfour__cfour_coordinates|\ =CARTESIAN, |cfour__cfour_units|\ =ANGSTROM,; |cfour__cfour_charge|, and |cfour__cfour_multiplicity| keywords are set; appropriately in the ``*CFOUR(...)`` directive. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. Whenever the molecule is supplied in |PSIfour| format, the job control; keywords must be too. All :ref:`Cfour keywords <apdx:cfour>` are the usual; ones, prepended by ``cfo",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:7548,Modifiability,flexible,flexible,7548,"ents, etc., all in a whitespace-tolerant; format. See :ref:`sec:moleculeSpecification` for details and; :srcsample:`cfour/mints5` for examples. When a |PSIfour|-style molecule is; supplied, its geometry is written to ``ZMAT`` in Cartesian form and the; |cfour__cfour_coordinates|\ =CARTESIAN, |cfour__cfour_units|\ =ANGSTROM,; |cfour__cfour_charge|, and |cfour__cfour_multiplicity| keywords are set; appropriately in the ``*CFOUR(...)`` directive. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. Whenever the molecule is supplied in |PSIfour| format, the job control; keywords must be too. All :ref:`Cfour keywords <apdx:cfour>` are the usual; ones, prepended by ``cfour_`` to avoid any possible name conflicts. As; detailed in :ref:`sec:jobControl`, setting keywords is flexible in; format. The previous example translates to::. # UHF-SCF energy calculation . molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; }; ; set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }; ; energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then r",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:8216,Modifiability,extend,extended,8216,"programs"". I will get to this soon. Whenever the molecule is supplied in |PSIfour| format, the job control; keywords must be too. All :ref:`Cfour keywords <apdx:cfour>` are the usual; ones, prepended by ``cfour_`` to avoid any possible name conflicts. As; detailed in :ref:`sec:jobControl`, setting keywords is flexible in; format. The previous example translates to::. # UHF-SCF energy calculation . molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; }; ; set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }; ; energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, o",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:17120,Modifiability,variab,variable,17120," R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)); ; yields ::. R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the :py:func:`~psi4.driver.wrapper_database.database` wrapper allows any computational; model chemistry to be applied a predefined collection of molecules. Thus; an input ::. set {; basis jun-cc-pvdz; d_convergence 9; }; ; database('c4-mp2','nbc10',cp='on',subset='MeMe'). yields the counterpoise-corrected interaction energy for several points; along the dissociation curve of methane dimer, which is a member of the; :srcdb:`NBC10` database::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Database nbc10 Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//; ; For each VARIABLE requested by tabulate, a 'Reaction Value' will be formed from; 'Reagent' values according to weightings 'Wt', as for the REQUESTED ENERGY below.; Depending on the nature of the variable, this may or may not make any physical sense.; ; ==> Requested Energy <==; ; ----------------------------------------------------------------------------------------------; Reaction Reaction Energy Error Reagent 1 Reagent 2; Ref Calc [kcal/mol] [H] Wt [H] Wt; ----------------------------------------------------------------------------------------------; NBC1-MeMe-3.2 0.0690 1.1639 1.0949 -80.72700202 1 -40.36442840 -2; NBC1-MeMe-3.3 -0.2390 0.6709 0.9099 -80.72764911 1 -40.36435916 -2; NBC1-MeMe-3.4 -0.4170 0.3407 0.7577 -80.72806043 1 -40.36430165 -2; NBC1-MeMe-3.5 -0.5080 0.1244 0.6324 -80.72831099 1 -40.36425461 -2; NBC1-MeMe-3.6 -0.5410 -0.0129 0.5281 -80.72845373 1 -40.36421659 -2; NBC1-MeMe-3.7 -0.5390 -0.0961 0.4429 -80.72852567 1 -40.36418623 -2; NBC1-MeMe-3.8 -0.5150 -0.1430 0.3720 -80.72855247 1 -40.36416227 -2; NBC1-MeMe-3.9 -0.4800 -0.1659 0.3141 -80.72855167 1 -40.36414365 -2; NBC1-MeMe-4.0 -0.4390 -0.1733 0.2657 -80.72853498 1 -40.36412938 -2; NBC1-MeMe-4.1 -0.3960 -0.1712 ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:21056,Modifiability,variab,variables,21056,"-------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for :py:func:`~psi4.driver.cbs`, the; basis set needs to be specified through |mints__basis|, not; |cfour__cfour_basis|. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming). Finally, any number and combination of jobs can be run from a single; |PSIfour| input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. .. warning:: Because p4c4 does not inspect the contents of the ``cfour {...}``; block, once the user specifies a |PSIfour|-style molecule, the; interface cannot judge whether a sandwich mode (drop the |PSIfour| molecule; and use the cfour block as the entirety of the ``ZMAT``) or a standard mode; (translate the |PSIfour| molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a |PSIfour| molecule and a molecule in the cfour block,; ``ZMAT`` *will* end up with multiple molecules and multiple ``*CFOUR(...)``; blocks, and it *will not* run. Therefore, if mixing sandwich and; standard or pure-\ |PSIfour| computations in an input file, place all; the sandwich jobs at the beginning before declaring |PSIfour|; molecules. If necessary, clear the cfour block with ``cfour {}`` before; commencing standard P4C4 jobs. .. _`sec:cfourOutput`:. Output; ~~~~~~. The outp",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:22507,Modifiability,variab,variables,22507,"e is both a |PSIfour| molecule and a molecule in the cfour block,; ``ZMAT`` *will* end up with multiple molecules and multiple ``*CFOUR(...)``; blocks, and it *will not* run. Therefore, if mixing sandwich and; standard or pure-\ |PSIfour| computations in an input file, place all; the sandwich jobs at the beginning before declaring |PSIfour|; molecules. If necessary, clear the cfour block with ``cfour {}`` before; commencing standard P4C4 jobs. .. _`sec:cfourOutput`:. Output; ~~~~~~. The output of :program:`xcfour` invoked from a |PSIfour| input file is; written to the |PSIfour| output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in :psivar:`CFOUR ERROR CODE`. .. rubric:: Energies & Scalars. After execution of :program:`xcfour` has completed, the output string is; extensively parsed and appropriate results are stored in :ref:`PSI; Variables <apdx:cfour_psivar>`. All gleaned variables are printed in the; Cfour output section of the |PSIfour| output file, as shown below. ::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.338453952539; ""CCSD(T) CORRELATION ENERGY"" => -0.007263598030; ""CCSD(T) TOTAL ENERGY"" => -76.345717550569; ""CFOUR ERROR CODE"" => 0.000000000000; ""CURRENT CORRELATION ENERGY"" => -0.007263598030; ""CURRENT ENERGY"" => -76.345717550569; ""CURRENT REFERENCE ENERGY"" => -76.062748460180; ""MP2 CORRELATION ENERGY"" => -0.270191667755; ""MP2 OPPOSITE-SPIN ENERGY"" => -0.204890356651; ""MP2 SAME-SPIN ENERGY"" => -0.065301311104; ""MP2 TOTAL ENERGY"" => -76.332940127935; ""NUCLEAR REPULSION ENERGY"" => 9.187331653300; ""SCF TOTAL ENERGY"" => -76.062748460180. The PSI Variables are also available from the input file for manipula",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:40239,Modifiability,flexible,flexible,40239,"us roles; in the Cfour program (*e.g.*, |scf__maxiter| is used to set; |cfour__cfour_scf_maxcyc|). This keyword translation only takes place; if the keywords are explicitly set in the input file (part of that; contract that you mean it), meaning that |PSIfours| defaults don't; get imposed on Cfour. Also, in the case where a translatable pure-\; |PSIfour| keyword and its translation Cfour keyword are both set,; the value attached to the latter is always used. Below are a few; clarifying examples. * uses :math:`10^{-7}` SCF conv crit since that's Cfour's default; for |cfour__cfour_scf_conv| ::. energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; keyword ::. set cfour_scf_conv 6; energy('c4-scf'). * uses :math:`10^{-5}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword ::. set d_convergence 5; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword (local scope works, too) where; the |PSIfours| more flexible float input has been rounded down to; the integer required by Cfour ::. set scf d_convergence 5e-6; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten; and Cfour module keyword trumps |PSIfour| SCF module keyword ::. set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. .. note:: Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the :ref:`Cfour module<apdx:cfour>` along with; |mints__basis| and |globals__puream| (opt, too?). Misc. Running; ~~~~~~~~~~~~~. Naturally, in |PSIfour| multiple jobs can be run in succession from the input file. Control optimizations with optking keywords HERE. Cfour ``GRD`` file is; written to |PSIfour| output file. Gradient transformed back into the frame; in",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:41649,Modifiability,variab,variables,41649,", so only a handful (found here) of keywords participate. .. note:: Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the :ref:`Cfour module<apdx:cfour>` along with; |mints__basis| and |globals__puream| (opt, too?). Misc. Running; ~~~~~~~~~~~~~. Naturally, in |PSIfour| multiple jobs can be run in succession from the input file. Control optimizations with optking keywords HERE. Cfour ``GRD`` file is; written to |PSIfour| output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the |PSIfour|; output file and is available from input as :py:func:`~psi4.core.Wavefunction.gradient`. sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the ``cfour {...}`` block are tacked onto; the end of the ``ZMAT`` file that is otherwise written from psi style; format. It is by this route that, for example ``%excite*`` sections can at; present be specified. The execution of :program:`xcfour` can be modified by a few parameters. Setting; the option |cfour__cfour_omp_num_threads| sets the environment variable; :envvar:`OMP_NUM_THREADS` for only the duration of the Cfour computation.; That is, portions of an input file that run |PSIfour| modules are; unaffected. Additionally, there are a few arguments to the function; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` that control the Cfour scratch; directory. . .. comment Notes to Self; .. comment ~~~~~~~~~~~~~; .. comment ; .. comment Test checked-in GENBAS on installed copy; .. comment ; .. comment Reference still not factored into cc_program!; .. comment ; .. comment optimize on a s",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:42073,Modifiability,variab,variable,42073,"ptking keywords HERE. Cfour ``GRD`` file is; written to |PSIfour| output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the |PSIfour|; output file and is available from input as :py:func:`~psi4.core.Wavefunction.gradient`. sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the ``cfour {...}`` block are tacked onto; the end of the ``ZMAT`` file that is otherwise written from psi style; format. It is by this route that, for example ``%excite*`` sections can at; present be specified. The execution of :program:`xcfour` can be modified by a few parameters. Setting; the option |cfour__cfour_omp_num_threads| sets the environment variable; :envvar:`OMP_NUM_THREADS` for only the duration of the Cfour computation.; That is, portions of an input file that run |PSIfour| modules are; unaffected. Additionally, there are a few arguments to the function; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` that control the Cfour scratch; directory. . .. comment Notes to Self; .. comment ~~~~~~~~~~~~~; .. comment ; .. comment Test checked-in GENBAS on installed copy; .. comment ; .. comment Reference still not factored into cc_program!; .. comment ; .. comment optimize on a sandwich calc? errors out; .. comment ; .. comment ; .. comment .. _`table:cfour_cc_program`:; .. comment ; .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | | | | RHF | UHF | ROHF |; .. comment | | | +--------+--------+---------+; .. comment | Drive",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:3249,Performance,optimiz,optimize,3249,"ported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t)')``. Find available methods for; :py:func:`~psi4.driver.energy` at :ref:`Energy (CFOUR) <table:energy_cfour>`; and for :py:func:`~psi4.driver.optimize` at :ref:`Gradient (CFOUR); <table:grad_cfour>`. * Generally, the p4c4 interface will handle best practices for path of; execution: ``vcc``/``ecc``, derivative type, *etc.* The user is still; responsible for setting convergence, frozen core, guess, diis, *etc.*; For the moment, so-called ""best-practices"" keywords are summarized at; :ref:`Best Practices <table:cfour_cc_program>`. * For the type of computation intended, find appropriate options at; :ref:`Keywords <apdx:cfour>`. These keyword summaries contain the same; information as the `proper CFOUR options list; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.ListOfKeywordsInAlphabeticalOrder>`_; plus notes on keyword relevance when run through |PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:3282,Performance,optimiz,optimize,3282,"ported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t)')``. Find available methods for; :py:func:`~psi4.driver.energy` at :ref:`Energy (CFOUR) <table:energy_cfour>`; and for :py:func:`~psi4.driver.optimize` at :ref:`Gradient (CFOUR); <table:grad_cfour>`. * Generally, the p4c4 interface will handle best practices for path of; execution: ``vcc``/``ecc``, derivative type, *etc.* The user is still; responsible for setting convergence, frozen core, guess, diis, *etc.*; For the moment, so-called ""best-practices"" keywords are summarized at; :ref:`Best Practices <table:cfour_cc_program>`. * For the type of computation intended, find appropriate options at; :ref:`Keywords <apdx:cfour>`. These keyword summaries contain the same; information as the `proper CFOUR options list; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.ListOfKeywordsInAlphabeticalOrder>`_; plus notes on keyword relevance when run through |PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:3445,Performance,optimiz,optimize,3445,"; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour only cares about orbital basis, no fitting; bases). * Set the task as usual, indicating Cfour as the intended code by; prepending ""c4-"" to the method argument. So ``energy('scf')`` becomes; ``energy('c4-scf')`` and ``optimize('ccsd(t)')`` becomes; ``optimize('c4-ccsd(t)')``. Find available methods for; :py:func:`~psi4.driver.energy` at :ref:`Energy (CFOUR) <table:energy_cfour>`; and for :py:func:`~psi4.driver.optimize` at :ref:`Gradient (CFOUR); <table:grad_cfour>`. * Generally, the p4c4 interface will handle best practices for path of; execution: ``vcc``/``ecc``, derivative type, *etc.* The user is still; responsible for setting convergence, frozen core, guess, diis, *etc.*; For the moment, so-called ""best-practices"" keywords are summarized at; :ref:`Best Practices <table:cfour_cc_program>`. * For the type of computation intended, find appropriate options at; :ref:`Keywords <apdx:cfour>`. These keyword summaries contain the same; information as the `proper CFOUR options list; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.ListOfKeywordsInAlphabeticalOrder>`_; plus notes on keyword relevance when run through |PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.Manual>`_ may; also be useful, as may the many samples at :source:`samples/cfour`. * Set Cfour keywords just like |PSIfour| keywords. The names of keywords; are unchanged beyond a prepended ""cfour\_"". ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:8872,Performance,perform,perform,8872,"[3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }; ; energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom orde",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:8889,Performance,optimiz,optimizations,8889,"[3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }; ; energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom orde",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:9082,Performance,optimiz,optimizations,9082,"mands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`c",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:9121,Performance,optimiz,optimizations,9121,"mands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`c",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:9151,Performance,optimiz,optimizations,9151,"mands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`c",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:9256,Performance,optimiz,optimizations,9256,"arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimiz",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:9285,Performance,optimiz,optimizer,9285,"arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimiz",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:9332,Performance,optimiz,optimization,9332,"ma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:9557,Performance,optimiz,optimize,9557,"format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marke",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:9683,Performance,optimiz,optimize,9683," be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:9707,Performance,optimiz,optimization,9707," be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:10081,Performance,optimiz,optimizations,10081,"mitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; ----------------------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:10133,Performance,optimiz,optimizations,10133,"C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-0",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:10238,Performance,optimiz,optimization,10238,"C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-0",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:10307,Performance,optimiz,optimization,10307,"example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * 3.58e-05 9.89e-05 * 8.93e-05 o ~; 4 -76.33226141 -4.26e-09 * 9.76e-07 * 6.58e-07 *",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:10438,Performance,optimiz,optimization,10438,"; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -76.33224285 -7.63e+01 2.41e-03 1.60e-03 1.51e-02 8.82e-03 o ~; 2 -76.33226097 -1.81e-05 4.84e-04 4.03e-04 7.71e-04 * 7.04e-04 o ~; 3 -76.33226140 -4.39e-07 * 4.31e-05 * 3.58e-05 9.89e-05 * 8.93e-05 o ~; 4 -76.33226141 -4.26e-09 * 9.76e-07 * 6.58e-07 * 6.22e-06 * 3.71e-06 o ~; --------------------------------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:13868,Performance,optimiz,optimize,13868,"se features are available to Cfour by; using the |mints__basis| keyword instead of |cfour__cfour_basis|; (accompanied, of course, by specifying the molecule |PSIfour|-style).; Internally, |PSIfour| processes the basis set as usual, then translates; the basis set format and writes out a ``GENBAS`` file with an entry for; each atom. The P4C4 interface sets keyword |cfour__cfour_basis|\ =SPECIAL; and |cfour__cfour_spherical| as appropriate, then writes the basis section; necessary for SPECIAL below the ``*CFOUR(...)`` block. (I'm sorry that the; name of the basis doesn't appear in ``ZMAT``, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.). The input below employs a |PSIfour| library basis set and also introduces; the final stage of conversion toward |PSIfour| format. Instead of the; generic ``'cfour'``, the computational method is specified as the first; argument to the :py:func:`~psi4.driver.optimize` call. In the computational; command below, the string argument ``'c4-ccsd(t)'`` directs that a CCSD(T); computation be run using Cfour (as opposed to ``'ccsd(t)'`` which would; call |PSIfour| CC code). Specifying computational method in this manner; sets |cfour__cfour_calc_level| from the argument and; |cfour__cfour_deriv_level| as appropriate from the function call:; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.gradient`, or; :py:func:`~psi4.driver.optimize`. If those keywords are also set explicitly to; contradictory values, the interface will complain. ::. memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize(",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:14342,Performance,optimiz,optimize,14342," necessary for SPECIAL below the ``*CFOUR(...)`` block. (I'm sorry that the; name of the basis doesn't appear in ``ZMAT``, but the combination of the; ~14 character basis name limit and the absence of a comment line marker; rather precludes that helpful label.). The input below employs a |PSIfour| library basis set and also introduces; the final stage of conversion toward |PSIfour| format. Instead of the; generic ``'cfour'``, the computational method is specified as the first; argument to the :py:func:`~psi4.driver.optimize` call. In the computational; command below, the string argument ``'c4-ccsd(t)'`` directs that a CCSD(T); computation be run using Cfour (as opposed to ``'ccsd(t)'`` which would; call |PSIfour| CC code). Specifying computational method in this manner; sets |cfour__cfour_calc_level| from the argument and; |cfour__cfour_deriv_level| as appropriate from the function call:; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.gradient`, or; :py:func:`~psi4.driver.optimize`. If those keywords are also set explicitly to; contradictory values, the interface will complain. ::. memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, *etc.* and; some options can be set according to best practices. Practically speaking,; |cfour__cfour_cc_program| (and eventually |cfour__cfour_abcdtype|) will; always be set to the :ref:`fastest safe value <table:cfour_cc_program>`.; For example, the input above will run with |cfour__cfour_cc_program|\ =ECC; unless ex",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:14867,Performance,optimiz,optimize,14867,"call. In the computational; command below, the string argument ``'c4-ccsd(t)'`` directs that a CCSD(T); computation be run using Cfour (as opposed to ``'ccsd(t)'`` which would; call |PSIfour| CC code). Specifying computational method in this manner; sets |cfour__cfour_calc_level| from the argument and; |cfour__cfour_deriv_level| as appropriate from the function call:; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.gradient`, or; :py:func:`~psi4.driver.optimize`. If those keywords are also set explicitly to; contradictory values, the interface will complain. ::. memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, *etc.* and; some options can be set according to best practices. Practically speaking,; |cfour__cfour_cc_program| (and eventually |cfour__cfour_abcdtype|) will; always be set to the :ref:`fastest safe value <table:cfour_cc_program>`.; For example, the input above will run with |cfour__cfour_cc_program|\ =ECC; unless explicitly set to VCC. An advantage of |PSIfours| Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core ""wrappers"" available in |PSIfour| are; :py:func:`~psi4.driver.driver_nbody.nbody`,; :py:func:`~psi4.driver.wrapper_database.database`, and; :py:func:`~psi4.driver.cbs`; read their respective sections; for details, but an overview is provided here. :py:func:`~psi4.driv",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:15529,Performance,optimiz,optimization,15529,"{; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, *etc.* and; some options can be set according to best practices. Practically speaking,; |cfour__cfour_cc_program| (and eventually |cfour__cfour_abcdtype|) will; always be set to the :ref:`fastest safe value <table:cfour_cc_program>`.; For example, the input above will run with |cfour__cfour_cc_program|\ =ECC; unless explicitly set to VCC. An advantage of |PSIfours| Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core ""wrappers"" available in |PSIfour| are; :py:func:`~psi4.driver.driver_nbody.nbody`,; :py:func:`~psi4.driver.wrapper_database.database`, and; :py:func:`~psi4.driver.cbs`; read their respective sections; for details, but an overview is provided here. :py:func:`~psi4.driver.driver_nbody.nbody`; computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both). ::. molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }; ; Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ; ; for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = %.1f IE [kcal/mol] = %.3f\n' % (R, psi_hartree2kcalmol * ecp)); ; yields ::. R [A] = 2.5 IE [kcal/mol] = 0.804; R [A] = 3.0 IE [kcal/mol] = 0.030; R [A] = 4.0 IE [kcal/mol] = -0.014. Next, the :py:func:`~psi4.driver.wrapper_database.database` wrapper allows any computational; model chemistry to be applied ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:20680,Performance,optimiz,optimize,20680,"e-points. ::. molecule {; H 0.0 0.0 0.0; H 1.0 0.0 0.0; }; ; set mp2_type conv. cbs('mp2', corl_basis='cc-pV[TQ]Z', delta_wfn='c4-ccsd(t)', delta_basis='cc-pV[DT]Z'). This yields::. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [H] Scheme; ---------------------------------------------------------------------------------------------------------; scf scf / cc-pvqz -1.10245974 highest_1; corl mp2 / cc-pv[tq]z -0.03561890 corl_xtpl_helgaker_2; delta c4-ccsd(t) - mp2 / cc-pv[dt]z 0.03507767 corl_xtpl_helgaker_2; total CBS -1.10300098; ---------------------------------------------------------------------------------------------------------. Note that especially for :py:func:`~psi4.driver.cbs`, the; basis set needs to be specified through |mints__basis|, not; |cfour__cfour_basis|. Many of the wrappers can be used in combination to,; for example, apply a compound method to every molecule in a database or to; optimize a molecule with an extrapolated basis set (findif only for the; moment- analytics coming). Finally, any number and combination of jobs can be run from a single; |PSIfour| input file. Depending on the nature of preceding or following; jobs, it is prudent to separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. .. warning:: Because p4c4 does not inspect the contents of the ``cfour {...}``; block, once the user specifies a |PSIfour|-style molecule, the; interface cannot judge whether a sandwich mode (drop the |PSIfour| molecule; and use the cfour block as the entirety of the ``ZMAT``) or a standard mode; (translate the |PSIfour| molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a |PSIfour| molecule and a molecule in the cfour block,; ``ZMAT`` *will* end up with multiple molecules and",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:27963,Performance,optimiz,optimize,27963,"specified with ``energy('cfour', keep=True)`` or; (the default) ``energy('cfour', keep=False)``. *path* and *keep* are; keyword arguments that get interpreted by the; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` function documented below. .. autofunction:: psi4.driver.procrouting.interface_cfour.run_cfour(name [, keep, path]). .. _`sec:cfourFunctionality`:. Functionality; ~~~~~~~~~~~~~. Through clever use of the ``cfour {...}`` block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into |PSIfour| data objects. .. rubric:: Implemented. * Single-point :py:func:`~psi4.driver.energy` commands for :ref:`ground state; methods <table:energy_cfour>`. Examples:; :srcsample:`cfour/sp-rhf-ccsd_t_-ao-ecc`, :srcsample:`cfour/scf4`,; :srcsample:`cfour/mints5`. * Analytic :py:func:`~psi4.driver.gradient` and :py:func:`~psi4.driver.optimize`; commands for :ref:`ground state methods <table:grad_cfour>`. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: :srcsample:`cfour/opt-rhf-ccsd_t_`,; :srcsample:`cfour/mp2-1`, and :srcsample:`cfour/mints5-grad`. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. * Finite difference of energy :py:func:`~psi4.driver.gradient` and; :py:func:`~psi4.driver.optimize` for :ref:`methods <table:energy_cfour>`.; Force with ``gradient('name', dertype=0)``, *etc.*. * :py:func:`~psi4.driver.driver_nbody.nbody` for computation of interaction energies with or; without counterpoise correction. Example: :srcsample:`cfour/dfmp2-1`. * :py:func:`~psi4.driver.wrapper_database.database` for computation of a collection of molecules in ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:28631,Performance,optimiz,optimize,28631,"bric:: Implemented. * Single-point :py:func:`~psi4.driver.energy` commands for :ref:`ground state; methods <table:energy_cfour>`. Examples:; :srcsample:`cfour/sp-rhf-ccsd_t_-ao-ecc`, :srcsample:`cfour/scf4`,; :srcsample:`cfour/mints5`. * Analytic :py:func:`~psi4.driver.gradient` and :py:func:`~psi4.driver.optimize`; commands for :ref:`ground state methods <table:grad_cfour>`. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: :srcsample:`cfour/opt-rhf-ccsd_t_`,; :srcsample:`cfour/mp2-1`, and :srcsample:`cfour/mints5-grad`. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. * Finite difference of energy :py:func:`~psi4.driver.gradient` and; :py:func:`~psi4.driver.optimize` for :ref:`methods <table:energy_cfour>`.; Force with ``gradient('name', dertype=0)``, *etc.*. * :py:func:`~psi4.driver.driver_nbody.nbody` for computation of interaction energies with or; without counterpoise correction. Example: :srcsample:`cfour/dfmp2-1`. * :py:func:`~psi4.driver.wrapper_database.database` for computation of a collection of molecules in a; single input, with summarization of results. Examples:; :srcsample:`cfour/pywrap-db1` and :srcsample:`cfour/psi-a24-grad`. * :py:func:`~psi4.driver.cbs` for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of |PSIfour| and Cfour computational methods and |PSIfour| basis sets.; Example: :srcsample:`cfour/pywrap-cbs1`. .. rubric:: Not Yet Implemented. * Ground state CI energies and optimizations. * Excited state energies and optimizations. * Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables. * Property calls that required extra computation no",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:29451,Performance,optimiz,optimizations,29451,"ese cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. * Finite difference of energy :py:func:`~psi4.driver.gradient` and; :py:func:`~psi4.driver.optimize` for :ref:`methods <table:energy_cfour>`.; Force with ``gradient('name', dertype=0)``, *etc.*. * :py:func:`~psi4.driver.driver_nbody.nbody` for computation of interaction energies with or; without counterpoise correction. Example: :srcsample:`cfour/dfmp2-1`. * :py:func:`~psi4.driver.wrapper_database.database` for computation of a collection of molecules in a; single input, with summarization of results. Examples:; :srcsample:`cfour/pywrap-db1` and :srcsample:`cfour/psi-a24-grad`. * :py:func:`~psi4.driver.cbs` for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of |PSIfour| and Cfour computational methods and |PSIfour| basis sets.; Example: :srcsample:`cfour/pywrap-cbs1`. .. rubric:: Not Yet Implemented. * Ground state CI energies and optimizations. * Excited state energies and optimizations. * Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables. * Property calls that required extra computation not yet translated into; :py:func:`~psi4.driver.properties` computation command. * Frequencies. Energy methods available through P4C4 interface. .. include:: cfour_table_energy.rst. Gradient methods available through P4C4 interface. .. include:: cfour_table_grad.rst. .. _`table:cfour_cc_program`:. .. notes on preferred modules from JFS; .. comment always abcdtype = aobasis (but sometimes ; .. comment ncc does rhf ccsdt(q); .. comment reccommended code to do with, not only code (b/c mrcc can do much of this); .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | | | | RHF | UHF | ROHF |",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:29495,Performance,optimiz,optimizations,29495,"able between; QC programs"". I will get to this soon. * Finite difference of energy :py:func:`~psi4.driver.gradient` and; :py:func:`~psi4.driver.optimize` for :ref:`methods <table:energy_cfour>`.; Force with ``gradient('name', dertype=0)``, *etc.*. * :py:func:`~psi4.driver.driver_nbody.nbody` for computation of interaction energies with or; without counterpoise correction. Example: :srcsample:`cfour/dfmp2-1`. * :py:func:`~psi4.driver.wrapper_database.database` for computation of a collection of molecules in a; single input, with summarization of results. Examples:; :srcsample:`cfour/pywrap-db1` and :srcsample:`cfour/psi-a24-grad`. * :py:func:`~psi4.driver.cbs` for computation of compound methods involving; basis set extrapolations and/or delta corrections with any combination; of |PSIfour| and Cfour computational methods and |PSIfour| basis sets.; Example: :srcsample:`cfour/pywrap-cbs1`. .. rubric:: Not Yet Implemented. * Ground state CI energies and optimizations. * Excited state energies and optimizations. * Properties are not yet regex-ed, transformed into input frame, and; stowed in PSI Variables. * Property calls that required extra computation not yet translated into; :py:func:`~psi4.driver.properties` computation command. * Frequencies. Energy methods available through P4C4 interface. .. include:: cfour_table_energy.rst. Gradient methods available through P4C4 interface. .. include:: cfour_table_grad.rst. .. _`table:cfour_cc_program`:. .. notes on preferred modules from JFS; .. comment always abcdtype = aobasis (but sometimes ; .. comment ncc does rhf ccsdt(q); .. comment reccommended code to do with, not only code (b/c mrcc can do much of this); .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | | | | RHF | UHF | ROHF |; .. comment | | | +--------+--------+-------",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:32877,Performance,optimiz,optimize,32877,"--------------------+--------+--------+---------+; .. comment | | cc3 | none | vcc | vcc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | vcc | vcc | |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | | | |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsdt (no aobasis sp or opt, also prob for cc3, or for eomea grad) ; .. comment ecc / vcc / vcc; .. comment | none | ecc | ecc | ecc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | ecc | mrcc | mr_cc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomeano/eomipyes | ecc | | |; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | :py:func:`~psi4.optimize`, first | cc2 | none | vcc | vcc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | vcc | vcc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip not sure ask | vcc | vcc | vcc |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsd | none | ecc | ecc | ecc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | vcc | vcc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | vcc | vcc | vcc |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsd(t) | none | ecc | ecc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | | | |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eo",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:37816,Performance,optimiz,optimization,37816,"s of the ``cfour {...}`` block are; blindly appended to any input interpreted from |PSIfour| format, mixing; of |PSIfour| and Cfour input formats likely *will* give rise to multiple; ``*CFOUR(...)`` directives in the prospective ``ZMAT``, execution of; which *will* be trapped and halted. Proper uses for the ``cfour {...}``; block are for the sandwich mode, where the entire ``ZMAT`` is enclosed,; or for extra directives like ``%excite*``, which presently have no other; specification route. * Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between |PSIfour| and Cfour and it's not; practical to compare exponent-to-exponent, any input file with both; |mints__basis| and |cfour__cfour_basis| keywords present will halt. Once; a basis set has been requested through |mints__basis|, overriding the; default spherical/Cartesian setting must be done through; |globals__puream| (as opposed to |cfour__cfour_spherical|). * Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (*e.g.*, |cfour__cfour_geo_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:37861,Performance,optimiz,optimization,37861,"PSIfour| format, mixing; of |PSIfour| and Cfour input formats likely *will* give rise to multiple; ``*CFOUR(...)`` directives in the prospective ``ZMAT``, execution of; which *will* be trapped and halted. Proper uses for the ``cfour {...}``; block are for the sandwich mode, where the entire ``ZMAT`` is enclosed,; or for extra directives like ``%excite*``, which presently have no other; specification route. * Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between |PSIfour| and Cfour and it's not; practical to compare exponent-to-exponent, any input file with both; |mints__basis| and |cfour__cfour_basis| keywords present will halt. Once; a basis set has been requested through |mints__basis|, overriding the; default spherical/Cartesian setting must be done through; |globals__puream| (as opposed to |cfour__cfour_spherical|). * Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (*e.g.*, |cfour__cfour_geo_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:37914,Performance,optimiz,optimization,37914,"PSIfour| format, mixing; of |PSIfour| and Cfour input formats likely *will* give rise to multiple; ``*CFOUR(...)`` directives in the prospective ``ZMAT``, execution of; which *will* be trapped and halted. Proper uses for the ``cfour {...}``; block are for the sandwich mode, where the entire ``ZMAT`` is enclosed,; or for extra directives like ``%excite*``, which presently have no other; specification route. * Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between |PSIfour| and Cfour and it's not; practical to compare exponent-to-exponent, any input file with both; |mints__basis| and |cfour__cfour_basis| keywords present will halt. Once; a basis set has been requested through |mints__basis|, overriding the; default spherical/Cartesian setting must be done through; |globals__puream| (as opposed to |cfour__cfour_spherical|). * Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (*e.g.*, |cfour__cfour_geo_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:38003,Performance,optimiz,optimizer,38003,"tiple; ``*CFOUR(...)`` directives in the prospective ``ZMAT``, execution of; which *will* be trapped and halted. Proper uses for the ``cfour {...}``; block are for the sandwich mode, where the entire ``ZMAT`` is enclosed,; or for extra directives like ``%excite*``, which presently have no other; specification route. * Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between |PSIfour| and Cfour and it's not; practical to compare exponent-to-exponent, any input file with both; |mints__basis| and |cfour__cfour_basis| keywords present will halt. Once; a basis set has been requested through |mints__basis|, overriding the; default spherical/Cartesian setting must be done through; |globals__puream| (as opposed to |cfour__cfour_spherical|). * Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (*e.g.*, |cfour__cfour_geo_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ecc since that's best practice for the requested ccsd ::. energy('c4-ccsd'). * runs in vcc ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:38042,Performance,optimiz,optimization,38042,"execution of; which *will* be trapped and halted. Proper uses for the ``cfour {...}``; block are for the sandwich mode, where the entire ``ZMAT`` is enclosed,; or for extra directives like ``%excite*``, which presently have no other; specification route. * Specifying the basis is perhaps the regulated piece of input. Since; basis set names differ between |PSIfour| and Cfour and it's not; practical to compare exponent-to-exponent, any input file with both; |mints__basis| and |cfour__cfour_basis| keywords present will halt. Once; a basis set has been requested through |mints__basis|, overriding the; default spherical/Cartesian setting must be done through; |globals__puream| (as opposed to |cfour__cfour_spherical|). * Specifying keywords that control geometry optimization is; straightforward. Unless the optimization is invoked in sandwich mode,; all Cfour optimization keywords (*e.g.*, |cfour__cfour_geo_maxcyc|) are; ineffective, as the Cfour optimizer is never invoked. |PSIfour|; optimization keywords (*e.g.*, |optking__geom_maxiter|) instead fill; these roles. * Specifying the computational method (through, for instance,; ``energy('c4-ccsd')`` instead of ``energy('cfour')``) often; sets additional keywords consistent with best practices (*e.g.*,; |cfour__cfour_cc_program|). Since those settings are implicit, any; explicit setting of those those keywords, whether contradicting or; concurring, takes priority (halts never generated). The following are; some concrete examples. For the moment, click the source button at; muster_modelchem for details of what keywords; get set. * runs in vcc since that's Cfour's default for cc_program ::. set cfour_calc_level ccsd; energy('cfour'). * runs in ecc since Cfour's default overwritten by keyword ::. set cfour_calc_level ccsd; set cfour_cc_program ecc; energy('cfour'). * runs in ecc since that's best practice for the requested ccsd ::. energy('c4-ccsd'). * runs in vcc since *hidden* default overwritten by keyword ::. set cfour_cc_",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:41058,Performance,optimiz,optimizations,41058,"c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword (local scope works, too) where; the |PSIfours| more flexible float input has been rounded down to; the integer required by Cfour ::. set scf d_convergence 5e-6; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten; and Cfour module keyword trumps |PSIfour| SCF module keyword ::. set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. .. note:: Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the :ref:`Cfour module<apdx:cfour>` along with; |mints__basis| and |globals__puream| (opt, too?). Misc. Running; ~~~~~~~~~~~~~. Naturally, in |PSIfour| multiple jobs can be run in succession from the input file. Control optimizations with optking keywords HERE. Cfour ``GRD`` file is; written to |PSIfour| output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the |PSIfour|; output file and is available from input as :py:func:`~psi4.core.Wavefunction.gradient`. sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the ``cfour {...}`` block are tacked onto; the end of the ``ZMAT`` file that is otherwise written from psi style; format. It is by this route that, for example ``%excite*`` sections can at; present be specified. The execution of :program:`xcfour` can be modified by a few parameters. Setting; the option |cfour__cfour_omp_num_threads| sets the environment v",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:42614,Performance,optimiz,optimize,42614," # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the ``cfour {...}`` block are tacked onto; the end of the ``ZMAT`` file that is otherwise written from psi style; format. It is by this route that, for example ``%excite*`` sections can at; present be specified. The execution of :program:`xcfour` can be modified by a few parameters. Setting; the option |cfour__cfour_omp_num_threads| sets the environment variable; :envvar:`OMP_NUM_THREADS` for only the duration of the Cfour computation.; That is, portions of an input file that run |PSIfour| modules are; unaffected. Additionally, there are a few arguments to the function; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` that control the Cfour scratch; directory. . .. comment Notes to Self; .. comment ~~~~~~~~~~~~~; .. comment ; .. comment Test checked-in GENBAS on installed copy; .. comment ; .. comment Reference still not factored into cc_program!; .. comment ; .. comment optimize on a sandwich calc? errors out; .. comment ; .. comment ; .. comment .. _`table:cfour_cc_program`:; .. comment ; .. comment .. table:: Cfour coupled-cluster program defaults by calculation type; .. comment ; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | | | | RHF | UHF | ROHF |; .. comment | | | +--------+--------+---------+; .. comment | Driver Call, |cfour__cfour_deriv_level| | name, |cfour__cfour_calc_level| | |cfour__cfour_excite| | |cfour__cfour_cc_program| |; .. comment +=========================================+=================================+=======================+========+========+=========+; .. comment | :py:func:`~psi4.energy`, zero | cc2 | none | vcc | vcc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | _cc | _cc | _cc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eom",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:45365,Performance,optimiz,optimize,45365,"| eomea/eomip | _cc | _cc | _cc |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | cc3 | none | vcc | vcc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | _cc | _cc | _cc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | _cc | _cc | _cc |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsdt | none | ecc | ecc | ecc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | _cc | _cc | _cc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | _cc | _cc | _cc |; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment | :py:func:`~psi4.optimize`, first | cc2 | none | _cc | _cc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | _cc | _cc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | _cc | _cc | vcc |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsd | none | _cc | _cc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | _cc | _cc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | _cc | _cc | vcc |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsd(t) | none | ecc | _cc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | _cc | _cc | vcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eom",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:7454,Safety,avoid,avoid,7454,"artesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See :ref:`sec:moleculeSpecification` for details and; :srcsample:`cfour/mints5` for examples. When a |PSIfour|-style molecule is; supplied, its geometry is written to ``ZMAT`` in Cartesian form and the; |cfour__cfour_coordinates|\ =CARTESIAN, |cfour__cfour_units|\ =ANGSTROM,; |cfour__cfour_charge|, and |cfour__cfour_multiplicity| keywords are set; appropriately in the ``*CFOUR(...)`` directive. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. Whenever the molecule is supplied in |PSIfour| format, the job control; keywords must be too. All :ref:`Cfour keywords <apdx:cfour>` are the usual; ones, prepended by ``cfour_`` to avoid any possible name conflicts. As; detailed in :ref:`sec:jobControl`, setting keywords is flexible in; format. The previous example translates to::. # UHF-SCF energy calculation . molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; }; ; set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }; ; energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting w",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:15223,Safety,safe,safe,15223,"t and; |cfour__cfour_deriv_level| as appropriate from the function call:; :py:func:`~psi4.driver.energy`, :py:func:`~psi4.driver.gradient`, or; :py:func:`~psi4.driver.optimize`. If those keywords are also set explicitly to; contradictory values, the interface will complain. ::. memory 2 gb. molecule CH2F2 {; units au; C 0.0000000000 -0.0000000000 1.0890958457; F 0.0000000000 -2.1223155812 -0.4598161475; F -0.0000000000 2.1223155812 -0.4598161475; H 1.7084139850 0.0000000000 2.1841068002; H -1.7084139850 -0.0000000000 2.1841068002; }. set basis aug-cc-pvdz; set rms_force_g_convergence 6; set cfour_abcdtype aobasis; set cfour_scf_conv 12; set cfour_cc_conv 12; set cfour_lineq_conv 12. optimize('c4-ccsd(t)'). The utility of this method specification is that examination can be made; of the reference, the derivative level, the excitation level, *etc.* and; some options can be set according to best practices. Practically speaking,; |cfour__cfour_cc_program| (and eventually |cfour__cfour_abcdtype|) will; always be set to the :ref:`fastest safe value <table:cfour_cc_program>`.; For example, the input above will run with |cfour__cfour_cc_program|\ =ECC; unless explicitly set to VCC. An advantage of |PSIfours| Python driver is that any number of common; work-up procedures can be automated and wrapped around the; conventional single-point and optimization procedures at the heart of all; quantum chemistry codes. Three core ""wrappers"" available in |PSIfour| are; :py:func:`~psi4.driver.driver_nbody.nbody`,; :py:func:`~psi4.driver.wrapper_database.database`, and; :py:func:`~psi4.driver.cbs`; read their respective sections; for details, but an overview is provided here. :py:func:`~psi4.driver.driver_nbody.nbody`; computes the interaction energy of a bimolecular complex (counterpoise-corrected,; not, or both). ::. molecule dimer {; Ne; --; Ne 1 R; symmetry c1; }; ; Rvals=[2.5, 3.0, 4.0]; set basis aug-cc-pVDZ; ; for R in Rvals:; dimer.R = R; ecp = cp('c4-mp2'); print_stdout('R [A] = ",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:40794,Safety,avoid,avoid,40794,"scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; keyword ::. set cfour_scf_conv 6; energy('c4-scf'). * uses :math:`10^{-5}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword ::. set d_convergence 5; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten by; :ref:`SCF module<apdx:scf>` keyword (local scope works, too) where; the |PSIfours| more flexible float input has been rounded down to; the integer required by Cfour ::. set scf d_convergence 5e-6; energy('c4-scf'). * uses :math:`10^{-6}` SCF conv crit since default overwritten; and Cfour module keyword trumps |PSIfour| SCF module keyword ::. set cfour_scf_conv 6; set d_convergence 8; energy('c4-scf'). The keyword translation feature is still in the proof-of-principle; stage, so only a handful (found here) of keywords participate. .. note:: Longtime Cfour users who may consider this keyword; translation a flaw rather than a feature can avoid it entirely by; confining keywords to the :ref:`Cfour module<apdx:cfour>` along with; |mints__basis| and |globals__puream| (opt, too?). Misc. Running; ~~~~~~~~~~~~~. Naturally, in |PSIfour| multiple jobs can be run in succession from the input file. Control optimizations with optking keywords HERE. Cfour ``GRD`` file is; written to |PSIfour| output file. Gradient transformed back into the frame; in which it was shipped off to Cfour is also written to the |PSIfour|; output file and is available from input as :py:func:`~psi4.core.Wavefunction.gradient`. sandwich mode := molecule and cfour list within; Naturally, additional jobs can follow in the input file.; Depending on the nature of preceding or following jobs, it is prudent to; separate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties. In this scheme, the contents of the ``cfour {...}`` block are tacked onto; the end of the ``ZMAT`` file that is otherwise writt",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:2004,Security,access,access,2004,"utodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master branch nor will it be in; .. the near future. To run this code, (1) build the ``c4`` branch of psi4,; .. (2) find a copy of cfour and put it in :envvar:`PATH` or; .. :envvar:`PSIPATH`, and (3) clone https://github.com/loriab/qcdb.git; .. python module and prepend :envvar:`PYTHONPATH` with the top qcdb; .. directory (the path added to PYTHONPATH should have one ""qcdb"" in it;; .. the cloned qcdb is what needs to be imported in preference to the one; .. already in psi4). Execute psi4 as usual. .. caution:: The p4c4 interface hasn't been fully adapted for the new March 2014 version. Cfour for |PSIfour| Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. * Set memory as usual. * Set molecule as usual. * Set basis set as usual (Cfour on",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:5017,Security,access,accessible,5017,"n as the `proper CFOUR options list; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.ListOfKeywordsInAlphabeticalOrder>`_; plus notes on keyword relevance when run through |PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.Manual>`_ may; also be useful, as may the many samples at :source:`samples/cfour`. * Set Cfour keywords just like |PSIfour| keywords. The names of keywords; are unchanged beyond a prepended ""cfour\_"". (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; |cfour__cfour_calc_level| and |cfour__cfour_reference| when used in; |PSIfour|.). * In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; |scf__reference| will appropriately set |cfour__cfour_reference|. For a; list of applicable keywords, see source of; muster_psi4options. * Consult :ref:`sec:cfourFunctionality` for information on what Cfour; functionality is accessible through |PSIfour|. |PSIfour| for Cfour Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. In the simplest use of the Psi4/Cfour interface, a |PSIfour| input file; can simply ""wrap"" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are the",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:5995,Security,access,accessible,5995,"nctionality` for information on what Cfour; functionality is accessible through |PSIfour|. |PSIfour| for Cfour Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. In the simplest use of the Psi4/Cfour interface, a |PSIfour| input file; can simply ""wrap"" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration of the |PSIfour| instance (as opposed to solely *in files*); is the only advantage thus far incurred by the P4C4 interface. We'll call; this mode of basic utility the ""sandwich"" mode. Molecule specification in |PSIfour| allows Cartesians, Z-matrices, mixed; Cartesian/Z-matrix, negation of variables, delayed specification of; variables, specification of fragments, etc., all in a whitespace-tolerant; format. See :ref:`sec:moleculeSpecification` for details and; :srcsample:`cfour/mints5` for examples. When a |PSIfour|-style molecule is; supplied, its geometry is written to ``ZMAT`` in Cartesian form and the; |cfour__cfour_coordinates|\ =CARTESIAN, |cfour__cfour_units|\ =ANGSTROM,; |cfour__cfour_charge|, and |cfour__cfour_multiplicity| keywords are set; appropriately in the ``*CFOUR",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:25802,Security,access,accessed,25802,"lipped, and otherwise badgered into coincidence, then the same; manipulations are applied to the gradient in ``GRD``, the result of which; is printed below and passed on to Optking. ::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3 . 1 2 3 . 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.9178691296 1.5897959670; 1.0000000000 0.4080144050 1.8357382590 0.0000000001; 7.0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; :py:class:`~psi4.core.Matrix` object through the wfn as; :py:func:`psi4.core.Wavefunction.gradient`. Previously, cfour communicated through; `psi4.core.legacy_gradient` which was accessed through `psi4.core.get_gradient()`. .. rubric:: Cfour Files. The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary ``P4C4_INFO``. That is,; ``P4C4_INFO['zmat']`` returns a string of the input file sent to Cfour.; Accessible arguments are ``zmat``, ``output``, and any that have been; produced of ``grd``. For example, to print to the screen if CC convergence; is reached, the following could be placed in the |PSIfour| input file. ::. energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. .. rubric:: Scratch Files. By default, a separate subdirectory for each Cfour call is created within; the job's scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, ``energy",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:26016,Security,access,accessed,26016,">>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-scf Gradient Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. ... Irrep: 1 Size: 4 x 3 . 1 2 3 . 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.9178691296 1.5897959670; 1.0000000000 0.4080144050 1.8357382590 0.0000000001; 7.0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; :py:class:`~psi4.core.Matrix` object through the wfn as; :py:func:`psi4.core.Wavefunction.gradient`. Previously, cfour communicated through; `psi4.core.legacy_gradient` which was accessed through `psi4.core.get_gradient()`. .. rubric:: Cfour Files. The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary ``P4C4_INFO``. That is,; ``P4C4_INFO['zmat']`` returns a string of the input file sent to Cfour.; Accessible arguments are ``zmat``, ``output``, and any that have been; produced of ``grd``. For example, to print to the screen if CC convergence; is reached, the following could be placed in the |PSIfour| input file. ::. energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. .. rubric:: Scratch Files. By default, a separate subdirectory for each Cfour call is created within; the job's scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, ``energy('cfour',; path='/full/path/to/cfour/scratch')``. Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with `",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:26138,Security,access,accessible,26138,"2 3 . 1 0.0000000 -0.0122978 0.0000000; 2 -0.0051192 0.0040993 -0.0088667; 3 -0.0051192 0.0040993 0.0088667; 4 0.0102384 0.0040993 0.0000000. CFOUR scratch file GRD has been read; 4 0.0000000000; 7.0000000000 -0.0880964705 0.0000000000 0.0000000000; 1.0000000000 0.4080144050 -0.9178691296 -1.5897959670; 1.0000000000 0.4080144050 -0.9178691296 1.5897959670; 1.0000000000 0.4080144050 1.8357382590 0.0000000001; 7.0000000000 -0.0122978407 0.0000000000 0.0000000000; 1.0000000000 0.0040992802 -0.0051191833 -0.0088666856; 1.0000000000 0.0040992802 -0.0051191833 0.0088666856; 1.0000000000 0.0040992802 0.0102383666 0.0000000000. The gradient can also be accessed from the input file as a; :py:class:`~psi4.core.Matrix` object through the wfn as; :py:func:`psi4.core.Wavefunction.gradient`. Previously, cfour communicated through; `psi4.core.legacy_gradient` which was accessed through `psi4.core.get_gradient()`. .. rubric:: Cfour Files. The contents of all files associated with Cfour are accessible from the; input file through the Python dictionary ``P4C4_INFO``. That is,; ``P4C4_INFO['zmat']`` returns a string of the input file sent to Cfour.; Accessible arguments are ``zmat``, ``output``, and any that have been; produced of ``grd``. For example, to print to the screen if CC convergence; is reached, the following could be placed in the |PSIfour| input file. ::. energy('c4-ccsd'); print 'miracle?', 'miracle' in P4C4_INFO['output']. .. rubric:: Scratch Files. By default, a separate subdirectory for each Cfour call is created within; the job's scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, ``energy('cfour',; path='/full/path/to/cfour/scratch')``. Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with ``energy('cfour', keep=True)`` or; (the default) ``energy('cfour', keep=False)``. *path* and *keep* are; keyword arguments that get inter",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:1354,Testability,test,testSuitecfour,1354,"i4 is free software; you can redistribute it and/or modify; .. # it under the terms of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: Cfour; .. _`sec:cfour`:. Interface to CFOUR by J. Stanton & J. Gauss; ===========================================. .. codeauthor:: Lori A. Burns; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:cfour>`, :ref:`PSI Variables <apdx:cfour_psivar>`, :ref:`Samples <apdx:testSuitecfour>`. |PSIfour| contains code to interface to the Cfour quantum chemistry suite of; John F. Stanton (U. Texas, Austin) and J\ |u_dots|\ rgen Gauss (U. Mainz),; which is available after a license agreement from ; `http://www.cfour.de/ <http://www.cfour.de/>`_. Installation; ~~~~~~~~~~~~. Follow the instructions provided with the Cfour download to install the; executable or to build the source. To by used by |PSIfour|, the program; binary (:program:`xcfour`) must be found in your :envvar:`PATH` or; :envvar:`PSIPATH`. The ``GENBAS`` file containing basis sets in Cfour; format is not necessary for this interface, but if you prefer to access; basis sets the ""Cfour way"" using a custom ``GENBAS`` file (the distributed; one is included with the interface), it, too, must be in :envvar:`PATH` or; :envvar:`PSIPATH`. If |PSIfour| is unable to execute the binary, an error; will be reported. .. .. caution:: The p4c4 interface isn't in the master",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:8403,Testability,test,tests,8403,"ssible name conflicts. As; detailed in :ref:`sec:jobControl`, setting keywords is flexible in; format. The previous example translates to::. # UHF-SCF energy calculation . molecule {; 0 2 # multiplicity from the MULT keyword; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; }; ; set {; cfour_CALC_level=HF # only full keyword names allowed; cfour_BASIS=qz2p; #MULT=2 # now in molecule {...} block; cfour_REFerence=UHF; cfour_OCCUPATION [[3, 1, 1, 0], [3,0,1,0] ] # arrays in python notation; cfour_SCF_CONV=12; cfour_MEMORY=20000000; }; ; energy('cfour'). Here, note that none of capitalization, equals sign, or whitespace matter; for the keyword commands. Specification of strings and integers requires no; translation; :ref:`booleans <op_c_boolean>` have extended freedom of; format; arrays must be translated into Python-style (square-bracket; bounded and comma delimited) of appropriate dimension. There are many; sample inputs in :source:`tests/cfour/` starting with ``sp-`` that take; examples from the Cfour manual and first run them in sandwich mode and; then run them as translated into |PSIfour| format. .. note:: |PSIfour| only recognizes keywords by their full name, so the common; Cfour keyword abbreviations CALC, REF, etc. must be replaced by their; proper names of |cfour__cfour_calc_level|, |cfour__cfour_reference|, etc. Whenever the molecule is supplied in |PSIfour| format, it is possible to; perform geometry optimizations where Cfour supplies the gradient and the; |PSIfour| module :ref:`optking <sec:optking>` drives the structural; changes. Because of the limitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BA",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:10023,Testability,test,tests,10023,"mitations on geometry specification for; optimizations in Cfour, optking-driven optimizations are the *only*; optimizations allowed in the P4C4 interface. (The exception is sandwich; mode, which, of course, permits optimizations with the Cfour optimizer.); Below is an example of a geometry optimization::. memory 200 mb; ; molecule {; O; H 1 R; H 1 R 2 A; ; R=0.958; A=104.5; }; ; set {; ; cfour_CALC_level CCSD(T); cfour_BASIS DZP; cfour_CC_CONV 12; cfour_LINEQ_CONV 12; cfour_SCF_CONV 12; g_convergence cfour; }. optimize('cfour'). Note that the primary change is the exchange of :py:func:`~psi4.driver.energy`; for :py:func:`~psi4.driver.optimize` to trigger an optimization. Setting; |optking__g_convergence|\ =CFOUR provides a good imitation of Cfour; default convergence criteria. Although Cfour produces gradients only in; its standard orientation and atom ordering, these are transformed back to; input orientation by the P4C4 interface. Several sample inputs in; :source:`tests/cfour/` starting with ``opt-`` show basic geometry; optimizations. :srcsample:`cfour/mints5-grad` shows optimizations from a; variety of molecule input formats, and :srcsample:`cfour/psi-ghost-grad`; shows an optimization with ghosted atoms. To obtain a single gradient; *sans* optimization, call instead :py:func:`~psi4.driver.gradient`. Note that it can be convenient to monitor the progress of a geometry; optimization by grepping the tilde ``~`` character. ::; ; Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * 1.00e-06 * 1.20e-03 * o ~; ----------------------------------------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:27559,Testability,test,tested,27559,"t']. .. rubric:: Scratch Files. By default, a separate subdirectory for each Cfour call is created within; the job's scratch directory. To explicitly specify the location of the; Cfour scratch, execute with, for example, ``energy('cfour',; path='/full/path/to/cfour/scratch')``. Regardless of whether the location; is specified or default, whether to preserve the scratch directory after; the computation can be specified with ``energy('cfour', keep=True)`` or; (the default) ``energy('cfour', keep=False)``. *path* and *keep* are; keyword arguments that get interpreted by the; :py:func:`~psi4.driver.procrouting.interface_cfour.run_cfour` function documented below. .. autofunction:: psi4.driver.procrouting.interface_cfour.run_cfour(name [, keep, path]). .. _`sec:cfourFunctionality`:. Functionality; ~~~~~~~~~~~~~. Through clever use of the ``cfour {...}`` block, one could run most any; Cfour computation through the P4C4 interface. In contrast, enumerated; below are tested functionalities where results from Cfour are collected; into |PSIfour| data objects. .. rubric:: Implemented. * Single-point :py:func:`~psi4.driver.energy` commands for :ref:`ground state; methods <table:energy_cfour>`. Examples:; :srcsample:`cfour/sp-rhf-ccsd_t_-ao-ecc`, :srcsample:`cfour/scf4`,; :srcsample:`cfour/mints5`. * Analytic :py:func:`~psi4.driver.gradient` and :py:func:`~psi4.driver.optimize`; commands for :ref:`ground state methods <table:grad_cfour>`. Real and; Ghost atoms permitted (though the latter will naturally collapse after; several cycles). Examples: :srcsample:`cfour/opt-rhf-ccsd_t_`,; :srcsample:`cfour/mp2-1`, and :srcsample:`cfour/mints5-grad`. .. warning:: There exist molecules (*e.g.*, allene) where the; inertial frame is not unique (planes along atoms or between; atoms). The orientation reconciling machinery currently does not; handle these cases and will fail with ""Axis unreconcilable between; QC programs"". I will get to this soon. * Finite difference of energy :py:func:`~psi4.d",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:5108,Usability,simpl,simplest,5108,"|PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.Manual>`_ may; also be useful, as may the many samples at :source:`samples/cfour`. * Set Cfour keywords just like |PSIfour| keywords. The names of keywords; are unchanged beyond a prepended ""cfour\_"". (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; |cfour__cfour_calc_level| and |cfour__cfour_reference| when used in; |PSIfour|.). * In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; |scf__reference| will appropriately set |cfour__cfour_reference|. For a; list of applicable keywords, see source of; muster_psi4options. * Consult :ref:`sec:cfourFunctionality` for information on what Cfour; functionality is accessible through |PSIfour|. |PSIfour| for Cfour Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. In the simplest use of the Psi4/Cfour interface, a |PSIfour| input file; can simply ""wrap"" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration o",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:5178,Usability,simpl,simply,5178,"|PSIfour|. Information; at the `CFOUR manual; <http://slater.chemie.uni-mainz.de/cfour/index.php?n=Main.Manual>`_ may; also be useful, as may the many samples at :source:`samples/cfour`. * Set Cfour keywords just like |PSIfour| keywords. The names of keywords; are unchanged beyond a prepended ""cfour\_"". (Though be aware that common; abbreviations like CALC and REF must be fully spelled out as; |cfour__cfour_calc_level| and |cfour__cfour_reference| when used in; |PSIfour|.). * In limited trial cases, keywords nominally directed at non-Cfour modules; are translated into their Cfour counterparts. For example, setting; |scf__reference| will appropriately set |cfour__cfour_reference|. For a; list of applicable keywords, see source of; muster_psi4options. * Consult :ref:`sec:cfourFunctionality` for information on what Cfour; functionality is accessible through |PSIfour|. |PSIfour| for Cfour Users; ~~~~~~~~~~~~~~~~~~~~~~~~~. In the simplest use of the Psi4/Cfour interface, a |PSIfour| input file; can simply ""wrap"" a ``ZMAT`` file and execute :program:`xcfour`. This is; illustrated in the following example::. cfour {; UHF-SCF energy calculation ; N; H 1 R; H 1 R 2 A; ; R=1.008; A=105.0; ; *ACES2(CALC=HF,BASIS=qz2p; MULT=2,REF=UHF; OCCUPATION=3-1-1-0/3-0-1-0; SCF_CONV=12; MEMORY=20000000); }; ; energy('cfour'). Here, the contents of the ``cfour {...}`` block are written directly to a; ``ZMAT`` file. This is joined by a default ``GENBAS`` file; (:source:`psi4/share/psi4/basis/GENBAS`). To preferentially use your own ``GENBAS``,; place it in :envvar:`PATH` or :envvar:`PSIPATH`. The line calling; :py:func:`~psi4.driver.energy` with argument ``'cfour'`` invokes; :program:`xcfour`. After execution of the ``energy('cfour')`` line completes, Cfour results; are read back into |PSIfour| format and are thereafter accessible for; further processing in the input file. See :ref:`sec:cfourOutput` for; details. This storage of results in variables and arrays *in memory* for; the duration o",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:21917,Usability,clear,clear,21917,"parate them with the following::. clean() # removes Psi4 scratch files; clean_variables() # empties the PSI variables list; cfour {} # empties the cfour block. .. warning:: Because p4c4 does not inspect the contents of the ``cfour {...}``; block, once the user specifies a |PSIfour|-style molecule, the; interface cannot judge whether a sandwich mode (drop the |PSIfour| molecule; and use the cfour block as the entirety of the ``ZMAT``) or a standard mode; (translate the |PSIfour| molecule and append additional input from the; cfour block) is intended. The latter is what actually occurs. If; there is both a |PSIfour| molecule and a molecule in the cfour block,; ``ZMAT`` *will* end up with multiple molecules and multiple ``*CFOUR(...)``; blocks, and it *will not* run. Therefore, if mixing sandwich and; standard or pure-\ |PSIfour| computations in an input file, place all; the sandwich jobs at the beginning before declaring |PSIfour|; molecules. If necessary, clear the cfour block with ``cfour {}`` before; commencing standard P4C4 jobs. .. _`sec:cfourOutput`:. Output; ~~~~~~. The output of :program:`xcfour` invoked from a |PSIfour| input file is; written to the |PSIfour| output file as the computation progresses. If a; Cfour module terminates with a non-zero error code, the value will show up; in :psivar:`CFOUR ERROR CODE`. .. rubric:: Energies & Scalars. After execution of :program:`xcfour` has completed, the output string is; extensively parsed and appropriate results are stored in :ref:`PSI; Variables <apdx:cfour_psivar>`. All gleaned variables are printed in the; Cfour output section of the |PSIfour| output file, as shown below. ::. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Cfour c4-ccsd(t) Energy Results //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. Variable Map:; ----------------------------------------------------------------------------; ""(T) CORRECTION ENERGY"" => -0.007263598030; ""CCSD CORRELATION ENERGY"" => -0.275705492359; ""CCSD TOTAL ENERGY"" => -76.3384539525",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst:35168,Usability,simpl,simple,35168,"nt | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | vcc | | |; .. comment | +---------------------------------+-----------------------+--------+--------+---------+; .. comment | | ccsdt | none | ecc | mrcc | mrc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomee | mrcc | mrcc | mrcc |; .. comment | | +-----------------------+--------+--------+---------+; .. comment | | | eomea/eomip | mrcc | mrcc | mrcc |; .. comment +-----------------------------------------+---------------------------------+-----------------------+--------+--------+---------+; .. comment properties same as grad; .. comment 2nd deriv ecc only for ccsd(t). Specification Details; ~~~~~~~~~~~~~~~~~~~~~. The above narrative introduction to the P4C4 interface should be; sufficient to get started. Issues of competition between |PSIfour| and; Cfour specification format are generally resolved behind the scenes:; not according to a *simple* rule but according to sensible, sometimes; intricate, rules governed by user intent (and integration of Cfour to; behave like a |PSIfour| module). Much can be gleaned by just running; inputs and inspecting the ``ZMAT`` passed to Cfour, but when questions; arise, here are the specifics, the governing laws. * Specifying a piece of input in |PSIfour| format is entering into; a contract that you mean it. In particular this applies to; molecule (including charge/multiplicity through :samp:`molecule; {optional_molecule_name} \\{...\\}`), memory (through :samp:`memory; {value} {unit}`), computational method (through . If Cfour keywords; are specified with values that contradict the |PSIfour| input,; execution is halted. As an example, the input below is set up to fail in four ways:; contradictory specification of memory, multiplicity, computational; method, and derivative level. Note, though, that the ``cfour_units; angstrom`` setting is permissible, since it concurs with the value; implied in",MatchSource.DOCS,doc/sphinxman/source/cfour.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/cfour.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:2449,Availability,avail,available,2449,". library of S. Wouters, which is based at `GitHub; .. <https://github.com/SebWouters/CheMPS2>`_. Consult the excellent; .. `documentation <http://sebwouters.github.io/CheMPS2/>`_ for using and; .. `citing <http://sebwouters.github.io/CheMPS2/publications.html>`_ the library. .. image:: https://img.shields.io/badge/home-CheMPS2-5077AB.svg; :target: https://github.com/SebWouters/CheMPS2. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://sebwouters.github.io/CheMPS2/index.html. .. note:: As of late June 2016, DMRG keywords in |PSIfour| have been; realigned with those of the chemps2 executable, plus a; ""dmrg\_"" prefix. The only exceptions are the orbital space; |PSIfour| keywords |globals__restricted_docc| (formerly; CheMPS2 used |globals__frozen_docc|, contrary to its; definition) and |globals__active| which are passed along to; CheMPS2 keywords ``NOCC`` and ``NACT``. A `translation table; <https://github.com/psi4/psi4/issues/150#issuecomment-228951911>`_; is available. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://img.shields.io/badge/Anaconda%20Cloud-1.7.1-5077AB.svg; :target: https://anaconda.org/psi4/chemps2. * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/Seb",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:2634,Availability,avail,available,2634,"blications.html>`_ the library. .. image:: https://img.shields.io/badge/home-CheMPS2-5077AB.svg; :target: https://github.com/SebWouters/CheMPS2. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://sebwouters.github.io/CheMPS2/index.html. .. note:: As of late June 2016, DMRG keywords in |PSIfour| have been; realigned with those of the chemps2 executable, plus a; ""dmrg\_"" prefix. The only exceptions are the orbital space; |PSIfour| keywords |globals__restricted_docc| (formerly; CheMPS2 used |globals__frozen_docc|, contrary to its; definition) and |globals__active| which are passed along to; CheMPS2 keywords ``NOCC`` and ``NACT``. A `translation table; <https://github.com/psi4/psi4/issues/150#issuecomment-228951911>`_; is available. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://img.shields.io/badge/Anaconda%20Cloud-1.7.1-5077AB.svg; :target: https://anaconda.org/psi4/chemps2. * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the bu",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:8642,Availability,error,errors,8642,"heMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. .. _`faq:chemps2gccflto`:. How to fix ""``plugin needed to handle lto object``"" when building CheMPS2; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. For building with GCC, errors involving unresolved symbols or a message; ""plugin needed to handle lto object"" may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to ``setup`` or ``cmake``:; ``-DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar`` .; Details at https://github.com/psi4/psi4/issues/414. ",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:8744,Availability,failure,failure,8744,"heMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. .. _`faq:chemps2gccflto`:. How to fix ""``plugin needed to handle lto object``"" when building CheMPS2; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. For building with GCC, errors involving unresolved symbols or a message; ""plugin needed to handle lto object"" may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to ``setup`` or ``cmake``:; ``-DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar`` .; Details at https://github.com/psi4/psi4/issues/414. ",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:2782,Deployability,install,installed,2782,".svg; :target: https://github.com/SebWouters/CheMPS2. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://sebwouters.github.io/CheMPS2/index.html. .. note:: As of late June 2016, DMRG keywords in |PSIfour| have been; realigned with those of the chemps2 executable, plus a; ""dmrg\_"" prefix. The only exceptions are the orbital space; |PSIfour| keywords |globals__restricted_docc| (formerly; CheMPS2 used |globals__frozen_docc|, contrary to its; definition) and |globals__active| which are passed along to; CheMPS2 keywords ``NOCC`` and ``NACT``. A `translation table; <https://github.com/psi4/psi4/issues/150#issuecomment-228951911>`_; is available. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://img.shields.io/badge/Anaconda%20Cloud-1.7.1-5077AB.svg; :target: https://anaconda.org/psi4/chemps2. * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:che",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:2887,Deployability,install,installed,2887,"; :target: http://sebwouters.github.io/CheMPS2/index.html. .. note:: As of late June 2016, DMRG keywords in |PSIfour| have been; realigned with those of the chemps2 executable, plus a; ""dmrg\_"" prefix. The only exceptions are the orbital space; |PSIfour| keywords |globals__restricted_docc| (formerly; CheMPS2 used |globals__frozen_docc|, contrary to its; definition) and |globals__active| which are passed along to; CheMPS2 keywords ``NOCC`` and ``NACT``. A `translation table; <https://github.com/psi4/psi4/issues/150#issuecomment-228951911>`_; is available. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://img.shields.io/badge/Anaconda%20Cloud-1.7.1-5077AB.svg; :target: https://anaconda.org/psi4/chemps2. * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:chemps2_calls`:. .. table:: Density matrix renormalization group capabilities of |PSIfour| through CheMPS2. +-------------------------+-----",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:2979,Deployability,install,install,2979,"; :target: http://sebwouters.github.io/CheMPS2/index.html. .. note:: As of late June 2016, DMRG keywords in |PSIfour| have been; realigned with those of the chemps2 executable, plus a; ""dmrg\_"" prefix. The only exceptions are the orbital space; |PSIfour| keywords |globals__restricted_docc| (formerly; CheMPS2 used |globals__frozen_docc|, contrary to its; definition) and |globals__active| which are passed along to; CheMPS2 keywords ``NOCC`` and ``NACT``. A `translation table; <https://github.com/psi4/psi4/issues/150#issuecomment-228951911>`_; is available. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://img.shields.io/badge/Anaconda%20Cloud-1.7.1-5077AB.svg; :target: https://anaconda.org/psi4/chemps2. * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:chemps2_calls`:. .. table:: Density matrix renormalization group capabilities of |PSIfour| through CheMPS2. +-------------------------+-----",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:3325,Deployability,install,installation,3325,"`NOCC`` and ``NACT``. A `translation table; <https://github.com/psi4/psi4/issues/150#issuecomment-228951911>`_; is available. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://img.shields.io/badge/Anaconda%20Cloud-1.7.1-5077AB.svg; :target: https://anaconda.org/psi4/chemps2. * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:chemps2_calls`:. .. table:: Density matrix renormalization group capabilities of |PSIfour| through CheMPS2. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+==============================================================+======================+======================+; | dmrg-ci | DMRG configuration interaction (CI) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:4206,Deployability,configurat,configuration,4206,"move chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:chemps2_calls`:. .. table:: Density matrix renormalization group capabilities of |PSIfour| through CheMPS2. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+==============================================================+======================+======================+; | dmrg-ci | DMRG configuration interaction (CI) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | dmrg-scf | DMRG complete active space SCF (CASSCF) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | dmrg-caspt2 | DMRG CAS with 2nd-order perturbation theory (CASPT2) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------------------+----------------------+----------------------+. DMRG Keywords; ~~~~~~~~~~~~~. .. include:: /autodir_options_c/dmrg__dmrg_caspt2_calc.rst; .. include:: /autodir_options_c/dmrg__dmrg_caspt2_imag.rst; .. include:: /autodir_options_c/dmrg__dmrg_caspt2_ipea.rst; .. include:: /autodir_options_c/dmrg__dmrg_caspt2_orbs.rst; .. include:: /autodir_options_c/dmrg__dmrg_diis.rst; .. include:: /autodir_options_c/dmrg__dmrg_diis_write.rst; .. include:: /autodir_options_c/dmrg__dmrg_excitation.rst; .. include:: /autodir_options_c/dmrg__dmrg_irrep.rst; .. include:: /autodir_",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:7032,Deployability,install,installation,7032,"vdson_rtol.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_energy_conv.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_max_sweeps.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_noise_prefac.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_states.rst; .. include:: /autodir_options_c/dmrg__dmrg_unitary_write.rst. .. _`cmake:chemps2`:. How to configure CheMPS2 for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CheMPS2. * Upstream Dependencies |w---w| CheMPS2 |dr| BLAS/LAPACK, HDF5 |dr| zlib. **CMake Variables**. * :makevar:`ENABLE_CheMPS2` |w---w| CMake variable toggling whether Psi4 builds with CheMPS2; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:7198,Deployability,install,installation,7198,"rg__dmrg_sweep_noise_prefac.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_states.rst; .. include:: /autodir_options_c/dmrg__dmrg_unitary_write.rst. .. _`cmake:chemps2`:. How to configure CheMPS2 for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CheMPS2. * Upstream Dependencies |w---w| CheMPS2 |dr| BLAS/LAPACK, HDF5 |dr| zlib. **CMake Variables**. * :makevar:`ENABLE_CheMPS2` |w---w| CMake variable toggling whether Psi4 builds with CheMPS2; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled de",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:1399,Integrability,interface,interface,1399,"of the GNU Lesser General Public License as published by; .. # the Free Software Foundation, version 3.; .. #; .. # Psi4 is distributed in the hope that it will be useful,; .. # but WITHOUT ANY WARRANTY; without even the implied warranty of; .. # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; .. # GNU Lesser General Public License for more details.; .. #; .. # You should have received a copy of the GNU Lesser General Public License along; .. # with Psi4; if not, write to the Free Software Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. index:: CheMPS2; .. _`sec:chemps2`:. Interface to CheMPS2 by S. Wouters; ==================================. .. codeauthor:: Sebastian Wouters; .. sectionauthor:: Lori A. Burns. *Module:* :ref:`Keywords <apdx:dmrg>`, :ref:`PSI Variables <apdx:dmrg_psivar>`, :ref:`Samples <apdx:testSuitechemps2>`. .. comment|PSIfour| contains code to interface to the CheMPS2; .. library of S. Wouters, which is based at `GitHub; .. <https://github.com/SebWouters/CheMPS2>`_. Consult the excellent; .. `documentation <http://sebwouters.github.io/CheMPS2/>`_ for using and; .. `citing <http://sebwouters.github.io/CheMPS2/publications.html>`_ the library. .. image:: https://img.shields.io/badge/home-CheMPS2-5077AB.svg; :target: https://github.com/SebWouters/CheMPS2. .. raw:: html. <br>. .. image:: https://img.shields.io/badge/docs-latest-5077AB.svg; :target: http://sebwouters.github.io/CheMPS2/index.html. .. note:: As of late June 2016, DMRG keywords in |PSIfour| have been; realigned with those of the chemps2 executable, plus a; ""dmrg\_"" prefix. The only exceptions are the orbital space; |PSIfour| keywords |globals__restricted_docc| (formerly; CheMPS2 used |globals__frozen_docc|, contrary to its; definition) and |globals__active| which are passed along to; CheMPS2 keywords ``NOCC`` and ``NACT``. A `translation table; <https://github.c",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:3167,Integrability,depend,dependent,3167,"\_"" prefix. The only exceptions are the orbital space; |PSIfour| keywords |globals__restricted_docc| (formerly; CheMPS2 used |globals__frozen_docc|, contrary to its; definition) and |globals__active| which are passed along to; CheMPS2 keywords ``NOCC`` and ``NACT``. A `translation table; <https://github.com/psi4/psi4/issues/150#issuecomment-228951911>`_; is available. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://img.shields.io/badge/Anaconda%20Cloud-1.7.1-5077AB.svg; :target: https://anaconda.org/psi4/chemps2. * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:chemps2_calls`:. .. table:: Density matrix renormalization group capabilities of |PSIfour| through CheMPS2. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+============",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:3715,Integrability,depend,dependent,3715," * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:chemps2_calls`:. .. table:: Density matrix renormalization group capabilities of |PSIfour| through CheMPS2. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+==============================================================+======================+======================+; | dmrg-ci | DMRG configuration interaction (CI) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | dmrg-scf | DMRG complete active space SCF (CASSCF) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | dmrg-caspt2 ",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:6982,Integrability,depend,dependencies,6982,"_c/dmrg__dmrg_scf_max_iter.rst; .. include:: /autodir_options_c/dmrg__dmrg_scf_state_avg.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_dvdson_rtol.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_energy_conv.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_max_sweeps.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_noise_prefac.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_states.rst; .. include:: /autodir_options_c/dmrg__dmrg_unitary_write.rst. .. _`cmake:chemps2`:. How to configure CheMPS2 for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CheMPS2. * Upstream Dependencies |w---w| CheMPS2 |dr| BLAS/LAPACK, HDF5 |dr| zlib. **CMake Variables**. * :makevar:`ENABLE_CheMPS2` |w---w| CMake variable toggling whether Psi4 builds with CheMPS2; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMP",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:8383,Integrability,depend,dependencies,8383,"heMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. .. _`faq:chemps2gccflto`:. How to fix ""``plugin needed to handle lto object``"" when building CheMPS2; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. For building with GCC, errors involving unresolved symbols or a message; ""plugin needed to handle lto object"" may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to ``setup`` or ``cmake``:; ``-DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar`` .; Details at https://github.com/psi4/psi4/issues/414. ",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:8683,Integrability,message,message,8683,"heMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. .. _`faq:chemps2gccflto`:. How to fix ""``plugin needed to handle lto object``"" when building CheMPS2; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. For building with GCC, errors involving unresolved symbols or a message; ""plugin needed to handle lto object"" may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to ``setup`` or ``cmake``:; ``-DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar`` .; Details at https://github.com/psi4/psi4/issues/414. ",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:4206,Modifiability,config,configuration,4206,"move chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:chemps2_calls`:. .. table:: Density matrix renormalization group capabilities of |PSIfour| through CheMPS2. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+==============================================================+======================+======================+; | dmrg-ci | DMRG configuration interaction (CI) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | dmrg-scf | DMRG complete active space SCF (CASSCF) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | dmrg-caspt2 | DMRG CAS with 2nd-order perturbation theory (CASPT2) | RHF/ROHF | --- |; +-------------------------+--------------------------------------------------------------+----------------------+----------------------+. DMRG Keywords; ~~~~~~~~~~~~~. .. include:: /autodir_options_c/dmrg__dmrg_caspt2_calc.rst; .. include:: /autodir_options_c/dmrg__dmrg_caspt2_imag.rst; .. include:: /autodir_options_c/dmrg__dmrg_caspt2_ipea.rst; .. include:: /autodir_options_c/dmrg__dmrg_caspt2_orbs.rst; .. include:: /autodir_options_c/dmrg__dmrg_diis.rst; .. include:: /autodir_options_c/dmrg__dmrg_diis_write.rst; .. include:: /autodir_options_c/dmrg__dmrg_excitation.rst; .. include:: /autodir_options_c/dmrg__dmrg_irrep.rst; .. include:: /autodir_",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:6414,Modifiability,config,configure,6414," include:: /autodir_options_c/dmrg__dmrg_mps_write.rst; .. include:: /autodir_options_c/dmrg__dmrg_multiplicity.rst; .. include:: /autodir_options_c/dmrg__dmrg_opdm_ao_print.rst; .. include:: /autodir_options_c/dmrg__dmrg_print_corr.rst; .. include:: /autodir_options_c/dmrg__dmrg_scf_active_space.rst; .. include:: /autodir_options_c/dmrg__dmrg_scf_diis_thr.rst; .. include:: /autodir_options_c/dmrg__dmrg_scf_grad_thr.rst; .. include:: /autodir_options_c/dmrg__dmrg_scf_max_iter.rst; .. include:: /autodir_options_c/dmrg__dmrg_scf_state_avg.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_dvdson_rtol.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_energy_conv.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_max_sweeps.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_noise_prefac.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_states.rst; .. include:: /autodir_options_c/dmrg__dmrg_unitary_write.rst. .. _`cmake:chemps2`:. How to configure CheMPS2 for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CheMPS2. * Upstream Dependencies |w---w| CheMPS2 |dr| BLAS/LAPACK, HDF5 |dr| zlib. **CMake Variables**. * :makevar:`ENABLE_CheMPS2` |w---w| CMake variable toggling whether Psi4 builds with CheMPS2; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKA",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:6844,Modifiability,variab,variable,6844,"_c/dmrg__dmrg_scf_max_iter.rst; .. include:: /autodir_options_c/dmrg__dmrg_scf_state_avg.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_dvdson_rtol.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_energy_conv.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_max_sweeps.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_noise_prefac.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_states.rst; .. include:: /autodir_options_c/dmrg__dmrg_unitary_write.rst. .. _`cmake:chemps2`:. How to configure CheMPS2 for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CheMPS2. * Upstream Dependencies |w---w| CheMPS2 |dr| BLAS/LAPACK, HDF5 |dr| zlib. **CMake Variables**. * :makevar:`ENABLE_CheMPS2` |w---w| CMake variable toggling whether Psi4 builds with CheMPS2; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMP",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:6946,Modifiability,variab,variable,6946,"_c/dmrg__dmrg_scf_max_iter.rst; .. include:: /autodir_options_c/dmrg__dmrg_scf_state_avg.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_dvdson_rtol.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_energy_conv.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_max_sweeps.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_noise_prefac.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_states.rst; .. include:: /autodir_options_c/dmrg__dmrg_unitary_write.rst. .. _`cmake:chemps2`:. How to configure CheMPS2 for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CheMPS2. * Upstream Dependencies |w---w| CheMPS2 |dr| BLAS/LAPACK, HDF5 |dr| zlib. **CMake Variables**. * :makevar:`ENABLE_CheMPS2` |w---w| CMake variable toggling whether Psi4 builds with CheMPS2; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMP",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:7133,Modifiability,variab,variable,7133,"e:: /autodir_options_c/dmrg__dmrg_sweep_max_sweeps.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_noise_prefac.rst; .. include:: /autodir_options_c/dmrg__dmrg_sweep_states.rst; .. include:: /autodir_options_c/dmrg__dmrg_unitary_write.rst. .. _`cmake:chemps2`:. How to configure CheMPS2 for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CheMPS2. * Upstream Dependencies |w---w| CheMPS2 |dr| BLAS/LAPACK, HDF5 |dr| zlib. **CMake Variables**. * :makevar:`ENABLE_CheMPS2` |w---w| CMake variable toggling whether Psi4 builds with CheMPS2; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMP",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:7339,Modifiability,variab,variable,7339,"configure CheMPS2 for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CheMPS2. * Upstream Dependencies |w---w| CheMPS2 |dr| BLAS/LAPACK, HDF5 |dr| zlib. **CMake Variables**. * :makevar:`ENABLE_CheMPS2` |w---w| CMake variable toggling whether Psi4 builds with CheMPS2; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABL",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:7476,Modifiability,variab,variable,7476,"configure CheMPS2 for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CheMPS2. * Upstream Dependencies |w---w| CheMPS2 |dr| BLAS/LAPACK, HDF5 |dr| zlib. **CMake Variables**. * :makevar:`ENABLE_CheMPS2` |w---w| CMake variable toggling whether Psi4 builds with CheMPS2; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABL",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:8037,Modifiability,config,configdir,8037,"r CheMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. .. _`faq:chemps2gccflto`:. How to fix ""``plugin needed to handle lto object``"" when building CheMPS2; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. For building with GCC, errors involving unresolved symbols or a message; ""plugin needed to handle lto object"" may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to ``setup`` or ``cmake``:; ``-DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar`` .; Details at https://github.com/psi4/psi4/issues/41",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:8483,Modifiability,plugin,plugin,8483,"heMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. .. _`faq:chemps2gccflto`:. How to fix ""``plugin needed to handle lto object``"" when building CheMPS2; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. For building with GCC, errors involving unresolved symbols or a message; ""plugin needed to handle lto object"" may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to ``setup`` or ``cmake``:; ``-DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar`` .; Details at https://github.com/psi4/psi4/issues/414. ",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:8693,Modifiability,plugin,plugin,8693,"heMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. .. _`faq:chemps2gccflto`:. How to fix ""``plugin needed to handle lto object``"" when building CheMPS2; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. For building with GCC, errors involving unresolved symbols or a message; ""plugin needed to handle lto object"" may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to ``setup`` or ``cmake``:; ``-DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar`` .; Details at https://github.com/psi4/psi4/issues/414. ",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:8776,Performance,optimiz,optimization,8776,"heMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. .. _`faq:chemps2gccflto`:. How to fix ""``plugin needed to handle lto object``"" when building CheMPS2; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. For building with GCC, errors involving unresolved symbols or a message; ""plugin needed to handle lto object"" may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to ``setup`` or ``cmake``:; ``-DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar`` .; Details at https://github.com/psi4/psi4/issues/414. ",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:3139,Safety,detect,detect,3139,"\_"" prefix. The only exceptions are the orbital space; |PSIfour| keywords |globals__restricted_docc| (formerly; CheMPS2 used |globals__frozen_docc|, contrary to its; definition) and |globals__active| which are passed along to; CheMPS2 keywords ``NOCC`` and ``NACT``. A `translation table; <https://github.com/psi4/psi4/issues/150#issuecomment-228951911>`_; is available. Installation; ~~~~~~~~~~~~. **Binary**. * .. image:: https://img.shields.io/badge/Anaconda%20Cloud-1.7.1-5077AB.svg; :target: https://anaconda.org/psi4/chemps2. * CheMPS2 is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). * If using the |PSIfour| binary, CheMPS2 has already been installed alongside. * If using |PSIfour| built from source, and anaconda or miniconda has; already been installed (instructions at :ref:`sec:quickconda`),; CheMPS2 can be obtained through ``conda install chemps2``.; Then enable it as a feature with :makevar:`ENABLE_CheMPS2`,; hint its location with :makevar:`CMAKE_PREFIX_PATH`,; and rebuild |PSIfour| to detect CheMPS2 and activate dependent code. .. * Previous bullet had details. To build |PSIfour| from source and use; .. Libint from conda without thinking, consult. * To remove a conda installation, ``conda remove chemps2``. **Source**. * .. image:: https://img.shields.io/github/tag/SebWouters/chemps2.svg?maxAge=2592000; :target: https://github.com/SebWouters/chemps2. * If using |PSIfour| built from source and you want CheMPS2 built from; from source also,; enable it as a feature with :makevar:`ENABLE_CheMPS2`,; and let the build system fetch and build it and activate dependent code. Methods; ~~~~~~~. .. _`table:chemps2_calls`:. .. table:: Density matrix renormalization group capabilities of |PSIfour| through CheMPS2. +-------------------------+--------------------------------------------------------------+----------------------+----------------------+; | name | calls method | Energy | Gradient |; +=========================+============",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:7394,Safety,detect,detecting,7394,"configure CheMPS2 for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CheMPS2. * Upstream Dependencies |w---w| CheMPS2 |dr| BLAS/LAPACK, HDF5 |dr| zlib. **CMake Variables**. * :makevar:`ENABLE_CheMPS2` |w---w| CMake variable toggling whether Psi4 builds with CheMPS2; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABL",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:7494,Safety,detect,detecting,7494,"configure CheMPS2 for building Psi4; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. **Role and Dependencies**. * Role |w---w| In |PSIfour|, CheMPS2 is a library that provides additional; quantum chemical capabilities (DMRG). * Downstream Dependencies |w---w| |PSIfour| (\ |dr| optional) CheMPS2. * Upstream Dependencies |w---w| CheMPS2 |dr| BLAS/LAPACK, HDF5 |dr| zlib. **CMake Variables**. * :makevar:`ENABLE_CheMPS2` |w---w| CMake variable toggling whether Psi4 builds with CheMPS2; * :makevar:`CMAKE_PREFIX_PATH` |w---w| CMake list variable to specify where pre-built dependencies can be found. For CheMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABL",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst:8251,Safety,detect,detectable,8251,"heMPS2, set to an installation directory containing ``include/chemps2/DMRG.h``; * :makevar:`CheMPS2_DIR` |w---w| CMake variable to specify where pre-built CheMPS2 can be found. Set to installation directory containing ``share/cmake/CheMPS2/CheMPS2Config.cmake``; * :makevar:`CMAKE_DISABLE_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force internal build of CheMPS2 instead of detecting pre-built; * :makevar:`CMAKE_INSIST_FIND_PACKAGE_CheMPS2` |w---w| CMake variable to force detecting pre-built CheMPS2 and not falling back on internal build. **Examples**. A. Build bundled. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON. B. Build *without* CheMPS2. .. code-block:: bash. >>> cmake. C. Build bundled with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/hdf5. D. Link against pre-built. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/chemps2/root. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCheMPS2_DIR=/path/to/chemps2/configdir. E. Link against pre-built with specific HDF5. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=""/path/to/chemps2/root;/path/to/hdf5/root"". F. Build bundled despite pre-built being detectable. .. code-block:: bash. >>> cmake -DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/chemps2/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_CheMPS2=ON. .. _`faq:chemps2gccflto`:. How to fix ""``plugin needed to handle lto object``"" when building CheMPS2; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. For building with GCC, errors involving unresolved symbols or a message; ""plugin needed to handle lto object"" may indicate a failure of the; interprocedural optimization. This can be resolved by passing full; locations to gcc toolchain utilities to ``setup`` or ``cmake``:; ``-DCMAKE_RANLIB=/path/to/gcc-ranlib -DCMAKE_AR=/path/to/gcc-ar`` .; Details at https://github.com/psi4/psi4/issues/414. ",MatchSource.DOCS,doc/sphinxman/source/chemps2.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/chemps2.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:1862,Deployability,install,installed,1862,"e Foundation, Inc.,; .. # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; .. #; .. # @END LICENSE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:code_style`:. Code style conventions; ======================. It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; `clang-format <https://clang.llvm.org/docs/ClangFormat.html>`_ and `yapf <https://github.com/google/yapf>`_ can be used to format C++ and Python code,; respectively, according to a predefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be ",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:1990,Deployability,integrat,integrating,1990,"SE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:code_style`:. Code style conventions; ======================. It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; `clang-format <https://clang.llvm.org/docs/ClangFormat.html>`_ and `yapf <https://github.com/google/yapf>`_ can be used to format C++ and Python code,; respectively, according to a predefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framewor",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:2042,Deployability,install,installing,2042,":code_style`:. Code style conventions; ======================. It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; `clang-format <https://clang.llvm.org/docs/ClangFormat.html>`_ and `yapf <https://github.com/google/yapf>`_ can be used to format C++ and Python code,; respectively, according to a predefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:2326,Deployability,integrat,integrated,2326,"nd `yapf <https://github.com/google/yapf>`_ can be used to format C++ and Python code,; respectively, according to a predefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit inst",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3018,Deployability,configurat,configuration,3018,"o your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3129,Deployability,install,install,3129,"he formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-only HEAD -- *.cc *.h`; yapf -i `git diff --relative --name-only HEAD -- *.py`. How and when to *",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3174,Deployability,install,install,3174,"codestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-only HEAD -- *.cc *.h`; yapf -i `git diff --relative --name-only HEAD -- *.py`. How and when to *not* apply code styling to your contributions; --------------",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3221,Deployability,install,install,3221,"itor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-only HEAD -- *.cc *.h`; yapf -i `git diff --relative --name-only HEAD -- *.py`. How and when to *not* apply code styling to your contributions; --------------------------------------------------------------. TODO",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3277,Deployability,install,install,3277,"r; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-only HEAD -- *.cc *.h`; yapf -i `git diff --relative --name-only HEAD -- *.py`. How and when to *not* apply code styling to your contributions; --------------------------------------------------------------. TODO. ",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3319,Deployability,install,install,3319,"r; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-only HEAD -- *.cc *.h`; yapf -i `git diff --relative --name-only HEAD -- *.py`. How and when to *not* apply code styling to your contributions; --------------------------------------------------------------. TODO. ",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3475,Deployability,integrat,integrating,3475,"r; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-only HEAD -- *.cc *.h`; yapf -i `git diff --relative --name-only HEAD -- *.py`. How and when to *not* apply code styling to your contributions; --------------------------------------------------------------. TODO. ",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3561,Deployability,install,installed,3561,"r; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-only HEAD -- *.cc *.h`; yapf -i `git diff --relative --name-only HEAD -- *.py`. How and when to *not* apply code styling to your contributions; --------------------------------------------------------------. TODO. ",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3461,Energy Efficiency,power,powerful,3461,"r; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-only HEAD -- *.cc *.h`; yapf -i `git diff --relative --name-only HEAD -- *.py`. How and when to *not* apply code styling to your contributions; --------------------------------------------------------------. TODO. ",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:1990,Integrability,integrat,integrating,1990,"SE; .. #. .. include:: autodoc_abbr_options_c.rst. .. _`sec:code_style`:. Code style conventions; ======================. It is important to keep a consistent formatting of the C++ and Python code; to avoid hard-to-read diffs and merge conflicts.; `clang-format <https://clang.llvm.org/docs/ClangFormat.html>`_ and `yapf <https://github.com/google/yapf>`_ can be used to format C++ and Python code,; respectively, according to a predefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framewor",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:2326,Integrability,integrat,integrated,2326,"nd `yapf <https://github.com/google/yapf>`_ can be used to format C++ and Python code,; respectively, according to a predefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit inst",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:3475,Integrability,integrat,integrating,3475,"r; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their execution. Hooks are powerful, but integrating the formatter into your editor will prove; to be better. Hooks need to be installed anew for every fresh clone of the; repository you are working on. .. _`faq:manualcodestyle`:. How to run code-style tools `clang-format` and `yapf` manually; --------------------------------------------------------------. The least recommended approach to formatting your code is to run manually the; formatters. The following commands will format only the files that have been; modified:. ::; clang-format -style=file -i `git diff --relative --name-only HEAD -- *.cc *.h`; yapf -i `git diff --relative --name-only HEAD -- *.py`. How and when to *not* apply code styling to your contributions; --------------------------------------------------------------. TODO. ",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:2419,Modifiability,plugin,plugin,2419,"redefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their e",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst:2433,Modifiability,config,configured,2433,"redefined style file.; |PSIfour| provides the :source:`.clang-format` and :source:`.style.yapf` files in the root; folder of the project.; It is **recommended** that modifications and/or new files checked into the; repository are formatted according to these style files using ``clang-format``; and ``yapf``. It is then helpful if these tools be part of your development toolchain.; Once ``clang-format`` and ``yapf`` are installed, there are three ways in which; formatting of the code can be accomplished, in decreasing order of automation:. 1. By integrating the formatters into your editor.; 2. By installing Git hooks to run the formatters when committing.; 3. By running the formatters manually on the modified files. .. _`faq:editorcodestyle`:. How to impose code style through your editor; --------------------------------------------. Both ``clang-format`` and ``yapf`` can be integrated into widely used editors.; The `Neoformat <https://github.com/sbdchd/neoformat>`_ plugin can be configured; to format files when saving them to disk. .. _`faq:githookscodestyle`:. How to impose code style through Git hooks; ------------------------------------------. Git hooks are scripts that are run before or after certain Git events.; In this particular case, we want to make sure that all files that have been; added to the staging area with ``git add`` are formatted according to the style; *before* they committing them with ``git commit``.; The hook to be modified is then the *pre-commit* hook.; |PSIfour| uses the `pre-commit <https://pre-commit.com/>`_ framework, with configuration file :source:`.pre-commit-config.yaml`.; To take advantage of pre-commit hooks, you will need to install the ``pre-commit`` utility:. ::; pip install pre-commit. or using Conda:. ::; conda install pre_commit -c conda-forge. Finally, you need to install the actual hooks:. ::; pre-commit install. Pre-commit hooks will be run on every ``git commit``, but the ``--no-verify``; option can be used to skip their e",MatchSource.DOCS,doc/sphinxman/source/code_style.rst,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/tree/v1.9.1/doc/sphinxman/source/code_style.rst
